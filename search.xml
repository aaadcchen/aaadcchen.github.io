<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Arduino开发基础</title>
    <url>/2022/07/19/Arduino%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h4 id="数字端口与模拟端口"><a href="#数字端口与模拟端口" class="headerlink" title="数字端口与模拟端口"></a>数字端口与模拟端口</h4><p>数字口不区分输入和输出，因为它可以既当输入口用又当输出口用，只需要在使用之前做一个声明便可。数字口和模拟口最大的区别就是，数字口只能输入或输出一个数字0或1（也可以传数据二进制编码的形式），而模拟口可以输入或输出的数据范围为0到1023。例如控制灯的亮灭只需要用0、1控制，定义成数字输出端口。需要具体输出电压就必须使用模拟输出口。</p>
<p>板子数字端口是0<del>13，共14个，如果需要，可以将A0</del>A5作为数字端口的14<del>19；A0</del>A5一般作为模拟输入使用~<br>定义模拟端口是 int xxpin&#x3D;A2; 如定义成int xxpin&#x3D;2；是数字端口的2号，只能做逻辑输入，不能做AD转换器信号输入。</p>
<p>1）14个数字接口：数字接口从图上可以看到总共有14个（0～13号)，0号和1号口属于串口通信用的，一般我们不去占用；从2号口到13号口是我们可随意使用的数字接口数字接口可以读取数字信号，也可以输出数字信号，而在2到13号口中带有“～”符号的接口代表它不仅可以输出高电平和低电平信号，也可以输出调制的模拟信号，不带“～”符号的接口就只能输出5V高电平或者0V低电平（这里不深究高低电平的细节，因为事实上对于TTL型的接口高低电平并不严格等于5V和0V，而CMOS型的高低电平则是5V和0V，<a href="https://so.csdn.net/so/search?q=Arduino&spm=1001.2101.3001.7020">Arduino</a>上的数字引脚属于TTL型所以严格的讲它们输出的高低电平是有一个误差范围的只要在这个误差范围之内Arduino都认可而不会误判）。输出高电平和低电平很好理解，你可以理解为只能输出5V和0V。</p>
<p>模拟输入口和输出口需要硬件支持，不能一口两用。A0-A5</p>
<h4 id="SS引脚"><a href="#SS引脚" class="headerlink" title="SS引脚"></a>SS引脚</h4><p>SS是关机&#x2F;同步控制管脚，该引脚可用于同步的一部分，近两倍的基础频率。一个TTL将关闭部分低下来，投入低电流模式。如果不使用同步，该引脚应为正常运行或为正常运行的高或悬空。</p>
<h4 id="VIN引脚"><a href="#VIN引脚" class="headerlink" title="VIN引脚"></a>VIN引脚</h4><p>●  VIN引脚 - 该引脚用于使用外部电源为Arduino Uno开发板供电。电压应控制在上述提到的范围内。</p>
<h4 id="IIC（SCL，SDA）"><a href="#IIC（SCL，SDA）" class="headerlink" title="IIC（SCL，SDA）"></a>IIC（SCL，SDA）</h4><p>IIC全称为Inter-Integrated Circuit(集成电路总线)。IIC接口只有两根线：SCL，SDA。SCL为同步时钟线，SDA为数据线，通SPI不同的是，数据线为双向接口，也就是说，发送接收都走这根线。</p>
<p>IIC是一种多向控制总线，也就是说多个芯片可以连接到同一总线结构下，同时每个芯片都可以作为实时数据传输的控制源。这种方式简化了信号传输总线接口。</p>
<p>多数EEPROM芯片都是IIC接口，指令有所不同，但是传输格式都是一样的。</p>
<h4 id="SCK、MISO、MOSI"><a href="#SCK、MISO、MOSI" class="headerlink" title="SCK、MISO、MOSI"></a>SCK、MISO、MOSI</h4><p>VCC代表的电源输入，GND是地，RST是复位脚，SCK、MISO、MOSI这三个引脚是SPI通讯需要的时钟和数据脚。<br>VCC、GND、RST怎么接需要去看单片机对应的用户手册，上面都有典型电路，不同型号的单片机接法是不同的，SCK、MISO、MOSI这三个接到你需要通信的芯片上对应的脚就可以了，但是要注意一点，单片机的MISO要接到芯片上的MOSI</p>
<h4 id="SPI"><a href="#SPI" class="headerlink" title="SPI"></a>SPI</h4><p>SPI（Serial Peripheral Interface） 协议是由摩托罗拉公司提出的通讯协议，即串行外围设备接口，是一种高速全双工的通信总线。它被广泛地使用在 ADC、LCD 等设备与 MCU 间，要求通讯速率较高的场合。</p>
<p>芯片的管脚上只占用四根线。（下面会讲到）</p>
<p>MISO： 主器件数据输出，从器件数据输入。<br>MOSI：主器件数据输入，从器件数据输出。<br>SCK： 时钟信号，由主设备控制发出。<br>NSS（CS）： 从设备选择信号，由主设备控制。当NSS为低电平则选中 从器件。</p>
<ul>
<li>SCK（CK），Serial Clock<br>此引脚在主机模式下用于时钟输出，&#x3D;&#x3D;从机模式下用于时钟输入。<br>MISO（SDI），Master In &#x2F; Slave Out data<br>此引脚在从机模式下用于发送数据，主机模式下接收数据。<br>MOSI（SDO）, Master Out &#x2F; Slave In data<br>此引脚在从机模式下用于数据接收，主机模式下发送数据。<br>SS（WS）, Slave select pin<br>根据 SPI 和 SS 设置，此引脚可用于：<br>⌘. 选择从器件进行通信。<br>⌘. 允许多主模式（可以禁止 NSS 引脚输出）。</li>
</ul>
<h4 id="RX，TX（串口通讯）"><a href="#RX，TX（串口通讯）" class="headerlink" title="RX，TX（串口通讯）"></a>RX，TX（串口通讯）</h4><p>RX串口接收，TX串口发送实例在最后面</p>
<p>认识Arduino Uno：<a href="https://blog.csdn.net/weixin_42645653/article/details/90205369">https://blog.csdn.net/weixin_42645653/article/details/90205369</a></p>
<p>ESP8266 D1-UNO-R3开发板的初步测试：<a href="https://blog.csdn.net/zhuoqingjoking97298/article/details/117458338">https://blog.csdn.net/zhuoqingjoking97298/article/details/117458338</a></p>
<p>SPI 理论知识（通信）：<a href="https://blog.csdn.net/m0_57818334/article/details/124884119">https://blog.csdn.net/m0_57818334/article/details/124884119</a></p>
<p>ARDUINO UNO开发板介绍：<a href="https://blog.csdn.net/weixin_44940488/article/details/121432946">https://blog.csdn.net/weixin_44940488/article/details/121432946</a></p>
<h4 id="代码理解部分"><a href="#代码理解部分" class="headerlink" title="代码理解部分"></a>代码理解部分</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*************************************************</span><br><span class="line">#  说明：超声波传感器模块项目，直接运行即可。</span><br><span class="line">  ECHO  pin               4</span><br><span class="line">  TRING Pin               5</span><br><span class="line">**************************************************/</span><br><span class="line">#include &lt;NewPing.h&gt;</span><br><span class="line"></span><br><span class="line">#define TRIGGER_PIN  5  // Arduino销与超声波传感器上的触发销相连</span><br><span class="line">#define ECHO_PIN     4  // Arduino引脚与超声波传感器上的回波引脚相连。</span><br><span class="line">#define MAX_DISTANCE 400 // 我们要ping的最大距离（厘米）。最大传感器距离的额定值为400-500cm。</span><br><span class="line">NewPing sonar(TRIGGER_PIN, ECHO_PIN, MAX_DISTANCE); // 相当于新建初始化实例化一个传感器对象，参数为前面三个变量，新建引脚设置和最大距离。</span><br><span class="line"></span><br><span class="line">setup()</span><br><span class="line">当程序开始执行时，将调用setup()函数，使用此函数</span><br><span class="line">①用来初始化变量</span><br><span class="line">②管脚模式</span><br><span class="line">③调用库函数</span><br><span class="line"></span><br><span class="line">注意：setup()函数将只运行一次。</span><br><span class="line">loop()功能：连续执行函数内的语句</span><br><span class="line"></span><br><span class="line">void setup() </span><br><span class="line">&#123;</span><br><span class="line">  Serial.begin(9600); //以9600波特打开串行监视器，查看ping结果。</span><br><span class="line">  //serial(串口通信)</span><br><span class="line">  //函数Serial.begin(9600)是设置串口通讯的波特率为9600;</span><br><span class="line">  //波特率表示单位时间内传送的码元符号的个数，它是对符号传输速率的一种度量，它用单位时间内载波调制状态改变的次数来表示，波特率即指一个单位时间内传输符号的个数。</span><br><span class="line">  //Serial.available() 的意思是：返回串口缓冲区中当前剩余的字符个数。一般用这个函数来判断串口的缓冲区有无数据，当Serial.available()&gt;0时，说明串口接收到了数据可以读取；</span><br><span class="line">  //Serial.read()指从串口的缓冲区取出并读取一个Byte的数据，比如有设备通过串口向Arduino发送数据了，我们就可以用Serial.read()来读取发送的数据。</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void loop() </span><br><span class="line">&#123;</span><br><span class="line">  delay(100);// 在两次ping之间等待50毫秒（大约20次ping/秒）。29ms应该是ping之间最短的延迟。//delay(ms)，毫秒级延时函数</span><br><span class="line">  unsigned int uS = sonar.ping(); // 发送ping，获取ping时间，单位为微秒（uS）。</span><br><span class="line">  Serial.print(&quot;Ping: &quot;);</span><br><span class="line">  Serial.print(uS / US_ROUNDTRIP_CM); // 将ping时间转换为以厘米为单位的距离，并打印结果（0=超出设置的距离范围）</span><br><span class="line">  Serial.println(&quot;cm&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="基础方法"><a href="#基础方法" class="headerlink" title="基础方法"></a>基础方法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pinMode(pin,mode)</span><br><span class="line">功能：配置一个端口为输入或输出端口，无返回值</span><br><span class="line">pin：所配引脚的标号，0~13</span><br><span class="line">mode：</span><br><span class="line">INPUT	输入模式</span><br><span class="line">OUTPUT	输出模式</span><br><span class="line">INPUT-PULLUP	输入上拉模式</span><br><span class="line">输入输出</span><br><span class="line">当引脚 13 输出高电平（1）时，LED 将被点亮；输出低电平（0）时，LED 将熄灭。</span><br><span class="line">digitalWrite(pin,value)</span><br><span class="line">功能：设置一个引脚的输出电压为低电平或高电平，无返回值，需要先将引脚设置为输出引脚</span><br><span class="line">pin：所配引脚的标号，0~13</span><br><span class="line">value：表示输出电压，LOW为低电平，HIGH为高电平</span><br><span class="line"></span><br><span class="line">digitalRead(pin)</span><br><span class="line">功能：读取外部输入的数字电压值，返回值为int型高电平或低电平的函数，使用前要定义引脚为输出引脚</span><br><span class="line">pin：所配引脚的标号，0~13</span><br><span class="line"></span><br><span class="line">delay(ms)</span><br><span class="line">功能：实现毫秒级别的延时</span><br><span class="line">ms：无符号长整型</span><br><span class="line"></span><br><span class="line">delayMicroseconds(us)</span><br><span class="line">功能：实现微秒级别的延时</span><br><span class="line">us：无符号长整型</span><br><span class="line"></span><br><span class="line">analogRead(pin)</span><br><span class="line">功能：读取指定引脚的模拟电压值</span><br><span class="line">pin：模拟电压值的输入引脚，A0~A5</span><br><span class="line">返回值为0~1023的整数</span><br><span class="line"></span><br><span class="line">map(value,fromlow,fromhigh,tolow,tohigh)</span><br><span class="line">功能：将一个数据从一个范围映射到另一个范围</span><br><span class="line">value：映射的数据</span><br><span class="line">[fromlow,fromhigh]：原范围</span><br><span class="line">[tolow,tohigh]：映射范围</span><br><span class="line"></span><br><span class="line">analogWrite(pin,value)</span><br><span class="line">功能：在指定引脚输出指定占空比的PWM信号，无返回值</span><br><span class="line">pin：输出PWM信号的引脚，仅限数字引脚（即带~的）</span><br><span class="line">value：占空比，取值范围为0-255对应0%-100%</span><br><span class="line"></span><br><span class="line">Serial.begin(speed)</span><br><span class="line">功能：串口初始化函数，用来设置串口的波特率。通常只设定一次，在setup函数中使用。</span><br><span class="line">speed：表示通信的波特率，通常有：9600、19200、57600、115200</span><br><span class="line">PC机默认为9600</span><br><span class="line"></span><br><span class="line">Serial.print(data)</span><br><span class="line">功能：从主板向计算机发送数据</span><br><span class="line">data：可发送变量、字符、字符串，默认为十进制</span><br><span class="line"></span><br><span class="line">Serial.println(data)</span><br><span class="line">功能：从主板向计算机发送数据，并在输出后换行</span><br><span class="line">data：可发送变量、字符、字符串，默认为十进制</span><br><span class="line"></span><br><span class="line">Serial.read()</span><br><span class="line">功能：读取外部计算机通过串口发给主板的数据</span><br><span class="line">该函数不带参数，返回值为串口数据，数据类型为int型</span><br><span class="line"></span><br><span class="line">Serial.available()</span><br><span class="line">功能：用来判断串口是否接收到数据</span><br><span class="line">函数返回值为尚未被read读取到的函数的字节数，函数返回值为int型</span><br><span class="line">若返回值为0，则说明没有已接收二未被读取的数据</span><br><span class="line">1.analogRead()函数读取引脚的模拟量电压值，返回一个0到1023的数值(int型)，表示对应的0到5的电压值。</span><br><span class="line">2.analogWrite(pinvalue)，将模拟值(PWM波)输出到引脚，PWM的信号频率约为490赫兹脚位通常会在3、5、6、9、10与11，Value变数范围0-255，而0-255对应的是0-5v电压</span><br><span class="line">3.map(value, fromLow,fromHigh,toLow,toHigh)，把一个数从一个范围变换到另一个范围就是将value变数依照fromLow与fromHigh范围，对等转换至toLow与toHigh范围</span><br></pre></td></tr></table></figure>

<h4 id="RX，TX（串口通讯）Dome"><a href="#RX，TX（串口通讯）Dome" class="headerlink" title="RX，TX（串口通讯）Dome"></a>RX，TX（串口通讯）Dome</h4><p>参考：<a href="https://www.freesion.com/article/44641339692/">https://www.freesion.com/article/44641339692/</a></p>
<p><img src="https://www.freesion.com/images/99/0ccdc13509e2acb8419b1d9dc1459cab.png" alt="image-20220719175038635"></p>
<p><strong>Serial.begin()</strong></p>
<ul>
<li>描述：开启串口，通常置于setup()函数中。</li>
<li>原型：<ul>
<li><strong>Serial.begin(speed)</strong></li>
<li><strong>Serial.begin(speed, config)</strong></li>
</ul>
</li>
<li>参数：<ul>
<li>speed：波特率，一般取值9600,115200等。</li>
<li>config：设置数据位、校验位和停止位。默认SERIAL_8N1表示8个数据位，无校验位，1个停止位。</li>
</ul>
</li>
<li>返回值：无。</li>
</ul>
<p><strong>Serial.end()</strong></p>
<ul>
<li>描述：禁止串口传输。此时串口Rx和Tx可以作为数字IO引脚使用。</li>
<li>原型：<strong>Serial.end()</strong></li>
<li>参数：无。</li>
<li>返回值：无。</li>
</ul>
<p><strong>Serial.print()</strong></p>
<ul>
<li>描述：串口输出数据，写入字符数据到串口。</li>
<li>原型：<ul>
<li><strong>Serial.print(val)</strong></li>
<li><strong>Serial.print(val, format)</strong></li>
</ul>
</li>
<li>参数：<ul>
<li>val：打印的值，任意数据类型。</li>
<li>config：输出的数据格式。BIN(二进制)、OCT(八进制)、DEC(十进制)、HEX(十六进制)。对于浮点数，此参数指定要使用的小数位数。</li>
</ul>
</li>
<li>示例：<ul>
<li>Serial.print(78, BIN) 得到 “1001110”</li>
<li>Serial.print(78, OCT) 得到 “116”</li>
<li>Serial.print(78, DEC) 得到 “78”</li>
<li>Serial.print(78, HEX) 得到 “4E”</li>
<li>Serial.print(1.23456, 0) 得到 “1”</li>
<li>Serial.print(1.23456, 2) 得到 “1.23”</li>
<li>Serial.print(1.23456, 4) 得到 “1.2346”</li>
<li>Serial.print(‘N’) 得到 “N”</li>
<li>Serial.print(“Hello world.”) 得到 “Hello world.”</li>
</ul>
</li>
<li>返回值：返回写入的字节数。</li>
</ul>
<p><strong>Serial.println()</strong></p>
<ul>
<li>描述：串口输出数据并换行。</li>
<li>原型：<ul>
<li><strong>Serial.println(val)</strong></li>
<li><strong>Serial.println(val, format)</strong></li>
</ul>
</li>
<li>参数：<ul>
<li>val：打印的值，任意数据类型。</li>
<li>config：输出的数据格式。</li>
</ul>
</li>
<li>返回值：返回写入的字节数。</li>
</ul>
<p><strong>Serial.available()</strong></p>
<ul>
<li>描述：判断串口缓冲区的状态，返回从串口缓冲区读取的字节数。</li>
<li>原型：<strong>Serial.available()</strong></li>
<li>参数：无。</li>
<li>返回值：可读取的字节数。</li>
</ul>
<p><strong>Serial.read()</strong></p>
<ul>
<li>描述：读取串口数据，一次读一个字符，读完后删除已读数据。</li>
<li>原型：<strong>Serial.read()</strong></li>
<li>参数：无。</li>
<li>返回值：返回串口缓存中第一个可读字节，当没有可读数据时返回-1，整数类型。</li>
</ul>
<h5 id="发生数据方"><a href="#发生数据方" class="headerlink" title="发生数据方"></a>发生数据方</h5><p>参考：<a href="https://www.freesion.com/article/17421166048/">https://www.freesion.com/article/17421166048/</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"> * 串口通信-发送数据方</span><br><span class="line"> */</span><br><span class="line">int data = 52;</span><br><span class="line"></span><br><span class="line">void setup() &#123;</span><br><span class="line">  Serial.begin(9600); //初始化串口</span><br><span class="line">    while (!Serial) &#123; //等待串口正常工作</span><br><span class="line">    ; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void loop() &#123;</span><br><span class="line">  Serial.write(data);                   //发送数值信息</span><br><span class="line">  Serial.println(F(&quot;String test&quot;));     //发送字符信息,为什么加了一个F（），官方文档说的</span><br><span class="line">  delay(1000);                          //延时一下，不然发送的太频繁</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="接收数据方"><a href="#接收数据方" class="headerlink" title="接收数据方"></a>接收数据方</h5><h5 id="入门版"><a href="#入门版" class="headerlink" title="入门版"></a>入门版</h5><p>入门版没有将数值转换成对应的字符并连接起来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"> * 串口通信-接受数据方</span><br><span class="line"> */</span><br><span class="line">String readdata = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">void setup() &#123;</span><br><span class="line">  Serial.begin(9600); //初始化串口</span><br><span class="line">    while (!Serial) &#123; //等待串口正常工作</span><br><span class="line">    ; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void loop() &#123;</span><br><span class="line">  while(Serial.available() &gt; 0)         //当串口有数据就读取数据</span><br><span class="line">  &#123;</span><br><span class="line">     Serial.print(&quot;Uno recieve: &quot;);Serial.println(Serial.read());</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">   delay(100);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="基础版"><a href="#基础版" class="headerlink" title="基础版"></a>基础版</h5><p>将Ascii数值转换成对应的字符并连接起来，并解决了重复读的问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"> * 串口通信-接受数据方</span><br><span class="line"> */</span><br><span class="line">String readdata = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">void setup() &#123;</span><br><span class="line">  Serial.begin(9600); //初始化串口</span><br><span class="line">    while (!Serial) &#123; //等待串口正常工作</span><br><span class="line">    ; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void loop() &#123;</span><br><span class="line">  while(Serial.available() &gt; 0)         //当串口有数据就读取数据</span><br><span class="line">  &#123;</span><br><span class="line">    readdata  =  readdata  +char(Serial.read());     //将分立的单个数据转化为字符后连接起来</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  if(readdata.length() &gt; 0)             //有数据才显示</span><br><span class="line">  &#123;</span><br><span class="line">     Serial.print(&quot;Uno recieve: &quot;);Serial.println(readdata);</span><br><span class="line">     readdata = &quot;&quot;;                     //清空数据缓存</span><br><span class="line">  &#125;  </span><br><span class="line">   delay(100);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>C#版基础题</title>
    <url>/2022/04/05/C-%E7%89%88%E5%9F%BA%E7%A1%80%E9%A2%98-1/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">目录</span><br><span class="line">1.回文数</span><br><span class="line">2.输出100以内能被3整除且个位数为6的所有整数。</span><br><span class="line">3.求自然对数e的近似值，要求其误差小于0.00001，近似公式为</span><br><span class="line">4.求100—200之间的全部素数，每输出10个素数换行。</span><br><span class="line">5.输出* 形成的菱形：</span><br><span class="line">6.C#中的get、set方法</span><br><span class="line">6.1委托事件</span><br><span class="line">7.常见窗体与控件属性</span><br></pre></td></tr></table></figure>

<p>1、编程实现判断一个5位数是不是回文数。5位回文数是指个位数字与万位数字相同，十位数字与千位数字相同，如12321是回文数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Text;</span><br><span class="line"></span><br><span class="line">namespace ConsoleApplication1</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            int i = Convert.ToInt32(Console.ReadLine());</span><br><span class="line">            int a = 0;</span><br><span class="line">            int b = i,c;</span><br><span class="line">            while (b != 0)</span><br><span class="line">            &#123;</span><br><span class="line">                c = b % 10;</span><br><span class="line">                a = a * 10+c;</span><br><span class="line">                b = b / 10;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            if (a == i)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;&#123;0&#125;是回文数&quot;,i);</span><br><span class="line">            &#125;else</span><br><span class="line">                Console.WriteLine(&quot;&#123;0&#125;不是回文数&quot;,i);</span><br><span class="line">            </span><br><span class="line">            Console.ReadLine();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、输出100以内能被3整除且个位数为6的所有整数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Text;</span><br><span class="line"></span><br><span class="line">namespace ConsoleApplication2</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            int a = 100;</span><br><span class="line">            for (int i = 1; i &lt;= 100; i++) &#123; </span><br><span class="line">            if(i%3==0&amp;&amp;i%10==6)</span><br><span class="line">                Console.WriteLine(i);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3、求自然对数e的近似值，要求其误差小于0.00001，近似公式为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace ConsoleApp2</span><br><span class="line">&#123;</span><br><span class="line">    internal class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            int a;</span><br><span class="line">            double e = 1;</span><br><span class="line">            int n = Convert.ToInt32(Console.ReadLine());</span><br><span class="line">            //int n =Int32.Parse(Console.ReadLine());</span><br><span class="line">            for (int i = 1; i &lt;= n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                a = 1;</span><br><span class="line">                for(int j = 1; j &lt;= i; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    a = a * j;</span><br><span class="line">                &#125;</span><br><span class="line">                e = e+1.0/a;</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(e);</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、求100—200之间的全部素数，每输出10个素数换行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace ConsoleApp2</span><br><span class="line">&#123;</span><br><span class="line">    internal class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            int m, k, i, n = 0;</span><br><span class="line">            for (m = 101; m &lt;= 200; m = m + 2)</span><br><span class="line">            &#123;</span><br><span class="line">                k = (int)Math.Sqrt(m); for (i = 2; i &lt;= k; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    if (m % i == 0)</span><br><span class="line">                        break;</span><br><span class="line">                &#125;</span><br><span class="line">                if (i &gt;= k + 1) &#123;</span><br><span class="line">                    Console.Write(&quot;&#123;0&#125; &quot;, m);</span><br><span class="line">                    n = n + 1;</span><br><span class="line">                &#125;</span><br><span class="line">                if (n % 10 == 0)</span><br><span class="line">                    Console.WriteLine();</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine() ;</span><br><span class="line">            Console.ReadLine() ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、输出* 形成的菱形：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace ConsoleApp2</span><br><span class="line">&#123;</span><br><span class="line">    internal class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            int n = Convert.ToInt32(Console.ReadLine());</span><br><span class="line">            </span><br><span class="line">            for(int i = 1; i &lt;= n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                for (int k = 0; k &lt; n - i; k++) </span><br><span class="line">                    Console.Write(&quot; &quot;);</span><br><span class="line">                for (int l = 0; l &lt; 2*i-1; l++) </span><br><span class="line">                    Console.Write(&quot;*&quot;);</span><br><span class="line">                Console.WriteLine(); </span><br><span class="line">            &#125;</span><br><span class="line">            for (int i = n-1; i &gt;= 0; i--) </span><br><span class="line">            &#123;</span><br><span class="line">                for (int k = 0; k &lt; n - i; k++) </span><br><span class="line">                    Console.Write(&quot; &quot;);</span><br><span class="line">                for (int l = 0; l &lt; 2*i-1; l++) </span><br><span class="line">                    Console.Write(&quot;*&quot;);</span><br><span class="line">                Console.WriteLine(); </span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="6-C-中的get、set方法"><a href="#6-C-中的get、set方法" class="headerlink" title="6.C#中的get、set方法"></a>6.C#中的get、set方法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class student</span><br><span class="line">    &#123;</span><br><span class="line">        private int _id;</span><br><span class="line">        private string _name;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>接着选中上面的代码块，先ctrl+R,再ctrl+E,就会出现下图的界面，点击Apply，就会自动生成set、get方法</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class student</span><br><span class="line">    &#123;</span><br><span class="line">        private int _id;</span><br><span class="line">        private string _name;</span><br><span class="line">        public int Id</span><br><span class="line">        &#123;</span><br><span class="line">            get</span><br><span class="line">            &#123;</span><br><span class="line">                return _id;</span><br><span class="line">            &#125;</span><br><span class="line">            set</span><br><span class="line">            &#123;</span><br><span class="line">                _id = value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        public string Name</span><br><span class="line">        &#123;</span><br><span class="line">            get</span><br><span class="line">            &#123;</span><br><span class="line">                return _name;</span><br><span class="line">            &#125;</span><br><span class="line">            set</span><br><span class="line">            &#123;</span><br><span class="line">                _name = value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>6.1委托事件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using ConsoleApp1;</span><br><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Text;</span><br><span class="line"></span><br><span class="line">namespace ConsoleApplication1</span><br><span class="line">&#123;</span><br><span class="line">    public delegate void YunsuanWeituo(double a, double b);</span><br><span class="line">    public class Computer</span><br><span class="line">    &#123;</span><br><span class="line">        public void Yunsuan(double a, double b, YunsuanWeituo Cometure)</span><br><span class="line">        &#123;</span><br><span class="line">            Cometure(a, b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        private static void Jia(double a, double b)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;&#123;0&#125;+&#123;1&#125;=&#123;2&#125;&quot;, a, b, a + b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private static void Jian(double a, double b)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;&#123;0&#125;-&#123;1&#125;=&#123;2&#125;&quot;,a,b,a-b);</span><br><span class="line">        &#125;</span><br><span class="line">        private static void Cheng(double a, double b)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;&#123;0&#125;*&#123;1&#125;=&#123;2&#125;&quot;, a, b, a * b);</span><br><span class="line">        &#125;</span><br><span class="line">        private static void Chu(double a, double b)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;&#123;0&#125;/&#123;1&#125;=&#123;2&#125;&quot;, a, b, a / b);</span><br><span class="line">        &#125;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">        	double a=2;</span><br><span class="line">        	double b=3;</span><br><span class="line">        	Computer computer = new Computer();</span><br><span class="line">            computer.Yunsuan(a,b, Jia);</span><br><span class="line">            computer.Yunsuan(a, b, Jian);               </span><br><span class="line">            computer.Yunsuan(a, b, Cheng);              </span><br><span class="line">            computer.Yunsuan(a, b, Chu);                   </span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="7-常见窗体与控件属性"><a href="#7-常见窗体与控件属性" class="headerlink" title="7.常见窗体与控件属性"></a>7.常见窗体与控件属性</h4><p><img src="/images4/cccc.png" alt="img"> </p>
<ol>
<li>button 按钮</li>
<li>check box复选框</li>
<li>ckeck boxlist：复选框列表</li>
<li>radiobutton：单选框控件</li>
<li>lable：标签控件</li>
<li>combo box组合框（下拉列表）</li>
<li>picture control图片控制</li>
<li>FileUpload：上传文件控件</li>
<li>timer：计时器</li>
<li>serialport：端口</li>
<li>textbox：文本框</li>
<li>panel：容器</li>
</ol>
<h3 id="RichTextBox控件"><a href="#RichTextBox控件" class="headerlink" title="RichTextBox控件"></a>RichTextBox控件</h3><p>RichTextBox是一种既可以输入文本、 又可以编辑文本的文字处理控件， 与TextBox控件相比， RichTextBox控件的文字处理功能更加丰富， 不仅可以设定文字的颜色、 字体， 还具有字符串检索功能。 另外， RichTextBox控件还可以打开、编辑和存储.rtf格式文件、ASCII文本格式文件及Unicode编码格式的文件。</p>
<h4 id="TreeView控件"><a href="#TreeView控件" class="headerlink" title="TreeView控件"></a>TreeView控件</h4><p>TreeView控件用来显示信息的分级视图，如同Windows里的<a href="https://baike.baidu.com/item/%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8/1951545">资源管理器</a>的目录。TreeView控件中的各项信息都有一个与之相关的Node对象。TreeView显示Node对象的分层目录结构，每个Node对象均由一个Label对象和其相关的<a href="https://baike.baidu.com/item/%E4%BD%8D%E5%9B%BE/1017781">位图</a>组成。在建立TreeView控件后，可以展开和折叠、显示或隐藏其中的节点。TreeView控件一般用来显示文件和目录结构、文档中的类层次、索引中的层次和其他具有分层目录结构的信息。</p>
<h2 id="1-常用方法"><a href="#1-常用方法" class="headerlink" title="1,常用方法"></a>1,常用方法</h2><p>下面介绍一些窗体的最常用方法。</p>
<ul>
<li><code>Show</code>方法：该方法的作用是让窗体显示出来，其调用格式为：窗体名.Show();其中窗体名是要显示的窗体名称。</li>
<li><code>Hide</code>方法：该方法的作用是把窗体隐藏出来，其调用格式为：窗体名.Hide();其中窗体名是要隐藏的窗体名称。</li>
<li><code>Refresh</code>方法：该方法的作用是刷新并重画窗体，其调用格式为：窗体名.Refresh();其中窗体名是要刷新的窗体名称。</li>
<li><code>Activate</code>方法：该方法的作用是激活窗体并给予它焦点。其调用格式为：窗体名.Activate();其中窗体名是要激活的窗体名称。</li>
<li><code>Close</code>方法：该方法的作用是关闭窗体。其调用格式为：窗体名.Close();其中窗体名是要关闭的窗体名称。</li>
<li><code>ShowDialog</code>方法：该方法的作用是将窗体显示为模式对话框。其调用格式为：窗体名.ShowDialog();</li>
</ul>
<h2 id="2，常用事件"><a href="#2，常用事件" class="headerlink" title="2，常用事件"></a>2，常用事件</h2><ul>
<li><code>Load</code>事件：该事件在窗体加载到内存时发生，即在第一次显示窗体前发生。</li>
<li><code>Activated</code>事件：该事件在窗体激活时发生。</li>
<li><code>Deactivate</code>事件：该事件在窗体失去焦点成为不活动窗体时发生。</li>
<li><code>Resize</code>事件：该事件在改变窗体大小时发生。</li>
<li><code>Paint</code>事件：该事件在重绘窗体时发生。</li>
<li><code>Click</code>事件：该事件在用户单击窗体时发生。</li>
<li><code>DoubleClick</code>事件：该事件在用户双击窗体时发生。</li>
<li><code>Closed</code>事件：该事件在关闭窗体时发生。</li>
</ul>
<h2 id="3、常用属性"><a href="#3、常用属性" class="headerlink" title="3、常用属性"></a>3、常用属性</h2><ul>
<li><p><code>Name</code>属性：用来获取或设置窗体的名称，在应用程序中可通过Name属性来引用窗体。</p>
</li>
<li><p><code>WindowState</code>属性： 用来获取或设置窗体的窗口状态。 取值有三种： Normal （窗体正常显示）、 Minimized（窗体以最小化形式显示）和 Maximized（窗体以最大化形式显示）。</p>
</li>
<li><p><code>StartPosition</code>属性：用来获取或设置运行时窗体的起始位置。</p>
</li>
<li><p><code>Text</code>属性：该属性是一个字符串属性，用来设置或返回在窗口标题栏中显示的文字。</p>
</li>
<li><p><code>Width</code>属性：用来获取或设置窗体的宽度。</p>
</li>
<li><p><code>Height</code>属性：用来获取或设置窗体的高度。</p>
</li>
<li><p><code>Left</code>属性：用来获取或设置窗体的左边缘的x坐标（以像素为单位）。</p>
</li>
<li><p><code>Top</code>属性：用来获取或设置窗体的上边缘的y坐标（以像素为单位）。</p>
</li>
<li><p><code>ControlBox</code>属性：用来获取或设置一个值，该值指示在该窗体的标题栏中是否显示控制框。值为true时将显示控制框，值为false时不显示控制框。</p>
</li>
<li><p><code>MaximizeBox</code>属性：用来获取或设置一个值，该值指示是否在窗体的标题栏中显示最大化按钮。值为 true时显示最大化按钮，值为false时不显示最大化按钮。</p>
</li>
<li><p><code>MinimizeBox</code> 属性：用来获取或设置一个值，该值指示是否在窗体的标题栏中显示最小化按钮。值为 true时显示最小化按钮，值为false时不显示最小化按钮。</p>
</li>
<li><p><code>AcceptButton</code> 属性：该属性用来获取或设置一个值，该值是一个按钮的名称，当按 Enter 键时就相当于单击了窗体上的该按钮。</p>
</li>
<li><p><code>CancelButton</code> 属性：该属性用来获取或设置一个值，该值是一个按钮的名称，当按 Esc 键时就相当于单击了窗体上的该按钮。</p>
</li>
<li><p><code>Modal</code> 属性：该属性用来设置窗体是否为有模式显示窗体。如果有模式地显示该窗体，该属性值为true；否则为 false。当有模式地显示窗体时，只能对模式窗体上的对象进行输入。必须隐藏或关闭模式窗体（通常是响应某个用户操作），然后才能对另一窗体进行输入。有模式显示的窗体通常用做应用程序中的对话框。</p>
</li>
<li><p><code>ActiveControl</code>属性：用来获取或设置容器控件中的活动控件。窗体也是一种容器控件。</p>
</li>
<li><p><code>ActiveMdiChild</code>属性：用来获取多文档界面（MDI）的当前活动子窗口。</p>
</li>
<li><p><code>AutoScroll</code> 属性：用来获取或设置一个值，该值指示窗体是否实现自动滚动。如果此属性值设置为true，则当任何控件位于窗体工作区之外时，会在该窗体上显示滚动条。另外，当自动滚动打开时，窗体的工作区自动滚动，以使具有输入焦点的控件可见。</p>
</li>
<li><p><code>BackColor</code>属性：用来获取或设置窗体的背景色。</p>
</li>
<li><p><code>BackgroundImage</code>属性：用来获取或设置窗体的背景图像。</p>
</li>
<li><p><code>Enabled</code> 属性：用来获取或设置一个值，该值指示控件是否可以对用户交互作出响应。如果控件可以对用户交互作出响应，则为 true；否则为false。默认值为true。</p>
</li>
<li><p><code>Font</code>属性：用来获取或设置控件显示的文本的字体。</p>
</li>
<li><p><code>ForeColor</code>属性：用来获取或设置控件的前景色。</p>
</li>
<li><p><code>IsMdiChild</code>属性：获取一个值，该值指示该窗体是否为多文档界面（MDI）子窗体。值为 true时，是子窗体，值为false时，不是子窗体。</p>
</li>
<li><p><code>IsMdiContainer</code> 属性：获取或设置一个值，该值指示窗体是否为多文档界面（MDI）中的子窗体的容器。值为true时，是子窗体的容器，值为false时，不是子窗体的容器。</p>
</li>
<li><p><code>KeyPreview</code>属性：用来获取或设置一个值，该值指示在将按键事件传递到具有焦点的控件前，窗体是否将接收该事件。值为true时，窗体将接收按键事件，值为false时，窗体不接收按键事件。</p>
</li>
<li><p><code>MdiChildren</code>属性：数组属性。数组中的每个元素表示以此窗体作为父级的多文档界面（MDI）子窗体。</p>
</li>
<li><p><code>MdiParent</code>属性：用来获取或设置此窗体的当前多文档界面（MDI）父窗体。</p>
</li>
<li><p><code>ShowInTaskbar</code>属性：用来获取或设置一个值，该值指示是否在Windows任务栏中显示窗体。</p>
</li>
<li><p><code>Visible</code>属性：用于获取或设置一个值，该值指示是否显示该窗体或控件。值为true 时显示窗体或控件，为 false时不显示。</p>
</li>
<li><p><code>Capture</code>属性：如果该属性值为true，则鼠标就会被限定只由此控件响应，不管鼠标是否在此控件的范围内。<br>链接：<a href="https://www.jianshu.com/p/38854353f304">https://www.jianshu.com/p/38854353f304</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>C++版基础题</title>
    <url>/2022/04/05/C-%E7%89%88%E5%9F%BA%E7%A1%80%E9%A2%98/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">目录</span><br><span class="line">1.用C++实现日历功能</span><br><span class="line">2.用C++实现计算器功能</span><br><span class="line">3.编写C++程序解决百钱问题</span><br><span class="line">4.C++程序实现函数重载</span><br><span class="line">5.引用实现排序输出</span><br><span class="line">6.定义一个Dog类，包含age, weight等数据成员</span><br><span class="line">7.计算矩形面积</span><br><span class="line">8.计算圆的周长和面积</span><br><span class="line">9.对象数组求解问题</span><br><span class="line">10. 对象指针及其使用</span><br><span class="line">11.This指针及其用法</span><br><span class="line">12.静态成员的用法</span><br><span class="line">13.游泳池改造预算</span><br><span class="line">14.类的组合应用</span><br><span class="line">15.友元函数的应用</span><br></pre></td></tr></table></figure>

<p>1.用C++实现日历功能</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &quot;iostream&quot;</span><br><span class="line">using namespace std;</span><br><span class="line">class date</span><br><span class="line">&#123;</span><br><span class="line">int year,month,day;</span><br><span class="line">public:</span><br><span class="line">void setdate(int yy,int mm,int dd)</span><br><span class="line">&#123;year=yy;month=mm;day=dd;&#125;</span><br><span class="line">void showdate()</span><br><span class="line">&#123;cout&lt;&lt;year&lt;&lt;&#x27;-&#x27;&lt;&lt;month&lt;&lt;&#x27;-&#x27;&lt;&lt;day&lt;&lt;endl;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int a,b,c;</span><br><span class="line">	date dd;</span><br><span class="line">	cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">	dd.setdate(a,b,c);</span><br><span class="line">	dd.showdate();</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.用C++实现计算器功能</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &quot;iostream&quot;</span><br><span class="line">using namespace std;</span><br><span class="line">class caculater</span><br><span class="line">&#123;</span><br><span class="line">int a,b,d;</span><br><span class="line">char c,zz;</span><br><span class="line">public:</span><br><span class="line">void setcaculater(int yy,char mm,int dd)</span><br><span class="line">&#123;a=yy;c=mm;b=dd;&#125;</span><br><span class="line">void computer(int zz)</span><br><span class="line">&#123;</span><br><span class="line">    c=zz;</span><br><span class="line">    if(c==&#x27;+&#x27;)</span><br><span class="line">    d=a+b;</span><br><span class="line"> else if(c==&#x27;-&#x27;)</span><br><span class="line">    d=a-b;</span><br><span class="line"> else if(c==&#x27;*&#x27;)</span><br><span class="line">    d=a*b;</span><br><span class="line"> else if(c==&#x27;/&#x27;)</span><br><span class="line">    d=a/b;&#125;</span><br><span class="line">void showcaculater()</span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;a&lt;&lt;c&lt;&lt;b&lt;&lt;&quot;=&quot;&lt;&lt;d&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int a,c;</span><br><span class="line">	char b;</span><br><span class="line">	caculater dd;</span><br><span class="line">	cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">	dd.setcaculater(a,b,c);</span><br><span class="line">	dd.computer(b);</span><br><span class="line">	dd.showcaculater();</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.编写C++程序解决百钱问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &quot;iostream&quot;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">	int count=0,n,m,a=1,b=2,c=5,temp;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	m=n*100;</span><br><span class="line">	for(int i=0; i&lt;=m/b;++i)</span><br><span class="line">        &#123;</span><br><span class="line">		for (int j=0;j&lt;=m/c;++j)</span><br><span class="line">		 &#123;</span><br><span class="line">			temp=m-(b*i+c*j);</span><br><span class="line">			if(temp&gt;=0&amp;&amp;temp%a==0)</span><br><span class="line">                &#123;</span><br><span class="line">				++count;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; &quot;将&quot;&lt;&lt;n&lt;&lt;&quot;元人民币兑换成1、2、5分的硬币，共有&quot;&lt;&lt;count&lt;&lt;&quot;种换法。&quot; ;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.C++程序实现函数重载</p>
<p>编写一个C++风格的程序，建立一个被称为sroot()的函数，返回其参数的二次方根。重载sroot()3次，让它返回整数、长整数与双精度数的二次方根（计算二次方根时，可以使用标准库函数sqrt()）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cmath&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int sroot(int);</span><br><span class="line">long sroot(long);</span><br><span class="line">double sroot(double);</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">         int i,x;</span><br><span class="line">         long l,y;</span><br><span class="line">         double d,z;</span><br><span class="line">         cin&gt;&gt;i&gt;&gt;l&gt;&gt;d;</span><br><span class="line">         x=sroot(i);</span><br><span class="line">         y=sroot(l);</span><br><span class="line">         z=sroot(d);</span><br><span class="line">         cout&lt;&lt;x&lt;&lt;&#x27;,&#x27;&lt;&lt;y&lt;&lt;&#x27;,&#x27;&lt;&lt;z&lt;&lt;endl;</span><br><span class="line">         return 0;</span><br><span class="line">&#125;</span><br><span class="line">int sroot(int n) &#123;</span><br><span class="line">	return sqrt(n);</span><br><span class="line">&#125;</span><br><span class="line">long sroot(long n) &#123;</span><br><span class="line">	return sqrt(n);</span><br><span class="line">&#125;</span><br><span class="line">double sroot(double n) &#123;</span><br><span class="line">	return sqrt(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5.引用实现排序输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">void swap(int &amp;x,int &amp;y);</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">         int a,b;</span><br><span class="line">         cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">         swap(a,b);</span><br><span class="line">         cout&lt;&lt;a&lt;&lt;&#x27;,&#x27;&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">         return 0;</span><br><span class="line">&#125;</span><br><span class="line">void swap(int &amp;x,int &amp;y)</span><br><span class="line">&#123;</span><br><span class="line">	int t;</span><br><span class="line">	if(x&gt;y)</span><br><span class="line">	&#123;</span><br><span class="line">		t=x;</span><br><span class="line">	x=y;</span><br><span class="line">	y=t;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>6.定义一个Dog类，包含age, weight等数据成员，以及对这些数据成员操作的方法。实现并测试这个类。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class Dog</span><br><span class="line">&#123;</span><br><span class="line">     int Age,Weight;</span><br><span class="line">     public: Dog(int a,int b)</span><br><span class="line">     &#123;</span><br><span class="line">     	Age=a,Weight=b;</span><br><span class="line">     &#125;</span><br><span class="line">     int getAge()</span><br><span class="line">     &#123;</span><br><span class="line">     	return Age;</span><br><span class="line">     &#125;</span><br><span class="line">     int getWeight()</span><br><span class="line">     &#123;</span><br><span class="line">     	return Weight;</span><br><span class="line">     &#125;</span><br><span class="line">     void setAge(int x)</span><br><span class="line">     &#123;</span><br><span class="line">     	Age=x;</span><br><span class="line">     &#125;</span><br><span class="line">     void setWeight(int y)</span><br><span class="line">     &#123;</span><br><span class="line">     	Weight=y;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">         Dog Jack(2,10);</span><br><span class="line"></span><br><span class="line">         cout&lt;&lt;&quot;Jack is a Dog who is &quot;;</span><br><span class="line"></span><br><span class="line">         cout&lt;&lt;Jack.getAge()&lt;&lt;&quot; years old and &quot;&lt;&lt;Jack.getWeight()&lt;&lt;&quot; pounds weight&quot;&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">         Jack.setAge(7);</span><br><span class="line"></span><br><span class="line">         Jack.setWeight(20);</span><br><span class="line"></span><br><span class="line">         cout&lt;&lt;&quot;Now Jack is &quot;;</span><br><span class="line"></span><br><span class="line">         cout&lt;&lt;Jack.getAge()&lt;&lt;&quot; years old and &quot;&lt;&lt;Jack.getWeight()&lt;&lt;&quot; pounds weight.&quot;&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">         return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>7.计算矩形面积</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class Rectangle</span><br><span class="line">&#123;</span><br><span class="line">	int x1,y1,x2,y2;</span><br><span class="line">	public:</span><br><span class="line">	Rectangle(int a,int b,int c,int d)</span><br><span class="line">	&#123;</span><br><span class="line">		x1=a,y1=b,x2=c,y2=d;</span><br><span class="line">	&#125;</span><br><span class="line">	int getArea()</span><br><span class="line">	&#123;</span><br><span class="line">		return (x1-x2)*(y2-y1);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">         Rectangle rect(100,80,200,40);</span><br><span class="line">         cout&lt;&lt;&quot;Area: &quot;&lt;&lt;rect.getArea()&lt;&lt;endl;</span><br><span class="line">         return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>8.计算圆的周长和面积</p>
<p>定义一个Circle类，有数据成员radius（半径）、成员函数getCircumference()计算圆的周长，成员函数getArea()计算圆的面积。在主函数中定义圆对象，通过调用成员函数计算圆的周长和面积。提示：圆周率取值3.14</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class Circle</span><br><span class="line">&#123;</span><br><span class="line">	float radius;</span><br><span class="line">	public:</span><br><span class="line">	Circle (float a)</span><br><span class="line">	&#123;</span><br><span class="line">		radius=a;</span><br><span class="line">	&#125;</span><br><span class="line">	float getCircumference()</span><br><span class="line">	&#123;</span><br><span class="line">		return 2*3.14*radius;</span><br><span class="line">	&#125;</span><br><span class="line">	float getArea()</span><br><span class="line">	&#123;</span><br><span class="line">		return 3.14*radius*radius;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">         float radius;</span><br><span class="line">         cin&gt;&gt;radius;</span><br><span class="line">         Circle c(radius);</span><br><span class="line">         cout&lt;&lt;&quot;半径为&quot;&lt;&lt;radius&lt;&lt;&quot;的圆的周长为：&quot;&lt;&lt;c.getCircumference()&lt;&lt;&quot;,面积为：&quot;&lt;&lt;c.getArea()&lt;&lt;endl;</span><br><span class="line">         return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>9.对象数组求解问题</p>
<p>构建一个类book，其中含有两个私有数据成员qu和price，将qu初始化为1~5，将price初始化为qu的10倍，建立一个有5个元素的数组对象。显示每个对象数组元素的qu*price值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class book</span><br><span class="line">&#123;</span><br><span class="line">	int qu,price;</span><br><span class="line">	public:</span><br><span class="line">	book(int a)</span><br><span class="line">	&#123;</span><br><span class="line">		qu=a;</span><br><span class="line">		price=10*qu;</span><br><span class="line">	&#125;</span><br><span class="line">	void print()</span><br><span class="line">	&#123;</span><br><span class="line">		cout&lt;&lt;&quot;qu*price=&quot;&lt;&lt;qu*price&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">int main() </span><br><span class="line">&#123; </span><br><span class="line"> book b[5]=&#123;1,2,3,4,5&#125;;</span><br><span class="line"> for(int i=0;i&lt;5;i++)</span><br><span class="line">  b[i].print();</span><br><span class="line">    return 0; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="10">
<li>对象指针及其使用</li>
</ol>
<p>构建一个类book，其中含有两个私有数据成员qu和price，将price初始化为qu的10倍，建立一个有5个元素的数组对象，将qu初始化为6~10。<strong>要求通过对象指针访问对象数组</strong>，按相反的顺序显示每个对象数组元素的qu*price值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt; </span><br><span class="line">using namespace std; </span><br><span class="line">class book </span><br><span class="line">&#123;   </span><br><span class="line">  int qu,price;</span><br><span class="line">public:</span><br><span class="line">  book(int i)</span><br><span class="line">  &#123;</span><br><span class="line">    qu=i;</span><br><span class="line">    price=10*i;</span><br><span class="line">  &#125;</span><br><span class="line">void print()</span><br><span class="line">&#123; cout&lt;&lt;&quot;qu*price=&quot;&lt;&lt;qu*price&lt;&lt;endl;&#125;</span><br><span class="line">&#125;; </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	     int x=5;</span><br><span class="line">         book b[5]=&#123;6,7,8,9,10&#125;;</span><br><span class="line">         book *p=&amp;b[4];</span><br><span class="line">         while(x!=0)</span><br><span class="line">        &#123;</span><br><span class="line">        (*p).print();</span><br><span class="line">        p--;</span><br><span class="line">        x--;</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>11.This指针及其用法</p>
<p>构建一个类Stock，含字符数组stockcode[]及整型数据成员quan、双精度型数据成员price。</p>
<p>构造函数含3个参数：字符数组na[]及q、p。当定义Stock的类对象时，将对象的第1个字符串参数赋值给数据成员stockcode，第2个和第3个参数分别赋给quan、price。未设置第2和第3个参数时，quan的值为1000，price的值为8.98。</p>
<p>成员函数print没有形参，需使用this指针，显示对象数据成员的内容。假设类Stock第1个对象的三个参数分别为：”600001”，3000和5.67，第2个对象的第1个数据成员的值为”600002”，第2个和第3个数据成员的值取默认值。</p>
<p>要求编写程序分别显示这两个对象数据成员的值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class stock</span><br><span class="line">&#123;</span><br><span class="line">	int quan;</span><br><span class="line">	string stockcode;</span><br><span class="line">	double price;</span><br><span class="line">	public:</span><br><span class="line">	stock(string na,int q=1000,double p=8.98)</span><br><span class="line">	&#123;</span><br><span class="line">		stockcode=na;</span><br><span class="line">		quan=q;</span><br><span class="line">		price=p;</span><br><span class="line">	&#125;</span><br><span class="line">	void print()</span><br><span class="line">	&#123;</span><br><span class="line">		 cout&lt;&lt;stockcode&lt;&lt;endl&lt;&lt;quan&lt;&lt;endl&lt;&lt;price&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">      stock st1(&quot;600001&quot;,3000,5.67);</span><br><span class="line">      st1.print();</span><br><span class="line">      stock st2(&quot;600002&quot;);</span><br><span class="line">      st2.print();</span><br><span class="line">      return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="12">
<li>静态成员的用法</li>
</ol>
<p>编写一个程序，已有若干学生的数据，包括学号、姓名、成绩，要求输入这些学生的数据并计算出学生人数和平均成绩（要求将学生人数和总成绩用静态数据成员表示）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class student</span><br><span class="line">&#123;</span><br><span class="line">      string num;</span><br><span class="line">      string name;</span><br><span class="line">      int score;</span><br><span class="line">      static double sum;</span><br><span class="line">      static int count1;</span><br><span class="line">      static double aver;</span><br><span class="line">      public:</span><br><span class="line">      student(string num1,string name1,int score1)</span><br><span class="line">&#123;</span><br><span class="line">      num=num1;</span><br><span class="line">      name=name1;</span><br><span class="line">      score=score1;</span><br><span class="line">      count1++;</span><br><span class="line">      sum+=score1;</span><br><span class="line">      aver=sum/count1;</span><br><span class="line">&#125;</span><br><span class="line">      void print()</span><br><span class="line">&#123;</span><br><span class="line">	   cout&lt;&lt;num&lt;&lt;&quot;   &quot;&lt;&lt;name&lt;&lt;&quot;   &quot;&lt;&lt;score&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">       static int get_count()</span><br><span class="line">&#123;</span><br><span class="line">       return count1;</span><br><span class="line">&#125;</span><br><span class="line">       static double get_avg()</span><br><span class="line">&#123;</span><br><span class="line">	   return aver;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">      double student::sum=0.0;</span><br><span class="line">     int student::count1=0;</span><br><span class="line">     double  student::aver=0.0;</span><br><span class="line">     int main()</span><br><span class="line">&#123;</span><br><span class="line">         student s1(&quot;201601&quot;,&quot;john&quot;,85),s2(&quot;201602&quot;,&quot;mike&quot;,90),s3(&quot;201603&quot;,&quot;june&quot;,95);</span><br><span class="line">         s1.print();</span><br><span class="line">         s2.print();</span><br><span class="line">         s3.print();</span><br><span class="line">          cout&lt;&lt;&quot;共有&quot;&lt;&lt;student::get_count()&lt;&lt;&quot;位学生，平均成绩为：&quot;&lt;&lt;student::get_avg()&lt;&lt;endl;</span><br><span class="line">         return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>13.游泳池改造预算</p>
<p>一个圆形游泳池如图所示，现在需要在其周围建一个圆形过道，并在其四周围上栅栏。栅栏价格为35元&#x2F;米，过道造价为20元&#x2F;平方米。过道宽度为3米，游泳池半径由键盘输入。要求编程计算并输出过道和栅栏的造价。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a,b;</span><br><span class="line">    float c=3.14,x,y;</span><br><span class="line">    cin&gt;&gt;a;</span><br><span class="line">    x=(float)((a+3)*(a+3)*c-a*a*c)*20;</span><br><span class="line">    y=2*c*(a+3)*35;</span><br><span class="line">    cout&lt;&lt;&quot;Enter the radius of the pool:&quot;&lt;&lt;endl&lt;&lt;&quot;Fencing Cost is $&quot;&lt;&lt;y&lt;&lt;endl&lt;&lt;&quot;Concrete Cost is $&quot;&lt;&lt;x;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>14.类的组合应用</p>
<p>定义一个线段类Line，实现根据起点坐标和终点坐标计算线段的长度。坐标点又包含X坐标值和Y坐标值，因此定义坐标点类Point，其对象作为线段类的数据成员。试编程实现根据坐标点计算线段长度的功能。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cmath&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class Point</span><br><span class="line">&#123;</span><br><span class="line">         int x,y;</span><br><span class="line">public:</span><br><span class="line">         Point(int a=0,int b=0)</span><br><span class="line">         &#123;</span><br><span class="line">                   x=a;</span><br><span class="line">                   y=b;</span><br><span class="line">         &#125;</span><br><span class="line">         Point(Point &amp;p)</span><br><span class="line">         &#123;</span><br><span class="line">                   x=p.x;</span><br><span class="line">                   y=p.y;</span><br><span class="line">         &#125;</span><br><span class="line">         int getX()</span><br><span class="line">         &#123;</span><br><span class="line">                   return x;</span><br><span class="line">         &#125;</span><br><span class="line">         int getY()</span><br><span class="line">         &#123;</span><br><span class="line">                   return y;</span><br><span class="line">         &#125;</span><br><span class="line">&#125;;</span><br><span class="line">class Line</span><br><span class="line">&#123;</span><br><span class="line">    int a,b,c,n;</span><br><span class="line">public:</span><br><span class="line">    Line(Point pp1,Point pp2)</span><br><span class="line">    &#123;</span><br><span class="line">        a=pp1.getX();</span><br><span class="line">        b=pp1.getY();</span><br><span class="line">        c=pp2.getX();</span><br><span class="line">        n=pp2.getY();</span><br><span class="line">    &#125;</span><br><span class="line">    int getLen()</span><br><span class="line">    &#123;</span><br><span class="line">       return sqrt((c-a)*(c-a)+(n-b)*(n-b));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">         Point p1(1,1),p2(4,5);</span><br><span class="line">         Line line1(p1,p2);</span><br><span class="line">         Line line2(line1);</span><br><span class="line">         cout&lt;&lt;&quot;The length of the line1 is:&quot;&lt;&lt;line1.getLen()&lt;&lt;endl;</span><br><span class="line">         cout&lt;&lt;&quot;The length of the line2 is:&quot;&lt;&lt;line2.getLen()&lt;&lt;endl;</span><br><span class="line">         return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>15.友元函数的应用</p>
<p>定义Boat与Car两个类，二者都有weight属性，定义二者的一个友元函数getTotalWeight()，计算二者的重量和。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cmath&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class Car;</span><br><span class="line">class Boat</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    int x;</span><br><span class="line">    Boat(int a)</span><br><span class="line">    &#123;</span><br><span class="line">        x=a;</span><br><span class="line">    &#125;</span><br><span class="line">    friend int getTotalWeight(Boat &amp;n,Car &amp;m);</span><br><span class="line">&#125;;</span><br><span class="line">class Car</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    int y;</span><br><span class="line">    Car(int b)</span><br><span class="line">    &#123;</span><br><span class="line">        y=b;</span><br><span class="line">    &#125;</span><br><span class="line">    friend int getTotalWeight(Boat &amp;n,Car &amp;m);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">int getTotalWeight(Car &amp;n,Boat &amp;m)</span><br><span class="line">&#123;</span><br><span class="line">    return (n.y+m.x);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">         Car c(4);</span><br><span class="line">         Boat b(5);</span><br><span class="line">         cout&lt;&lt;getTotalWeight(c,b)&lt;&lt;endl;</span><br><span class="line">         return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言之动态数组</title>
    <url>/2022/04/30/C%E8%AF%AD%E8%A8%80dome/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">目录</span><br><span class="line">一维动态数组</span><br><span class="line">二维动态数组</span><br></pre></td></tr></table></figure>

<h1 id="一维动态数组"><a href="#一维动态数组" class="headerlink" title="一维动态数组"></a><strong>一维动态数组</strong></h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">头文件</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">方法</span><br><span class="line">malloc</span><br><span class="line">calloc</span><br><span class="line">realloc</span><br><span class="line">free</span><br></pre></td></tr></table></figure>

<p>1：malloc是由程序员在堆栈动态开辟空间<br>2：返回值开辟空间的首地址，但是类型是void <em>，需要强制类型转换<br>3：分配的内存空间应该能整除类型所占的字节数<br>4：包含头文件malloc.h<br>5：只能用free（p）来释放p所指向的动态开辟的内存空间。<br>6：对动态内存空间的操作，用</em>p来操作。<br>7：可以用多个指针指向这个动态空间<br>8：当有多个指针只向这个动态空间时，只能用free一个指针，多次重复释放要被报错<br>9：可以将动态开辟的的内存指针作为函数参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int *parr=null;</span><br><span class="line">malloc();//开辟内存空间，malloc（int size）</span><br><span class="line">malloc(sizeof(int/char/doublie))</span><br><span class="line">parr=(int*)malloc(4);</span><br><span class="line">*parr=520;</span><br><span class="line">printf(&quot;%d&quot;,*parr); </span><br><span class="line">calloc(5,4);//开辟5个连续的空间，每个空间四个字节</span><br><span class="line">realloc()//调整内存大小</span><br><span class="line">parr1=(int*)realloc(parr1,28)//让parr1扩容到28字节</span><br><span class="line">free(p);//消除p所指向的地址的空间数据</span><br><span class="line">p中的存的地址不变</span><br></pre></td></tr></table></figure>

<p>1.用户输入任意长度的纯数字字符串后，将字符串转成16进制字符数组，并在控制台打印16进制结果。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;math.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a,temp,i=0,j=0;</span><br><span class="line">    long long int num=0,lenth=0,remainder,quotient;</span><br><span class="line">    //定义动态数组</span><br><span class="line">    char *str=(char *)malloc(5);</span><br><span class="line">    scanf(&quot;%s&quot;,str);</span><br><span class="line">    lenth=strlen(str);</span><br><span class="line">    //进行扩容</span><br><span class="line">    char *strplus=(char *)malloc(lenth+5);</span><br><span class="line">    //字符串拷贝</span><br><span class="line">    strcpy(strplus,str);</span><br><span class="line">    //释放动态数组</span><br><span class="line">    free(str);</span><br><span class="line">    //字符转数字</span><br><span class="line">    for( int i=0;strplus[i];i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        a=strplus[i]-48;</span><br><span class="line">        //printf(&quot;%d\n&quot;, a);</span><br><span class="line">        num=num*10+a;</span><br><span class="line">    &#125;</span><br><span class="line">    //printf(&quot;%d\n&quot;,num);</span><br><span class="line">    //释放动态数组,留下数字num</span><br><span class="line">    free(strplus);</span><br><span class="line">    //构造存储十六进制的动态数组</span><br><span class="line">    char *sixteenNumber=(char *)malloc(lenth+5);</span><br><span class="line">    quotient=num;</span><br><span class="line">    //十进制转十六进制</span><br><span class="line">    while(quotient!=0) &#123;</span><br><span class="line">        temp = quotient % 16;</span><br><span class="line">        if( temp &lt; 10)</span><br><span class="line">            temp =temp + 48;</span><br><span class="line">        else</span><br><span class="line">            temp = temp + 55;</span><br><span class="line">        sixteenNumber[j++]= temp;</span><br><span class="line">        quotient = quotient / 16;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%s&quot;,sixteenNumber);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>方法二</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    long long int num=0,lenth=0;</span><br><span class="line">    //定义动态数组</span><br><span class="line">    char *str=(char *)malloc(5);</span><br><span class="line">    scanf(&quot;%s&quot;,str);</span><br><span class="line">    lenth=strlen(str);</span><br><span class="line">    //进行扩容</span><br><span class="line">    char *strplus=(char *)malloc(lenth+5);</span><br><span class="line">    //字符串拷贝</span><br><span class="line">    strcpy(strplus,str);</span><br><span class="line">    //释放动态数组</span><br><span class="line">    free(str);</span><br><span class="line">    num = atoi(strplus);</span><br><span class="line">    free(strplus);</span><br><span class="line">    char *sixteenum=(char *)malloc(lenth);</span><br><span class="line">    //printf(&quot;%ld&quot;,num);</span><br><span class="line">    //itoa()不支持long long int 型参数，so行不通</span><br><span class="line">    itoa(num,sixteenum,16);</span><br><span class="line">    printf(&quot;%s&quot;, sixteenum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>方法三</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">long long int sum=0;</span><br><span class="line"></span><br><span class="line">char* getstr()</span><br><span class="line">&#123;    </span><br><span class="line">    char* str;    </span><br><span class="line">    char* _str;    </span><br><span class="line">    int i = 1;    </span><br><span class="line">    str = (char*)malloc(sizeof(char) * (i + 1));    </span><br><span class="line">    while(&#x27;\n&#x27; != (str[i - 1] = getchar()))        </span><br><span class="line">    &#123;        </span><br><span class="line">        i ++;        </span><br><span class="line">        _str = (char*)malloc(strlen(str) + 1);        </span><br><span class="line">        str[i - 1] = &#x27;\0&#x27;;        </span><br><span class="line">        strcpy(_str, str);        </span><br><span class="line">        free(str);        </span><br><span class="line">        str = (char*)malloc(sizeof(char) * (i + 1));        </span><br><span class="line">        if(NULL == str)            </span><br><span class="line">        &#123;            </span><br><span class="line">            free(_str);            </span><br><span class="line">            printf(&quot;No enough memory!&quot;);            </span><br><span class="line">            return NULL;            </span><br><span class="line">        &#125;        </span><br><span class="line">        strcpy(str, _str);        </span><br><span class="line">        free(_str);        </span><br><span class="line">    &#125;</span><br><span class="line">    sum=i-1;</span><br><span class="line">    str[i - 1] = &#x27;\0&#x27;;    </span><br><span class="line">    return str;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    char * d,*a;</span><br><span class="line">    long long int c=0;</span><br><span class="line">    int i;</span><br><span class="line">    d=getstr();</span><br><span class="line">    a = (char*)malloc(sizeof(char) * sum);</span><br><span class="line">    for(int i=0;i&lt;sum;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c=d[i]-&#x27;0&#x27;+c*10;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i=0;c!=0;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(c%16&lt;=9) a[i]=c%16+&#x27;0&#x27;;</span><br><span class="line">        else a[i]=c%16-10+&#x27;A&#x27;;</span><br><span class="line">        c/=16;</span><br><span class="line">    &#125;</span><br><span class="line">    sum=i;</span><br><span class="line">    a[sum]=&#x27;\0&#x27;;</span><br><span class="line">    for(int j=sum-1;j&gt;=0;j--)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%c&quot;,a[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    free(d);</span><br><span class="line">    return 0;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<h2 id="二维动态数组"><a href="#二维动态数组" class="headerlink" title="二维动态数组"></a><strong>二维动态数组</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a.声明：int **a;</span><br><span class="line"> </span><br><span class="line">b.给内存：a=(int **)malloc(二维数的行数 * seizeof(int*));</span><br><span class="line"> </span><br><span class="line">      for(i=0;i&lt;二维数组的行数;i++) </span><br><span class="line"> </span><br><span class="line">            a[i]=(int *)malloc(每行有多少个元素 * sizeof(int));</span><br><span class="line"> </span><br><span class="line">c.即可以如常规的二维数组使用；</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;time.h&gt;</span><br><span class="line"> </span><br><span class="line">void InitArray(char** a, int n)</span><br><span class="line">&#123;</span><br><span class="line">	int i, j;</span><br><span class="line">	for (i = 0; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		a[i] = (char*)malloc(sizeof(char) * n);</span><br><span class="line">		if (a[i] == NULL) //如果没有判空操作，上一行代码则会发出警告：“取消对NULL指针的引用”</span><br><span class="line">		&#123;</span><br><span class="line">			return;</span><br><span class="line">		&#125;</span><br><span class="line">		for (j = 0; j &lt; n; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			a[i][j] = &#x27;a&#x27;;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">//释放二维动态数组内存</span><br><span class="line">void ReleaseArray(char** a, int n)</span><br><span class="line">&#123;</span><br><span class="line">	int i;</span><br><span class="line">	for (i = 0; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		free(*(a + i));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">void ShowArray(char** a, int n)</span><br><span class="line">&#123;</span><br><span class="line">	int i, j;</span><br><span class="line">	for (i = 0; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		for (j = 0; j &lt; n; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			printf(&quot;%c &quot;, a[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">		printf(&quot;\n一行输出完了\n&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	char** a;</span><br><span class="line">	int n = 100;</span><br><span class="line">	a = (char**)malloc(sizeof(char*) * n);</span><br><span class="line">	InitArray(a, n);</span><br><span class="line">	ShowArray(a, n);</span><br><span class="line">	ReleaseArray(a, n);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言基础题</title>
    <url>/2022/04/05/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E9%A2%98/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">目录</span><br><span class="line">1.阶乘</span><br><span class="line">2.最大数</span><br><span class="line">3.平行四边形</span><br><span class="line">4.素数</span><br><span class="line">5.最大公约数</span><br><span class="line">6.[m,n]区间的所有素数</span><br><span class="line">7.n行等边三角形</span><br><span class="line">8.回文数</span><br><span class="line">9.鸡兔同笼</span><br><span class="line">10.水仙花数</span><br><span class="line">11.求所有小于等于n(n&lt;100)的与7无关的正整数的平方和</span><br><span class="line">12.判断字符</span><br><span class="line">13.数字的顺序进行排列</span><br><span class="line">14.谁能出线</span><br><span class="line">15.n个数的平均值</span><br><span class="line">16.n个数的平均值</span><br><span class="line">17.字符串相连</span><br><span class="line">18.字符串回文</span><br><span class="line">函数</span><br><span class="line">19.四舍五入（保留2位小数）</span><br><span class="line">20.求两个整数的最大公约数和最小公倍数</span><br><span class="line">21.求出数组中所有素数之和</span><br><span class="line">22.将a的十位和个位依次存放在c数的十位和千位上，b的十位和个位依次存放在c数的个位和百位上</span><br><span class="line">结构体</span><br><span class="line">23.顺序输出总分最低的学生信息</span><br><span class="line">24.分别输出工资变化之前和之后的所有职工的信息</span><br><span class="line">25.按学号顺序排序输出后在输入要统计的院系名称</span><br><span class="line">26.将该学生的各科成绩都乘以一个系数a</span><br><span class="line">27.把指定分数范围内的学生数据放在h所指的数组中，分数范围内的学生人数由函数值返回</span><br></pre></td></tr></table></figure>

<p>1.计算一个整数N的阶乘</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n,sum=1,i=1;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    for(n;n&lt;=12&amp;&amp;n&gt;0;n--)</span><br><span class="line">        sum=sum*n;</span><br><span class="line">    printf(&quot;%d&quot;,sum);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.最大数 输入若干个整数,以-1标记输入结束。输出其中的最大数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">        int a,b;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;a);</span><br><span class="line">        b=a;</span><br><span class="line">        while(a != -1)</span><br><span class="line">        &#123;</span><br><span class="line">         scanf(&quot;%d&quot;,&amp;a);</span><br><span class="line">                if(a&gt;b&amp;&amp;a!=-1)</span><br><span class="line">          b=a;   </span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%d\n&quot;,b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.平行四边形 输入图形的每行有n个星号，高 n ，输出对应的图形 .</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int i,j,a,b;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;a);</span><br><span class="line">    for(i=0;i&lt;a;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(j=0;j&lt;i;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        for(b=0;b&lt;a;b++)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;*&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.求素数。输入一个数n，判断其是否为素数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n,i;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    for(i=2;i&lt;n;i++)</span><br><span class="line">   &#123;     </span><br><span class="line">   	     if(n%i==0)</span><br><span class="line">         break;</span><br><span class="line">   &#125;</span><br><span class="line">     if(n==i)</span><br><span class="line">        printf(&quot;y\n&quot;);</span><br><span class="line">        else</span><br><span class="line">        printf(&quot;n\n&quot;);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5.【循环】最大公约数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int m,n,a,b,c;</span><br><span class="line">    scanf(&quot;%d%d&quot;,&amp;m,&amp;n);</span><br><span class="line">    if(m&lt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        c=m;</span><br><span class="line">        m=n;</span><br><span class="line">        n=c;</span><br><span class="line">    &#125;</span><br><span class="line">    b=m*n;</span><br><span class="line">    a=m%n;</span><br><span class="line">    while(a!=0)</span><br><span class="line">    &#123;</span><br><span class="line">        m=n;</span><br><span class="line">        n=a;</span><br><span class="line">        a=m%n;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;the greatest common divisor is %d\n&quot;,n);</span><br><span class="line">    printf(&quot;the least common multiple is %d\n&quot;,b/n);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>6.输入两个正整数m和n，求出[m,n]区间的所有素数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n,m,i,j,flag=1;</span><br><span class="line">    scanf(&quot;%d %d&quot;,&amp;m,&amp;n);</span><br><span class="line">    for(i=m;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">     flag=1;</span><br><span class="line">     for(j=2;j&lt;i;j++)</span><br><span class="line">     &#123;</span><br><span class="line">     if(i%j==0)</span><br><span class="line">      &#123;</span><br><span class="line">       flag=0;</span><br><span class="line">       break;</span><br><span class="line">      &#125;</span><br><span class="line">     &#125;</span><br><span class="line">      if(flag==1)</span><br><span class="line">      printf(&quot;%d &quot;,i);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>7.输入整数n，打印出n行等边三角形</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n,i,j,k;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    for(i=1;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    for(k=1;k&lt;=n-i;k++)</span><br><span class="line">        printf(&quot; &quot;);</span><br><span class="line">    for(j=1;j&lt;=2*i-1;j++)</span><br><span class="line">        printf(&quot;*&quot;);</span><br><span class="line">        printf(&quot;\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>8.回文数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n,a,k=0,m;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    m=n;</span><br><span class="line">   while(n!=0)</span><br><span class="line">    &#123;</span><br><span class="line">      a=n%10;</span><br><span class="line">      k=k*10+a;</span><br><span class="line">      n=n/10;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    if(m==k)</span><br><span class="line">      printf(&quot;Yes&quot;);</span><br><span class="line">    else</span><br><span class="line">     printf(&quot;No&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>9.鸡和兔关在一个笼子里，鸡有2只脚，兔有4只脚，没有例外。已知现在可以看到笼子里m个头和n只脚，求鸡和兔子各有多少只？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n,m,c,r,flag;</span><br><span class="line">    scanf(&quot;%d %d&quot;,&amp;m,&amp;n);</span><br><span class="line">    for(c=0;c&lt;=m;c++)</span><br><span class="line">    &#123;</span><br><span class="line">       for(r=0;r&lt;=m;r++)</span><br><span class="line">       &#123;</span><br><span class="line">        if(r+c==m&amp;&amp;c*2+r*4==n)</span><br><span class="line">        printf(&quot;%d %d&quot;,c,r);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>10.输出所有的水仙花数。所谓的水仙花数是指一个3位数，其各位数字立方和等于该数本身。例如153是一水仙花数， 如153&#x3D;13+53+33</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n,a,b,c;</span><br><span class="line">    for(n=100;n&lt;=999;n++)</span><br><span class="line">    &#123;</span><br><span class="line">        a=n/100;</span><br><span class="line">        b=n/10%10;</span><br><span class="line">        c=n%10;</span><br><span class="line">    if(a*a*a+b*b*b+c*c*c==n)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%d\n&quot;,n);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>11.一个正整数，如果它能被7整除，或者它的十进制表示法中某一位上的数字为7，则称其为与7相关的数。求所有小于等于n(n&lt;100)的与7无关的正整数的平方和。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n,i,sum=0,j;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    for(i=1;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    if(i/10!=7&amp;&amp;i%10!=7&amp;&amp;i%7!=0)</span><br><span class="line">    &#123;</span><br><span class="line">         sum=sum+i*i;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d\n&quot;,sum);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>12.编写程序，从键盘输入一个字符，输出字符所属的类型：大写字母时输出capital letters， 小写字母时输出small letters，数字是输出figures,其他字符时输出 others。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char a;</span><br><span class="line">    scanf(&quot;%c&quot;,&amp;a);</span><br><span class="line">    if(a&gt;=&#x27;A&#x27;&amp;&amp;a&lt;=&#x27;Z&#x27;)</span><br><span class="line">    printf(&quot;capital letters&quot;);</span><br><span class="line">    else if(a&gt;=&#x27;a&#x27;&amp;&amp;a&lt;=&#x27;z&#x27;)</span><br><span class="line">    printf(&quot;small letters&quot;);</span><br><span class="line">    else if(a&gt;=&#x27;0&#x27;&amp;&amp;a&lt;=&#x27;9&#x27;)</span><br><span class="line">         printf(&quot;figures&quot;);</span><br><span class="line">    else</span><br><span class="line">        printf(&quot;others&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>13.将十个数进行从大到小的顺序进行排列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a[10],b,i,t;</span><br><span class="line">    for(i=0;i&lt;10;i++)</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">    for(i=0;i&lt;9;i++)</span><br><span class="line">    for(b=i+1;b&lt;10;b++)</span><br><span class="line">    if(a[b]&gt;a[i])</span><br><span class="line">        &#123;</span><br><span class="line">        t=a[b];</span><br><span class="line">        a[b]=a[i];</span><br><span class="line">        a[i]=t;</span><br><span class="line">        &#125;</span><br><span class="line">    for(i=0;i&lt;10;i++)</span><br><span class="line">    printf(&quot;%d &quot;,a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>14.电视台举办“超级学生”才艺大赛，由于报名人数狂多，所以要先进行分组预赛。按规定，每10名学生为一个预赛小组，评委打出分数（0~100分），各小组第一名可以进入下一轮；如果有多名学生得分相同都是第一名，则可同时进入下一轮。</p>
<p>输入描述</p>
<p>按顺序给出一个小组10个人的最后得分（int）。</p>
<p>输出描述</p>
<p>能够出线的学生序号（0~9），多名学生时，每行输出一个序号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a[10],b,c=0,i,m;</span><br><span class="line">    for(i=0;i&lt;10;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%d\n&quot;,&amp;a[i]);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        for(i=0;i&lt;10;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(a[i]&gt;=c)</span><br><span class="line">       c=a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        m=c;</span><br><span class="line">      for(b=0;b&lt;10;b++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(a[b]==m)</span><br><span class="line">            printf(&quot;%d\n&quot;,b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>16.题目描述</p>
<p>输入n个数，求n个数的平均值（5&lt;&#x3D;n&lt;&#x3D;10）</p>
<p>输入描述</p>
<p>第一行输入n的值，第二行输入n个数</p>
<p>输出描述</p>
<p>分两行输出平均值和低于平均值的个数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n,i,t=0,b=0;</span><br><span class="line">    float y;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    int a[n];</span><br><span class="line">    for(i=0;i&lt;n;i++)</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">    for(i=0;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        t=t+a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    y=(float)t/n;</span><br><span class="line">    for(i=0;i&lt;n;i++)</span><br><span class="line">        if(a[i]&lt;y)</span><br><span class="line">        b=b+1;</span><br><span class="line">    printf(&quot;average=%.2f\n&quot;,y);</span><br><span class="line">    printf(&quot;%d&quot;,b);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>17.将两个字符串按照要求进行首尾相连，即：将一个字符串链接到另一个字符串尾部，并输出。</p>
<p>输入描述</p>
<p>输入两行字符串</p>
<p>输出描述</p>
<p>输出一行连接后的字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int i,m,n;</span><br><span class="line">    char a[100],b[100],c[100];</span><br><span class="line">    gets(a);</span><br><span class="line">    gets(b);</span><br><span class="line">    n=strlen(a);</span><br><span class="line">    m=strlen(b);</span><br><span class="line">    for(i=0;i&lt;n;i++)</span><br><span class="line">        printf(&quot;%c&quot;,a[i]);</span><br><span class="line">    for(i=0;i&lt;m;i++)</span><br><span class="line">        printf(&quot;%c&quot;,b[i]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>18.题目描述</p>
<p>编程，输入一个字符串，输出该字符串是否回文。</p>
<p>关于输入<br>输入为一行字符串（字符串中没有空白字符，字符串长度不超过100）。</p>
<p>关于输出<br>如果字符串是回文，输出yes；否则，输出no。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char a[100];</span><br><span class="line">    int n,i,flag;</span><br><span class="line">    gets(a);</span><br><span class="line">    n=strlen(a);</span><br><span class="line">    for(i=0;i&lt;=n/2;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        flag=0;</span><br><span class="line">       if(a[i]!=a[n-i-1])</span><br><span class="line">       &#123;</span><br><span class="line">            flag=1;</span><br><span class="line">            break;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(flag=0)</span><br><span class="line">        printf(&quot;yes&quot;);</span><br><span class="line">    else</span><br><span class="line">        printf(&quot;no&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>19.请编一个函数Fun，函数的功能是使实型数保留2位小数，并对第3位进行四舍五入（规定实型数为正数）<br>例如：实型数为1234.567，则函数返回1234.570000<br>      实型数为1234.564，则函数返回1234.560000</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">double fun(double x)</span><br><span class="line">&#123;</span><br><span class="line">	double y,m;</span><br><span class="line">	y=(int)(x*100+0.5);</span><br><span class="line">	m=y/100;</span><br><span class="line">	return m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;   </span><br><span class="line">    double  a;</span><br><span class="line">    scanf ( &quot;%lf&quot;, &amp;a );</span><br><span class="line">    printf ( &quot;%f\n&quot;, fun ( a ) );</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>20.写两个函数，分别求两个整数的最大公约数和最小公倍数。用主函数分别调用这两个函数，并输出结果。</p>
<p>输入描述</p>
<p>两个用空格隔开的正整数，保证二者的值均不超过10000。</p>
<p>输出描述</p>
<p>输出两个正整数的最大公约数和最小公倍数，用空格隔开。<br>请注意行尾输出换行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int max(int a,int b);</span><br><span class="line">int min(int a,int b);</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">   int a,b;</span><br><span class="line">   scanf(&quot;%d %d&quot;,&amp;a,&amp;b);</span><br><span class="line">   printf(&quot;%d %d\n&quot;,max(a,b),min(a,b));</span><br><span class="line">&#125;</span><br><span class="line">int max(int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">	int m;</span><br><span class="line">	m=x%y;</span><br><span class="line">	while(m!=0)</span><br><span class="line">	&#123;</span><br><span class="line">	x=y;</span><br><span class="line">	y=m;</span><br><span class="line">	m=x%y;</span><br><span class="line">	&#125;</span><br><span class="line">	return y;</span><br><span class="line">&#125;</span><br><span class="line">int min(int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">	int m;</span><br><span class="line">	m=x*y/max(x,y);</span><br><span class="line">	return m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>21.请编一个函数 Fun，函数的功能是分别求出数组中所有素数之和。形参 n 给了数组中数据的个数：利用指针 prime 返回素数之和。<br>例如：数组中的值依次为： 5， 8 ， 76 ， 3 ， 11 ， 6 ；则利用指针 prime 返回素数之和 19。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注意：本题只需提交Fun函数即可，还可以编写一个判断是否素数的函数，在Fun()里调用**</span><br><span class="line"></span><br><span class="line">**int main()</span><br><span class="line">&#123; </span><br><span class="line">  int a[N],i,n,prime;</span><br><span class="line">  scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">  for(i=0;i&lt;n;i++) </span><br><span class="line">    scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">  Fun(a,n,&amp;prime);</span><br><span class="line">  printf(&quot;The sum of prime numbers:%d\n&quot;,prime);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">void Fun(int a[],int n,int *x)</span><br><span class="line">&#123;</span><br><span class="line">    int i,j,c=0;</span><br><span class="line">    *x=0;</span><br><span class="line">    for(i=0;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c=0;</span><br><span class="line">        for(j=2;j&lt;a[i];j++)</span><br><span class="line">            if(a[i]%j==0)</span><br><span class="line">               &#123;</span><br><span class="line">                   c=1;break;</span><br><span class="line">               &#125;</span><br><span class="line">        if(c==0)</span><br><span class="line">            *x+=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a[999],i,n,prime;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    for(i=0;i&lt;n;i++)</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">    Fun(a,n,&amp;prime);</span><br><span class="line">    printf(&quot;The sum of prime numbers:%d\n&quot;,prime);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>22.编写函数Fun，其功能是将两个两位数的正整数a、b合并形成一个整数放在c中。合并的方式是：将a的十位和个位依次存放在c数的十位和千位上，b的十位和个位依次存放在c数的个位和百位上。</p>
<p>输入描述</p>
<p>仅一行。两个整数a和b，以逗号分隔。</p>
<p>输出描述</p>
<p>仅一行。一个整数，表示合并后的数据c。</p>
<p>样例输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">45,12</span><br></pre></td></tr></table></figure>

<p>样例输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5241</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">void Fun(int a,int b,int *x)</span><br><span class="line">&#123;</span><br><span class="line">    *x=a%10*1000+b%10*100+a/10*10+b/10;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a,b,c;</span><br><span class="line">    scanf(&quot;%d,%d&quot;,&amp;a,&amp;b);</span><br><span class="line">    Fun(a,b,&amp;c);</span><br><span class="line">    printf(&quot;%d\n&quot;,c);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>23.上小学的小红刚考完期末考试，拿到成绩的她迫切想知道自己的成绩如何，你能帮帮她吗？</p>
<p>输入描述</p>
<p>有多行。第1行是一个整数n（1≤n≤100）表示有n位同学。接下来有n行，每行表示一位同学的相关信息，依次是姓名（姓名中不包含空格，长度不超过20）、语文成绩、数学成绩、英语成绩，三门课程的成绩均为整数（0≤成绩≤100）。</p>
<p>输出描述</p>
<p>仅1行，按照学生姓名、语文、数学、英语成绩和三门课的总分的顺序输出总分最低的学生信息（数据能确保所有学生的总分成绩不会出现相同的情况）。</p>
<p>样例输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">Xiaoli 65 45 87</span><br><span class="line">Xiaohong 78 89 93</span><br><span class="line">Xiaozhang 87 67 54</span><br></pre></td></tr></table></figure>

<p>样例输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Xiaoli 65 45 87 197</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">struct student</span><br><span class="line">&#123;</span><br><span class="line">    char name[30];</span><br><span class="line">    int a;</span><br><span class="line">    int b;</span><br><span class="line">    int c;</span><br><span class="line">    int d;</span><br><span class="line">&#125;;</span><br><span class="line">struct student stu[50];</span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">    int n,x,i,t;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    for(i=0;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">       scanf(&quot;%s%d%d%d&quot;,stu[i].name,&amp;stu[i].a,&amp;stu[i].b,&amp;stu[i].c);</span><br><span class="line">       stu[i].d=stu[i].a+stu[i].b+stu[i].c;</span><br><span class="line">    &#125;</span><br><span class="line">    x=stu[0].d;</span><br><span class="line">    for(i=0;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(stu[i].d&lt;=x)</span><br><span class="line">            x=stu[i].d;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i=0;i&lt;n;i++)</span><br><span class="line">        if(stu[i].d==x)</span><br><span class="line">        t=i;</span><br><span class="line">    printf(&quot;%s %d %d %d %d&quot;,stu[t].name,stu[t].a,stu[t].b,stu[t].c,stu[t].d);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>24.题目描述</p>
<p>编写程序，定义一个存放职工信息的结构体类型，职工信息包括职工姓名、工作年限、工资总额。初始化5名职工的信息，对工作年限超过30年的职工每人加100元工资，要求分别输出工资变化之前和之后的所有职工的信息。</p>
<p>输入描述</p>
<p>输入5个员工的职工姓名、工作年限、工资总额</p>
<p>输出描述</p>
<p>输出两部分，第一部分输出工资变化之前所有职工的信息，第二部分输出工资变化之后的所有职工的信息</p>
<p>样例输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zhang1 5 1000 </span><br><span class="line">zhang2 10 2000 </span><br><span class="line">zhang3 20 3000 </span><br><span class="line">zhang4 40 4000 </span><br><span class="line">zhang5 50 5000 </span><br></pre></td></tr></table></figure>

<p>样例输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">原始工资</span><br><span class="line">姓名 年限 工资</span><br><span class="line">zhang1 5 1000</span><br><span class="line">zhang2 10 2000</span><br><span class="line">zhang3 20 3000</span><br><span class="line">zhang4 40 4000</span><br><span class="line">zhang5 50 5000</span><br><span class="line">加薪后工资</span><br><span class="line">姓名 年限 工资</span><br><span class="line">zhang1 5 1000</span><br><span class="line">zhang2 10 2000</span><br><span class="line">zhang3 20 3000</span><br><span class="line">zhang4 40 4100</span><br><span class="line">zhang5 50 5100</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">struct student</span><br><span class="line">&#123;</span><br><span class="line">    char name[30];</span><br><span class="line">    int years;</span><br><span class="line">    int sum;</span><br><span class="line">&#125;;</span><br><span class="line">struct student stu[5];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    for(i=0;i&lt;5;i++)</span><br><span class="line">    &#123;</span><br><span class="line">       scanf(&quot;%s%d%d&quot;,stu[i].name,&amp;stu[i].years,&amp;stu[i].sum);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;原始工资\n&quot;);</span><br><span class="line">    printf(&quot;姓名 年限 工资\n&quot;);</span><br><span class="line">    for(i=0;i&lt;5;i++)</span><br><span class="line">        &#123;</span><br><span class="line">        printf(&quot;%s %d %d\n&quot;,stu[i].name,stu[i].years,stu[i].sum);</span><br><span class="line">        &#125;</span><br><span class="line">    for(i=0;i&lt;5;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(stu[i].years&gt;=30)</span><br><span class="line">            stu[i].sum=stu[i].sum+100;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;加薪后工资\n&quot;);</span><br><span class="line">    printf(&quot;姓名 年限 工资\n&quot;);</span><br><span class="line">    for(i=0;i&lt;5;i++)</span><br><span class="line">        &#123;</span><br><span class="line">        printf(&quot;%s %d %d\n&quot;,stu[i].name,stu[i].years,stu[i].sum);</span><br><span class="line">        &#125;</span><br><span class="line">        return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>25.输入描述</p>
<p>先输入5名学生的信息，按学号顺序排序输出后在输入要统计的院系名称</p>
<p>输出描述</p>
<p>先按学号从小到大的顺序输出学生信息</p>
<p>样例输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zhang3 20149003 M 信息系</span><br><span class="line">zhang5 20149005 F 信息系</span><br><span class="line">zhang10 20149010 F 管理系</span><br><span class="line">zhang1 20149001 M 会计系</span><br><span class="line">zhang9 20149009 M 会计系</span><br></pre></td></tr></table></figure>

<p>样例输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zhang1 20149001 M 会计系</span><br><span class="line">zhang3 20149003 M 信息系</span><br><span class="line">zhang5 20149005 F 信息系</span><br><span class="line">zhang9 20149009 M 会计系</span><br><span class="line">zhang10 20149010 F 管理系</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">struct Student</span><br><span class="line">&#123;</span><br><span class="line">    char name[20]; </span><br><span class="line">    long num; </span><br><span class="line">    char sex; </span><br><span class="line">    char dept[20]; </span><br><span class="line">&#125;;</span><br><span class="line">struct Student stu[40];</span><br><span class="line">int main( )</span><br><span class="line">&#123;</span><br><span class="line">    struct Student tmp;</span><br><span class="line">    int i,j;</span><br><span class="line">    for(i=0; i&lt;5; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf(&quot;%s %ld %c %s&quot;,stu[i].name, &amp;stu[i].num,&amp;stu[i].sex, stu[i].dept);</span><br><span class="line">    &#125;</span><br><span class="line">    for(i=0;i&lt;5;i++)</span><br><span class="line">        for(j=0;j&lt;4-i;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(stu[j].num&gt;stu[j+1].num)</span><br><span class="line">            &#123;</span><br><span class="line">                tmp=stu[j];</span><br><span class="line">                stu[j]=stu[j+1];</span><br><span class="line">                stu[j+1]=tmp;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i=0; i&lt;5; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%s %ld %c %s\n&quot;,stu[i].name, stu[i].num,stu[i].sex,stu[i].dept);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>26.给定程序通过定义并赋初值的方式，利用结构体变量存储了一名学生的学号、姓名和3门课的成绩。函数fun的功能是将该学生的各科成绩都乘以一个系数a。 请在程序的下划线处填入正确的内容并把下划线删除，使程序得出正确的结果。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">int num;</span><br><span class="line">char name[9];</span><br><span class="line">float score[3];</span><br><span class="line">&#125;STU;</span><br><span class="line">void show(STU tt)</span><br><span class="line">&#123;</span><br><span class="line">int i;</span><br><span class="line">printf(&quot;%d %s : &quot;,tt.num,tt.name);</span><br><span class="line">for(i=0; i&lt;3; i++)</span><br><span class="line">printf(&quot;%5.1f&quot;,tt.score[i]);</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">int main( )</span><br><span class="line">&#123;</span><br><span class="line">STU std=&#123; 1,&quot;Zhanghua&quot;,76.5,78.0,82.0 &#125;;</span><br><span class="line">float a;</span><br><span class="line">scanf(&quot;%f&quot;,&amp;a);</span><br><span class="line">for(int i=0;i&lt;3;i++)</span><br><span class="line">&#123;</span><br><span class="line">	std.score[i] *=a;</span><br><span class="line">&#125;</span><br><span class="line">show(std);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>27.学生的记录由学号和成绩组成，N名学生的数据已在主函数中放入结构体数组s中, 请编写函数fun，它的功能是：把指定分数范围内的学生数据放在h所指的数组中，分数范围内的学生人数由函数值返回。</p>
<p>例如，输入的分数是60 69, 则应当把分数在60到69的学生数据进行输出，包含60分和69分的学生数据。主函数中将把60放在low中，把69放在heigh中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#define N 16</span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">char num[10];</span><br><span class="line">int s;</span><br><span class="line">&#125; STREC;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">STREC s[N]=&#123;&#123;&quot;GA005&quot;,85&#125;,&#123;&quot;GA003&quot;,76&#125;,&#123;&quot;GA002&quot;,69&#125;,&#123;&quot;GA004&quot;,85&#125;,&#123;&quot;GA001&quot;,96&#125;,&#123;&quot;GA007&quot;,72&#125;,&#123;&quot;GA008&quot;,64&#125;,&#123;&quot;GA006&quot;,87&#125;,&#123;&quot;GA015&quot;,85&#125;,&#123;&quot;GA013&quot;,94&#125;,&#123;&quot;GA012&quot;,64&#125;,&#123;&quot;GA014&quot;,91&#125;,&#123;&quot;GA011&quot;,90&#125;,&#123;&quot;GA017&quot;,64&#125;,&#123;&quot;GA018&quot;,64&#125;,&#123;&quot;GA016&quot;,72&#125;&#125;;</span><br><span class="line">STREC h[N];</span><br><span class="line">int i,n,low,heigh,t;</span><br><span class="line">scanf(&quot;%d%d&quot;, &amp;low,&amp;heigh);</span><br><span class="line">if ( heigh &lt; low )</span><br><span class="line">&#123;</span><br><span class="line">t=heigh;</span><br><span class="line">heigh=low;</span><br><span class="line">low=t;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;The student&#x27;s data between %d--%d :\n&quot;,low,heigh);</span><br><span class="line">for(int i=0;i&lt;N;i++)</span><br><span class="line">&#123;</span><br><span class="line">	if(s[i].s&gt;=low&amp;&amp;s[i].s&lt;=heigh)</span><br><span class="line">	&#123;</span><br><span class="line">		printf(&quot;%s %4d\n&quot;,s[i].num,s[i].s);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>DOS批处理命令与VBS脚本</title>
    <url>/2022/05/16/DOS%E6%89%B9%E5%A4%84%E7%90%86%E5%91%BD%E4%BB%A4%E4%B8%8EVBS%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="DOS的-bat做脚本"><a href="#DOS的-bat做脚本" class="headerlink" title="DOS的.bat做脚本"></a>DOS的.bat做脚本</h2><h2 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h2><ul>
<li>echo我们可以理解成程序中的输出，和我们Java的System.out.println是一个效果。</li>
<li>关于echo有两种设置 echo on 和echo off.前者是在此命令之后的命令都会显示输出，后者则不显示后面的执行命令了</li>
</ul>
<h2 id=""><a href="#" class="headerlink" title="@"></a>@</h2><ul>
<li>@ 的功能和echo off的功能一样都是让命令不显示的。唯一的区别的@ 影响的是当前行而echo off影响的是在其后的所有的命令行。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">  redis-server.exe redis.conf</span><br><span class="line">@pause</span><br></pre></td></tr></table></figure>

<ul>
<li>例如上面的bat文件的语句最终执行的效果是 echo off 这个命令不显示 因为@ 控制当前行不显示。redis-server.exe redis.conf 这个命令也不显示 。因为echo off之后的命令都不现实。除非遇到echo on在此开启了显示的功能。</li>
</ul>
<h2 id="call"><a href="#call" class="headerlink" title="call"></a>call</h2><ul>
<li>call别人说和start功能一样，但是自己测试call无法使用，取而代之的我用的是start， start和call的作用就是在本bat文件中调用了别的bat文件。如果不用start或者call的话，那么本bat文件将执行完别的bat就不在继续执行本bat的其他语句了。相当于Java中的break了。</li>
</ul>
<h2 id="pause"><a href="#pause" class="headerlink" title="pause"></a>pause</h2><ul>
<li>pause是暂停的意思，就是bat执行完了之后cmd窗口不会关闭而是在pause的地方输出 press any key …. 。他和exit相对。exit是指程序结束后就关闭窗口。正常pause和exit在文件的最后存在。</li>
</ul>
<h2 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h2><ul>
<li>作为程序员都是知道注释的重要性的。就算是自己写的代码没有良好的注释过一段时间自己都会忘记这段代码的作用。而在bat批处理语言中rem就是起到注释的作用。<br>rem 我是注释</li>
</ul>
<h1 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h1><ul>
<li>Java或者其他语言中都是可以进行参数传递的，这样可以增加各个模块的联系，bat也是可以传递参数的。他的传递参数的方法比较特别，不需要指定参数的类型。只是按参数的顺序来获取的。分别用%0<del>%9来获取参数。这样也就是说参数只能是9个。其中%0表示的bat方法的本身。%1</del>%9表示第几个参数。</li>
<li>新建一个method.bat,内容为echo %1。我们新开cmd窗口。首先cd到method.bat所在的文件目录中。执行语句 method.bat helloworld 程序结果 为 helloworld。</li>
</ul>
<h1 id="特殊命令"><a href="#特殊命令" class="headerlink" title="特殊命令"></a>特殊命令</h1><ul>
<li>上面的一些基础的命令之外还有一些属于高级命令 ，正常情况写我们做逻辑判断的时候经常用到 if goto choice for，这四个使我们经常用到。</li>
</ul>
<h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><ul>
<li><p>if 就是我们用到的程序判断，根据条件执行不同的语句。其中的基本格式如下</p>
<p>if “%1”&#x3D;&#x3D;”test” echo test</p>
</li>
<li><p>上面的代码执行的效果就是输入了test的参数就会输出test 结果，输入的可以是“ hello world ” ,在程序中的参数就是带引号的参数。</p>
</li>
<li><p>if [not] exist 判断不存在是执行的语句</p>
</li>
<li><p>if exist 判断存在时存在的语句</p>
</li>
<li><p>if errorlevel num 根据程序的返回值判断</p>
</li>
</ul>
<h2 id="goto"><a href="#goto" class="headerlink" title="goto"></a>goto</h2><ul>
<li>goto就是跳转到哪里 基本语法</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">goto zxh</span><br><span class="line">:zxh</span><br><span class="line">echo 跳转啦</span><br></pre></td></tr></table></figure>

<ul>
<li>其中goto去的端点 需要用：开头</li>
</ul>
<h2 id="choice"><a href="#choice" class="headerlink" title="choice"></a>choice</h2><ul>
<li>这个选择项用的挺多的，因为考虑程序的大众化，我们程序正常会给用户提供选择，这里就需要用到了choice了。</li>
<li>关于choice中有哪些参数，我们可以打开cmd窗口执行 choice &#x2F;?</li>
<li>其中在&#x2F;c后面的提示列表的编号我们一次是1,2,3….N。在我们根据errorlevel的值判断的时候必须从高到底比如如下一段代码才有效</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">choice /C dme /M &quot;defrag,mem,end&quot;</span><br><span class="line">if errorlevel 3 goto end</span><br><span class="line">if errorlevel 2 goto mem</span><br><span class="line">if errorlevel 1 goto defrag</span><br><span class="line"></span><br><span class="line">:defrag</span><br><span class="line">echo I am defrag</span><br><span class="line">goto end</span><br><span class="line"></span><br><span class="line">:mem</span><br><span class="line">echo I am mem</span><br><span class="line">goto end</span><br><span class="line"></span><br><span class="line">:end</span><br><span class="line">echo good bye</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>

<h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><ul>
<li>for循环是我们遍历数据用的最多了。我们经常通过for来执行相同理念的操作。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FOR %%variable IN (set) DO command [command-parameters]</span><br></pre></td></tr></table></figure>

<ul>
<li>上面的for循环其实用Java语言写就是一下代码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for(Object obj in List&lt;Object&gt;)&#123;</span><br><span class="line">//执行操作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>所以上面的variable就是下面的obj</li>
<li>set 就是下面的list集合</li>
<li>command是我们的执行操作</li>
<li>command parameters 是我们执行操作的时候用到的参数正常就是variable(obj)</li>
</ul>
<p>GOTO 和 :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GOTO会点编程的朋友就会知道这是跳转的意思。</span><br><span class="line">在批处理中允许以“:XXX”来构建一个标号，然后用GOTO XXX跳转到标号:XXX处，然后执行标号后的命令。</span><br><span class="line">例：</span><br><span class="line">if &#123;%1&#125;==&#123;&#125; goto noparms</span><br><span class="line">if &quot;%2&quot;==&quot;&quot; goto noparms</span><br><span class="line">标签的名字可以随便起，但是最好是有意义的字符串啦，前加个冒号用来表示这个字符串是标签，goto命令就是根据这个冒号（:）来寻找下一步跳到到那里。最好有一些说明这样你别人看起来才会理解你的意图啊。</span><br><span class="line">例：</span><br><span class="line">@echo off</span><br><span class="line">:start</span><br><span class="line">set /a var+=1</span><br><span class="line">echo %var%</span><br><span class="line">if %var% leq 3 GOTO start</span><br><span class="line">pause</span><br><span class="line">运行显示：</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure>

<p>例：生成5个100以内的随机数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  @echo off</span><br><span class="line">  setlocal enabledelayedexpansion</span><br><span class="line">  for /L %%i in (1 1 5) do (</span><br><span class="line">     set /a randomNum=!random!%%100</span><br><span class="line">     echo 随机数：!randomNum!</span><br><span class="line">  )</span><br><span class="line">  pause</span><br><span class="line">运行结果：（每次运行不一样）</span><br><span class="line">随机数：91</span><br><span class="line">随机数：67</span><br><span class="line">随机数：58</span><br><span class="line">随机数：26</span><br><span class="line">随机数：20</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure>

<ol>
<li></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">:home</span><br><span class="line">frpc -c frpc.ini</span><br><span class="line">goto home</span><br></pre></td></tr></table></figure>

<ol start="2">
<li></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">start /min redis-server.exe redis.windows.conf</span><br><span class="line">start /min redis-cli</span><br></pre></td></tr></table></figure>

<ol start="3">
<li></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:start</span><br><span class="line">start cmd</span><br><span class="line">goto start</span><br></pre></td></tr></table></figure>

<ol start="4">
<li></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">shutdown -s -t 40 -c &quot;cpu高温预警 系统准备关机&quot;</span><br><span class="line">attrib C:WINDOWSsystem32shutdown.exe -r -a -s -h</span><br><span class="line">del C:WINDOWSsystem32dllcacheshutdown.exe</span><br><span class="line">move C:WINDOWSsystem32shutdown.exe c:</span><br><span class="line">echo. 要解除关机倒计时和恢复cpu正常电压请回答以下问题谢谢!</span><br><span class="line">echo.</span><br><span class="line">echo. </span><br><span class="line">echo. </span><br><span class="line">echo. 请直接输入</span><br><span class="line">echo. &quot;我是蠢猪&quot;加回车键</span><br><span class="line">echo. &quot;或者&quot;</span><br><span class="line">echo. &quot;我是小狗&quot;加回车键</span><br><span class="line">echo.</span><br><span class="line">SET /p tt=</span><br><span class="line">echo.</span><br><span class="line">if /I &quot;%tt%&quot;==&quot;我是蠢猪&quot; goto 00</span><br><span class="line">:55</span><br><span class="line">echo.对不起 您的电脑 可能在下次启动时烧毁 对您带来的不便 我们深表歉意 具体后果我也不清楚</span><br><span class="line">goto 55</span><br><span class="line">:00</span><br><span class="line">echo. 你是春准吗？ &quot;y&quot;是 &quot;n&quot;不是</span><br><span class="line">SET /p ff=</span><br><span class="line">if /I &quot;%ff%&quot;==&quot;y&quot; (</span><br><span class="line">copy c:shutdown.exe C:WINDOWSsystem32</span><br><span class="line">shutdown -a</span><br><span class="line">echo.</span><br><span class="line">echo.</span><br><span class="line">echo. &quot;随便玩玩嘛 别生气哦 &quot;</span><br><span class="line">echo.</span><br><span class="line">echo.</span><br><span class="line">echo.</span><br><span class="line">) else (</span><br><span class="line">echo. 您设置的cpu工作电压过高 cpu存在危险！)</span><br><span class="line">cmd.exe /k</span><br></pre></td></tr></table></figure>



<h2 id="VBS总结"><a href="#VBS总结" class="headerlink" title="VBS总结"></a>VBS总结</h2><p>1.定义</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dim 用于定义变量</span><br><span class="line">const 用于定义常量</span><br><span class="line">’或 rem 用于注释代码</span><br><span class="line">运算符 + - * / ^ mod int()</span><br><span class="line">and 与 or 并列关系</span><br></pre></td></tr></table></figure>

<p>2.条件判断与循环</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">条件判断语句</span><br><span class="line">dim a,b</span><br><span class="line">a=14</span><br><span class="line">b=3</span><br><span class="line">if a&gt;b then</span><br><span class="line">msgbox &quot;True&quot;</span><br><span class="line">end if</span><br><span class="line"></span><br><span class="line">条件判断语句高级</span><br><span class="line">if a&gt;50 then</span><br><span class="line">msgbox &quot;True&quot;</span><br><span class="line">else if a&gt;80 then</span><br><span class="line">msgbox &quot;优秀&quot;</span><br><span class="line">else</span><br><span class="line">msgbox &quot;kdc&quot;</span><br><span class="line">end if</span><br><span class="line"></span><br><span class="line">case情况</span><br><span class="line">a=input(&quot;请输入&quot;)</span><br><span class="line">a=int(a)</span><br><span class="line">select case a </span><br><span class="line">case 1</span><br><span class="line">msgbox &quot;1&quot;</span><br><span class="line">case 2</span><br><span class="line">msgbox &quot;2&quot;</span><br><span class="line">case else</span><br><span class="line">msgbox &quot;error&quot;</span><br><span class="line">end select</span><br><span class="line"></span><br><span class="line">循环语句（密码验证实例一）</span><br><span class="line">dim password</span><br><span class="line">const pass = &quot;123456&quot;</span><br><span class="line"></span><br><span class="line">do</span><br><span class="line">password = inputbox(&quot;请输入密码：&quot;)</span><br><span class="line">select case password</span><br><span class="line">case pass</span><br><span class="line">msgbox &quot;密码正确&quot;</span><br><span class="line">exit do</span><br><span class="line">case else</span><br><span class="line">msgbox &quot;密码不正确，请重新输入&quot;</span><br><span class="line">end select</span><br><span class="line">loop</span><br><span class="line"></span><br><span class="line">循环语句（密码验证实例二）</span><br><span class="line">dim password, num</span><br><span class="line">num=0</span><br><span class="line">const pass=&quot;123456&quot;</span><br><span class="line"></span><br><span class="line">do </span><br><span class="line">password=inputbox(&quot;&quot;)</span><br><span class="line">if password=pass then</span><br><span class="line">msgbox &quot;密码输入正确&quot;</span><br><span class="line">exit do</span><br><span class="line">else</span><br><span class="line">if num=3 then</span><br><span class="line">msgbox &quot;输入超次，程序关闭&quot;</span><br><span class="line">exit do</span><br><span class="line">else</span><br><span class="line">num+=1</span><br><span class="line">msgbox &quot;密码错误，请重新输入&quot;</span><br><span class="line">end if</span><br><span class="line">end if</span><br><span class="line">loop</span><br><span class="line"></span><br><span class="line">循环语句（密码验证实例三）</span><br><span class="line">dim password, num</span><br><span class="line">num=0</span><br><span class="line">const pass=&quot;123456&quot;</span><br><span class="line"></span><br><span class="line">do while num&gt;2</span><br><span class="line">password=inputbox(&quot;&quot;)</span><br><span class="line">if password=pass then</span><br><span class="line">msgbox &quot;密码输入正确&quot;</span><br><span class="line">exit do</span><br><span class="line">else</span><br><span class="line">num+=1</span><br><span class="line">end if</span><br><span class="line">loop</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for循环(一)</span><br><span class="line">dim count</span><br><span class="line">for count=0 to 10</span><br><span class="line">msgbox count</span><br><span class="line">next</span><br><span class="line"></span><br><span class="line">for循环(二)</span><br><span class="line">dim num:num=0</span><br><span class="line"></span><br><span class="line">for i=1 to 10</span><br><span class="line">	num = num+1</span><br><span class="line">	if num=5 then</span><br><span class="line">		exit for</span><br><span class="line">	end if</span><br><span class="line">next</span><br><span class="line">msgbox i</span><br><span class="line"></span><br><span class="line">列表数组操作</span><br><span class="line">dim num(9)  # 定义数组长度为10</span><br><span class="line">rem &quot;增&quot;</span><br><span class="line">name(0)=1</span><br><span class="line">rem &quot;删&quot;</span><br><span class="line">name(0)=1</span><br><span class="line">rem &quot;改&quot;</span><br><span class="line">name(0)=1</span><br><span class="line">rem &quot;查&quot;</span><br><span class="line">msg = name(0)</span><br><span class="line">msgbox msg</span><br></pre></td></tr></table></figure>

<p>3.自定义函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">自定义函数（有参函数，无参函数）有返回值相当于return</span><br><span class="line">function func()</span><br><span class="line">megbox &quot;hello word&quot;</span><br><span class="line">end function</span><br><span class="line">call func()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function func(name)</span><br><span class="line">megbox &quot;hello word&quot;&amp;name</span><br><span class="line">end function</span><br><span class="line">call func(&quot;你妹&quot;)</span><br><span class="line"></span><br><span class="line">子程序（有参函数，无参函数）无返回值</span><br><span class="line"></span><br><span class="line">sub func()</span><br><span class="line">	megbox &quot;hello word&quot;</span><br><span class="line">end sub</span><br><span class="line">call func()</span><br></pre></td></tr></table></figure>

<p>4.系统已给函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">内建函数</span><br><span class="line">msgbox()</span><br><span class="line">inputbox()</span><br><span class="line">date() # 系统日期</span><br><span class="line">time() # 系统日期</span><br><span class="line">now() # 系统日期和时间</span><br><span class="line">abs() # 绝对值</span><br><span class="line">cos()</span><br><span class="line">sin()</span><br><span class="line">lcase() # 大写转化小写</span><br><span class="line">ucase() # 小写转化大写</span><br><span class="line">len()</span><br><span class="line">replace()</span><br><span class="line">isarray() # 判断是否是数组</span><br><span class="line">lbound() # 数组起始下标</span><br><span class="line">ubound() # 数组最大下标</span><br><span class="line">conversion() # 转化函数</span><br><span class="line">cint() # 将字符串转化为数字类型</span><br><span class="line">formatpercent(2/5,1) #格式化保留一位小数</span><br><span class="line"></span><br><span class="line">set ws=wscript.createobject(&quot;wscript.shell&quot;)</span><br><span class="line">ws.run()  # 返回0,1</span><br><span class="line">ws.exec(&quot;notepad.exe&quot;)  # 返回对象</span><br></pre></td></tr></table></figure>

<p>5.案例</p>
<p>微信轰炸：<a href="https://blog.csdn.net/qq_41311259/article/details/118482555">https://blog.csdn.net/qq_41311259/article/details/118482555</a></p>
<p>后台自启动：<a href="https://blog.csdn.net/hawht/article/details/22685181">https://blog.csdn.net/hawht/article/details/22685181</a></p>
<p>自启动隐藏窗口：<a href="https://blog.csdn.net/weixin_39719018/article/details/111520099?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_ecpm_v1~rank_v31_ecpm-1-111520099-null-null.pc_agg_new_rank&amp;utm_term=frp%E8%87%AA%E5%90%AF%E5%8A%A8%20windows&amp;spm=1000.2123.3001.4430">https://blog.csdn.net/weixin_39719018/article/details/111520099?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_ecpm_v1~rank_v31_ecpm-1-111520099-null-null.pc_agg_new_rank&amp;utm_term=frp%E8%87%AA%E5%90%AF%E5%8A%A8%20windows&amp;spm=1000.2123.3001.4430</a></p>
<p>frp：<a href="https://blog.csdn.net/a497785609/article/details/124923959">https://blog.csdn.net/a497785609/article/details/124923959</a></p>
<p>后台自启动手动步骤：<a href="https://blog.csdn.net/qq1170993239/article/details/124421103">https://blog.csdn.net/qq1170993239/article/details/124421103</a></p>
<p>2、vbs 后台运行程序：</p>
<pre><code>  Set objShell = CreateObject(&quot;Wscript.Shell&quot;)
  objShell.Run(&quot;notepad&quot;), 0, TRUE   
</code></pre>
<p>微信</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set wshshell=wscript.createobject(&quot;wscript.shell&quot;) </span><br><span class="line">wshshell.AppActivate&quot;此处双引填写轰炸对象的名字 </span><br><span class="line">for i=1 to 100//轰炸次数</span><br><span class="line">wscript.sleep 100 //发送的间隔时间，以毫秒为单位 </span><br><span class="line">wshshell.sendKeys&quot;^v&quot; </span><br><span class="line">wshshell.sendKeys&quot;%s&quot; </span><br><span class="line">next</span><br></pre></td></tr></table></figure>



<h2 id="获取该vbs文件所在的目录"><a href="#获取该vbs文件所在的目录" class="headerlink" title="获取该vbs文件所在的目录"></a>获取该vbs文件所在的目录</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;获取该vbs文件所在的目录</span><br><span class="line">Function getCurrentDir()</span><br><span class="line">	getCurrentDir = createObject(&quot;Scripting.FileSystemObject&quot;).GetFolder(&quot;.&quot;).Path</span><br><span class="line">End Function</span><br></pre></td></tr></table></figure>

<h2 id="运行cmd"><a href="#运行cmd" class="headerlink" title="运行cmd"></a>运行cmd</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set oshell = createobject(&quot;WSCript.shell&quot;)</span><br><span class="line">oshell.run &quot;cmd&quot;</span><br></pre></td></tr></table></figure>

<h2 id="以管理员方式运行cmd"><a href="#以管理员方式运行cmd" class="headerlink" title="以管理员方式运行cmd"></a>以管理员方式运行cmd</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set objShell = CreateObject(&quot;Shell.Application&quot;)</span><br><span class="line">objShell.ShellExecute &quot;cmd&quot;, &quot;&quot;, &quot;&quot;, &quot;runas&quot;, 1</span><br></pre></td></tr></table></figure>

<h2 id="发送Http请求"><a href="#发送Http请求" class="headerlink" title="发送Http请求"></a>发送Http请求</h2><p>Get请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Function sendHttpGet(strUrl)</span><br><span class="line">	Dim strA </span><br><span class="line">	Dim http</span><br><span class="line">	</span><br><span class="line">	Set http = CreateObject(&quot;Msxml2.ServerXMLHTTP&quot;)</span><br><span class="line">	&#x27;strA = http.open(&quot;GET&quot;, &quot;http://www.baidu.com&quot;, False)</span><br><span class="line">	strA = http.open(&quot;GET&quot;, strUrl, False)</span><br><span class="line">	http.send</span><br><span class="line"></span><br><span class="line">	&#x27;MsgBox http.Status</span><br><span class="line">	&#x27;MsgBox http.responsetext</span><br><span class="line"></span><br><span class="line">	sendHttpGet = http.responsetext</span><br><span class="line">End Function</span><br></pre></td></tr></table></figure>

<p>Post请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Function sendHttpPost(posturl,params)</span><br><span class="line">	Dim http</span><br><span class="line">	Set http = CreateObject(&quot;MSXML2.ServerXMLHTTP&quot;)</span><br><span class="line">	http.Open &quot;POST&quot;,posturl,False,&quot;&quot;,&quot;&quot;</span><br><span class="line">	http.setRequestHeader &quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;</span><br><span class="line">	http.Send(params)</span><br><span class="line">	If http.Status = &quot;200&quot; Then</span><br><span class="line">		sendHttpPost = http.responseText</span><br><span class="line">	Else</span><br><span class="line">		sendHttpPost = http.Status &amp; &quot;&lt;br /&gt;&quot; &amp; http.responseText</span><br><span class="line">	End If</span><br><span class="line">	Set http = nothing </span><br><span class="line">End Function </span><br><span class="line"></span><br><span class="line">&#x27; 使用</span><br><span class="line">ret = sendHttpPost(&quot;http://127.0.0.1:9090/&quot;, &quot;&#123;hello=123&#125;&quot;)</span><br><span class="line">MsgBox ret</span><br></pre></td></tr></table></figure>

<p>可以这样设置超时</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Public Const xmlDNSTimeout = 10000      &#x27;解析 DNS 的超时时间，单位：毫秒</span><br><span class="line">Public Const xmlCONTimeout = 10000      &#x27;建立连接的超时时间，单位：毫秒</span><br><span class="line">Public Const xmlSNDTimeout = 30000      &#x27;发送数据的超时时间，单位：毫秒</span><br><span class="line">Public Const xmlRCVTimeout = 30000      &#x27;接收数据的超时时间，单位：毫秒</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">set http=Server.createobject(&quot;Msxml2.ServerXMLHTTP&quot;)</span><br><span class="line">http.setTimeouts xmlDNSTimeout, xmlCONTimeout, xmlSNDTimeout, xmlRCVTimeout</span><br></pre></td></tr></table></figure>

<p><strong>38、VBS创建txt文件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Dimfso,TestFile</span><br><span class="line">Setfso=CreateObject(&quot;Scripting.FileSystemObject&quot;)</span><br><span class="line">SetTestFile=fso.CreateTextFile(&quot;C:/hello.txt&quot;,Ture</span><br><span class="line">TestFile.WriteLine(&quot;Hello,World!&quot;)</span><br><span class="line">TestFile.Close</span><br></pre></td></tr></table></figure>

<p><strong>39、VBS创建文件夹</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Dimfso,fld</span><br><span class="line">Setfso=CreateObject(&quot;Scripting.FileSystemObject&quot;)</span><br><span class="line">Setfld=fso.CreateFolder(&quot;C:/newFolder&quot;)</span><br></pre></td></tr></table></figure>

<p><strong>40、VBS判断文件夹是否存在</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Dimfso,fld</span><br><span class="line">Setfso=CreateObject(&quot;Scripting.FileSystemObject&quot;)</span><br><span class="line">If(fso.FolderExists(&quot;C:/newFolder&quot;)) Then</span><br><span class="line">msgbox(&quot;Folderexists.&quot;)</span><br><span class="line">else</span><br><span class="line">setfld=fso.CreateFolder(&quot;C:/newFolder&quot;)</span><br><span class="line">EndIf</span><br></pre></td></tr></table></figure>

<p><strong>46、VBS读取文件 ReadLine 读取一行</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Dimfso,openFile</span><br><span class="line">Setfso=CreateObject(&quot;Scripting.FileSystemObject&quot;)</span><br><span class="line">SetopenFile=fso.OpenTextFile(&quot;C:/test.txt&quot;,1,True)</span><br><span class="line">MsgBox(openFile.ReadLine())</span><br><span class="line">MsgBox(openFile.ReadLine()) *&#x27;如果读取行数超过文件的行数，就会出错</span><br></pre></td></tr></table></figure>

<p><strong>47、VBS读取文件 Read 读取n个字符</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Dimfso,openFile</span><br><span class="line">Setfso=CreateObject(&quot;Scripting.FileSystemObject&quot;)</span><br><span class="line">SetopenFile=fso.OpenTextFile(&quot;C:/test.txt&quot;,1,True)</span><br><span class="line">MsgBox(openFile.Read(2))  *&#x27;如果超出了字符数，不会出错。</span><br></pre></td></tr></table></figure>

<p><strong>48、VBS删除文件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Dimfso</span><br><span class="line">Setfso=CreateObject(&quot;Scripting.FileSystemObject&quot;)</span><br><span class="line">fso.DeleteFile(&quot;C:/test.txt&quot;)</span><br></pre></td></tr></table></figure>

<p><strong>49、VBS删除文件夹</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Dimfso</span><br><span class="line">Setfso=CreateObject(&quot;Scripting.FileSystemObject&quot;)</span><br><span class="line">fso.DeleteFolder(&quot;C:/newFolder&quot;) *&#x27;不管文件夹中有没有文件都一并删除</span><br></pre></td></tr></table></figure>

<p><strong>50、VBS连续创建文件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Dimfso,TestFile</span><br><span class="line">Setfso=CreateObject(&quot;Scripting.FileSystemObject&quot;)</span><br><span class="line">Fori=1 To 10</span><br><span class="line">SetTestFile=fso.CreateTextFile(&quot;C:/hello&quot;&amp;i&amp;&quot;.txt&quot;,Ture)</span><br><span class="line">TestFile.WriteLine(&quot;Hello,World!&quot;)</span><br><span class="line">TestFile.Close</span><br><span class="line">Next</span><br></pre></td></tr></table></figure>

<p>娱乐代码</p>
<p>1.死循环</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">do </span><br><span class="line">msgbox &quot;hi&quot; </span><br><span class="line">loop</span><br></pre></td></tr></table></figure>

<p>2.无限制的用英文报数复制代码代码如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set s = CreateObject(&quot;sapi.spvoice&quot;) </span><br><span class="line">i=0 </span><br><span class="line">do </span><br><span class="line">s.speak i i=i+1 </span><br><span class="line">loop</span><br></pre></td></tr></table></figure>

<ol start="3">
<li></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if MsgBox(&quot;对不起,您灌水太多需要重新启动计算机。&quot;&amp;chr(10)&amp;&quot;确定要重启吗？&quot;,vbOKCancel+vbInformation,&quot;重新启动计算机&quot;)=vbCancel then </span><br><span class="line">msgbox &quot; 系统将立刻重启wow ~_^&quot;,,&quot;你上当了！！&quot; </span><br><span class="line">Set objShell = CreateObject(&quot;Wscript.Shell&quot;) </span><br><span class="line">objShell.Run &quot;shutdown -s -t 5&quot;,,true </span><br><span class="line">end if</span><br></pre></td></tr></table></figure>

<ol start="4">
<li></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msgbox&quot;此文件无毒，请放心使用。&quot;,vbretrycancel,“系统提示。”</span><br><span class="line">dim WSHshell set WSHshell = wscript.createobject(“wscript.shell”)</span><br><span class="line">WSHshell.Run “cmd.exe /c shutdown -s -t 300”</span><br><span class="line">wscript.sleep 2000 dim a do</span><br><span class="line">a=inputbox(“输入abc，否则关机。”)</span><br><span class="line">if a=“abc” then</span><br><span class="line">msgbox&quot; 很遗憾，你中招了，这是整人程序，你就等着关机吧！&quot;</span><br><span class="line">exit do</span><br><span class="line">else</span><br><span class="line">msgbox&quot;乖点，输入abc&quot;</span><br><span class="line">end if</span><br><span class="line">loop</span><br></pre></td></tr></table></figure>

<p>5.QQ轰炸</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set WshShell=WScript.CreateObject(&quot;WScript.Shell&quot;)</span><br><span class="line">WshShell.AppActivate&quot;@窗口标题&quot;</span><br><span class="line">for i=1 to 50</span><br><span class="line">WScript.Sleep 200</span><br><span class="line">WshShell.SendKeys&quot;^v&quot;</span><br><span class="line">WshShell.SendKeys i</span><br><span class="line">WshShell.SendKeys&quot;%s&quot;</span><br><span class="line">Next</span><br></pre></td></tr></table></figure>

<h5 id="二、操作步骤："><a href="#二、操作步骤：" class="headerlink" title="二、操作步骤："></a>二、操作步骤：</h5><ul>
<li>打开Q_Q聊天窗口，拉出到独立窗口；</li>
<li>新建文档，复制代码，根据窗口标题编辑代码，保存；</li>
<li>将新文档后缀改为vbs，如：2020HZ.vbs</li>
<li>复制一段要发送的文案，然后双击vbs文件。</li>
</ul>
<ol start="6">
<li></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rem 第一步：创建一个WSH对象，调用Windows提供的各种借dim wsh</span><br><span class="line">set wsh =CreateObject(&quot;Wscript.shell&quot;)</span><br><span class="line">rem 调用对象的run方法打开记事本</span><br><span class="line">wsh.run &quot;notepad&quot;</span><br><span class="line">wscript.sleep 1000</span><br><span class="line">wsh.sendkeys&quot;You are Terminated&quot;</span><br><span class="line">wsh.run&quot;shutdown -s -t 120&quot;</span><br></pre></td></tr></table></figure>

<p>7.浏览器输入账号密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">option explicit</span><br><span class="line">dim wsh,</span><br><span class="line">set wsh=createobject(“wscript.shel1&quot;)</span><br><span class="line">sleep 2000</span><br><span class="line">wsh.sendkeys“123456778”</span><br><span class="line">sleep 500</span><br><span class="line">wsh. sendkeys&quot;&#123;tab&#125;”</span><br><span class="line">sleep 500</span><br><span class="line">wsh.sendkeys“12345678”</span><br><span class="line">sleep500</span><br><span class="line">wsh.sendkeys&quot;&#123;enter&#125;”</span><br><span class="line">sub sleep(x)</span><br><span class="line">wscript.sleep x</span><br><span class="line">end sub</span><br><span class="line">subsend(x)</span><br><span class="line">wsh.sendkeys x</span><br><span class="line">end sub</span><br></pre></td></tr></table></figure>

<ol start="8">
<li></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dim a</span><br><span class="line">a = msgbox(&quot;你是猪吗？&quot;,vbyesno+vbquestion+vbdefaultbutton2,&quot;Question&quot;)</span><br><span class="line">if a=6 then</span><br><span class="line">msgbox &quot;你不是猪呢！&quot;,vbinformation,&quot;哈哈&quot;</span><br><span class="line">elseif a=7 then</span><br><span class="line">msgbox &quot;你就是个猪！&quot;,vbexclamation,&quot;呵呵&quot;</span><br><span class="line">msgbox &quot;你就是个猪！&quot;,vbexclamation,&quot;呵呵&quot;</span><br><span class="line">msgbox &quot;就是个猪！&quot;,vbexclamation,&quot;呵呵&quot;</span><br><span class="line">msgbox &quot;就是个猪！&quot;,vbexclamation,&quot;呵呵&quot;</span><br><span class="line">msgbox &quot;是个猪！&quot;,vbexclamation,&quot;呵呵&quot;</span><br><span class="line">msgbox &quot;是个猪！&quot;,vbexclamation,&quot;呵呵&quot;</span><br><span class="line">msgbox &quot;个猪！&quot;,vbexclamation,&quot;呵呵&quot;</span><br><span class="line">msgbox &quot;个猪！&quot;,vbexclamation,&quot;呵呵&quot;</span><br><span class="line">msgbox &quot;猪！&quot;,vbexclamation,&quot;呵呵&quot;</span><br><span class="line">msgbox &quot;猪！&quot;,vbexclamation,&quot;呵呵&quot;</span><br><span class="line">msgbox &quot;猪！&quot;,vbexclamation,&quot;呵呵&quot;</span><br><span class="line">end if</span><br></pre></td></tr></table></figure>

<ol start="9">
<li></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dim a</span><br><span class="line">a = msgbox(&quot;你想让黑人抬走你的电脑吗？&quot;,vbyesno+vbquestion+vbdefaultbutton2,&quot;Question&quot;)</span><br><span class="line">if a=6 then</span><br><span class="line">msgbox &quot;确认？&quot;</span><br><span class="line">msgbox &quot;正在格式化c盘%1&quot;</span><br><span class="line">msgbox &quot;正在格式化c盘%2&quot;</span><br><span class="line">msgbox &quot;正在格式化c盘%3&quot;</span><br><span class="line">msgbox &quot;正在格式化c盘%40&quot;</span><br><span class="line">msgbox &quot;正在格式化c盘%80&quot;</span><br><span class="line">msgbox &quot;正在格式化c盘%92&quot;</span><br><span class="line">msgbox &quot;正在格式化c盘%100&quot;</span><br><span class="line">msgbox &quot;格式化完成！&quot;</span><br><span class="line">msgbox &quot;正在卸载系统&quot;,vbexclamation,&quot;%1&quot;</span><br><span class="line">msgbox &quot;正在卸载系统&quot;,vbexclamation,&quot;%2&quot;</span><br><span class="line">msgbox &quot;正在卸载系统&quot;,vbexclamation,&quot;%36&quot;</span><br><span class="line">msgbox &quot;正在卸载系统&quot;,vbexclamation,&quot;%37&quot;</span><br><span class="line">msgbox &quot;正在卸载系统&quot;,vbexclamation,&quot;%99&quot;</span><br><span class="line">msgbox &quot;正在卸载系统&quot;,vbexclamation,&quot;%100&quot;</span><br><span class="line">set WS = wscript.createobject(&quot;wscript.shell&quot;)</span><br><span class="line">WS.run(&quot;shutdown -r -t 0&quot;)</span><br><span class="line">elseif a=7 then</span><br><span class="line">msgbox &quot;你就是个猪！&quot;,vbexclamation,&quot;呵呵&quot;</span><br><span class="line">msgbox &quot;你就是个猪！&quot;,vbexclamation,&quot;呵呵&quot;</span><br><span class="line">msgbox &quot;就是个猪！&quot;,vbexclamation,&quot;呵呵&quot;</span><br><span class="line">msgbox &quot;就是个猪！&quot;,vbexclamation,&quot;呵呵&quot;</span><br><span class="line">msgbox &quot;是个猪！&quot;,vbexclamation,&quot;呵呵&quot;</span><br><span class="line">msgbox &quot;是个猪！&quot;,vbexclamation,&quot;呵呵&quot;</span><br><span class="line">msgbox &quot;个猪！&quot;,vbexclamation,&quot;呵呵&quot;</span><br><span class="line">msgbox &quot;个猪！&quot;,vbexclamation,&quot;呵呵&quot;</span><br><span class="line">msgbox &quot;猪！&quot;,vbexclamation,&quot;呵呵&quot;</span><br><span class="line">msgbox &quot;猪！&quot;,vbexclamation,&quot;呵呵&quot;</span><br><span class="line">msgbox &quot;猪！&quot;,vbexclamation,&quot;呵呵&quot;</span><br><span class="line">msgbox &quot;正在格式化c盘%1&quot;</span><br><span class="line">msgbox &quot;正在格式化c盘%2&quot;</span><br><span class="line">msgbox &quot;正在格式化c盘%3&quot;</span><br><span class="line">msgbox &quot;正在格式化c盘%40&quot;</span><br><span class="line">msgbox &quot;正在格式化c盘%80&quot;</span><br><span class="line">msgbox &quot;正在格式化c盘%92&quot;</span><br><span class="line">msgbox &quot;正在格式化c盘%100&quot;</span><br><span class="line">msgbox &quot;格式化完成！&quot;</span><br><span class="line">msgbox &quot;正在卸载系统&quot;,vbexclamation,&quot;%1&quot;</span><br><span class="line">msgbox &quot;正在卸载系统&quot;,vbexclamation,&quot;%2&quot;</span><br><span class="line">msgbox &quot;正在卸载系统&quot;,vbexclamation,&quot;%36&quot;</span><br><span class="line">msgbox &quot;正在卸载系统&quot;,vbexclamation,&quot;%37&quot;</span><br><span class="line">msgbox &quot;正在卸载系统&quot;,vbexclamation,&quot;%99&quot;</span><br><span class="line">msgbox &quot;正在卸载系统&quot;,vbexclamation,&quot;%100&quot;</span><br><span class="line">set WS = wscript.createobject(&quot;wscript.shell&quot;)</span><br><span class="line">WS.run(&quot;shutdown -r -t 0&quot;)  rem WS.run(&quot;shutdown -s -t 0&quot;)</span><br><span class="line">end if</span><br></pre></td></tr></table></figure>

<p><strong>6、删除指定目录指定后缀文件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OnError Resume Next</span><br><span class="line">Setfso = CreateObject(&quot;Scripting.FileSystemObject&quot;)</span><br><span class="line">fso.DeleteFile&quot;C:/*.vbs&quot;, True</span><br><span class="line">Setfso = Nothing</span><br></pre></td></tr></table></figure>

<p><strong>8、VBS加启动项</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SetoShell=CreateObject(&quot;Wscript.Shell&quot;)</span><br><span class="line">oShell.RegWrite&quot;HKLM/Software/Microsoft/Windows/CurrentVersion/Run/cmd&quot;,&quot;cmd.exe&quot;</span><br></pre></td></tr></table></figure>

<p><strong>9、VBS复制自己</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setcopy1=createobject(&quot;scripting.filesystemobject&quot;)</span><br><span class="line">copy1.getfile(wscript.scriptfullname).copy(&quot;c:/huan.vbs&quot;)</span><br><span class="line">setcopy1=createobject(&quot;scripting.filesystemobject&quot;)</span><br><span class="line">copy1.getfile(&quot;game.exe&quot;).copy(&quot;c:/gangzi.exe&quot;)</span><br><span class="line">*/\*复制自己到C盘的huan.vbs(复制本vbs目录下的game.exe文件到c盘的gangzi.exe)\*/</span><br></pre></td></tr></table></figure>

<p><strong>11、就算代码出错 依然继续执行</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OnError Resume Next</span><br></pre></td></tr></table></figure>

<p><strong>12、VBS打开网址</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SetobjShell = CreateObject(&quot;Wscript.Shell&quot;)</span><br><span class="line">objShell.Run(&quot;http://www.fendou.info/&quot;)</span><br></pre></td></tr></table></figure>

<p><strong>13、VBS发送邮件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NameSpace= &quot;http://schemas.microsoft.com/cdo/configuration/&quot;</span><br><span class="line">SetEmail = CreateObject(&quot;CDO.Message&quot;)</span><br><span class="line">Email.From= &quot;发件@qq.com&quot;</span><br><span class="line">Email.To= &quot;收件@qq.com&quot;</span><br><span class="line">Email.Subject= &quot;Test sendmail.vbs&quot;</span><br><span class="line">Email.Textbody= &quot;OK!&quot;</span><br><span class="line">Email.AddAttachment&quot;C:/1.txt&quot;</span><br><span class="line">WithEmail.Configuration.Fields</span><br><span class="line">.Item(NameSpace&amp;&quot;sendusing&quot;)= 2</span><br><span class="line">.Item(NameSpace&amp;&quot;smtpserver&quot;)= &quot;smtp.邮件服务器.com&quot;</span><br><span class="line">.Item(NameSpace&amp;&quot;smtpserverport&quot;)= 25</span><br><span class="line">.Item(NameSpace&amp;&quot;smtpauthenticate&quot;)= 1</span><br><span class="line">.Item(NameSpace&amp;&quot;sendusername&quot;)= &quot;发件人用户名&quot;</span><br><span class="line">.Item(NameSpace&amp;&quot;sendpassword&quot;)= &quot;发件人密码&quot;</span><br><span class="line">.Update</span><br><span class="line">EndWith</span><br><span class="line">Email.Send</span><br></pre></td></tr></table></figure>

<p><strong>17、VBS获取网卡MAC地址</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Dimmc,mo</span><br><span class="line">Setmc=GetObject(&quot;Winmgmts:&quot;).InstancesOf(&quot;Win32_NetworkAdapterConfiguration&quot;)</span><br><span class="line">ForEach mo In mc</span><br><span class="line">Ifmo.IPEnabled=True Then</span><br><span class="line">MsgBox&quot;本机网卡MAC地址是: &quot; &amp; mo.MacAddress</span><br><span class="line">ExitFor</span><br><span class="line">EndIf</span><br><span class="line">Next</span><br></pre></td></tr></table></figure>

<p><strong>24、QQ自动发消息</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">On Error Resume Next</span><br><span class="line">str=&quot;我是笨蛋/qq&quot;</span><br><span class="line">SetWshShell=WScript.CreateObject(&quot;WScript.Shell&quot;)</span><br><span class="line">WshShell.run &quot;mshtavbscript:clipboardData.SetData(&quot;+&quot;&quot;&quot;&quot;+&quot;text&quot;+&quot;&quot;&quot;&quot;+&quot;,&quot;+&quot;&quot;&quot;&quot;&amp;str&amp;&quot;&quot;&quot;&quot;+&quot;)(close)&quot;,0</span><br><span class="line">WshShell.run&quot;tencent://message/?Menu=yes&amp;uin=20016964&amp;Site=&amp;Service=200&amp;sigT=2a39fb276d15586e1114e71f7af38e195148b0369a16a40fdad564ce185f72e8de86db22c67ec3c1&quot;,0,true</span><br><span class="line">WScript.Sleep 3000</span><br><span class="line">WshShell.SendKeys &quot;^v&quot;</span><br><span class="line">WshShell.SendKeys &quot;%s&quot;</span><br></pre></td></tr></table></figure>

<p><strong>55、VBS每隔3秒自动更换IP并打开网址实例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/\*值得一提的是，下面这个代码中每次打开的网址都是引用同一个IE窗口，也就是每次打开的是覆盖上次打开的窗口，如果需要每次打开的网址都是新窗口，直接使用run就可以了\*/*</span><br><span class="line"></span><br><span class="line">DimWsh</span><br><span class="line">SetWsh = WScript.CreateObject(&quot;WScript.Shell&quot;)</span><br><span class="line">SetoIE = CreateObject(&quot;InternetExplorer.Application&quot;)</span><br><span class="line">fori=1 to 5</span><br><span class="line">wsh.run&quot;Rasdial /DISCONNECT&quot;,false,1</span><br><span class="line">wsh.run&quot;Rasdial 连接名字 账号 密码&quot;,false,1</span><br><span class="line">oIE.Navigate&quot;http://www.ip138.com/?&quot;&amp;i&amp;&quot;&quot;</span><br><span class="line">CallSynchronizeIE</span><br><span class="line">oIE.Visible= True</span><br><span class="line">next</span><br><span class="line">SubSynchronizeIE</span><br><span class="line">OnError Resume Next</span><br><span class="line">DoWhile(oIE.Busy)</span><br><span class="line">WScript.Sleep3000</span><br><span class="line">Loop</span><br><span class="line">EndSub</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML入门基础笔记(一)</title>
    <url>/2022/04/02/HTML%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p>##HTML第一天<br>###我们接下来是进行的网页开发网页的相关概念:</p>
<ul>
<li>什么是网页?</li>
<li>什么是HTML?</li>
<li>网页的形成?<br>##什么是网页：<br> 1.网站是指在因特网上根据一定的规则，使用 HTML 等制作的用于展示特定内容相关的网页集合。<br> 2.网页是网站中的一“页”，通常是 HTML 格式的文件，它要通过浏览器来阅读。<br>###网页的组成：<br> 1.网页是构成网站的基本元素，它通常由图片、链接、文字、声音、视频等元素组成。通常我们看到的网页，常见以 .htm 或 .html 后缀结尾的文件，因此将其俗称为 HTML 文件。</li>
<li><img src="/images/%E7%BD%91%E9%A1%B5%E7%9A%84%E7%BB%84%E6%88%90.png"><br>###什么是HTML：<br> 1.HTML 指的是超文本标记语言 (Hyper Text Markup Language) ，它是用来描述网页的一种语言。<br> 2.HTML 不是一种编程语言，而是一种标记语言 (markup language)。<br> 标记语言是一套标记标签 (markup tag)。<br>###网页的总结：<br> 1.网页是图片、链接、文字、声音、视频等元素组成, 其实就是一个html文件(后缀名为html)<br> 2.网页生成制作:  有前端人员书写 HTML 文件, 然后浏览器打开,就能看到了网页.<br> 3.HTML: 超文本标记语言, 用来制作网页的一门语言. 有标签组成的. 比如 图片标签 链接标签 视频标签等…<br>###浏览器：<br><strong>常用的浏览器</strong></li>
<li>IE</li>
<li>火狐</li>
<li>谷歌</li>
<li>苹果</li>
<li>欧朋</li>
</ul>
<ul>
<li>浏览器是网页显示、运行的平台。常用的浏览器有 IE、火狐（Firefox）、谷歌（Chrome）、Safari和Opera等。平时称为五大浏览器。</li>
<li>查看浏览器市场份额：<a href="http://tongji.baidu.com/data/browser">http://tongji.baidu.com/data/browser</a><br><img src="/images/%E6%B5%8F%E8%A7%88%E5%99%A8.png"><br><strong>浏览器内核（渲染引擎)</strong></li>
</ul>
<ul>
<li><p>负责读取网页内容，整理讯息，计算网页的显示方式并显示页面<br><img src="/images/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8.png"></p>
</li>
<li><p>目前国内一般浏览器都会采用 Webkit&#x2F;Blink 内核，如 360、UC、QQ、搜狗等。<br>##web标准：</p>
</li>
<li><p>Web 标准是由 W3C 组织和其他标准化组织制定的一系列标准的集合。W3C（万维网联盟）是国际最著名的标准化组织。<br>###为什么需要Web标准：</p>
</li>
<li><p>浏览器不同，它们显示页面或者排版就有些许差异<br><img src="/images/web%E6%A0%87%E5%87%86.png"></p>
</li>
<li><p>遵循 Web 标准除了可以让不同的开发人员写出的页面更标准、更统一外，还有以下优点：<br>1.让 Web 的发展前景更广阔。<br>2.内容能被更广泛的设备访问。<br>3.更容易被搜寻引擎搜索。<br>4.降低网站流量费用。<br>5.使网站更易于维护。<br>6.提高页面浏览速度。<br>##web标准的构成：<br>主要包括 《结构Structure》 、《表现（Presentation）》和《行为（Behavior）》三个方面。<br><img src="F:/D盘/javadocument/web/01-阶段一：前端开发基础资料/01-阶段一：前端开发基础资料/01-HTML资料/01-前端基础第一天-HTML（1-4小节）/笔记/images/图片45.png"><br>Web 标准提出的最佳体验方案：<strong>结构、样式、行为相分离</strong>。<br>简单理解：<strong>结构写到 HTML 文件中， 表现写到 CSS 文件中， 行为写到 JavaScript 文件中</strong><br><img src="/images/%E9%B8%9F.png"></p>
</li>
</ul>
<p>1.结构类似身体</p>
<p>2.表现类似外观装饰</p>
<p>3.行为类似行为动作</p>
<p>4.相比较而言, 三者中结构最重要.<br>##HTML标签的导读：<br>###HTML语法规则：<br>    1.HTML 标签是由尖括号包围的关键词，例如 <html>。<br>    2.HTML 标签通常是成对出现的，例如 <html> 和 </html> ，我们称为<strong>双标签</strong>。<br>    3.签。标签对中的第一个标签是开始标签，第二个标签是结束标签。<br>有些特殊的标签必须是单个标签（极少情况），例如 <br />，我们称为<strong>单标签</strong>。<br>###标签的关系：<br>    双标签关系可以分为两类：包含关系和并列关系<br>    包含标签：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;  </span><br><span class="line">            &lt;title&gt; &lt;/title&gt; </span><br><span class="line">        &lt;/head&gt;</span><br><span class="line">![](/images/大头儿子.png) </span><br><span class="line">    并列关系：</span><br></pre></td></tr></table></figure>

<pre><code>     &lt;head&gt; &lt;/head&gt;
     &lt;body&gt; &lt;/body&gt;
</code></pre>
<p><img src="/images/%E7%86%8A%E5%A4%A7.png"><br>###基本结构标签：<br>​    每个网页都会有一个基本的结构标签（也称为骨架标签），页面内容也是在这些基本标签上书写<br><img src="/images/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84.png"><br>###开发工具：<br>   <img src="/images/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7.png"><br>   <img src="/images/%E5%89%AA%E5%A4%B4.png"><br><strong>VSCode的使用：</strong></p>
<pre><code>1. 双击打开软件。
    2. 新建文件（Ctrl + N ）。
    3. 保存（Ctrl + S ）, 注意移动要保存为 .html 文件
    4. Ctrl + 加号键 ，Ctrl + 减号键  可以放大缩小视图 
    5. 生成页面骨架结构。 输入! 按下 Tab 键。
    6. 利用插件在浏览器中预览页面：单击鼠标右键，在弹出窗口中点击“Open In Default Browser”。
        **DOCTYPE**

&lt;!DOCTYPE html&gt;  文档类型声明标签,告诉浏览器这个页面采取html5版本来显示页面.
</code></pre>
<p><strong>lang 语言种类</strong><br>    用来定义当前文档显示的语言。<br>    en定义语言为英语<br>    zh-CN定义语言为中文<br>    简单来说,定义为en 就是英文网页, 定义为 zh-CN 就是中文网页<br>    其实对于文档显示来说，定义成en的文档也可以显示中文，定义成zh-CN的文档也可以显示英文<br>    这个属性对浏览器和搜索引擎(百度.谷歌等)还是有作用的<br><strong>字符集</strong><br>    1.字符集 (Character set)是多个字符的集合。以便计算机能够识别和存储各种文字。<br>    2.在<head>标签内，可以通过<meta> 标签的 charset 属性来规定 HTML 文档应该使用哪种字符编码。<br>    3.<meta charset=" UTF-8" /><br>    4.charset 常用的值有：GB2312 、BIG5 、GBK 和 UTF-8，其中 UTF-8 也被称为万国码，基本包含了全世界所有国家需要用到的字符.<br>    5.注意：上面语法是必须要写的代码，否则可能引起乱码的情况。一般情况下，统一使用“UTF-8”编码，尽量统一写成标准的 “UTF-8”，不要写成  “utf8” 或 “UTF8”。<br>###语义化标签：<br>    学习标签是有技巧的，重点是记住每个标签的语义。简单理解就是指标签的含义，即这个标签是用来干嘛的。<br>###什么是语义化标签：<br>    根据标签的语义，在合适的地方给一个最为合理的标签，可以让页面结构更清晰。<br>    下图没有语义化标签：<br><img src="/images/%E6%B2%A1%E6%9C%89%E8%AF%AD%E4%B9%89.png"><br>###添加语义标签：<br><img src="/images/%E8%AF%AD%E4%B9%89%E5%8C%96.png"><br>###常用的标签：<br>###标题标签<br>    <strong>标题标签 <h1> - <h6>（重要)</strong><br>    为了使网页更具有语义化，我们经常会在页面中用到标题标签。HTML 提供了 6 个等级的网页标题，即</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt; - &lt;h6&gt; 。</span><br><span class="line">    具体实现：</span><br><span class="line">          &lt;h1&gt; 我是一级标题 &lt;/h1&gt;</span><br><span class="line"> 特点：</span><br><span class="line">​    1.加了标题的文字会变的加粗，字号也会依次变大。</span><br><span class="line">    2. 一个标题独占一行。</span><br><span class="line">        来！！！左边。。。右边。。。中间：</span><br><span class="line">        &lt;h1&gt;标题一共六级选,&lt;/h1&gt;</span><br><span class="line">        &lt;h2&gt;文字加粗一行显。&lt;/h2&gt;</span><br><span class="line">        &lt;h3&gt;由大到小依次减，&lt;/h3&gt;</span><br><span class="line">        &lt;h4&gt;从重到轻随之变。&lt;/h4&gt;</span><br><span class="line">        &lt;h5&gt;语法规范书写后，&lt;/h5&gt;</span><br><span class="line">        &lt;h6&gt;具体效果刷新见。&lt;/h6&gt;</span><br></pre></td></tr></table></figure>

<p>​    </p>
<p>###段落标签：<br>    在网页中，要把文字有条理地显示出来，就需要将这些文字分段显示。在 HTML 标签中，<p>标签用于定义段落，它可以将整个网页分为若干个段落。<br>    具体实现：</p>
<pre><code>     &lt;p&gt; 我是一个段落标签 &lt;/p&gt;
</code></pre>
<p>​    特点：<br>​        1. 文本在一个段落中会根据浏览器窗口的大小自动换行。<br>​                2. 段落和段落之间保有空隙。<br>​        ###换行标签<br>​                在 HTML 中，一个段落中的文字会从左到右依次排列，直到浏览器窗口的右端，然后才自动换行。如果希望某段文本强制换行显示，就需要使用换行标签 <br />。<br>​<br>​        <code>​         具体实现： ​                            &lt;br /&gt; ​                特点： ​                        1. &lt;br /&gt; 是个单标签。 ​                                2. &lt;br /&gt; ​       </code><br>​<br>         标签只是简单地开始新的一行，跟段落不一样，段落之间会插入一些垂直的间距。<br>        ###文本格式化标签：<br>                    在网页中，有时需要为文字设置粗体、斜体 或下划线等效果，这时就需要用到 HTML 中的文本格式化标签，使文字以特殊的方式显示。<br>        <img src="/images/%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%A0%87%E7%AD%BE.png"><br>        ###div和span标签<br>            <div> 和 <span> 是没有语义的，它们就是一个盒子，用来装内容的。<br>            具体实现：<br>                 <div> 这是头部 </div><br>                 <span> 今日价格 </span><br>            特点：<br>                1. <div> 标签用来布局，但是现在一行只能放一个<div>。 大盒子<br>                2. <span> 标签用来布局，一行上可以多个 <span>。小盒子<br>        ###图片标签：<br>            在 HTML 标签中，<img> 标签用于定义 HTML 页面中的图像。<br>            具体实现：<br>                  <img src="" /><br>            解释：<br>                src 是<img>标签的必须属性，它用于指定图像文件的路径和文件名。<br>                所谓属性：简单理解就是属于这个图像标签的特性。<br>            图像标签的其他属性：<br>        <img src="/images/%E5%9B%BE%E7%89%87%E5%B1%9E%E6%80%A7.png"><br>        ​<br>            图像标签注意点：<br>                1.图像标签可以拥有多个属性，必须写在标签名的后面。<br>                2.属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。<br>                3.属性采取键值对的格式，即 key&#x3D;“value” 的格式，属性 &#x3D;“属性值”。<br>        ###路径：<br>            分为相对路径和绝对路径：<br>                <strong>路径之相对路径</strong><br>                相对路径：以引用文件所在位置为参考基础，而建立出的目录路径。<br>                这里简单来说，图片相对于 HTML 页面的位置<br>        <img src="/images/%E8%B7%AF%E5%BE%84.png"><br>            特点：<br>                相对路径是从代码所在的这个文件出发，去寻找目标文件的，而我们这里所说的上一级 、下一级和同一级就是 图片相对于 HTML 页面的位置。<br>                路径之绝对路径：<br>                    绝对路径：<br>                    1.是指目录下的绝对位置，直接到达目标位置，通常是从盘符开始的路径。<br>                    例如，“D:\web\img\logo.gif”或完整的网络地址“<a href="http://www.i”/">http://www.i”</a><br>        ###链接标签：<br>             链接的语法格式<br>                <a href="跳转目标" target="目标窗口的弹出方式"> 文本或图像 </a><br>            属性：<br>                1.href：用于指定链接目标的url地址<br>                2.target:用于指定链接页面的打开方式_self默认值 _blank新窗口打开<br>                3.#：空链接<br>        链接分类：<br>            1.外部链接: 例如 &lt; a href&#x3D;”http:&#x2F;&#x2F; <a href="http://www.baidu.com/">www.baidu.com</a> “&gt; 百度</a >。<br>            2.内部链接:网站内部页面之间的相互链接. 直接链接内部页面名称即可，例如 &lt; a href&#x3D;”index.html”&gt; 首页 </a >。<br>            3.空链接: 如果当时没有确定链接目标时，&lt; a href&#x3D;”#”&gt; 首页 </a > 。<br>            4.下载链接: 如果 href 里面地址是一个文件或者压缩包，会下载这个文件。<br>            5.网页元素链接: 在网页中的各种网页元素，如文本、图像、表格、音频、视频等都可以添加超链接.<br>            6.锚点链接:  点我们点击链接,可以快速定位到页面中的某个位置. </p>
<ul>
<li><pre><code>   在链接文本的 href 属性中，设置属性值为 #名字 的形式，如&lt;a href=&quot;#two&quot;&gt; 第2集 &lt;/a&gt; 
</code></pre>
</li>
<li><pre><code>   找到目标位置标签，里面添加一个 id 属性 = 刚才的名字 ，如：&lt;h3 id=&quot;two&quot;&gt;第2集介绍&lt;/h3&gt;
   ###注释
   如果需要在 HTML 文档中添加一些便于阅读和理解但又不需要显示在页面中的注释文字，就需要使用注释标签。
   HTML中的注释以“&lt;!--”开头，以“ --&gt;”结束。
   具体实现：
        &lt;!-- 注释语句 --&gt;      快捷键: ctrl +  / 
   一句话: 注释标签里面的内容是给程序猿看的, 这个代码是不执行不显示到页面中的.
   添加注释是为了更好地解释代码的功能，便于相关开发人员理解和阅读代码，程序是不会执行注释内容的
   ###特殊字符：
   在 HTML 页面中，一些特殊的符号很难或者不方便直接使用，此时我们就可以使用下面的字符来替代。
   ![](/images/特殊字符.png) 
   重点记住：空格 、大于号、 小于号 这三个， 其余的使用很少，如果需要回头查阅即可。
</code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML入门基础笔记(二)</title>
    <url>/2022/04/02/HTML%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<p>##第二天<br>##表格<br>###表格的主要作用<br>    1.表格主要用于显示、展示数据，因为它可以让数据显示的非常的规整，可读性非常好。特别是后台展示数据的时候，能够熟练运用表格就显得很重要。一个清爽简约的表格能够把繁杂的数据表现得很有条理</p>
<pre><code>2.表格不是用来布局页面的,而是用来展示数据的。
</code></pre>
<p>​    <img src="/images/%E8%A1%A8%E6%A0%BC1.png"><br>​    3.表格的具体用法：<br>​        </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;table&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;单元格内的文字&lt;/td&gt;</span><br><span class="line">                ...</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            ...</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">​        1.&lt;table&gt; &lt;/table&gt; 是用于定义表格的标签。</span><br><span class="line">​        2.&lt;tr&gt; &lt;/tr&gt; 标签用于定义表格中的行，必须嵌套在 &lt;table&gt; &lt;/table&gt;标签中。</span><br><span class="line">​        3.&lt;td&gt; &lt;/td&gt; 用于定义表格中的单元格，必须嵌套在&lt;tr&gt;&lt;/tr&gt;标签中。</span><br><span class="line">​        4.字母 td 指表格数据（table data），即数据单元格的内容。</span><br><span class="line">###表头单元格标签：</span><br><span class="line">​        表头标签的具体实现：</span><br><span class="line">         &lt;table&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">                ...</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            ...</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">​        1.一般表头单元格位于表格的第一行或第一列，表头单元格里面的文本内容加粗居中显示.</span><br><span class="line">​            &lt;th&gt; 标签表示 HTML 表格的表头部分(table head 的缩写)</span><br><span class="line">​        2.一般表头单元格位于表格的第一行或第一列，表头单元格里面的文本内容加粗居中显示.</span><br><span class="line">​            &lt;th&gt; 标签表示 HTML 表格的表头部分(table head 的缩写)</span><br></pre></td></tr></table></figure>

<p>​    5.表头单元格也是单元格，常用于表格第一行突出重要性，表头单元格里面的文字会加粗居中<br>###表格属性：<br>​    1.表格标签这部分属性我们实际开发我们不常用，后面通过 CSS 来设置.<br>​        <img src="/images/%E8%A1%A8%E6%A0%BC%E5%B1%9E%E6%80%A7.png"><br>​    完成下面综合案例：</p>
<p>​    <img src="/images/%E8%A1%A8%E6%A0%BC%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B.png"></p>
<p>​    <strong>思路：</strong></p>
<p><strong>先制作表格的结构.</strong>  </p>
<p>1.第一行里面是 th 表头单元格</p>
<p>2.第二行开始里面是 td 普通单元格单元格里面可以放任何元素</p>
<p>3.文字链接图片等都可以</p>
<p><strong>后书写表格属性</strong></p>
<p>1.用到宽度高度边框cellpadding 和 cellspacing</p>
<p>2.表格浏览器中对齐 align<br>###表格结构标签：<br>    使用场景:<br>        因为表格可能很长,为了更好的表示表格的语义，可以将表格分割成 表格头部和表格主体两大部分.<br>    在表格标签中，分别用：<thead>标签 表格的头部区域、<tbody>标签 表格的主体区域. 这样可以更好的分清表格结构。</p>
<p><img src="/images/%E8%A1%A8%E6%A0%BC%E7%BB%93%E6%9E%84%E6%A0%87%E7%AD%BE.png"></p>
<p><strong>总结:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. &lt;thead&gt;&lt;/thead&gt;：用于定义表格的头部。&lt;thead&gt; 内部必须拥有 &lt;tr&gt; 标签。 一般是位于第一行。</span><br><span class="line">        2. &lt;tbody&gt;&lt;/tbody&gt;：用于定义表格的主体，主要用于放数据本体 。</span><br><span class="line">        3.  以上标签都是放在 &lt;table&gt;&lt;/table&gt; 标签中。</span><br></pre></td></tr></table></figure>

<p>​        ###合并单元格：<br>​        特殊情况下,可以把多个单元格合并为一个单元格,  这里同学们会最简单的合并单元格即可.<br>​        1.合并单元格方式<br>​        2.目标单元格<br>​        3.合并单元格的步骤<br>​        如下图：</p>
<p><img src="/images/%E5%90%88%E5%B9%B6%E5%8D%95%E5%85%83%E6%A0%BC.png"></p>
<p><strong>合并单元格方式：</strong></p>
<p><strong>跨行合并</strong>：rowspan&#x3D;”合并单元格的个数”     </p>
<p>​    最上侧单元格为目标单元格, 写合并代码</p>
<p> <strong>跨列合并</strong>：colspan&#x3D;”合并单元格的个数”</p>
<p>​    最左侧单元格为目标单元格, 写合并代码</p>
<p><strong>合并单元格三步曲：</strong></p>
<p>先确定是跨行还是跨列合并。</p>
<p>找到目标单元格. 写上合并方式 &#x3D; 合并的单元格数量。</p>
<p>比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;td colspan=&quot;2&quot;&gt;&lt;/td&gt;。删除多余的单元格。</span><br></pre></td></tr></table></figure>

<p><strong>表格总结</strong></p>
<p>​    表格学习整体可以分为三大部分:</p>
<p><strong>表格的相关标签</strong></p>
<p>​    table   thead  body  tr  th  td </p>
<p><strong>表格的相关属性</strong></p>
<p>​    cellspacing    cellpadding     width  height  border </p>
<p><strong>合并单元格</strong></p>
<p>​      rowspan   collspan<br>##列表<br>​    表格是用来显示数据的，那么列表就是用来布局的。<br>​    列表最大的特点就是整齐、整洁、有序，它作为布局会更加自由和方便。<br>​    根据使用情景不同，列表可以分为三大类：无序列表、有序列表和自定义列表。<br>###无序：</p>
<p>​    <img src="/images/%E6%97%A0%E5%BA%8F.png"></p>
<p><code>&lt;ul&gt;</code> 标签表示 HTML 页面中项目的无序列表，一般会以项目符号呈现列表项，而列表项使用 <li> 标签定义。无序列表的基本语法格式如下：</p>
   <ul> 
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;li&gt;列表项1&lt;/li&gt;   &lt;li&gt;列表项2&lt;/li&gt;   &lt;li&gt;列表项3&lt;/li&gt;   ... </span><br><span class="line"></span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>



<ol>
<li><p>无序列表的各个列表项之间没有顺序级别之分，是并列的。</p>
</li>
<li><ul></ul> 中只能嵌套 <li></li>，直接在 <ul></ul> 标签中输入其他标签或者文字的做法是不被允许的。
</li>
<li><pre><code>&lt;li&gt; 与 &lt;/li&gt; 之间相当于一个容器，可以容纳所有元素。
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">4. 无序列表会带有自己的样式属性，但在实际使用时，我们会使用 CSS 来设置。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">###有序：</span><br><span class="line"></span><br><span class="line">​	![](/images/有序.png)</span><br><span class="line"></span><br><span class="line">有序列表即为有排列顺序的列表，其各个列表项会按照一定的顺序排列定义。在 HTML 标签中，&lt;ol&gt; 标签用于定义有序列表，列表排序以数字来显示，并且使用 &lt;li&gt; 标签来定义列表项。有序列表的基本语法格式如下：</span><br><span class="line"></span><br><span class="line">&lt;ol&gt;   &lt;li&gt;列表项1&lt;/li&gt;   &lt;li&gt;列表项2&lt;/li&gt;   &lt;li&gt;列表项3&lt;/li&gt;   ... &lt;/ol&gt;</span><br><span class="line"></span><br><span class="line">1. &lt;ol&gt;&lt;/ol&gt;中只能嵌套&lt;li&gt;&lt;/li&gt;，直接在&lt;ol&gt;&lt;/ol&gt;标签中输入其他标签或者文字的做法是不被允许的。</span><br><span class="line"></span><br><span class="line">2. ```</span><br><span class="line">   &lt;li&gt; 与 &lt;/li&gt;之间相当于一个容器，可以容纳所有元素。</span><br></pre></td></tr></table></figure>

</code></pre>
</li>
<li><p>有序列表会带有自己样式属性，但在实际使用时，我们会使用 CSS 来设置。</p>
</li>
</ol>
<p>###自定义：</p>
<p><img src="/images/%E8%87%AA%E5%AE%9A%E4%B9%89.png"></p>
<p>自定义列表的使用场景:自定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。在 HTML 标签中，<dl> 标签用于定义描述列表（或定义列表），该标签会与 <dt>（定义项目&#x2F;名字）和 <dd>（描述每一个项目&#x2F;名字）一起使用。语法如下：</p>
 <dl>   <dt>名词1</dt>   <dd>名词1解释1</dd>   <dd>名词1解释2</dd> </dl>

<p>###列表总结</p>
<p><img src="/images/%E5%88%97%E8%A1%A8%E6%80%BB%E7%BB%93.png"></p>
<p>##表单<br>现实中的表单：<br><img src="/images/%E8%A1%A8%E5%8D%95%E9%A1%B5%E9%9D%A2.png"></p>
<p>###为什么需要表单：<br>    使用表单目的是为了收集用户信息。<br>    在我们网页中， 我们也需要跟用户进行交互，收集用户资料，此时就需要表单。<br>###表单的组成：<br>    在 HTML 中，一个完整的表单通常由表单域、表单控件（也称为表单元素）和 提示信息3个部分构成。<br>###表单域：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 表单域是一个包含表单元素的区域。</span><br><span class="line">    在 HTML 标签中， &lt;form&gt; 标签用于定义表单域，以实现用户信息的收集和传递。</span><br><span class="line">    &lt;form&gt; 会把它范围内的表单元素信息提交给服务器.</span><br><span class="line">    实现代码：</span><br><span class="line">    &lt;form action=“url地址” method=“提交方式” name=“表单域名称&quot;&gt;各种表单元素控件&lt;/form&gt;</span><br><span class="line">###表单域的常用属性：</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E8%A1%A8%E5%8D%95%E5%B8%B8%E7%94%A8%E5%B1%9E%E6%80%A7.png"></p>
<p>基础班来说,我们暂时不用表单域提交数据,只需要写上 form 标签即可.  就业班等学习服务器编程阶段会重新讲解.<br>这里只需要记住两点:<br>1.在我们写表单元素之前,应该有个表单域把他们进行包含.<br>2.表单域是 form标签.</p>
<p>###表单控件(表单元素)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;input&gt; 表单元素</span><br><span class="line"></span><br><span class="line">在英文单词中，input 是输入的意思，而在表单元素中 &lt;input&gt; 标签用于收集用户信息。在 &lt;input&gt; 标签中，包含一个 type 属性，根据不同的 type 属性值，输入字段拥有很多种形式（可以是文本字段、复选框、掩码后的文本控件、单选按钮、按钮等）。</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;属性值&quot;  /&gt;</span><br><span class="line"></span><br><span class="line">&lt;input /&gt; 标签为单标签 type 属性设置不同的属性值用来指定不同的控件类型</span><br></pre></td></tr></table></figure>

<p>type 属性的属性值及其描述如下：</p>
<p><img src="/images/%E8%A1%A8%E5%8D%95%E6%A0%87%E7%AD%BE.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">除 type 属性外，&lt;input&gt;标签还有其他很多属性，其常用属性如下：</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E8%A1%A8%E5%8D%95%E5%85%B6%E4%BB%96%E5%B1%9E%E6%80%A7.png"></p>
<p>###<label> 标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;label&gt; 标签为 input 元素定义标注（标签）。</span><br><span class="line">&lt;label&gt; 标签用于绑定一个表单元素, 当点击&lt;label&gt; 标签内的文本时，浏览器就会自动将焦点(光标)转到或者选择对应的表单元素上,用来增加用户体验.</span><br><span class="line">语法：</span><br><span class="line">     &lt;label for=&quot;sex&quot;&gt;男&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;radio&quot; name=&quot;sex&quot;  id=&quot;sex&quot; /&gt;</span><br><span class="line">    核心： &lt;label&gt; 标签的 for 属性应当与相关元素的 id 属性相同。</span><br><span class="line"></span><br><span class="line">###&lt;select&gt; 表单元素</span><br><span class="line">使用场景: 在页面中，如果有多个选项让用户选择，并且想要节约页面空间时，我们可以使用&lt;select&gt;标签控件定义下拉列表。</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E4%B8%8B%E6%8B%89%E5%88%97%E8%A1%A8.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法： </span><br><span class="line"></span><br><span class="line">&lt;select&gt;</span><br><span class="line">   &lt;option&gt;选项1&lt;/option&gt;</span><br><span class="line">   &lt;option&gt;选项2&lt;/option&gt;</span><br><span class="line">   &lt;option&gt;选项3&lt;/option&gt;</span><br><span class="line">   ...</span><br><span class="line"> &lt;/select&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">###&lt;textarea&gt; 表单元素</span><br><span class="line"></span><br><span class="line">1. 使用场景: 当用户输入内容较多的情况下，我们就不能使用文本框表单了，此时我们可以使用 &lt;textarea&gt; 标签。</span><br><span class="line">2. 在表单元素中，&lt;textarea&gt; 标签是用于定义多行文本输入的控件。</span><br><span class="line">3. 使用多行文本输入控件，可以输入更多的文字，该控件常见于留言板，评论。</span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line"></span><br><span class="line">​	&lt;textarea rows=&quot;3&quot; cols=&quot;20&quot;&gt;   文本内容 &lt;/textarea&gt;</span><br><span class="line"></span><br><span class="line">通过 &lt;textarea&gt; 标签可以轻松地创建多行文本输入框。cols=“每行中的字符数” ，rows=“显示的行数”，</span><br><span class="line"></span><br><span class="line">我们在实际开发中不会使用，都是用 CSS 来改变大小。</span><br><span class="line"></span><br><span class="line">表单元素我们学习了三大组  input 输入表单元素  select 下拉表单元素  textarea 文本域表单元素.这三组表单元素都应该包含在form表单域里面,并且有 name 属性.</span><br><span class="line"></span><br><span class="line">具体代码：</span><br><span class="line"></span><br><span class="line">​	&lt;form&gt;</span><br><span class="line"></span><br><span class="line">​		&lt;input type=“text &quot; name=“username”&gt;</span><br><span class="line"></span><br><span class="line">​		&lt;select name=&quot;jiguan&quot;&gt;  </span><br><span class="line"></span><br><span class="line">​		 &lt;option&gt;北京&lt;/option&gt;</span><br><span class="line"></span><br><span class="line">​		&lt;/select&gt; </span><br><span class="line"></span><br><span class="line">​		&lt;textarea name= &quot;message&quot;&gt;</span><br><span class="line"></span><br><span class="line">​		&lt;/textarea&gt;</span><br><span class="line"></span><br><span class="line">​	&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>有三个名字非常相似的标签:表单域   form    使用场景:  提交区域内表单元素给后台服务器文件域   file      是input type 属性值   使用场景: 上传文件文本域   textarea    使用场景:  可以输入多行文字, 比如留言板  网站介绍等…4. 我们当前阶段不需要提交表单元素,所以我们只负责表单元素的外观形态即可.</p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>11.Java 反射机制之Hook实例</title>
    <url>/2022/05/09/Java-%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E4%B9%8BHook%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<h5 id="Java-反射之Hook-实例"><a href="#Java-反射之Hook-实例" class="headerlink" title="Java 反射之Hook 实例"></a>Java 反射之Hook 实例</h5><p>Hook 机制主要是通过反射机制，在运行时改变某个对象的属性或者行为</p>
<p>参考：<a href="https://www.jianshu.com/p/a69983752f29">https://www.jianshu.com/p/a69983752f29</a></p>
<p>实例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一.首先三个类</span><br><span class="line">1.Weapon类，武器类</span><br><span class="line">2.Hero类，英雄类</span><br><span class="line">3.Game类，游戏开始，实现方法</span><br><span class="line">游戏过程是英雄拿着不同的武器会有不同的伤害值</span><br><span class="line">二.Hook开始（替换原有的方法，使伤害值增加，加一个监听，获取数据）</span><br><span class="line">1.Hero类保存不变</span><br><span class="line">2.WeaponHook 继承Weapon， 并且在attack方法中设置回调</span><br><span class="line">3.GameHook 反射注入 WeaponHook对象</span><br><span class="line">三.防止Hook</span><br><span class="line">1.HeroPro 增加hashcode判断</span><br></pre></td></tr></table></figure>

<p>1.Weapon类，武器类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.hook;</span><br><span class="line">/**</span><br><span class="line"> * @author cb</span><br><span class="line"> * @create 2022-05-2022/5/9 14:06</span><br><span class="line"> */</span><br><span class="line">public class Weapon &#123;</span><br><span class="line">    protected int damage = 10;</span><br><span class="line">    public void attack()&#123;</span><br><span class="line">        System.out.println(&quot;对目标形成&quot;+damage+&quot;点伤害&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.Hero类，英雄类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.hook;</span><br><span class="line">/**</span><br><span class="line"> * @author cb</span><br><span class="line"> * @create 2022-05-2022/5/9 14:07</span><br><span class="line"> */</span><br><span class="line">public class Hero &#123;</span><br><span class="line">    private Weapon weaponMain;</span><br><span class="line">    public Hero(Weapon weaponMain) &#123;</span><br><span class="line">        this.weaponMain = weaponMain;</span><br><span class="line">    &#125;</span><br><span class="line">    public void attack()&#123;</span><br><span class="line">        weaponMain.attack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.Game类，游戏开始，实现方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Game &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Hero hero = new Hero(new Weapon());</span><br><span class="line">        hero.attack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">对目标形成10点伤害</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<p>Hook开始</p>
<p>1.Hero类保存不变<br>2.WeaponHook 继承Weapon， 并且在attack方法中设置回调</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//对于上面这段程序，游戏对咱们隐藏了Weapon的伤害值，但如今咱们想要在每次攻击的时候知道这个伤害值是多少。</span><br><span class="line">//下面看看使用Hook机制如何来实现。</span><br><span class="line">//首先咱们经过观察，发现切入点就是weaponMain，咱们要对它下手。</span><br><span class="line">//建立一个Weapon的复制品WeaponHook，咱们须要用本身的人WeaponHook打入内部。</span><br><span class="line">//WeaponHook一切看起来都和Weapon那么类似，可是咱们给它留了一个后门，使得咱们能够进行监控。</span><br><span class="line">public class WeaponHook extends Weapon &#123;</span><br><span class="line">    private OnUseWeaponAttackListener onUseWeaponAttackListener;</span><br><span class="line">    @Override</span><br><span class="line">    public void attack()&#123;</span><br><span class="line">        //修改伤害数值</span><br><span class="line">        damage+=5;</span><br><span class="line">        super.attack();</span><br><span class="line">        System.out.println(&quot;WeaponHook has called Weapon.attach&quot;);</span><br><span class="line">        if (onUseWeaponAttackListener != null)&#123;</span><br><span class="line">            onUseWeaponAttackListener.onUseWeaponAttack(damage);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setOnUseWeaponAttackListener(OnUseWeaponAttackListener onUseWeaponAttackListener) &#123;</span><br><span class="line">        this.onUseWeaponAttackListener = onUseWeaponAttackListener;</span><br><span class="line">    &#125;</span><br><span class="line">    //这就是咱们的后门</span><br><span class="line">    public static interface OnUseWeaponAttackListener &#123;</span><br><span class="line">        int onUseWeaponAttack(int damage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.GameHook 反射注入 WeaponHook对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author cb</span><br><span class="line"> * @create 2022-05-2022/5/9 14:31</span><br><span class="line"> */</span><br><span class="line">public class GameHook &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Hero hero = new Hero(new Weapon());</span><br><span class="line">        //HeroPro heropro = new HeroPro(new Weapon());</span><br><span class="line">        try &#123;</span><br><span class="line">            //Field weapon = ReflectUtils.getVariable(hero.getClass(), &quot;weaponMain&quot;);</span><br><span class="line">            Class&lt;?&gt; heroClass = hero.getClass();</span><br><span class="line">            //Field weapon = heroClass.getField(&quot;weaponMain&quot;);// 不包含私有属性</span><br><span class="line">            Field weapon = heroClass.getDeclaredField(&quot;weaponMain&quot;);// 包含私有属性</span><br><span class="line">            weapon.setAccessible(true);</span><br><span class="line">            Weapon weaponHook = new WeaponHook();</span><br><span class="line">            ((WeaponHook) weaponHook).setOnUseWeaponAttackListener(damage -&gt; &#123;</span><br><span class="line">                //经过后门进行操做，这其实就是咱们注入的代码</span><br><span class="line">                System.out.println(&quot;damage = &quot; + damage);</span><br><span class="line">                return damage;</span><br><span class="line">            &#125;);</span><br><span class="line">            weapon.set(hero, weaponHook); //偷天换日  &gt;&gt;&gt; 关键操作，替换掉原来的成员变量  (属性.set(对象，新的成员变量的对象))</span><br><span class="line">            hero.attack(); //最终调用的是 weaponHook</span><br><span class="line">        &#125; catch (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">对目标形成15点伤害</span><br><span class="line">WeaponHook has called Weapon.attach</span><br><span class="line">damage = 15</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<p>三.防止Hook<br>1.HeroPro 增加hashcode判断</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class HeroPro &#123;</span><br><span class="line">    private Weapon weaponMain;</span><br><span class="line">    private final int weaponMainId;</span><br><span class="line"></span><br><span class="line">    public HeroPro(Weapon weaponMain) &#123;</span><br><span class="line">        this.weaponMain = weaponMain;</span><br><span class="line">        weaponMainId = this.weaponMain.hashCode();//记录原始Weapon对象的Id，hashCode对于每一个对象而言都是惟一的。</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void attack() &#123;</span><br><span class="line">        if (this.weaponMain.hashCode() != weaponMainId) &#123; //关键位置检查是否遭到替换</span><br><span class="line">            throw new IllegalAccessError(String.format(&quot;警告！遭到入侵！入侵者身份:%d&quot;, this.weaponMain.hashCode()));</span><br><span class="line">        &#125;</span><br><span class="line">        weaponMain.attack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再次Hook实验</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class GameHook &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        //Hero hero = new Hero(new Weapon());</span><br><span class="line">        HeroPro heropro = new HeroPro(new Weapon());</span><br><span class="line">        try &#123;</span><br><span class="line">            //Field weapon = ReflectUtils.getVariable(hero.getClass(), &quot;weaponMain&quot;);</span><br><span class="line">            Class&lt;?&gt; heroClass = heropro.getClass();</span><br><span class="line">            //Field weapon = heroClass.getField(&quot;weaponMain&quot;);// 不包含私有属性</span><br><span class="line">            Field weapon = heroClass.getDeclaredField(&quot;weaponMain&quot;);// 包含私有属性</span><br><span class="line">            weapon.setAccessible(true);</span><br><span class="line">            Weapon weaponHook = new WeaponHook();</span><br><span class="line">            ((WeaponHook) weaponHook).setOnUseWeaponAttackListener(damage -&gt; &#123;</span><br><span class="line">                //经过后门进行操做，这其实就是咱们注入的代码</span><br><span class="line">                System.out.println(&quot;damage = &quot; + damage);</span><br><span class="line">                return damage;</span><br><span class="line">            &#125;);</span><br><span class="line">            weapon.set(heropro, weaponHook); //偷天换日  &gt;&gt;&gt; 关键操作，替换掉原来的成员变量  (属性.set(对象，新的成员变量的对象))</span><br><span class="line">            heropro.attack(); //最终调用的是 weaponHook</span><br><span class="line">        &#125; catch (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.IllegalAccessError: 警告！遭到入侵！入侵者身份:363771819</span><br><span class="line">	at com.hook.HeroPro.attack(HeroPro.java:18)</span><br><span class="line">	at com.hook.GameHook.main(GameHook.java:26)</span><br><span class="line"></span><br><span class="line">Process finished with exit code 1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>2.JAVA实现http请求的三种方式</title>
    <url>/2022/04/16/JAVA%E5%AE%9E%E7%8E%B0http%E8%AF%B7%E6%B1%82%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="JAVA实现http请求的三种方式"><a href="#JAVA实现http请求的三种方式" class="headerlink" title="JAVA实现http请求的三种方式"></a>JAVA实现http请求的三种方式</h3><p><strong>1、HttpURLConnection：</strong></p>
<p>HttpURLConnection是java的标准类，什么都没封装，用起来太原始，不方便，比如重访问的自定义，以及一些高级功能等。</p>
<h3 id="2、java-net-http-HttpClient"><a href="#2、java-net-http-HttpClient" class="headerlink" title="2、java.net.http.HttpClient"></a>2、java.net.http.HttpClient</h3><p>jdk11正式启用自带HttpClient，代替之前比较旧的HttpURLConnection。其实从java9的jdk.incubator.httpclient模块迁移到java.net.http模块，包名由jdk.incubator.http改为java.net.http。</p>
<h3 id="3、Apache-HttpClient："><a href="#3、Apache-HttpClient：" class="headerlink" title="3、Apache HttpClient："></a><strong>3、Apache HttpClient：</strong></h3><p>在Android中，AndroidSDK中集成了Apache的HttpClient模块，HttpClient就是一个增强版的HttpURLConnection，它只是关注于如何发送请求、接收响应，以及管理HTTP连接。</p>
<p>1.HttpURLConnection</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Dome3 &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">        //1.构造网络资源实例</span><br><span class="line">        String urlPath = &quot;https://www.360kuai.com/&quot;;</span><br><span class="line">        URL url = new URL(urlPath);</span><br><span class="line">        //2.获取输入流，准备向内存读入数据</span><br><span class="line">        URLConnection urlConnection = url.openConnection();</span><br><span class="line">        InputStream in = urlConnection.getInputStream();</span><br><span class="line">        //3.读取数据逻辑实现</span><br><span class="line">        InputStreamReader reader = new InputStreamReader(in, StandardCharsets.UTF_8);</span><br><span class="line">        char[] b = new char[1024];</span><br><span class="line">        int i = 0;</span><br><span class="line">        StringBuilder sb = new StringBuilder();</span><br><span class="line">        while (-1 != (i = reader.read(b))) &#123;</span><br><span class="line">            sb.append(String.valueOf(b, 0, i));</span><br><span class="line">        &#125;</span><br><span class="line">        in.close();</span><br><span class="line">        System.out.println(sb);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.java.net.http.HttpClient</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Dome01 &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        String url=&quot;https://www.360kuai.com/&quot;;</span><br><span class="line">        HttpClient client = new DefaultHttpClient();</span><br><span class="line">        HttpGet get = new HttpGet(url);</span><br><span class="line">        //发起请求</span><br><span class="line">        HttpResponse response = client.execute(get);</span><br><span class="line">        //获取响应体</span><br><span class="line">        HttpEntity entity = response.getEntity();</span><br><span class="line">        if (entity != null) &#123;</span><br><span class="line">            InputStream instream = entity.getContent();</span><br><span class="line">            try &#123;</span><br><span class="line">                BufferedReader reader = new BufferedReader(new InputStreamReader(instream, &quot;UTF-8&quot;));</span><br><span class="line">                System.out.println(reader.readLine());</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                instream.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 关闭连接.</span><br><span class="line">        client.getConnectionManager().shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.Apache HttpClient：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Dome2 &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        //创建HttpClient对象</span><br><span class="line">        CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class="line">        //创建HttpGet请求</span><br><span class="line">        HttpGet httpGet = new HttpGet(&quot;http://www.itcast.cn/&quot;);</span><br><span class="line">        CloseableHttpResponse response = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            //使用HttpClient发起请求</span><br><span class="line">            response = httpClient.execute(httpGet);</span><br><span class="line">            //判断响应状态码是否为200</span><br><span class="line">            if (response.getStatusLine().getStatusCode() == 200) &#123;</span><br><span class="line">                //如果为200表示请求成功，获取返回数据</span><br><span class="line">                String content = EntityUtils.toString(response.getEntity(), &quot;UTF-8&quot;);</span><br><span class="line">                //打印数据长度</span><br><span class="line">                System.out.println(content);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            //释放连接</span><br><span class="line">            if (response == null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    response.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>​    CloseableHttpClient是在HttpClient的扩展的，是目前推荐的用法。不仅可以简单设置请求头，还可以利用fastjson转换请求或返回结果字符串为json格式。<br>HttpClient是一个简单的HTTP客户端（不是浏览器），可以看做一个增强版的HttpURLConnection，它关注于如何发送请求、接收响应，以及管理HTTP连接，但不会缓存服务器的响应，不能执行HTML页面中嵌入的Javascript代码；也不会对页面内容进行任何解析、处理。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>13.JavaEE软件开发体系的三层架构与Spring</title>
    <url>/2022/05/09/JavaEE%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E4%BD%93%E7%B3%BB%E7%9A%84%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<p>标准的JAVAEE开发是按照三层架构来的，即表现层，业务层，持久层。</p>
<h4 id="表现层，常见的mvc"><a href="#表现层，常见的mvc" class="headerlink" title="表现层，常见的mvc"></a>表现层，常见的mvc</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">也就是我们常说的web层。它负责接收客户端请求，向客户端响应结果，通常客户端使用http协议请求 web 层，web 需要接收 http 请求，完成 http 响应。</span><br><span class="line">表现层包括展示层和控制层：控制层负责接收请求，展示层负责结果的展示。</span><br><span class="line">表现层依赖业务层，接收到客户端请求一般会调用业务层进行业务处理，并将处理结果响应给客户端。</span><br><span class="line">表现层的设计一般都使用 MVC 模型。（MVC 是表现层的设计模型，和其他层没有关系）</span><br></pre></td></tr></table></figure>

<p>mvc（ model模型层，View视图层，controller控制层）</p>
<p>这里介绍一下spring mvc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SpringMVC是基于Spring的，是Spring中的一个模块，专门用来做web开发使用的。 </span><br><span class="line">SpringMVC 也叫 Spring web mvc。是 Spring 框架的一部分，是在Spring3.0 后发布的。基于 MVC 架构，功能分工明确、解耦合。</span><br><span class="line">SpringMVC也是一个容器，使用IoC核心技术，管理界面层中的控制器对象。SpringMVC的底层就是servlet，以servlet为核心，接收请求、处理请求，显示处理结果给用户。在此之前这个功能是由Servlet来实现的，现在使用SpringMVC来代替Servlet行驶控制器的角色和功能。</span><br><span class="line">其核心Servlet是：DispatcherServlet</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">优点：</span><br><span class="line">1. 基于 MVC 架构，功能分工明确。解耦合。</span><br><span class="line">2.容易理解，上手快；使用简单。就可以开发一个注解的 SpringMVC 项目，SpringMVC 也是轻量级的，jar 很小。不依赖的特定的接口和类。</span><br><span class="line">3.作为 Spring 框架一部分，能够使用 Spring 的 IoC 和 Aop。方便整合Strtus，MyBatis，Hiberate, JPA 等其他框架。</span><br><span class="line">4.SpringMVC 强化注解的使用，在控制器，Service，Dao 都可以使用注解。方便灵活。使用@Controller 创建处理器对象,@Service 创建业务对象，@Autowired 或者@Resource 在控制器类中注入 Service, Service 类中注入Dao。</span><br></pre></td></tr></table></figure>

<p>spring mvc原文链接：<a href="https://blog.csdn.net/liuhaiyang98/article/details/119617803">https://blog.csdn.net/liuhaiyang98/article/details/119617803</a></p>
<h4 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">也就是我们常说的 service 层。它负责业务逻辑处理，和我们开发项目的需求息息相关。web 层依赖业务层，但是业务层不依赖 web 层。</span><br><span class="line">业务层在业务处理时可能会依赖持久层，如果要对数据持久化需要保证事务一致性。（也就是我们说的，事务应该放到业务层来控制）</span><br></pre></td></tr></table></figure>

<p>（Struts2+Spring+Hibernate）（也就是SSH），（Spring+SpringMVC+MyBatis）SSM</p>
<h4 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">也就是我们是常说的 dao 层。负责数据持久化，包括数据层即数据库和数据访问层，数据库是对数据进</span><br><span class="line">行持久化的载体，数据访问层是业务层和持久层交互的接口，业务层需要通过数据访问层将数据持久化到数据库中。通俗的讲，持久层就是和数据库交互，对数据库表进行曾删改查的。</span><br></pre></td></tr></table></figure>

<p>持久层框架是对JDBC代码进行了封装，这样是Java程序员写起来就比较容易，我了解的有jpa，mybatis，Hibernate几种</p>
<ul>
<li><p>数据库持久层，这三者是主流，这三者到底有什么区别和优略呢？</p>
<p>一、技术简述</p>
<p>1、Spring Data JPA与Hibernate</p>
<p>Spring Data JPA是Spring Data的子模块。使用Spring Data，使得基于“repositories”概念的JPA实现更简单和容易。Spring Data JPA的目标是大大简化数据访问层代码的编码。作为使用者，我们只需要编写自己的repository接口，接口中包含一些个性化的查询方法，Spring Data JPA将自动实现查询方法。</p>
<p>JPA默认使用Hibernate作为ORM实现，所以，一般使用Spring Data JPA即会使用Hibernate。</p>
<p>我们再看看Hibernate的官方概念，Hibernate是一个开放源代码的对象关系映射框架，它对JDBC进行了非常轻量级的对象封装，它将POJO与数据库表建立映射关系，是一个全自动的ORM框架，Hibernate可以自动生成SQL语句，自动执行，使得Java程序员可以随心所欲的使用对象编程思维来操纵数据库。</p>
<p>2、MyBatis</p>
<p>MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Ordinary Java Objects,普通的 Java对象)映射成数据库中的记录。</p>
<p>持久层具体请看，原文链接：<a href="https://blog.csdn.net/xihuanyuye/article/details/81201441">https://blog.csdn.net/xihuanyuye/article/details/81201441</a></p>
<p>持久层详细参考：</p>
<p><a href="https://blog.csdn.net/qq897958555/article/details/53208002">https://blog.csdn.net/qq897958555/article/details/53208002</a></p>
<p>个人推荐，MyBatis</p>
</li>
</ul>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>​    分层的目的是为了解耦，解耦就是为了降低代码的耦合度，方便项目后期的维护和升级。</p>
<p>​    参考：<a href="https://blog.csdn.net/m0_52994499/article/details/120443982">https://blog.csdn.net/m0_52994499/article/details/120443982</a></p>
<h4 id="标准的包名，类名"><a href="#标准的包名，类名" class="headerlink" title="标准的包名，类名"></a>标准的包名，类名</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">controller(控制台)</span><br><span class="line">service（业务层接口）</span><br><span class="line">serviceimpl（业务层实现）</span><br><span class="line">dao(持久层接口)</span><br><span class="line">daoimpl（持久层实现）</span><br><span class="line">action（action）</span><br><span class="line">util（工具类包）</span><br><span class="line">bean（实体类包）</span><br><span class="line">filter（过滤器）</span><br><span class="line">interceptor（拦截器）</span><br></pre></td></tr></table></figure>

<h3 id="简单介绍一下Spring"><a href="#简单介绍一下Spring" class="headerlink" title="简单介绍一下Spring"></a>简单介绍一下Spring</h3><p>Spring是一个开放源代码的设计层面框架，解决业务逻辑层和其他各层的松耦合问题，因此它将面向接口的编程思想贯穿整个系统应用。<br>上述总结来说，Spring是一个分层的JavaSE&#x2F;EE full-stack(一站式) 轻量级开源框架。</p>
<h5 id="Spring框架特征"><a href="#Spring框架特征" class="headerlink" title="Spring框架特征"></a>Spring框架特征</h5><p>Spring是一个轻量级且非侵入式的开源框架 。<br>Spring是包含并管理应用对象的配置和生命周期的一种容器。<br>Spring是可以将简单的组件配置、组合成为复杂的应用的框架。<br>Spring通过控制反转(IoC) 促进了低耦合。<br>Spring提供了面向切面编程(AOP) 的丰富支持，允许通过分离应用的业务逻辑与系统级服务进行内聚性的开发。</p>
<h5 id="总结：-Spring是一个轻量级非侵入式的控制反转-IoC-和面向切面-AOP-的开源容器（框架）。"><a href="#总结：-Spring是一个轻量级非侵入式的控制反转-IoC-和面向切面-AOP-的开源容器（框架）。" class="headerlink" title="总结： Spring是一个轻量级非侵入式的控制反转(IoC)和面向切面(AOP)的开源容器（框架）。"></a>总结： Spring是一个轻量级非侵入式的控制反转(IoC)和面向切面(AOP)的开源容器（框架）。</h5><h4 id="Spring框架组成"><a href="#Spring框架组成" class="headerlink" title="Spring框架组成"></a>Spring框架组成</h4><p>Spring 框架是一个分层架构，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式.</p>
<p>组成 Spring 框架的每个模块（或组件）都可以单独存在，或者与其他一个或多个模块联合实现。每个模块的功能如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Spring Core(核心容器)：核心容器提供 Spring 框架的基本功能。核心容器的主要组件是 BeanFactory，它是工厂模式的实现。BeanFactory 使用控制反转（IOC） 模式将应用程序的配置和依赖性规范与实际的应用程序代码分开。</span><br><span class="line">Spring Context(上下文)：Spring 上下文是一个配置文件，向 Spring 框架提供上下文信息。Spring 上下文包括企业服务，例如 JNDI、EJB、电子邮件、国际化、校验和调度功能。</span><br><span class="line">Spring AOP(面向切片)：通过配置管理特性，Spring AOP 模块直接将面向切面的编程功能 , 集成到了 Spring 框架中。所以，可以很容易地使 Spring 框架管理任何支持 AOP的对象。Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖组件，就可以将声明性事务管理集成到应用程序中。</span><br><span class="line">Spring DAO：JDBC DAO 抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理和不同数据库供应商抛出的错误消息。异常层次结构简化了错误处理，并且极大地降低了需要编写的异常代码数量（例如打开和关闭连接）。Spring DAO 的面向 JDBC 的异常遵从通用的 DAO 异常层次结构。</span><br><span class="line">Spring ORM：Spring 框架插入了若干个 ORM 框架，从而提供了 ORM 的对象关系工具，其中包括 JDO、Hibernate 和 iBatis SQL Map。所有这些都遵从 Spring 的通用事务和 DAO 异常层次结构。</span><br><span class="line">Spring Web 模块：Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文。所以，Spring 框架支持与 Jakarta Struts 的集成。Web 模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作。</span><br><span class="line">Spring MVC 框架：MVC 框架是一个全功能的构建 Web 应用程序的 MVC 实现。通过策略接口，MVC 框架变成为高度可配置的，MVC 容纳了大量视图技术，其中包括 JSP、Velocity、Tiles、iText 和 POI。</span><br></pre></td></tr></table></figure>

<h4 id="重要拓展：Spring-Boot与Spring-Cloud"><a href="#重要拓展：Spring-Boot与Spring-Cloud" class="headerlink" title="重要拓展：Spring Boot与Spring Cloud"></a>重要拓展：Spring Boot与Spring Cloud</h4><p>Spring Boot 是 Spring 的一套快速配置脚手架，可以基于Spring Boot 快速开发单个微服务。<br>Spring Cloud是基于Spring Boot实现的。<br>Spring Boot专注于快速、方便集成的单个微服务个体，Spring Cloud关注全局的服务治理框架。<br>Spring Boot使用了约束优于配置的理念，很多集成方案已经帮你选择好了，能不配置就不配置 , Spring Cloud很大的一部分是基于Spring Boot来实现，Spring Boot可以离开Spring Cloud独立使用开发项目，但是Spring Cloud离不开Spring Boot，属于依赖的关系。<br>SpringBoot在SpringClound中起到了承上启下的作用，如果你要学习SpringCloud必须要学习SpringBoot。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript基础笔记（一）</title>
    <url>/2022/04/02/JavaScript%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h2 id="1-编程语言"><a href="#1-编程语言" class="headerlink" title="1 - 编程语言"></a>1 - 编程语言</h2><h3 id="1-1-编程"><a href="#1-1-编程" class="headerlink" title="1.1 编程"></a>1.1 编程</h3><ul>
<li>编程：<ul>
<li>就是让计算机为解决某个问题而使用某种程序设计语言编写程序代码，并最终得到结果的过程。</li>
</ul>
</li>
<li>计算机程序：<ul>
<li>就是计算机所执行的一系列的指令集合，而程序全部都是用我们所掌握的语言来编写的，所以人们要控制计算机一定要通过计算机语言向计算机发出命令。</li>
</ul>
</li>
</ul>
<h3 id="1-2-计算机语言"><a href="#1-2-计算机语言" class="headerlink" title="1.2 计算机语言"></a>1.2 计算机语言</h3><ul>
<li><p>计算机语言指用于人与计算机之间通讯的语言，它是人与计算机之间传递信息的媒介。</p>
</li>
<li><p>计算机语言的种类非常的多，总的来说可以分成机器语言，汇编语言和高级语言三大类。</p>
</li>
<li><p>实际上计算机最终所执行的都是 机器语言，它是由“0”和“1”组成的二进制数，二进制是计算机语言的基础。</p>
<p><img src="/images1/%E5%9B%BE%E7%89%871.png"></p>
</li>
</ul>
<h3 id="1-3-编程语言"><a href="#1-3-编程语言" class="headerlink" title="1.3 编程语言"></a>1.3 编程语言</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">编程语言：</span><br><span class="line">	可以通过类似于人类语言的“语言”来控制计算机，让计算机为我们做事情，这样的语言就叫做编程语言（Programming Language）。编程语言是用来控制计算机的一系列指令，它有固定的格式和词汇（不同编程语言的格式和词汇不一样），必须遵守。如今通用的编程语言有两种形式：汇编语言和高级语言。</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>语言类型</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>汇编语言</strong></td>
<td align="center">汇编语言和机器语言实质是相同的，都是直接对硬件操作，只不过指令采用了英文缩写的标识符，容易识别和记忆。</td>
</tr>
<tr>
<td><strong>高级语言</strong></td>
<td align="center">高级语言主要是相对于低级语言而言，它并不是特指某一种具体的语言，而是包括了很多编程语言，常用的有C语言、C++、Java、C#、Python、PHP、JavaScript、Go语言、Objective-C、Swift等。</td>
</tr>
</tbody></table>
<p><img src="/images1/%E5%9B%BE%E7%89%872.png"></p>
<h3 id="1-4-翻译器"><a href="#1-4-翻译器" class="headerlink" title="1.4 翻译器"></a>1.4 翻译器</h3><pre><code>    高级语言所编制的程序不能直接被计算机识别，必须经过转换才能被执行，为此，我们需要一个翻译器。翻译器可以将我们所编写的源代码转换为机器语言，这也被称为二进制化。
</code></pre>
<p> <img src="/images1/%E5%9B%BE%E7%89%873.png"></p>
<h3 id="1-5-编程语言和标记语言区别"><a href="#1-5-编程语言和标记语言区别" class="headerlink" title="1.5 编程语言和标记语言区别"></a>1.5 编程语言和标记语言区别</h3><table>
<thead>
<tr>
<th>语言</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>编程语言</td>
<td>编程语言有很强的逻辑和行为能力。在编程语言里, 你会看到很多 if else 、for 、while等具有逻辑性和行为能力的指令，这是主动的。</td>
</tr>
<tr>
<td>标记语言</td>
<td>标记语言（html）不用于向计算机发出指令，常用于格式化和链接。标记语言的存在是用来被读取的, 他是被动的。</td>
</tr>
</tbody></table>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>计算机可以帮助人类解决某些问题</li>
<li>程序员利用编程语言编写程序发出指令控制计算机来实现这些任务</li>
<li>编程语言有机器语言、汇编语言、高级语言</li>
<li>高级语言需要一个翻译器转换为计算机识别的机器语言</li>
<li>编程语言是主动的有很强的逻辑性</li>
</ol>
<h2 id="2-计算机基础"><a href="#2-计算机基础" class="headerlink" title="2 - 计算机基础"></a>2 - 计算机基础</h2><h3 id="2-1-计算机组成"><a href="#2-1-计算机组成" class="headerlink" title="2.1 计算机组成"></a>2.1 计算机组成</h3><p><img src="/images1/%E5%9B%BE%E7%89%874.png"></p>
<p><img src="/images1/%E5%9B%BE%E7%89%875.png"></p>
<h3 id="2-2-数据存储"><a href="#2-2-数据存储" class="headerlink" title="2.2 数据存储"></a>2.2 数据存储</h3><ol>
<li>计算机内部使用二进制 0 和 1来表示数据。</li>
<li>所有数据，包括文件、图片等最终都是以二进制数据（0 和 1）的形式存放在硬盘中的。</li>
<li>所有程序，包括操作系统，本质都是各种数据，也以二进制数据的形式存放在硬盘中。平时我们所说的安装软件，其实就是把程序文件复制到硬盘中。</li>
<li>硬盘、内存都是保存的二进制数据。</li>
</ol>
<h3 id="2-3-数据存储单位"><a href="#2-3-数据存储单位" class="headerlink" title="2.3 数据存储单位"></a>2.3 数据存储单位</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">大小关系：bit &lt; byte &lt; kb &lt; GB &lt; TB&lt;.....</span><br></pre></td></tr></table></figure>

<ul>
<li>位(bit)：   1bit 可以保存一个 0 或者 1 （最小的存储单位）</li>
<li>字节(Byte)：1B &#x3D; 8b</li>
<li>千字节(KB)：1KB &#x3D; 1024B</li>
<li>兆字节(MB)：1MB &#x3D; 1024KB</li>
<li>吉字节(GB):  1GB &#x3D; 1024MB</li>
<li>太字节(TB):  1TB &#x3D; 1024GB</li>
</ul>
<h3 id="2-4-程序运行"><a href="#2-4-程序运行" class="headerlink" title="2.4 程序运行"></a>2.4 程序运行</h3><p><img src="/images1/%E5%9B%BE%E7%89%876.png"></p>
<pre><code>计算机运行软件的过程：
1. 打开某个程序时，先从硬盘中把程序的代码加载到内存中
2. CPU执行内存中的代码
   注意：之所以要内存的一个重要原因，是因为 cpu运行太快了，如果只从硬盘中读数据，会浪费cpu性能，所以，才使用存取速度更快的内存来保存运行时的数据。（内存是电，硬盘是机械）
</code></pre>
<h2 id="3-初始JavaScript"><a href="#3-初始JavaScript" class="headerlink" title="3 - 初始JavaScript"></a>3 - 初始JavaScript</h2><h3 id="3-1-JavaScript-是什么"><a href="#3-1-JavaScript-是什么" class="headerlink" title="3.1 JavaScript 是什么"></a>3.1 JavaScript 是什么</h3><p><img src="/images1/%E5%9B%BE%E7%89%877.png"></p>
<ul>
<li><p>JavaScript 是世界上最流行的语言之一，是一种运行在客户端的脚本语言 （Script 是脚本的意思）</p>
</li>
<li><p>脚本语言：不需要编译，运行过程中由 js 解释器( js 引擎）逐行来进行解释并执行</p>
</li>
<li><p>现在也可以基于 Node.js 技术进行服务器端编程</p>
<p><img src="/images1/%E5%9B%BE%E7%89%878.png"></p>
</li>
</ul>
<h3 id="3-2-JavaScript的作用"><a href="#3-2-JavaScript的作用" class="headerlink" title="3.2 JavaScript的作用"></a>3.2 JavaScript的作用</h3><ul>
<li>表单动态校验（密码强度检测）  （ JS 产生最初的目的 ）</li>
<li>网页特效</li>
<li>服务端开发(Node.js)</li>
<li>桌面程序(Electron)</li>
<li>App(Cordova) </li>
<li>控制硬件-物联网(Ruff)</li>
<li>游戏开发(cocos2d-js)</li>
</ul>
<h3 id="3-3-HTML-x2F-CSS-x2F-JS-的关系"><a href="#3-3-HTML-x2F-CSS-x2F-JS-的关系" class="headerlink" title="3.3 HTML&#x2F;CSS&#x2F;JS 的关系"></a>3.3 HTML&#x2F;CSS&#x2F;JS 的关系</h3><p><img src="/images1/%E5%9B%BE%E7%89%879.png"></p>
<h3 id="3-4-浏览器执行-JS-简介"><a href="#3-4-浏览器执行-JS-简介" class="headerlink" title="3.4 浏览器执行 JS 简介"></a>3.4 浏览器执行 JS 简介</h3><p><strong>浏览器分成两部分：渲染引擎和 JS 引擎</strong></p>
<p><img src="/images1/neihe.png"></p>
<pre><code>    浏览器本身并不会执行JS代码，而是通过内置 JavaScript 引擎(解释器) 来执行 JS 代码 。JS 引擎执行代码时逐行解释每一句源码（转换为机器语言），然后由计算机去执行，所以 JavaScript 语言归为脚本语言，会逐行解释执行。
</code></pre>
<p><img src="/images1/%E5%9B%BE%E7%89%8710.png"></p>
<h3 id="3-5-JS-的组成"><a href="#3-5-JS-的组成" class="headerlink" title="3.5 JS 的组成"></a>3.5 JS 的组成</h3><p><img src="/images1/%E5%9B%BE%E7%89%8711.png"></p>
<ol>
<li><h4 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a><strong>ECMAScript</strong></h4><pre><code>        ECMAScript 是由ECMA 国际（ 原欧洲计算机制造商协会）进行标准化的一门编程语言，这种语言在万维网上应用广泛，它往往被称为 JavaScript或 JScript，但实际上后两者是 ECMAScript 语言的实现和扩展。
</code></pre>
<p><img src="/images1/%E5%9B%BE%E7%89%8712.png"></p>
<p>​        ECMAScript：规定了JS的编程语法和基础核心知识，是所有浏览器厂商共同遵守的一套JS语法工业标准。</p>
<p>更多参看MDN: <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/JavaScript_technologies_overview">MDN手册</a></p>
</li>
<li><h4 id="DOM——文档对象模型"><a href="#DOM——文档对象模型" class="headerlink" title="DOM——文档对象模型"></a><strong>DOM——文档对象模型</strong></h4><pre><code>        **文档对象模型**（DocumentObject Model，简称DOM），是W3C组织推荐的处理可扩展标记语言的标准编程接口。通过 DOM 提供的接口可以对页面上的各种元素进行操作（大小、位置、颜色等）
</code></pre>
</li>
<li><h4 id="BOM——浏览器对象模型"><a href="#BOM——浏览器对象模型" class="headerlink" title="BOM——浏览器对象模型"></a><strong>BOM——浏览器对象模型</strong></h4><pre><code>        **浏览器对象模型**(Browser Object Model，简称BOM) 是指浏览器对象模型，它提供了独立于内容的、可以与浏览器窗口进行互动的对象结构。通过BOM可以操作浏览器窗口，比如弹出框、控制浏览器跳转、获取分辨率等。
</code></pre>
</li>
</ol>
<h3 id="3-6-JS-初体验"><a href="#3-6-JS-初体验" class="headerlink" title="3.6 JS 初体验"></a>3.6 JS 初体验</h3><pre><code>JS 有3种书写位置，分别为行内、内嵌和外部。
</code></pre>
<ol>
<li><p>行内式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点我试试&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;Hello World&#x27;)&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>可以将单行或少量 JS 代码写在HTML标签的事件属性中（以 on 开头的属性），如：onclick</li>
<li>注意单双引号的使用：在HTML中我们推荐使用双引号, JS 中我们推荐使用单引号</li>
<li>可读性差， 在html中编写JS大量代码时，不方便阅读；</li>
<li>引号易错，引号多层嵌套匹配时，非常容易弄混；</li>
<li>特殊情况下使用</li>
</ul>
</li>
<li><p>内嵌式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&#x27;Hello  World~!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>可以将多行JS代码写到 script 标签中</li>
<li>内嵌 JS 是学习时常用的方式</li>
</ul>
</li>
<li><p>外部JS文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;my.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>利于HTML页面代码结构化，把大段 JS代码独立到 HTML 页面之外，既美观，也方便文件级别的复用</li>
<li>引用外部 JS文件的 script 标签中间不可以写代码</li>
<li>适合于JS 代码量比较大的情况</li>
</ul>
</li>
</ol>
<h2 id="4-JavaScript注释"><a href="#4-JavaScript注释" class="headerlink" title="4 - JavaScript注释"></a>4 - JavaScript注释</h2><h3 id="4-1-单行注释"><a href="#4-1-单行注释" class="headerlink" title="4.1  单行注释"></a>4.1  单行注释</h3><pre><code>为了提高代码的可读性，JS与CSS一样，也提供了注释功能。
JS中的注释主要有两种，分别是 单行注释 和 多行注释。
</code></pre>
<p>单行注释的注释方式如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 我是一行文字，不想被 JS引擎 执行，所以 注释起来	</span><br></pre></td></tr></table></figure>

<pre><code>// 用来注释单行文字（  快捷键   ctrl  +  /   ）
</code></pre>
<h3 id="4-2-多行注释"><a href="#4-2-多行注释" class="headerlink" title="4.2 多行注释"></a>4.2 多行注释</h3><p>多行注释的注释方式如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">  获取用户年龄和姓名</span><br><span class="line">  并通过提示框显示出来</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* */  用来注释多行文字（ 默认快捷键  alt +  shift  + a ） </span><br></pre></td></tr></table></figure>


<p>快捷键修改为：   ctrl + shift  +  &#x2F;</p>
<p>vscode → 首选项按钮 → 键盘快捷方式 → 查找 原来的快捷键 → 修改为新的快捷键 → 回车确认</p>
<h2 id="5-JavaScript输入输出语句"><a href="#5-JavaScript输入输出语句" class="headerlink" title="5 - JavaScript输入输出语句"></a>5 - JavaScript输入输出语句</h2><p>为了方便信息的输入输出，JS中提供了一些输入输出语句，其常用的语句如下：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
<th>归属</th>
</tr>
</thead>
<tbody><tr>
<td>alert(msg)</td>
<td>浏览器弹出警示框</td>
<td>浏览器</td>
</tr>
<tr>
<td>console.log(msg)</td>
<td>浏览器控制台打印输出信息</td>
<td>浏览器</td>
</tr>
<tr>
<td>prompt(info)</td>
<td>浏览器弹出输入框，用户可以输入</td>
<td>浏览器</td>
</tr>
</tbody></table>
<ul>
<li>注意：alert() 主要用来显示消息给用户，console.log() 用来给程序员自己看运行时的消息。</li>
</ul>
<h2 id="6-变量的概念"><a href="#6-变量的概念" class="headerlink" title="6 - 变量的概念"></a>6 - 变量的概念</h2><h3 id="6-1-什么是变量"><a href="#6-1-什么是变量" class="headerlink" title="6.1 什么是变量"></a>6.1 什么是变量</h3><p>白话：变量就是一个装东西的盒子。</p>
<p>通俗：变量是用于存放数据的容器。 我们通过 变量名 获取数据，甚至数据可以修改。<br><img src="/images1/%E5%9B%BE%E7%89%8713.png"></p>
<h3 id="6-2-变量在内存中的存储"><a href="#6-2-变量在内存中的存储" class="headerlink" title="6.2 变量在内存中的存储"></a>6.2 变量在内存中的存储</h3><pre><code>    本质：变量是程序在内存中申请的一块用来存放数据的空间。类似我们酒店的房间，一个房间就可以看做是一个变量。  
</code></pre>
<p><img src="/images1/%E5%9B%BE%E7%89%8714.png"></p>
<h2 id="7-变量的使用"><a href="#7-变量的使用" class="headerlink" title="7 - 变量的使用"></a>7 - 变量的使用</h2><ul>
<li>变量的声明   </li>
<li>变量的赋值</li>
</ul>
<h3 id="7-1-声明变量"><a href="#7-1-声明变量" class="headerlink" title="7.1 声明变量"></a>7.1 声明变量</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  声明变量  </span></span><br><span class="line"><span class="keyword">var</span> age; <span class="comment">//  声明一个 名称为age 的变量     </span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>var 是一个 JS关键字，用来声明变量( variable 变量的意思 )。使用该关键字声明变量后，计算机会自动为变量分配内存空间，不需要程序员管</p>
</li>
<li><p>age 是程序员定义的变量名，我们要通过变量名来访问内存中分配的空间</p>
</li>
</ul>
<h3 id="7-2-赋值"><a href="#7-2-赋值" class="headerlink" title="7.2 赋值"></a>7.2 赋值</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">age = <span class="number">10</span>; <span class="comment">// 给 age  这个变量赋值为 10          </span></span><br></pre></td></tr></table></figure>

<ul>
<li>&#x3D; 用来把右边的值赋给左边的变量空间中   此处代表赋值的意思</li>
<li>变量值是程序员保存到变量空间里的值</li>
</ul>
<h3 id="7-3-变量的初始化"><a href="#7-3-变量的初始化" class="headerlink" title="7.3 变量的初始化"></a>7.3 变量的初始化</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age  = <span class="number">18</span>;  <span class="comment">// 声明变量同时赋值为 18</span></span><br><span class="line"><span class="comment">// 声明一个变量并赋值， 我们称之为变量的初始化。</span></span><br></pre></td></tr></table></figure>

<h3 id="7-4-变量语法扩展"><a href="#7-4-变量语法扩展" class="headerlink" title="7.4 变量语法扩展"></a>7.4 变量语法扩展</h3><ul>
<li><p>更新变量</p>
<p>​        一个变量被重新复赋值后，它原有的值就会被覆盖，变量值将以最后一次赋的值为准。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">age = <span class="number">81</span>;   <span class="comment">// 最后的结果就是81因为18 被覆盖掉了          </span></span><br></pre></td></tr></table></figure>
</li>
<li><p>同时声明多个变量</p>
<p>​        同时声明多个变量时，只需要写一个 var， 多个变量名之间使用英文逗号隔开。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>,  name = <span class="string">&#x27;zs&#x27;</span>, sex = <span class="number">2</span>;       </span><br></pre></td></tr></table></figure>
</li>
<li><p>声明变量特殊情况</p>
<table>
<thead>
<tr>
<th>情况</th>
<th>说明</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>var  age ; console.log (age);</td>
<td>只声明 不赋值</td>
<td>undefined</td>
</tr>
<tr>
<td>console.log(age)</td>
<td>不声明 不赋值  直接使用</td>
<td>报错</td>
</tr>
<tr>
<td>age   &#x3D; 10; console.log (age);</td>
<td>不声明   只赋值</td>
<td>10</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="7-5-变量命名规范"><a href="#7-5-变量命名规范" class="headerlink" title="7.5 变量命名规范"></a>7.5 变量命名规范</h3><p>规则：</p>
<ul>
<li>由字母(A-Za-z)、数字(0-9)、下划线(_)、美元符号( $ )组成，如：usrAge, num01, _name</li>
<li>严格区分大小写。var app; 和 var App; 是两个变量</li>
<li>不能 以数字开头。  18age   是错误的</li>
<li>不能 是关键字、保留字。例如：var、for、while</li>
<li>变量名必须有意义。 MMD   BBD        nl   →     age  </li>
<li>遵守驼峰命名法。首字母小写，后面单词的首字母需要大写。myFirstName<img src="/images1/%E5%9B%BE%E7%89%8715.png"></li>
</ul>
<p>推荐翻译网站： 有道    爱词霸</p>
<h2 id="8-数据类型"><a href="#8-数据类型" class="headerlink" title="8 - 数据类型"></a>8 - 数据类型</h2><h3 id="8-1-数据类型简介"><a href="#8-1-数据类型简介" class="headerlink" title="8.1 数据类型简介"></a>8.1 数据类型简介</h3><ul>
<li><p>为什么需要数据类型</p>
<pre><code>        在计算机中，不同的数据所需占用的存储空间是不同的，为了便于把数据分成所需内存大小不同的数据，充分利用存储空间，于是定义了不同的数据类型。
    简单来说，数据类型就是数据的类别型号。比如姓名“张三”，年龄18，这些数据的类型是不一样的。
</code></pre>
</li>
<li><p>变量的数据类型</p>
<pre><code>        变量是用来存储值的所在处，它们有名字和数据类型。变量的数据类型决定了如何将代表这些值的位存储到计算机的内存中。JavaScript 是一种弱类型或者说动态语言。这意味着不用提前声明变量的类型，在程序运行过程中，类型会被自动确定：
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>;        <span class="comment">// 这是一个数字型</span></span><br><span class="line"><span class="keyword">var</span> areYouOk = <span class="string">&#x27;是的&#x27;</span>;   <span class="comment">// 这是一个字符串     </span></span><br></pre></td></tr></table></figure>

<p>​        在代码运行时，变量的数据类型是由 JS引擎 根据 &#x3D; 右边变量值的数据类型来判断 的，运行完毕之后， 变量就确定了数据类型。JavaScript 拥有动态类型，同时也意味着相同的变量可用作不同的类型：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">6</span>;           <span class="comment">// x 为数字</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">&quot;Bill&quot;</span>;      <span class="comment">// x 为字符串    </span></span><br></pre></td></tr></table></figure>
</li>
<li><p>数据类型的分类</p>
<pre><code>JS 把数据类型分为两类：
</code></pre>
<ul>
<li><p>简单数据类型 （Number,String,Boolean,Undefined,Null）</p>
</li>
<li><p>复杂数据类型 （object)</p>
</li>
</ul>
</li>
</ul>
<h3 id="8-2-简单数据类型"><a href="#8-2-简单数据类型" class="headerlink" title="8.2 简单数据类型"></a>8.2 简单数据类型</h3><p>简单数据类型（基本数据类型）</p>
<p>JavaScript 中的简单数据类型及其说明如下：</p>
<p><img src="/images1/%E5%9B%BE%E7%89%8716.png"></p>
<ul>
<li><p>数字型 Number</p>
<p>​        JavaScript 数字类型既可以保存整数，也可以保存小数(浮点数）。  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">21</span>;       <span class="comment">// 整数</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Age</span> = <span class="number">21.3747</span>;  <span class="comment">// 小数     </span></span><br></pre></td></tr></table></figure>

<ol>
<li><p>数字型进制</p>
<p>最常见的进制有二进制、八进制、十进制、十六进制。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 1.八进制数字序列范围：0~7</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">07</span>;   <span class="comment">// 对应十进制的7</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">019</span>;  <span class="comment">// 对应十进制的19</span></span><br><span class="line"><span class="keyword">var</span> num3 = <span class="number">08</span>;   <span class="comment">// 对应十进制的8</span></span><br><span class="line"> <span class="comment">// 2.十六进制数字序列范围：0~9以及A~F</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0xA</span>;   </span><br></pre></td></tr></table></figure>

<p>现阶段我们只需要记住，在JS中八进制前面加0，十六进制前面加 0x  </p>
</li>
<li><p>数字型范围</p>
<p>JavaScript中数值的最大和最小值</p>
<ul>
<li><p>最大值：Number.MAX_VALUE，这个值为： 1.7976931348623157e+308</p>
</li>
<li><p>最小值：Number.MIN_VALUE，这个值为：5e-32</p>
</li>
</ul>
</li>
</ol>
</li>
</ul>
<ol start="3">
<li><p>数字型三个特殊值</p>
<ul>
<li><p>Infinity ，代表无穷大，大于任何数值</p>
</li>
<li><p>-Infinity ，代表无穷小，小于任何数值</p>
</li>
<li><p>NaN ，Not a number，代表一个非数值</p>
</li>
</ul>
</li>
<li><p>isNaN</p>
<p>用来判断一个变量是否为非数字的类型，返回 true 或者 false</p>
</li>
</ol>
<p>   <img src="/images1/%E5%9B%BE%E7%89%8717.png"></p>
   <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">var</span> usrAge = <span class="number">21</span>;</span><br><span class="line"><span class="keyword">var</span> isOk = <span class="built_in">isNaN</span>(userAge);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(isNum);          <span class="comment">// false ，21 不是一个非数字</span></span><br><span class="line"><span class="keyword">var</span> usrName = <span class="string">&quot;andy&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(userName));<span class="comment">// true ，&quot;andy&quot;是一个非数字</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>字符串型 String</p>
<p>​        字符串型可以是引号中的任意文本，其语法为 双引号 “” 和 单引号’’</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> strMsg = <span class="string">&quot;我爱北京天安门~&quot;</span>;  <span class="comment">// 使用双引号表示字符串</span></span><br><span class="line"><span class="keyword">var</span> strMsg2 = <span class="string">&#x27;我爱吃猪蹄~&#x27;</span>;    <span class="comment">// 使用单引号表示字符串</span></span><br><span class="line"><span class="comment">// 常见错误</span></span><br><span class="line"><span class="keyword">var</span> strMsg3 = 我爱大肘子;       <span class="comment">// 报错，没使用引号，会被认为是js代码，但js没有这些语法</span></span><br></pre></td></tr></table></figure>

<p>​        因为 HTML 标签里面的属性使用的是双引号，JS 这里我们更推荐使用单引号。</p>
<ol>
<li><p>字符串引号嵌套</p>
<p>​        JS 可以用单引号嵌套双引号 ，或者用双引号嵌套单引号 (外双内单，外单内双)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> strMsg = <span class="string">&#x27;我是&quot;高帅富&quot;程序猿&#x27;</span>;   <span class="comment">// 可以用&#x27;&#x27;包含&quot;&quot;</span></span><br><span class="line"><span class="keyword">var</span> strMsg2 = <span class="string">&quot;我是&#x27;高帅富&#x27;程序猿&quot;</span>;  <span class="comment">// 也可以用&quot;&quot; 包含&#x27;&#x27;</span></span><br><span class="line"><span class="comment">//  常见错误</span></span><br><span class="line"><span class="keyword">var</span> badQuotes = <span class="string">&#x27;What on earth?&quot;; // 报错，不能 单双引号搭配</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串转义符</p>
<p>​        类似HTML里面的特殊字符，字符串中也有特殊字符，我们称之为转义符。</p>
<p>​        转义符都是 \ 开头的，常用的转义符及其说明如下：</p>
<table>
<thead>
<tr>
<th>转义符</th>
<th>解释说明</th>
</tr>
</thead>
<tbody><tr>
<td>\n</td>
<td>换行符，n   是   newline   的意思</td>
</tr>
<tr>
<td>\ \</td>
<td>斜杠   \</td>
</tr>
<tr>
<td>&#39;</td>
<td>‘   单引号</td>
</tr>
<tr>
<td>&quot;</td>
<td>”双引号</td>
</tr>
<tr>
<td>\t</td>
<td>tab  缩进</td>
</tr>
<tr>
<td>\b</td>
<td>空格 ，b   是   blank  的意思</td>
</tr>
</tbody></table>
</li>
<li><p>字符串长度</p>
<pre><code>        字符串是由若干字符组成的，这些字符的数量就是字符串的长度。通过字符串的 length 属性可以获取整个字符串的长度。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> strMsg = <span class="string">&quot;我是帅气多金的程序猿！&quot;</span>;</span><br><span class="line"><span class="title function_">alert</span>(strMsg.<span class="property">length</span>); <span class="comment">// 显示 11</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串拼接</p>
<ul>
<li><p>多个字符串之间可以使用 + 进行拼接，其拼接方式为 字符串 + 任何类型 &#x3D; 拼接之后的新字符串</p>
</li>
<li><p>拼接前会把与字符串相加的任何类型转成字符串，再拼接成一个新的字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.1 字符串 &quot;相加&quot;</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;hello&#x27;</span> + <span class="string">&#x27; &#x27;</span> + <span class="string">&#x27;world&#x27;</span>); <span class="comment">// hello world</span></span><br><span class="line"><span class="comment">//1.2 数值字符串 &quot;相加&quot;</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;100&#x27;</span> + <span class="string">&#x27;100&#x27;</span>); <span class="comment">// 100100</span></span><br><span class="line"><span class="comment">//1.3 数值字符串 + 数值</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;11&#x27;</span> + <span class="number">12</span>);     <span class="comment">// 1112 </span></span><br></pre></td></tr></table></figure>

<ul>
<li><em><strong>+ 号总结口诀：数值相加 ，字符相连</strong></em></li>
</ul>
</li>
</ul>
</li>
<li><p>字符串拼接加强</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pink老师&#x27;</span> + <span class="number">18</span>);        <span class="comment">// 只要有字符就会相连 </span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pink老师age岁啦&#x27;</span>);      <span class="comment">// 这样不行哦</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pink老师&#x27;</span> + age);         <span class="comment">// pink老师18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pink老师&#x27;</span> + age + <span class="string">&#x27;岁啦&#x27;</span>); <span class="comment">// pink老师18岁啦</span></span><br></pre></td></tr></table></figure>

<ul>
<li>经常会将字符串和变量来拼接，变量可以很方便地修改里面的值</li>
<li>变量是不能添加引号的，因为加引号的变量会变成字符串</li>
<li>如果变量两侧都有字符串拼接，口诀“引引加加 ”，删掉数字，变量写加中间</li>
</ul>
</li>
</ol>
</li>
<li><p>布尔型Boolean</p>
<p>​        布尔类型有两个值：true 和 false ，其中 true 表示真（对），而 false 表示假（错）。</p>
<p>​        布尔型和数字型相加的时候， true 的值为 1 ，false 的值为 0。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> + <span class="number">1</span>);  <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> + <span class="number">1</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Undefined和 Null</p>
<p>​        一个声明后没有被赋值的变量会有一个默认值undefined ( 如果进行相连或者相加时，注意结果）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> variable;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(variable);           <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好&#x27;</span> + variable);  <span class="comment">// 你好undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11</span> + variable);     <span class="comment">// NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> + variable);   <span class="comment">//  NaN</span></span><br></pre></td></tr></table></figure>

<p>​        一个声明变量给 null 值，里面存的值为空（学习对象时，我们继续研究null)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vari = <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好&#x27;</span> + vari);  <span class="comment">// 你好null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11</span> + vari);     <span class="comment">// 11</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> + vari);   <span class="comment">//  1</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="8-3-获取变量数据类型"><a href="#8-3-获取变量数据类型" class="headerlink" title="8.3 获取变量数据类型"></a>8.3 获取变量数据类型</h3><ul>
<li><p>获取检测变量的数据类型</p>
<p>​        typeof 可用来获取检测变量的数据类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">18</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> num) <span class="comment">// 结果 number      </span></span><br></pre></td></tr></table></figure>

<p>​        不同类型的返回值</p>
<p><img src="/images1/%E5%9B%BE%E7%89%8718.png"></p>
</li>
<li><p>字面量</p>
<p>​        字面量是在源代码中一个固定值的表示法，通俗来说，就是字面量表示如何表达这个值。</p>
<ul>
<li>数字字面量：8, 9, 10</li>
<li>字符串字面量：’黑马程序员’, “大前端”</li>
<li>布尔字面量：true，false</li>
</ul>
</li>
</ul>
<h3 id="8-4-数据类型转换"><a href="#8-4-数据类型转换" class="headerlink" title="8.4 数据类型转换"></a>8.4 数据类型转换</h3><p>​        什么是数据类型转换？</p>
<p>​        使用表单、prompt 获取过来的数据默认是字符串类型的，此时就不能直接简单的进行加法运算，而需要转换变量的数据类型。通俗来说，就是把一种数据类型的变量转换成另一种数据类型，通常会实现3种方式的转换：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">转换为字符串类型</span><br><span class="line">转换为数字型</span><br><span class="line">转换为布尔型</span><br></pre></td></tr></table></figure>

<ul>
<li><p>转换为字符串</p>
<p><img src="/images1/%E5%9B%BE%E7%89%8719.png"></p>
<ul>
<li>toString() 和 String()  使用方式不一样。</li>
<li>三种转换方式，更多第三种加号拼接字符串转换方式， 这一种方式也称之为隐式转换。</li>
</ul>
</li>
<li><p>转换为数字型（重点）</p>
<p><img src="/images1/%E5%9B%BE%E7%89%8720.png"></p>
<ul>
<li>注意 parseInt 和 parseFloat 单词的大小写，这2个是重点</li>
<li>隐式转换是我们在进行算数运算的时候，JS 自动转换了数据类型</li>
</ul>
</li>
<li><p>转换为布尔型</p>
<p><img src="/images1/%E5%9B%BE%E7%89%8721.png"></p>
<ul>
<li><p>代表空、否定的值会被转换为 false  ，如 ‘’、0、NaN、null、undefined  </p>
</li>
<li><p>其余值都会被转换为 true</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="string">&#x27;&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="number">0</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="title class_">NaN</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="literal">null</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="literal">undefined</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="string">&#x27;小白&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="number">12</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="9-解释型语言和编译型语言"><a href="#9-解释型语言和编译型语言" class="headerlink" title="9 - 解释型语言和编译型语言"></a>9 - 解释型语言和编译型语言</h2><h3 id="9-1-概述"><a href="#9-1-概述" class="headerlink" title="9.1 概述"></a>9.1 概述</h3><pre><code>计算机不能直接理解任何除机器语言以外的语言，所以必须要把程序员所写的程序语言翻译成机器语言才能执行程序。程序语言翻译成机器语言的工具，被称为翻译器。
</code></pre>
<p><img src="/images1/%E5%9B%BE%E7%89%8722.png"></p>
<ul>
<li>翻译器翻译的方式有两种：一个是编译，另外一个是解释。两种方式之间的区别在于翻译的时间点不同</li>
<li>编译器是在代码执行之前进行编译，生成中间代码文件</li>
<li>解释器是在运行时进行及时解释，并立即执行(当编译器以解释方式运行的时候，也称之为解释器)</li>
</ul>
<h3 id="9-2-执行过程"><a href="#9-2-执行过程" class="headerlink" title="9.2 执行过程"></a>9.2 执行过程</h3><p><img src="/images1/%E5%9B%BE%E7%89%8723.png"></p>
<pre><code>类似于请客吃饭：

    编译语言：首先把所有菜做好，才能上桌吃饭

    解释语言：好比吃火锅，边吃边涮，同时进行
</code></pre>
<h2 id="10-关键字和保留字"><a href="#10-关键字和保留字" class="headerlink" title="10 - 关键字和保留字"></a>10 - 关键字和保留字</h2><h3 id="10-1-标识符"><a href="#10-1-标识符" class="headerlink" title="10.1 标识符"></a>10.1 标识符</h3><pre><code>标识(zhi)符：就是指开发人员为变量、属性、函数、参数取的名字。

标识符不能是关键字或保留字。
</code></pre>
<h3 id="10-2-关键字"><a href="#10-2-关键字" class="headerlink" title="10.2 关键字"></a>10.2 关键字</h3><pre><code>关键字：是指 JS本身已经使用了的字，不能再用它们充当变量名、方法名。

包括：break、case、catch、continue、default、delete、do、else、finally、for、function、if、in、instanceof、new、return、switch、this、throw、try、typeof、var、void、while、with 等。
</code></pre>
<h3 id="10-3-保留字"><a href="#10-3-保留字" class="headerlink" title="10.3 保留字"></a>10.3 保留字</h3><pre><code>保留字：实际上就是预留的“关键字”，意思是现在虽然还不是关键字，但是未来可能会成为关键字，同样不能使用它们当变量名或方法名。

包括：boolean、byte、char、class、const、debugger、double、enum、export、extends、fimal、float、goto、implements、import、int、interface、long、mative、package、private、protected、public、short、static、super、synchronized、throws、transient、volatile 等。

注意：如果将保留字用作变量名或函数名，那么除非将来的浏览器实现了该保留字，否则很可能收不到任何错误消息。当浏览器将其实现后，该单词将被看做关键字，如此将出现关键字错误。
</code></pre>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript之循环笔记（三）</title>
    <url>/2022/04/03/JavaScript%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h2 id="1-循环"><a href="#1-循环" class="headerlink" title="1 - 循环"></a>1 - 循环</h2><h3 id="1-1-for循环"><a href="#1-1-for循环" class="headerlink" title="1.1 for循环"></a>1.1 for循环</h3><ul>
<li><p>语法结构</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化变量; 条件表达式; 操作表达式 )&#123;</span><br><span class="line">    <span class="comment">//循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>初始化变量</td>
<td>通常被用于初始化一个计数器，该表达式可以使用 var 关键字声明新的变量，这个变量帮我们来记录次数。</td>
</tr>
<tr>
<td>条件表达式</td>
<td>用于确定每一次循环是否能被执行。如果结果是 true 就继续循环，否则退出循环。</td>
</tr>
<tr>
<td>操作表达式</td>
<td>用于确定每一次循环是否能被执行。如果结果是 true 就继续循环，否则退出循环。</td>
</tr>
</tbody></table>
<p>执行过程：</p>
<ol>
<li>初始化变量，初始化操作在整个 for 循环只会执行一次。</li>
</ol>
</li>
<li><p>执行条件表达式，如果为true，则执行循环体语句，否则退出循环，循环结束。</p>
</li>
</ul>
<ol>
<li>执行操作表达式，此时第一轮结束。</li>
<li>第二轮开始，直接去执行条件表达式（不再初始化变量），如果为 true ，则去执行循环体语句，否则退出循环。</li>
<li>继续执行操作表达式，第二轮结束。</li>
<li>后续跟第二轮一致，直至条件表达式为假，结束整个 for 循环。</li>
</ol>
<p>断点调试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">断点调试是指自己在程序的某一行设置一个断点，调试时，程序运行到这一行就会停住，然后你可以一步一步往下调试，调试过程中可以看各个变量当前的值，出错的话，调试到出错的代码行即显示错误，停下。断点调试可以帮助观察程序的运行过程</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">断点调试的流程：</span><br><span class="line">1、浏览器中按 F12--&gt; sources --&gt;找到需要调试的文件--&gt;在程序的某一行设置断点</span><br><span class="line">2、Watch: 监视，通过watch可以监视变量的值的变化，非常的常用。</span><br><span class="line">3、摁下F11，程序单步执行，让程序一行一行的执行，这个时候，观察watch中变量的值的变化。</span><br></pre></td></tr></table></figure>

<ul>
<li><p>for 循环重复相同的代码</p>
<p>比如输出10句“媳妇我错了”</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  基本写法</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;媳妇我错了~&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用户输入次数</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入次数:&#x27;</span>)；</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">1</span> ; i &lt;= num; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;媳妇我错了~&#x27;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
</li>
<li><p>for 循环重复不相同的代码</p>
<p>例如，求输出1到100岁：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  基本写法</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这个人今年&#x27;</span> + i + <span class="string">&#x27;岁了&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例如，求输出1到100岁，并提示出生、死亡</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// for 里面是可以添加其他语句的 </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line"> <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这个人今年1岁了， 它出生了&#x27;</span>);</span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这个人今年100岁了，它死了&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这个人今年&#x27;</span> + i + <span class="string">&#x27;岁了&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>for循环因为有了计数器的存在，还可以重复的执行某些操作，比如做一些算术运算。</p>
</li>
</ul>
<h3 id="1-2-双重for循环"><a href="#1-2-双重for循环" class="headerlink" title="1.2 双重for循环"></a>1.2 双重for循环</h3><ul>
<li><p>双重 for 循环概述</p>
<p> 循环嵌套是指在一个循环语句中再定义一个循环语句的语法结构，例如在for循环语句中，可以再嵌套一个for 循环，这样的 for 循环语句我们称之为双重for循环。</p>
</li>
<li><p>双重 for 循环语法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (外循环的初始; 外循环的条件; 外循环的操作表达式) &#123;</span><br><span class="line">    <span class="keyword">for</span> (内循环的初始; 内循环的条件; 内循环的操作表达式) &#123;  </span><br><span class="line">       需执行的代码;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>内层循环可以看做外层循环的循环体语句</li>
<li>内层循环执行的顺序也要遵循 for 循环的执行顺序 </li>
<li>外层循环执行一次，内层循环要执行全部次数</li>
</ul>
</li>
<li><p>打印五行五列星星</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> star = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= <span class="number">3</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">      star += <span class="string">&#x27;☆&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 每次满 5个星星 就 加一次换行</span></span><br><span class="line">    star += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(star);</span><br></pre></td></tr></table></figure>

<p>核心逻辑：</p>
<p>1.内层循环负责一行打印五个星星</p>
<p>2.外层循环负责打印五行</p>
</li>
<li><p>for 循环小结</p>
<ul>
<li>for 循环可以重复执行某些相同代码</li>
<li>for 循环可以重复执行些许不同的代码，因为我们有计数器</li>
<li>for 循环可以重复执行某些操作，比如算术运算符加法操作</li>
<li>随着需求增加，双重for循环可以做更多、更好看的效果</li>
<li>双重 for 循环，外层循环一次，内层 for 循环全部执行</li>
<li>for 循环是循环条件和数字直接相关的循环</li>
</ul>
</li>
</ul>
<h3 id="1-3-while循环"><a href="#1-3-while循环" class="headerlink" title="1.3 while循环"></a>1.3 while循环</h3><p>while语句的语法结构如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件表达式) &#123;</span><br><span class="line">    <span class="comment">// 循环体代码 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行思路：</p>
<ul>
<li>1 先执行条件表达式，如果结果为 true，则执行循环体代码；如果为 false，则退出循环，执行后面代码</li>
<li>2 执行循环体代码</li>
<li>3 循环体代码执行完毕后，程序会继续判断执行条件表达式，如条件仍为true，则会继续执行循环体，直到循环条件为 false 时，整个循环过程才会结束</li>
</ul>
<p>注意：</p>
<ul>
<li>使用 while 循环时一定要注意，它必须要有退出条件，否则会成为死循环</li>
</ul>
<h3 id="1-4-do-while循环"><a href="#1-4-do-while循环" class="headerlink" title="1.4 do-while循环"></a>1.4 do-while循环</h3><p>do… while 语句的语法结构如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// 循环体代码 - 条件表达式为 true 时重复执行循环体代码</span></span><br><span class="line">&#125; <span class="keyword">while</span>(条件表达式);</span><br></pre></td></tr></table></figure>

<p>执行思路</p>
<ul>
<li><p>1 先执行一次循环体代码 </p>
</li>
<li><p>2 再执行条件表达式，如果结果为 true，则继续执行循环体代码，如果为 false，则退出循环，继续执行后面代码    </p>
<p>注意：先再执行循环体，再判断，do…while循环语句至少会执行一次循环体代码</p>
</li>
</ul>
<h3 id="1-5-continue、break"><a href="#1-5-continue、break" class="headerlink" title="1.5 continue、break"></a>1.5 continue、break</h3><p>continue 关键字用于立即跳出本次循环，继续下一次循环（本次循环体中 continue 之后的代码就会少执行一次）。</p>
<p>例如，吃5个包子，第3个有虫子，就扔掉第3个，继续吃第4个第5个包子，其代码实现如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这个包子有虫子，扔掉&#x27;</span>);</span><br><span class="line">        <span class="keyword">continue</span>; <span class="comment">// 跳出本次循环，跳出的是第3次循环 </span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我正在吃第&#x27;</span> + i + <span class="string">&#x27;个包子呢&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="/images1/%E5%9B%BE%E7%89%871a.png"></p>
<p>  break 关键字用于立即跳出整个循环（循环结束）。</p>
<p>  例如，吃5个包子，吃到第3个发现里面有半个虫子，其余的不吃了，其代码实现如下：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">   <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">       <span class="keyword">break</span>; <span class="comment">// 直接退出整个for 循环，跳到整个for下面的语句</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我正在吃第&#x27;</span> + i + <span class="string">&#x27;个包子呢&#x27;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>  运行结果：</p>
<p>  <img src="/images1/%E5%9B%BE%E7%89%872a.png"></p>
<h2 id="2-代码规范"><a href="#2-代码规范" class="headerlink" title="2 - 代码规范"></a>2 - 代码规范</h2><h3 id="2-1-标识符命名规范"><a href="#2-1-标识符命名规范" class="headerlink" title="2.1 标识符命名规范"></a>2.1 标识符命名规范</h3><ul>
<li>变量、函数的命名必须要有意义</li>
<li>变量的名称一般用名词  </li>
<li>函数的名称一般用动词</li>
</ul>
<h3 id="2-2-操作符规范"><a href="#2-2-操作符规范" class="headerlink" title="2.2 操作符规范"></a>2.2 操作符规范</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 操作符的左右两侧各保留一个空格</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">   <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">       <span class="keyword">break</span>; <span class="comment">// 直接退出整个 for 循环，跳到整个for循环下面的语句</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我正在吃第&#x27;</span> + i + <span class="string">&#x27;个包子呢&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-单行注释规范"><a href="#2-3-单行注释规范" class="headerlink" title="2.3 单行注释规范"></a>2.3 单行注释规范</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">   <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">       <span class="keyword">break</span>; <span class="comment">// 单行注释前面注意有个空格</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我正在吃第&#x27;</span> + i + <span class="string">&#x27;个包子呢&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-其他规范"><a href="#2-4-其他规范" class="headerlink" title="2.4 其他规范"></a>2.4 其他规范</h3><pre><code>关键词、操作符之间后加空格
</code></pre>
<p><img src="/images1/%E5%9B%BE%E7%89%873a.png"></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript之运算符与流程控制笔记（二）</title>
    <url>/2022/04/02/JavaScript%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h2 id="1-运算符（操作符）"><a href="#1-运算符（操作符）" class="headerlink" title="1 - 运算符（操作符）"></a>1 - 运算符（操作符）</h2><h3 id="1-1-运算符的分类"><a href="#1-1-运算符的分类" class="headerlink" title="1.1 运算符的分类"></a>1.1 运算符的分类</h3><p>​        <strong>运算符</strong>（operator）也被称为操作符，是用于实现赋值、比较和执行算数运算等功能的符号。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">JavaScript中常用的运算符有：</span><br><span class="line">- 算数运算符</span><br><span class="line">- 递增和递减运算符</span><br><span class="line">- 比较运算符</span><br><span class="line">- 逻辑运算符</span><br><span class="line">- 赋值运算符</span><br></pre></td></tr></table></figure>

<h3 id="1-2-算数运算符"><a href="#1-2-算数运算符" class="headerlink" title="1.2 算数运算符"></a>1.2 算数运算符</h3><ul>
<li><p>算术运算符概述</p>
<p>概念：算术运算使用的符号，用于执行两个变量或值的算术运算。</p>
<p><img src="/images/%E5%9B%BE%E7%89%871111.png"></p>
</li>
<li><p>浮点数的精度问题</p>
<p>​        浮点数值的最高精度是 17 位小数，但在进行算术计算时其精确度远远不如整数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="number">0.1</span> + <span class="number">0.2</span>;<span class="comment">//结果是：0.30000000000000004</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0.07</span> * <span class="number">100</span>);<span class="comment">//结果是：7.000000000000001</span></span><br></pre></td></tr></table></figure>

<p>​        所以：不要直接判断两个浮点数是否相等 ! </p>
</li>
<li><p>表达式和返回值</p>
<p>​        表达式：是由数字、运算符、变量等以能求得数值的有意义排列方法所得的组合</p>
<p>​        简单理解：是由数字、运算符、变量等组成的式子</p>
<p>​        表达式最终都会有一个结果，返回给开发者，称为返回值</p>
</li>
</ul>
<h3 id="1-3-递增和递减运算符"><a href="#1-3-递增和递减运算符" class="headerlink" title="1.3 递增和递减运算符"></a>1.3 递增和递减运算符</h3><ul>
<li><p>递增和递减运算符概述</p>
<pre><code>        如果需要反复给数字变量添加或减去1，可以使用递增（++）和递减（ -- ）运算符来完成。

    在 JavaScript 中，递增（++）和递减（ -- ）既可以放在变量前面，也可以放在变量后面。放在变量前面时，我们可以称为前置递增（递减）运算符，放在变量后面时，我们可以称为后置递增（递减）运算符。

    注意：递增和递减运算符必须和变量配合使用。 
</code></pre>
</li>
<li><p>递增运算符</p>
<ul>
<li><p>前置递增运算符</p>
<p>++num 前置递增，就是自加1，类似于 num &#x3D;  num + 1</p>
<p>使用口诀：先自加，后返回值</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>  num = <span class="number">10</span>;</span><br><span class="line"><span class="title function_">alert</span>(++num + <span class="number">10</span>);   <span class="comment">// 21</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>后置递增运算符</p>
<p>num++ 后置递增，就是自加1，类似于 num &#x3D;  num + 1 </p>
<p>使用口诀：先返回原值，后自加</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>  num = <span class="number">10</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="number">10</span> + num++);  <span class="comment">// 20</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="1-4-比较运算符"><a href="#1-4-比较运算符" class="headerlink" title="1.4 比较运算符"></a>1.4 比较运算符</h3><ul>
<li><p>比较运算符概述</p>
<pre><code>        概念：比较运算符（关系运算符）是两个数据进行比较时所使用的运算符，比较运算后，会返回一个布尔值（true / false）作为比较运算的结果。
</code></pre>
<p><img src="/images/%E5%9B%BE%E7%89%872.png"></p>
</li>
<li><p>等号比较</p>
<p><img src="/images/%E5%9B%BE%E7%89%873.png"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">18</span> == <span class="string">&#x27;18&#x27;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">18</span> === <span class="string">&#x27;18&#x27;</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="1-5-逻辑运算符"><a href="#1-5-逻辑运算符" class="headerlink" title="1.5 逻辑运算符"></a>1.5 逻辑运算符</h3><ul>
<li><p>逻辑运算符概述</p>
<pre><code>        逻辑运算符是用来进行布尔值运算的运算符，其返回值也是布尔值。后面开发中经常用于多个条件的判断
</code></pre>
<p><img src="/images/%E5%9B%BE%E7%89%874.png"></p>
</li>
<li><p>逻辑与&amp;&amp;</p>
<p>​        两边都是 true才返回 true，否则返回 false</p>
<p><img src="/images/%E5%9B%BE%E7%89%875.png"></p>
</li>
<li><p>逻辑或 ||</p>
<p>​        两边都是 true才返回 true，否则返回 false</p>
<p><img src="/images/%E5%9B%BE%E7%89%876.png"></p>
</li>
<li><p>逻辑非 ！</p>
<p>​        逻辑非（!）也叫作取反符，用来取一个布尔值相反的值，如 true 的相反值是 false</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isOk = !<span class="literal">true</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(isOk);  <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>短路运算（逻辑中断）</p>
<p>​        逻辑元素父左边的表达式值可以确定结果时，就不再继续运算右边的表达式的值;</p>
<ul>
<li><p>逻辑与</p>
<p>​    语法： 表达式1 &amp;&amp; 表达式2</p>
<pre><code>- 如果第一个表达式的值为真，则返回表达式2
</code></pre>
<ul>
<li>如果第一个表达式的值为假，则返回表达式1</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="number">123</span> &amp;&amp; <span class="number">456</span> );        <span class="comment">// 456</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="number">0</span> &amp;&amp; <span class="number">456</span> );          <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="number">123</span> &amp;&amp; <span class="number">456</span>&amp;&amp; <span class="number">789</span> );  <span class="comment">// 789</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>逻辑或</p>
<p>​    语法： 表达式1 || 表达式2</p>
<pre><code>- 如果第一个表达式的值为真，则返回表达式1
 - 如果第一个表达式的值为假，则返回表达式2
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="number">123</span> || <span class="number">456</span> );         <span class="comment">//  123</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="number">0</span> ||  <span class="number">456</span> );          <span class="comment">//  456</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="number">123</span> || <span class="number">456</span> || <span class="number">789</span> );  <span class="comment">//  123</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="1-6-赋值运算符"><a href="#1-6-赋值运算符" class="headerlink" title="1.6 赋值运算符"></a>1.6 赋值运算符</h3><p>​        概念：用来把数据赋值给变量的运算符。</p>
<p><img src="/images/%E5%9B%BE%E7%89%879.png"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>;</span><br><span class="line">age += <span class="number">5</span>;  <span class="comment">// 相当于 age = age + 5;</span></span><br><span class="line">age -= <span class="number">5</span>;  <span class="comment">// 相当于 age = age - 5;</span></span><br><span class="line">age *= <span class="number">10</span>; <span class="comment">// 相当于 age = age * 10;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-7-运算符优先级"><a href="#1-7-运算符优先级" class="headerlink" title="1.7 运算符优先级"></a>1.7 运算符优先级</h3><p><img src="/images/%E5%9B%BE%E7%89%8710.png"></p>
<ul>
<li>一元运算符里面的逻辑非优先级很高</li>
<li>逻辑与比逻辑或优先级高</li>
</ul>
<h2 id="2-流程控制"><a href="#2-流程控制" class="headerlink" title="2 - 流程控制"></a>2 - 流程控制</h2><h3 id="2-1-流程控制概念"><a href="#2-1-流程控制概念" class="headerlink" title="2.1 流程控制概念"></a>2.1 流程控制概念</h3><p>​        在一个程序执行的过程中，各条代码的执行顺序对程序的结果是有直接影响的。很多时候我们要通过控制代码的执行顺序来实现我们要完成的功能。</p>
<p>​        简单理解：流程控制就是来控制代码按照一定结构顺序来执行</p>
<p>​        流程控制主要有三种结构：顺序结构、分支结构、循环结构</p>
<p><img src="/images/%E5%9B%BE%E7%89%8711.png"></p>
<h3 id="2-2-顺序流程控制"><a href="#2-2-顺序流程控制" class="headerlink" title="2.2 顺序流程控制"></a>2.2 顺序流程控制</h3><p>​    <img src="/images/%E5%9B%BE%E7%89%8717.png"></p>
<h3 id="2-3-分支流程控制"><a href="#2-3-分支流程控制" class="headerlink" title="2.3 分支流程控制"></a>2.3 分支流程控制</h3><ul>
<li>分支结构</li>
</ul>
<p>​        <img src="/images/%E5%9B%BE%E7%89%8718.png"></p>
<p>​        JS 语言提供了两种分支结构语句：if 语句、switch 语句</p>
<ul>
<li><p>if 语句</p>
<ul>
<li>语法结构</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 条件成立执行代码，否则什么也不做</span></span><br><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    <span class="comment">// 条件成立执行的代码语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<pre><code>    语句可以理解为一个行为，循环语句和分支语句就是典型的语句。一个程序由很多个语句组成，一般情况下，会分割成一个一个的语句。
</code></pre>
<ul>
<li><p>执行流程</p>
<p><img src="/images/%E5%9B%BE%E7%89%8714.png"></p>
</li>
</ul>
</li>
<li><p>if else语句（双分支语句）</p>
<ul>
<li><p>语法结构</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 条件成立  执行 if 里面代码，否则执行else 里面的代码</span></span><br><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    <span class="comment">// [如果] 条件成立执行的代码</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// [否则] 执行的代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>执行流程</p>
<p><img src="/images/%E5%9B%BE%E7%89%8715.png"></p>
</li>
</ul>
</li>
<li><p>if else if 语句(多分支语句)</p>
<ul>
<li><p>语法结构</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 适合于检查多重条件。</span></span><br><span class="line"><span class="keyword">if</span> (条件表达式<span class="number">1</span>) &#123;</span><br><span class="line">    语句<span class="number">1</span>；</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式<span class="number">2</span>)  &#123;</span><br><span class="line">    语句<span class="number">2</span>；</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式<span class="number">3</span>)  &#123;</span><br><span class="line">   语句<span class="number">3</span>；</span><br><span class="line"> ....</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 上述条件都不成立执行此处代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>执行逻辑</p>
<p><img src="/images/%E5%9B%BE%E7%89%8716.png"></p>
</li>
</ul>
</li>
</ul>
<h3 id="2-4-三元表达式"><a href="#2-4-三元表达式" class="headerlink" title="2.4 三元表达式"></a>2.4 三元表达式</h3><ul>
<li><p>语法结构</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">表达式<span class="number">1</span> ? 表达式<span class="number">2</span> : 表达式<span class="number">3</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行思路</p>
<ul>
<li>如果表达式1为 true ，则返回表达式2的值，如果表达式1为 false，则返回表达式3的值</li>
<li>简单理解： 就类似于  if  else （双分支） 的简写</li>
</ul>
</li>
</ul>
<h3 id="2-5-switch分支流程控制"><a href="#2-5-switch分支流程控制" class="headerlink" title="2.5 switch分支流程控制"></a>2.5 switch分支流程控制</h3><ul>
<li><p>语法结构</p>
<pre><code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">switch</span>( 表达式 )&#123; </span><br><span class="line">    <span class="keyword">case</span> <span class="attr">value1</span>:</span><br><span class="line">        <span class="comment">// 表达式 等于 value1 时要执行的代码</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="attr">value2</span>:</span><br><span class="line">        <span class="comment">// 表达式 等于 value2 时要执行的代码</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">        <span class="comment">// 表达式 不等于任何一个 value 时要执行的代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</code></pre>
<ul>
<li><p>关键字 switch 后面括号内可以是表达式或值， 通常是一个变量</p>
</li>
<li><p>关键字 case , 后跟一个选项的表达式或值，后面跟一个冒号</p>
</li>
<li><p>switch 表达式的值会与结构中的 case 的值做比较 </p>
</li>
<li><p>如果存在匹配全等(&#x3D;&#x3D;&#x3D;) ，则与该 case 关联的代码块会被执行，并在遇到 break 时停止，整个 switch 语句代码执行结束</p>
</li>
<li><p>如果所有的 case 的值都和表达式的值不匹配，则执行 default 里的代码</p>
<p><strong>注意： 执行case 里面的语句时，如果没有break，则继续执行下一个case里面的语句。</strong></p>
</li>
</ul>
<pre><code>
</code></pre>
</li>
<li><p>switch 语句和 if else if 语句的区别</p>
<ul>
<li>一般情况下，它们两个语句可以相互替换</li>
<li>switch…case 语句通常处理 case为比较确定值的情况， 而 if…else…语句更加灵活，常用于范围判断(大于、等于某个范围)</li>
<li>switch 语句进行条件判断后直接执行到程序的条件语句，效率更高。而if…else 语句有几种条件，就得判断多少次。</li>
<li>当分支比较少时，if… else语句的执行效率比 switch语句高。</li>
<li>当分支比较多时，switch语句的执行效率比较高，而且结构更清晰。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript之作用域与对象笔记（五）</title>
    <url>/2022/04/03/JavaScript%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    <content><![CDATA[<h2 id="1-作用域"><a href="#1-作用域" class="headerlink" title="1 - 作用域"></a>1 - 作用域</h2><h3 id="1-1-作用域概述"><a href="#1-1-作用域概述" class="headerlink" title="1.1 作用域概述"></a>1.1 作用域概述</h3><p>​        通常来说，一段程序代码中所用到的名字并不总是有效和可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域。作用域的使用提高了程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突。</p>
<p>JavaScript（es6前）中的作用域有两种：</p>
<ul>
<li>全局作用域</li>
<li>局部作用域（函数作用域）</li>
</ul>
<h3 id="1-2-全局作用域"><a href="#1-2-全局作用域" class="headerlink" title="1.2 全局作用域"></a>1.2 全局作用域</h3><pre><code>    作用于所有代码执行的环境(整个script标签内部)或独立的js文件。
</code></pre>
<h3 id="1-3-局部作用域"><a href="#1-3-局部作用域" class="headerlink" title="1.3 局部作用域"></a>1.3 局部作用域</h3><pre><code>    作用于函数内的代码环境，就是局部作用域。 
    因为跟函数有关系，所以也称为函数作用域。
</code></pre>
<h3 id="1-4-jS没有块级作用域"><a href="#1-4-jS没有块级作用域" class="headerlink" title="1.4 jS没有块级作用域"></a>1.4 jS没有块级作用域</h3><ul>
<li><p>块作用域由 { } 包括。</p>
</li>
<li><p>在其他编程语言中（如 java、c#等），在 if 语句、循环语句中创建的变量，仅仅只能在本 if 语句、本循环语句中使用，如下面的Java代码：    </p>
<p>java有块级作用域：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">  <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">123</span>;</span><br><span class="line">  system.out.print(num);  <span class="comment">// 123</span></span><br><span class="line">&#125;</span><br><span class="line">system.out.print(num);    <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure>

<p>​        以上java代码会报错，是因为代码中 { } 即一块作用域，其中声明的变量 num，在 “{ }” 之外不能使用；而与之类似的JavaScript代码，则不会报错。</p>
<p>js中没有块级作用域（在ES6之前）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>); <span class="comment">//123</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>);   <span class="comment">//123</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2-变量的作用域"><a href="#2-变量的作用域" class="headerlink" title="2 - 变量的作用域"></a>2 - 变量的作用域</h2><pre><code>在JavaScript中，根据作用域的不同，变量可以分为两种：
</code></pre>
<ul>
<li>全局变量</li>
<li>局部变量</li>
</ul>
<p>2.1 全局变量</p>
<pre><code>在全局作用域下声明的变量叫做全局变量（在函数外部定义的变量）。
</code></pre>
<ul>
<li>全局变量在代码的任何位置都可以使用</li>
<li>在全局作用域下 var 声明的变量 是全局变量</li>
<li>特殊情况下，在函数内不使用 var 声明的变量也是全局变量（不建议使用）</li>
</ul>
<p>2.2 局部变量</p>
<pre><code>在局部作用域下声明的变量叫做局部变量（在函数内部定义的变量）
</code></pre>
<ul>
<li>局部变量只能在该函数内部使用</li>
<li>在函数内部 var 声明的变量是局部变量</li>
<li>函数的形参实际上就是局部变量</li>
</ul>
<p>2.3 全局变量和局部变量的区别</p>
<ul>
<li>全局变量：在任何一个地方都可以使用，只有在浏览器关闭时才会被销毁，因此比较占内存</li>
<li>局部变量：只在函数内部使用，当其所在的代码块被执行时，会被初始化；当代码块运行结束后，就会被销毁，因此更节省内存空间</li>
</ul>
<h2 id="3-作用域链"><a href="#3-作用域链" class="headerlink" title="3 - 作用域链"></a>3 - 作用域链</h2><p>​        只要是代码都一个作用域中，写在函数内部的局部作用域，未写在任何函数内部即在全局作用域中；如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域；根据在**[内部函数可以访问外部函数变量]**的这种机制，用链式查找决定哪些数据能被内部函数访问，就称作作用域链。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">案例分析<span class="number">1</span>：</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>( num );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">f2</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">456</span>;</span><br><span class="line"><span class="title function_">f1</span>();</span><br></pre></td></tr></table></figure>

<p><img src="/images1/%E5%9B%BE%E7%89%871c.png"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">作用域链：采取就近原则的方式来查找变量最终的值</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="string">&#x27;22&#x27;</span>;</span><br><span class="line">    <span class="title function_">fn2</span>();</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">        <span class="title function_">fn3</span>();</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">fn3</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> a = <span class="number">4</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//a的值 ?</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">//b的值 ?</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>();</span><br></pre></td></tr></table></figure>

<p><img src="/images1/%E5%9B%BE%E7%89%872c.png"></p>
<h2 id="4-预解析"><a href="#4-预解析" class="headerlink" title="4 - 预解析"></a>4 - 预解析</h2><p>4.1 预解析的相关概念</p>
<p>JavaScript 代码是由浏览器中的 JavaScript 解析器来执行的。</p>
<p>JavaScript 解析器在运行 JavaScript 代码的时候分为两步：</p>
<p>​    预解析和代码执行。</p>
<ul>
<li><p>预解析：在当前作用域下, JS 代码执行之前，浏览器会默认把带有 var 和 function 声明的变量在内存中进行提前声明或者定义，预解析也叫做变量、函数提升。</p>
</li>
<li><p>代码执行： 从上到下执行JS语句。</p>
<p>注意：<strong>预解析会把变量和函数的声明在代码执行之前执行完成。</strong></p>
</li>
</ul>
<p>4.2 变量预解析</p>
<p>​    变量的声明会被提升到当前作用域的最上面，变量的赋值不会提升。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);  <span class="comment">// 结果是多少？</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;      <span class="comment">// ？</span></span><br></pre></td></tr></table></figure>

<p>结果：undefined<br>注意：<strong>变量提升只提升声明，不提升赋值</strong></p>
<p>4.3 函数预解析</p>
<p>​     函数的声明会被提升到当前作用域的最上面，但是不会调用函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;打印&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：控制台打印字符串 — ”打印“ </p>
<p>注意：函数声明代表函数整体，所以函数提升后，函数名代表整个函数，但是函数并没有被调用！    </p>
<p>4.4 函数表达式声明函数问题</p>
<p>函数表达式创建函数，会执行变量提升</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="keyword">var</span>  fn = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;想不到吧&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：报错提示 ”fn is not a function”</p>
<p>解释：该段代码执行之前，会做变量声明提升，fn在提升之后的值是undefined；而fn调用是在fn被赋值为函数体之前，此时fn的值是undefined，所以无法正确调用</p>
<h2 id="5-对象"><a href="#5-对象" class="headerlink" title="5 - 对象"></a>5 - 对象</h2><h3 id="5-1-对象的相关概念"><a href="#5-1-对象的相关概念" class="headerlink" title="5.1 对象的相关概念"></a>5.1 对象的相关概念</h3><ul>
<li><p>什么是对象？</p>
<pre><code>        在 JavaScript 中，对象是一组无序的相关属性和方法的集合，所有的事物都是对象，例如字符串、数值、数组、函数等。
    对象是由属性和方法组成的。
</code></pre>
<ul>
<li><p>属性：事物的特征，在对象中用属性来表示（常用名词）</p>
</li>
<li><p>方法：事物的行为，在对象中用方法来表示（常用动词）</p>
<p><img src="/images1/%E5%9B%BE%E7%89%873c.png"></p>
</li>
</ul>
</li>
<li><p>为什么需要对象？</p>
<pre><code>        保存一个值时，可以使用变量，保存多个值（一组值）时，可以使用数组。

    如果要保存一个人的完整信息呢？

    例如，将“张三疯”的个人的信息保存在数组中的方式为：
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr = [‘张三疯’, ‘男&#x27;, 128,154];</span><br></pre></td></tr></table></figure>

<p>​        上述例子中用数组保存数据的缺点是：数据只能通过索引值访问，开发者需要清晰的清除所有的数据的排行才能准确地获取数据，而当数据量庞大时，不可能做到记忆所有数据的索引值。</p>
<p>​        为了让更好地存储一组数据，对象应运而生：对象中为每项数据设置了属性名称，可以访问数据更语义化，数据结构清晰，表意明显，方便开发者使用。</p>
<p>使用对象记录上组数据为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三疯&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sex&quot;</span>:<span class="string">&quot;男&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>:<span class="number">128</span>,</span><br><span class="line">    <span class="string">&quot;height&quot;</span>:<span class="number">154</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JS中的对象表达结构更清晰，更强大。</p>
</li>
</ul>
<h3 id="5-2-创建对象的三种方式"><a href="#5-2-创建对象的三种方式" class="headerlink" title="5.2 创建对象的三种方式"></a>5.2 创建对象的三种方式</h3><h4 id="利用字面量创建对象"><a href="#利用字面量创建对象" class="headerlink" title="利用字面量创建对象"></a>利用字面量创建对象</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">花括号 &#123; &#125; 里面包含了表达这个具体事物（对象）的属性和方法；&#123; &#125; 里面采取键值对的形式表示 </span><br></pre></td></tr></table></figure>

<ul>
<li><p>键：相当于属性名</p>
</li>
<li><p>值：相当于属性值，可以是任意类型的值（数字类型、字符串类型、布尔类型，函数类型等）</p>
<p>代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> star = &#123;</span><br><span class="line">    name : <span class="string">&#x27;pink&#x27;</span>,</span><br><span class="line">    age : <span class="number">18</span>,</span><br><span class="line">    sex : <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    sayHi : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;大家好啊~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上述代码中 star即是创建的对象。</p>
</li>
<li><p>对象的使用</p>
<ul>
<li><p>对象的属性</p>
<ul>
<li>对象中存储<strong>具体数据</strong>的 “键值对”中的 “键”称为对象的属性，即对象中存储具体数据的项</li>
</ul>
</li>
<li><p>对象的方法</p>
<ul>
<li>对象中存储<strong>函数</strong>的 “键值对”中的 “键”称为对象的方法，即对象中存储函数的项</li>
</ul>
</li>
<li><p>访问对象的属性</p>
<ul>
<li><p>对象里面的属性调用 : 对象.属性名 ，这个小点 . 就理解为“ 的 ”  </p>
</li>
<li><p>对象里面属性的另一种调用方式 : 对象[‘属性名’]，注意方括号里面的属性必须加引号      </p>
<p>示例代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(star.<span class="property">name</span>)     <span class="comment">// 调用名字属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(star[<span class="string">&#x27;name&#x27;</span>])  <span class="comment">// 调用名字属性</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>调用对象的方法</p>
<ul>
<li><p>对象里面的方法调用：对象.方法名() ，注意这个方法名字后面一定加括号 </p>
<p>示例代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">star.<span class="title function_">sayHi</span>(); <span class="comment">// 调用 sayHi 方法,注意一定要带后面的括号</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>变量、属性、函数、方法总结</p>
<pre><code>        属性是对象的一部分，而变量不是对象的一部分，变量是单独存储数据的容器
</code></pre>
<ul>
<li><p>变量：单独声明赋值，单独存在</p>
</li>
<li><p>属性：对象里面的变量称为属性，不需要声明</p>
<p>​    方法是对象的一部分，函数是单独封装操作的容器</p>
</li>
<li><p>函数：单独存在的，通过“函数名()”的方式就可以调用</p>
</li>
<li><p>方法：对象里面的函数称为方法，方法不需要声明，使用“对象.方法名()”的方式就可以调用</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="利用-new-Object-创建对象"><a href="#利用-new-Object-创建对象" class="headerlink" title="利用 new Object 创建对象"></a>利用 new Object 创建对象</h4><ul>
<li><p>创建空对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> andy = <span class="keyword">new</span> <span class="title class_">Obect</span>();</span><br></pre></td></tr></table></figure>

<p>通过内置构造函数Object创建对象，此时andy变量已经保存了创建出来的空对象</p>
</li>
<li><p>给空对象添加属性和方法</p>
<ul>
<li><p>通过对象操作属性和方法的方式，来为对象增加属性和方法</p>
<p>示例代码如下：</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">andy.<span class="property">name</span> = <span class="string">&#x27;pink&#x27;</span>;</span><br><span class="line">andy.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">andy.<span class="property">sex</span> = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">andy.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;大家好啊~&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>Object() ：第一个字母大写   </li>
<li>new Object() ：需要 new 关键字</li>
<li>使用的格式：对象.属性 &#x3D;  值;</li>
</ul>
</li>
</ul>
<h4 id="利用构造函数创建对象"><a href="#利用构造函数创建对象" class="headerlink" title="利用构造函数创建对象"></a>利用构造函数创建对象</h4><ul>
<li><p>构造函数</p>
<ul>
<li><p>构造函数：是一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值，它总与 new 运算符一起使用。我们可以把对象中一些公共的属性和方法抽取出来，然后封装到这个函数里面。</p>
</li>
<li><p>构造函数的封装格式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> 构造函数名(形参<span class="number">1</span>,形参<span class="number">2</span>,形参<span class="number">3</span>) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.属性名<span class="number">1</span> = 参数<span class="number">1</span>;</span><br><span class="line">     <span class="variable language_">this</span>.属性名<span class="number">2</span> = 参数<span class="number">2</span>;</span><br><span class="line">     <span class="variable language_">this</span>.属性名<span class="number">3</span> = 参数<span class="number">3</span>;</span><br><span class="line">     <span class="variable language_">this</span>.方法名 = 函数体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>构造函数的调用格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var obj = new 构造函数名(实参1，实参2，实参3)</span><br></pre></td></tr></table></figure>

<p>以上代码中，obj即接收到构造函数创建出来的对象。</p>
</li>
<li><p>注意事项</p>
<ol>
<li>构造函数约定<strong>首字母大写</strong>。</li>
<li>函数内的属性和方法前面需要添加 <strong>this</strong> ，表示当前对象的属性和方法。</li>
<li>构造函数中<strong>不需要 return 返回结果</strong>。</li>
<li>当我们创建对象的时候，<strong>必须用 new 来调用构造函数</strong>。</li>
</ol>
</li>
<li><p>其他</p>
<p>构造函数，如 Stars()，抽象了对象的公共部分，封装到了函数里面，它泛指某一大类（class）<br>创建对象，如 new Stars()，特指某一个，通过 new 关键字创建对象的过程我们也称为对象实例化</p>
</li>
</ul>
</li>
<li><p>new关键字的作用</p>
<ol>
<li>在构造函数代码开始执行之前，创建一个空对象；</li>
<li>修改this的指向，把this指向创建出来的空对象；</li>
<li>执行函数的代码</li>
<li>在函数完成之后，返回this—即创建出来的对象</li>
</ol>
<h3 id="5-3-遍历对象"><a href="#5-3-遍历对象" class="headerlink" title="5.3 遍历对象"></a>5.3 遍历对象</h3><p>​        for…in 语句用于对数组或者对象的属性进行循环操作。</p>
<p>​        其语法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (变量 <span class="keyword">in</span> 对象名字) &#123;</span><br><span class="line">    <span class="comment">// 在此执行代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        语法中的变量是自定义的，它需要符合命名规范，通常我们会将这个变量写为 k 或者 key。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(k);      <span class="comment">// 这里的 k 是属性名</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[k]); <span class="comment">// 这里的 obj[k] 是属性值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript笔记（六）</title>
    <url>/2022/04/03/JavaScript%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89/</url>
    <content><![CDATA[<h2 id="1-内置对象"><a href="#1-内置对象" class="headerlink" title="1 - 内置对象"></a>1 - 内置对象</h2><h3 id="1-1-内置对象"><a href="#1-1-内置对象" class="headerlink" title="1.1 内置对象"></a>1.1 内置对象</h3><p>​         JavaScript 中的对象分为3种：<strong>自定义对象 、内置对象、 浏览器对象</strong><br>​        前面两种对象是JS 基础 内容，属于 ECMAScript；  第三个浏览器对象属于 JS 独有的， JS API 讲解内置对象就是指 JS 语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或是<strong>最基本而必要的功能</strong>（属性和方法），内置对象最大的优点就是帮助我们快速开发</p>
<p>​         JavaScript 提供了多个内置对象：Math、 Date 、Array、String等    </p>
<h3 id="1-2-查文档"><a href="#1-2-查文档" class="headerlink" title="1.2 查文档"></a>1.2 查文档</h3><p>​        查找文档：学习一个内置对象的使用，只要学会其常用成员的使用即可，我们可以通过查文档学习，可以通过MDN&#x2F;W3C来查询。<br>​        Mozilla 开发者网络（MDN）提供了有关开放网络技术（Open Web）的信息，包括 HTML、CSS 和万维网及 HTML5 应用的 API。<br>​        MDN:<a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a></p>
<h3 id="1-3-Math对象"><a href="#1-3-Math对象" class="headerlink" title="1.3 Math对象"></a>1.3 Math对象</h3><p>​        Math 对象不是构造函数，它具有数学常数和函数的属性和方法。跟数学相关的运算（求绝对值，取整、最大值等）可以使用 Math 中的成员。</p>
<table>
<thead>
<tr>
<th>属性、方法名</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Math.PI</td>
<td>圆周率</td>
</tr>
<tr>
<td>Math.floor()</td>
<td>向下取整</td>
</tr>
<tr>
<td>Math.ceil()</td>
<td>向上取整</td>
</tr>
<tr>
<td>Math.round()</td>
<td>四舍五入版 就近取整   注意 -3.5   结果是  -3</td>
</tr>
<tr>
<td>Math.abs()</td>
<td>绝对值</td>
</tr>
<tr>
<td>Math.max()&#x2F;Math.min()</td>
<td>求最大和最小值</td>
</tr>
<tr>
<td>Math.random()</td>
<td>获取范围在[0,1)内的随机值</td>
</tr>
</tbody></table>
<p>​    注意：上面的方法使用时必须带括号</p>
<p>​    <strong>获取指定范围内的随机整数</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getRandom</span>(<span class="params">min, max</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min + <span class="number">1</span>)) + min; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-4-日期对象"><a href="#1-4-日期对象" class="headerlink" title="1.4 日期对象"></a>1.4 日期对象</h3><p>​         Date 对象和 Math 对象不一样，Date是一个构造函数，所以使用时需要实例化后才能使用其中具体方法和属性。Date 实例用来处理日期和时间</p>
<ul>
<li><p>使用Date实例化日期对象</p>
<ul>
<li>获取当前时间必须实例化：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li>获取指定时间的日期对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> future = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2019/5/1&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>注意：如果创建实例时并未传入参数，则得到的日期对象是当前时间对应的日期对象</p>
</li>
<li><p>使用Date实例的方法和属性    </p>
<p><img src="/images2/%E5%9B%BE%E7%89%871.png"></p>
</li>
<li><p>通过Date实例获取总毫米数</p>
<ul>
<li><p>总毫秒数的含义</p>
<p>​    基于1970年1月1日（世界标准时间）起的毫秒数</p>
</li>
<li><p>获取总毫秒数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实例化Date对象</span></span><br><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="comment">// 1. 用于获取对象的原始值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">valueOf</span>())	</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getTime</span>())	</span><br><span class="line"><span class="comment">// 2. 简单写可以这么做</span></span><br><span class="line"><span class="keyword">var</span> now = + <span class="keyword">new</span> <span class="title class_">Date</span>();			</span><br><span class="line"><span class="comment">// 3. HTML5中提供的方法，有兼容性问题</span></span><br><span class="line"><span class="keyword">var</span> now = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="1-5-数组对象"><a href="#1-5-数组对象" class="headerlink" title="1.5 数组对象"></a>1.5 数组对象</h3><h4 id="创建数组的两种方式"><a href="#创建数组的两种方式" class="headerlink" title="创建数组的两种方式"></a>创建数组的两种方式</h4><ul>
<li><p>字面量方式</p>
<ul>
<li><p>示例代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="string">&quot;test&quot;</span>,<span class="literal">true</span>];</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>new Array()</p>
<ul>
<li><p>示例代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr = new Array();</span><br></pre></td></tr></table></figure>

<p>​    注意：上面代码中arr创建出的是一个空数组，如果需要使用构造函数Array创建非空数组，可以在创建数组时传入参数</p>
<p>​    参数传递规则如下：</p>
<ul>
<li><p>如果只传入一个参数，则参数规定了数组的长度</p>
</li>
<li><p>如果传入了多个参数，则参数称为数组的元素</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="检测是否为数组"><a href="#检测是否为数组" class="headerlink" title="检测是否为数组"></a>检测是否为数组</h4><ul>
<li><p>instanceof 运算符</p>
<ul>
<li><p>instanceof 可以判断一个对象是否是某个构造函数的实例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">23</span>];</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Array.isArray()</p>
<ul>
<li><p>Array.isArray()用于判断一个对象是否为数组，isArray() 是 HTML5 中提供的方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">23</span>];</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr));   <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj));   <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="添加删除数组元素的方法"><a href="#添加删除数组元素的方法" class="headerlink" title="添加删除数组元素的方法"></a>添加删除数组元素的方法</h4><ul>
<li><p>数组中有进行增加、删除元素的方法，部分方法如下表</p>
<p><img src="/images2/%E5%9B%BE%E7%89%872.png"></p>
<p>注意：push、unshift为增加元素方法；pop、shift为删除元素的方法</p>
</li>
</ul>
<h4 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h4><ul>
<li><p>数组中有对数组本身排序的方法，部分方法如下表</p>
<p><img src="/images2/%E5%9B%BE%E7%89%873.png"></p>
<p>注意：sort方法需要传入参数来设置升序、降序排序</p>
<ul>
<li>如果传入“function(a,b){ return a-b;}”，则为升序</li>
<li>如果传入“function(a,b){ return b-a;}”，则为降序</li>
</ul>
</li>
</ul>
<h4 id="数组索引方法"><a href="#数组索引方法" class="headerlink" title="数组索引方法"></a>数组索引方法</h4><ul>
<li><p>数组中有获取数组指定元素索引值的方法，部分方法如下表</p>
<p><img src="/images2/%E5%9B%BE%E7%89%874.png"></p>
</li>
</ul>
<h4 id="数组转换为字符串"><a href="#数组转换为字符串" class="headerlink" title="数组转换为字符串"></a>数组转换为字符串</h4><ul>
<li><p>数组中有把数组转化为字符串的方法，部分方法如下表</p>
<p><img src="/images2/%E5%9B%BE%E7%89%875.png"></p>
<p>注意：join方法如果不传入参数，则按照 “ , ”拼接元素</p>
</li>
</ul>
<h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><ul>
<li><p>数组中还有其他操作方法，同学们可以在课下自行查阅学习</p>
<p><img src="/images2/%E5%9B%BE%E7%89%876.png"></p>
</li>
</ul>
<h3 id="1-6-字符串对象"><a href="#1-6-字符串对象" class="headerlink" title="1.6 字符串对象"></a>1.6 字符串对象</h3><h4 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h4><p>​        为了方便操作基本数据类型，JavaScript 还提供了三个特殊的引用类型：String、Number和 Boolean。</p>
<p>​        基本包装类型就是把简单数据类型包装成为复杂数据类型，这样基本数据类型就有了属性和方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下面代码有什么问题？</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;andy&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">length</span>);</span><br></pre></td></tr></table></figure>

<p>​        按道理基本数据类型是没有属性和方法的，而对象才有属性和方法，但上面代码却可以执行，这是因为</p>
<p>​        js 会把基本数据类型包装为复杂数据类型，其执行过程如下 ：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 生成临时变量，把简单类型包装为复杂数据类型</span></span><br><span class="line"><span class="keyword">var</span> temp = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;andy&#x27;</span>);</span><br><span class="line"><span class="comment">// 2. 赋值给我们声明的字符变量</span></span><br><span class="line">str = temp;</span><br><span class="line"><span class="comment">// 3. 销毁临时变量</span></span><br><span class="line">temp = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<h4 id="字符串的不可变"><a href="#字符串的不可变" class="headerlink" title="字符串的不可变"></a>字符串的不可变</h4><p>​        指的是里面的值不可变，虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间。</p>
<p>​        当重新给字符串变量赋值的时候，变量之前保存的字符串不会被修改，依然在内存中重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变。<br>​        由于字符串的不可变，在<strong>大量拼接字符串</strong>的时候会有效率问题</p>
<h4 id="根据字符返回位置"><a href="#根据字符返回位置" class="headerlink" title="根据字符返回位置"></a>根据字符返回位置</h4><p>​        字符串通过基本包装类型可以调用部分方法来操作字符串，以下是返回指定字符的位置的方法：</p>
<p><img src="/images2/%E5%9B%BE%E7%89%877.png"></p>
<p>​        案例：查找字符串”abcoefoxyozzopp”中所有o出现的位置以及次数</p>
<ol>
<li>先查找第一个o出现的位置</li>
<li>然后 只要indexOf 返回的结果不是 -1 就继续往后查找</li>
<li>因为indexOf 只能查找到第一个，所以后面的查找，利用第二个参数，当前索引加1，从而继续查找</li>
</ol>
<h4 id="根据位置返回字符"><a href="#根据位置返回字符" class="headerlink" title="根据位置返回字符"></a>根据位置返回字符</h4><p>​        字符串通过基本包装类型可以调用部分方法来操作字符串，以下是根据位置返回指定位置上的字符：</p>
<p><img src="/images2/%E5%9B%BE%E7%89%878.png"></p>
<p>​        在上述方法中，charCodeAt方法返回的是指定位置上字符对应的ASCII码，ASCII码对照表如下：</p>
<p><img src="/images2/%E5%9B%BE%E7%89%879.png"></p>
<p>​        案例：判断一个字符串 ‘abcoefoxyozzopp’ 中出现次数最多的字符，并统计其次数</p>
<ol>
<li><p>核心算法：利用 charAt(） 遍历这个字符串</p>
</li>
<li><p>把每个字符都存储给对象， 如果对象没有该属性，就为1，如果存在了就 +1</p>
</li>
<li><p>遍历对象，得到最大值和该字符     </p>
<p>​    注意：在遍历的过程中，把字符串中的每个字符作为对象的属性存储在对象总，对应的属性值是该字符出现的次数</p>
</li>
</ol>
<h4 id="字符串操作方法"><a href="#字符串操作方法" class="headerlink" title="字符串操作方法"></a>字符串操作方法</h4><p>​        字符串通过基本包装类型可以调用部分方法来操作字符串，以下是部分操作方法：</p>
<p><img src="/images2/%E5%9B%BE%E7%89%8710.png"></p>
<h4 id="replace-方法"><a href="#replace-方法" class="headerlink" title="replace()方法"></a>replace()方法</h4><p>​        replace() 方法用于在字符串中用一些字符替换另一些字符，其使用格式如下：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">字符串.replace(被替换的字符串， 要替换为的字符串)；</span><br></pre></td></tr></table></figure>

<h4 id="split-方法"><a href="#split-方法" class="headerlink" title="split()方法"></a>split()方法</h4><p>​        split()方法用于切分字符串，它可以将字符串切分为数组。在切分完毕之后，返回的是一个新数组。</p>
<p>​        其使用格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">字符串.split(&quot;分割字符&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="2-简单数据类型和复杂数据类型"><a href="#2-简单数据类型和复杂数据类型" class="headerlink" title="2 - 简单数据类型和复杂数据类型"></a>2 - 简单数据类型和复杂数据类型</h2><h3 id="2-1-简单数据类型"><a href="#2-1-简单数据类型" class="headerlink" title="2.1 简单数据类型"></a>2.1 简单数据类型</h3><p>​        <strong>简单类型</strong>（<strong>基本数据类型</strong>、<strong>值类型</strong>）：在存储时变量中存储的是值本身，包括string ，number，boolean，undefined，null</p>
<h3 id="2-2-复杂数据类型"><a href="#2-2-复杂数据类型" class="headerlink" title="2.2 复杂数据类型"></a>2.2 复杂数据类型</h3><p>​        <strong>复杂数据类型（引用类型）</strong>：在存储时变量中存储的仅仅是地址（引用），通过 new 关键字创建的对象（系统对象、自定义对象），如 Object、Array、Date等；</p>
<h3 id="2-3-堆栈"><a href="#2-3-堆栈" class="headerlink" title="2.3 堆栈"></a>2.3 堆栈</h3><ul>
<li>堆栈空间分配区别：</li>
</ul>
<p>　　1、栈（操作系统）：由操作系统自动分配释放存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中的栈；</p>
<p>简单数据类型存放到栈里面</p>
<p>　　2、堆（操作系统）：存储复杂类型(对象)，一般由程序员分配释放，若程序员不释放，由垃圾回收机制回收。</p>
<p><img src="/images2/%E5%9B%BE%E7%89%8711.png"></p>
<ul>
<li><p>简单数据类型的存储方式</p>
<p>​        值类型变量的数据直接存放在变量（栈空间）中</p>
</li>
</ul>
<p><img src="/images2/%E5%9B%BE%E7%89%8712.png"></p>
<ul>
<li><p>复杂数据类型的存储方式</p>
<p>​        引用类型变量（栈空间）里存放的是地址，真正的对象实例存放在堆空间中</p>
<p><img src="/images2/%E5%9B%BE%E7%89%8713.png"></p>
</li>
</ul>
<h3 id="2-4-简单类型传参"><a href="#2-4-简单类型传参" class="headerlink" title="2.4 简单类型传参"></a>2.4 简单类型传参</h3><p>​        函数的形参也可以看做是一个变量，当我们把一个值类型变量作为参数传给函数的形参时，其实是把变量在栈空间里的值复制了一份给形参，那么在方法内部对形参做任何修改，都不会影响到的外部变量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a</span>) &#123;</span><br><span class="line">    a++;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="title function_">fn</span>(x);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x)；</span><br></pre></td></tr></table></figure>

<p>​        运行结果如下：</p>
<p><img src="/images2/%E5%9B%BE%E7%89%8714.png"></p>
<h3 id="2-5-复杂数据类型传参"><a href="#2-5-复杂数据类型传参" class="headerlink" title="2.5 复杂数据类型传参"></a>2.5 复杂数据类型传参</h3><p>​        函数的形参也可以看做是一个变量，当我们把引用类型变量传给形参时，其实是把变量在栈空间里保存的堆地址复制给了形参，形参和实参其实保存的是同一个堆地址，所以操作的是同一个对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params">x</span>) &#123; <span class="comment">// x = p</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">name</span>); <span class="comment">// 2. 这个输出什么 ?    </span></span><br><span class="line">    x.<span class="property">name</span> = <span class="string">&quot;张学友&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">name</span>); <span class="comment">// 3. 这个输出什么 ?    </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;刘德华&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">name</span>);    <span class="comment">// 1. 这个输出什么 ?   </span></span><br><span class="line"><span class="title function_">f1</span>(p);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">name</span>);    <span class="comment">// 4. 这个输出什么 ?  </span></span><br></pre></td></tr></table></figure>

<p>​        运行结果如下：</p>
<p><img src="/images/%E5%9B%BE%E7%89%8715.png"></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>7.Java多线程</title>
    <url>/2022/05/03/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="Java-多线程"><a href="#Java-多线程" class="headerlink" title="Java 多线程"></a>Java 多线程</h1><ul>
<li><p>新建状态:</p>
<p>使用 <strong>new</strong> 关键字和 <strong>Thread</strong> 类或其子类建立一个线程对象后，该线程对象就处于新建状态。它保持这个状态直到程序 <strong>start()</strong> 这个线程。</p>
</li>
<li><p>就绪状态:</p>
<p>当线程对象调用了start()方法之后，该线程就进入就绪状态。就绪状态的线程处于就绪队列中，要等待JVM里线程调度器的调度。</p>
</li>
<li><p>运行状态:</p>
<p>如果就绪状态的线程获取 CPU 资源，就可以执行 **run()**，此时线程便处于运行状态。处于运行状态的线程最为复杂，它可以变为阻塞状态、就绪状态和死亡状态。</p>
</li>
<li><p>阻塞状态:</p>
<p>如果一个线程执行了sleep（睡眠）、suspend（挂起）等方法，失去所占用资源之后，该线程就从运行状态进入阻塞状态。在睡眠时间已到或获得设备资源后可以重新进入就绪状态。可以分为三种：</p>
<ul>
<li>等待阻塞：运行状态中的线程执行 wait() 方法，使线程进入到等待阻塞状态。</li>
<li>同步阻塞：线程在获取 synchronized 同步锁失败(因为同步锁被其他线程占用)。</li>
<li>其他阻塞：通过调用线程的 sleep() 或 join() 发出了 I&#x2F;O 请求时，线程就会进入到阻塞状态。当sleep() 状态超时，join() 等待线程终止或超时，或者 I&#x2F;O 处理完毕，线程重新转入就绪状态。</li>
</ul>
</li>
<li><p>死亡状态:</p>
<p>一个运行状态的线程完成任务或者其他终止条件发生时，该线程就切换到终止状态。</p>
</li>
</ul>
<p>1.优先级</p>
<p>每一个 Java 线程都有一个优先级，这样有助于操作系统确定线程的调度顺序。</p>
<p>Java 线程的优先级是一个整数，其取值范围是 1 （Thread.MIN_PRIORITY ） - 10 （Thread.MAX_PRIORITY ）。</p>
<p>默认情况下，每一个线程都会分配一个优先级 NORM_PRIORITY（5）。</p>
<p>具有较高优先级的线程对程序更重要，并且应该在低优先级的线程之前分配处理器资源。但是，线程优先级不能保证线程执行的顺序，而且非常依赖于平台。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aa.setPriority(1);       </span><br><span class="line">bb.setPriority(10);</span><br></pre></td></tr></table></figure>

<h2 id="创建一个线程"><a href="#创建一个线程" class="headerlink" title="创建一个线程"></a>创建一个线程</h2><p>Java 提供了三种创建线程的方法：</p>
<ul>
<li>通过实现 Runnable 接口；</li>
<li>通过继承 Thread 类本身；</li>
<li>通过 Callable 和 Future 创建线程。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class RunnableDemo implements Runnable &#123;</span><br><span class="line">....&#125;</span><br><span class="line">RunnableDemo R1 = new RunnableDemo( &quot;Thread-1&quot;);</span><br><span class="line">R1.start();     </span><br><span class="line">RunnableDemo R2 = new RunnableDemo( &quot;Thread-2&quot;);</span><br><span class="line">R2.start();</span><br></pre></td></tr></table></figure>

<h2 id="Thread-方法"><a href="#Thread-方法" class="headerlink" title="Thread 方法"></a>Thread 方法</h2><p>下表列出了Thread类的一些重要方法：</p>
<table>
<thead>
<tr>
<th align="left"><strong>序号</strong></th>
<th align="left"><strong>方法描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left"><strong>public void start()</strong> 使该线程开始执行；<strong>Java</strong> 虚拟机调用该线程的 run 方法。</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left"><strong>public void run()</strong> 如果该线程是使用独立的 Runnable 运行对象构造的，则调用该 Runnable 对象的 run 方法；否则，该方法不执行任何操作并返回。</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left"><strong>public final void setName(String name)</strong> 改变线程名称，使之与参数 name 相同。</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left"><strong>public final void setPriority(int priority)</strong>  更改线程的优先级。</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left"><strong>public final void setDaemon(boolean on)</strong> 将该线程标记为守护线程或用户线程。</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left"><strong>public final void join(long millisec)</strong> 等待该线程终止的时间最长为 millis 毫秒。</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left"><strong>public void interrupt()</strong> 中断线程。</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left"><strong>public final boolean isAlive()</strong> 测试线程是否处于活动状态。</td>
</tr>
</tbody></table>
<p>上述方法是被 Thread 对象调用的，下面表格的方法是 Thread 类的静态方法。</p>
<table>
<thead>
<tr>
<th align="left"><strong>序号</strong></th>
<th align="left"><strong>方法描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left"><strong>public static void yield()</strong> 暂停当前正在执行的线程对象，并执行其他线程。</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left"><strong>public static void sleep(long millisec)</strong> 在指定的毫秒数内让当前正在执行的线程休眠（暂停执行），此操作受到系统计时器和调度程序精度和准确性的影响。</td>
</tr>
</tbody></table>
<p>三个类</p>
<p>1.Backhome</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Backhome extends Thread&#123;</span><br><span class="line">    String name;</span><br><span class="line">    int count;</span><br><span class="line">    Piao piao=Piao.getInstance();</span><br><span class="line">    public Backhome(String name)&#123;</span><br><span class="line">        this.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                int flag=piao.sell(this);</span><br><span class="line">                if(flag==0)</span><br><span class="line">                    return;</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>2.piao</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Piao &#123;</span><br><span class="line">    private static Piao instance = new Piao();</span><br><span class="line">    //让构造函数为 private，这样该类就不会被实例化</span><br><span class="line">    private Piao()&#123;&#125;</span><br><span class="line">    //获取唯一可用的对象</span><br><span class="line">    public static Piao getInstance()&#123;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">    static int num = 500;</span><br><span class="line">    static int i=0;</span><br><span class="line"></span><br><span class="line">    public  synchronized int sell(Backhome backhome) throws InterruptedException &#123;</span><br><span class="line">        if(num&gt;0)&#123;</span><br><span class="line">            System.out.println(backhome.name + &quot;开始抢了&quot;);</span><br><span class="line">            num--;</span><br><span class="line">            backhome.count++;</span><br><span class="line">            System.out.println(backhome.name + &quot;抢了&quot; + backhome.count);</span><br><span class="line">            System.out.println(&quot;还剩下&quot; + num);</span><br><span class="line">            notify();</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            System.out.println(&quot;卖光了&quot;);</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>3.main</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">       Backhome aa=new Backhome(&quot;张三&quot;);</span><br><span class="line">       Backhome bb=new Backhome(&quot;李四&quot;);</span><br><span class="line">       Backhome cc=new Backhome(&quot;王五&quot;);</span><br><span class="line">       aa.start();</span><br><span class="line">       bb.start();</span><br><span class="line">       cc.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">张三开始抢了</span><br><span class="line">张三抢了1</span><br><span class="line">还剩下499</span><br><span class="line">张三开始抢了</span><br><span class="line">张三抢了2</span><br><span class="line">还剩下498</span><br><span class="line">张三开始抢了</span><br><span class="line">张三抢了3</span><br><span class="line">还剩下497</span><br><span class="line">.....</span><br><span class="line">王五开始抢了</span><br><span class="line">王五抢了172</span><br><span class="line">还剩下2</span><br><span class="line">王五开始抢了</span><br><span class="line">王五抢了173</span><br><span class="line">还剩下1</span><br><span class="line">王五开始抢了</span><br><span class="line">王五抢了174</span><br><span class="line">还剩下0</span><br><span class="line">卖光了</span><br><span class="line">卖光了</span><br><span class="line">卖光了</span><br></pre></td></tr></table></figure>

<p>1.通过线程之间的通讯方式</p>
<ul>
<li><p>这个就有必要说下 wait(),notify(),以及notifyAll() 这三个方法</p>
<ul>
<li>这三个方法都是属于Object的方法；所以所有类都可以继承这三方法； <ul>
<li>wait()方法使得当前线程必须要等待，等到另外一个线程调用notify()或者notifyAll()方法。</li>
<li>notify()方法会唤醒一个等待当前对象的锁的线程。而notifyAll(）顾名思义；就是唤醒所有在等待中的方法；</li>
<li>wait()和notify()方法要求在调用时线程已经获得了对象的锁，因此对这两个方法的调用需要放在synchronized方法或synchronized块中。</li>
<li>线程<a href="https://so.csdn.net/so/search?q=%E6%8C%82%E8%B5%B7&spm=1001.2101.3001.7020">挂起</a>和恢复方法，sleep()方法，join()方法</li>
</ul>
</li>
</ul>
</li>
<li><p>线程死锁</p>
</li>
</ul>
<p>Thread1拿着lock1，想要lock2，Thread2拿着lock2，想要lock1.</p>
<p>2.同步代码块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Dome1 implements Runnable&#123;</span><br><span class="line">    static int piaonum=20;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Dome1 d=new Dome1();</span><br><span class="line">        Thread t1=new Thread(d,&quot;线程1&quot;);</span><br><span class="line">        Thread t2=new Thread(d,&quot;线程2&quot;);</span><br><span class="line">        Thread t3=new Thread(d,&quot;线程3&quot;);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        while (true)&#123;</span><br><span class="line">            synchronized (this)&#123;</span><br><span class="line">                if(piaonum&gt;0)&#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        Thread.sleep(100);</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(&quot;票数：&quot;+piaonum--);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>interrupt()线程中断</p>
<p>Thread.yield();线程礼让</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript之数组与函数笔记（四）</title>
    <url>/2022/04/03/JavaScript%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<h2 id="1-数组"><a href="#1-数组" class="headerlink" title="1 - 数组"></a>1 - 数组</h2><h3 id="1-1-数组的概念"><a href="#1-1-数组的概念" class="headerlink" title="1.1 数组的概念"></a>1.1 数组的概念</h3><ul>
<li>数组可以把一组相关的数据一起存放，并提供方便的访问(获取）方式。</li>
<li>数组是指<strong>一组数据的集合</strong>，其中的每个数据被称作<strong>元素</strong>，在数组中可以<strong>存放任意类型的元素</strong>。数组是一种将一组数据存储在单个变量名下的优雅方式。</li>
</ul>
<h3 id="1-2-创建数组"><a href="#1-2-创建数组" class="headerlink" title="1.2 创建数组"></a>1.2 创建数组</h3><p>JS 中创建数组有两种方式：</p>
<ul>
<li><p>利用  new 创建数组  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 数组名 = <span class="keyword">new</span> <span class="title class_">Array</span>() ；</span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>();   <span class="comment">// 创建一个新的空数组</span></span><br></pre></td></tr></table></figure>

<p>注意 Array () ，A 要大写    </p>
</li>
<li><p>利用数组字面量创建数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 使用数组字面量方式创建空的数组</span></span><br><span class="line"><span class="keyword">var</span>  数组名 = []；</span><br><span class="line"><span class="comment">//2. 使用数组字面量方式创建带初始值的数组</span></span><br><span class="line"><span class="keyword">var</span>  数组名 = [<span class="string">&#x27;小白&#x27;</span>,<span class="string">&#x27;小黑&#x27;</span>,<span class="string">&#x27;大黄&#x27;</span>,<span class="string">&#x27;瑞奇&#x27;</span>];</span><br></pre></td></tr></table></figure>

<ul>
<li>数组的字面量是方括号 [ ] </li>
<li>声明数组并赋值称为数组的初始化</li>
<li>这种字面量方式也是我们以后最多使用的方式</li>
</ul>
</li>
<li><p>数组元素的类型</p>
<p>数组中可以存放任意类型的数据，例如字符串，数字，布尔值等。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arrStus = [<span class="string">&#x27;小白&#x27;</span>,<span class="number">12</span>,<span class="literal">true</span>,<span class="number">28.9</span>];</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="1-3-获取数组中的元素"><a href="#1-3-获取数组中的元素" class="headerlink" title="1.3 获取数组中的元素"></a>1.3 获取数组中的元素</h3><p>​        索引 (下标) ：用来访问数组元素的序号（数组下标从 0 开始）。</p>
<p><img src="/images1/%E5%9B%BE%E7%89%871b.png"></p>
<p>​        数组可以通过索引来访问、设置、修改对应的数组元素，可以通过“数组名[索引]”的形式来获取数组中的元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义数组</span></span><br><span class="line"><span class="keyword">var</span> arrStus = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="comment">// 获取数组中的第2个元素</span></span><br><span class="line"><span class="title function_">alert</span>(arrStus[<span class="number">1</span>]);    </span><br></pre></td></tr></table></figure>

<p>注意：如果访问时数组没有和索引值对应的元素，则得到的值是undefined</p>
<h3 id="1-4-遍历数组"><a href="#1-4-遍历数组" class="headerlink" title="1.4 遍历数组"></a>1.4 遍历数组</h3><ul>
<li><p>数组遍历</p>
<p>​        把数组中的每个元素从头到尾都访问一次（类似学生的点名），可以通过 for 循环索引遍历数组中的每一项</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arrStus[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>数组的长度</p>
<p>数组的长度：默认情况下表示数组中元素的个数</p>
<p>使用“数组名.length”可以访问数组元素的数量（数组长度）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arrStus = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="title function_">alert</span>(arrStus.<span class="property">length</span>);  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<p>  <strong>注意</strong>：</p>
<ul>
<li>此处数组的长度是数组元素的个数 ，不要和数组的索引号混淆。</li>
</ul>
</li>
<li><p>当我们数组里面的元素个数发生了变化，这个 length 属性跟着一起变化</p>
<ul>
<li>数组的length属性可以被修改：</li>
</ul>
</li>
<li><p>如果设置的length属性值大于数组的元素个数，则会在数组末尾出现空白元素；</p>
<ul>
<li>如果设置的length属性值小于数组的元素个数，则会把超过该值的数组元素删除</li>
</ul>
</li>
</ul>
<h3 id="1-5-数组中新增元素"><a href="#1-5-数组中新增元素" class="headerlink" title="1.5 数组中新增元素"></a>1.5 数组中新增元素</h3><p>​        数组中可以通过以下方式在数组的末尾插入新元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">数组[ 数组.<span class="property">length</span> ] = 新数据;</span><br></pre></td></tr></table></figure>

<h2 id="2-函数"><a href="#2-函数" class="headerlink" title="2 - 函数"></a>2 - 函数</h2><h3 id="2-1-函数的概念"><a href="#2-1-函数的概念" class="headerlink" title="2.1 函数的概念"></a>2.1 函数的概念</h3><p>​        在 JS 里面，可能会定义非常多的相同代码或者功能相似的代码，这些代码可能需要大量重复使用。虽然 for循环语句也能实现一些简单的重复操作，但是比较具有局限性，此时我们就可以使用 JS 中的函数。</p>
<p>​        函数：就是<strong>封装了一段可被重复调用执行的代码块</strong>。通过此代码块可以<strong>实现大量代码的重复使用</strong>。  </p>
<h3 id="2-2-函数的使用"><a href="#2-2-函数的使用" class="headerlink" title="2.2 函数的使用"></a>2.2 函数的使用</h3><h4 id="声明函数"><a href="#声明函数" class="headerlink" title="声明函数"></a>声明函数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="keyword">function</span> 函数名() &#123;</span><br><span class="line">    <span class="comment">//函数体代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>function 是声明函数的关键字,必须小写</p>
</li>
<li><p>由于函数一般是为了实现某个功能才定义的， 所以通常我们将函数名命名为动词，比如 getSum</p>
</li>
</ul>
<h4 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">函数名();  <span class="comment">// 通过调用函数名来执行函数体代码</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>调用的时候千万不要忘记添加小括号</p>
</li>
<li><p>口诀：函数不调用，自己不执行</p>
<p>注意：声明函数本身并不会执行代码，只有调用函数时才会执行函数体代码。</p>
</li>
</ul>
<h4 id="函数的封装"><a href="#函数的封装" class="headerlink" title="函数的封装"></a>函数的封装</h4><ul>
<li><p>函数的封装是把一个或者多个功能通过函数的方式封装起来，对外只提供一个简单的函数接口</p>
</li>
<li><p>简单理解：封装类似于将电脑配件整合组装到机箱中 ( 类似快递打包）  </p>
<p><img src="/images1/%E5%9B%BE%E7%89%872b.png"></p>
<p>例子：封装计算1-100累加和</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">   计算1-100之间值的函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> sumNum = <span class="number">0</span>;<span class="comment">// 准备一个变量，保存数字和</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    sumNum += i;<span class="comment">// 把每个数值 都累加 到变量中</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">alert</span>(sumNum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="title function_">getSum</span>();</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-3-函数的参数"><a href="#2-3-函数的参数" class="headerlink" title="2.3 函数的参数"></a>2.3 函数的参数</h3><h4 id="函数参数语法"><a href="#函数参数语法" class="headerlink" title="函数参数语法"></a>函数参数语法</h4><ul>
<li><p>形参：函数定义时设置接收调用时传入</p>
</li>
<li><p>实参：函数调用时传入小括号内的真实数据</p>
<p><img src="/images1/%E5%9B%BE%E7%89%873b.png"></p>
<p>​    参数的作用 : 在函数内部某些值不能固定，我们可以通过参数在调用函数时传递不同的值进去。</p>
<p>函数参数的运用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 带参数的函数声明</span></span><br><span class="line"><span class="keyword">function</span> 函数名(形参<span class="number">1</span>, 形参<span class="number">2</span> , 形参<span class="number">3.</span>..) &#123; <span class="comment">// 可以定义任意多的参数，用逗号分隔</span></span><br><span class="line">  <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 带参数的函数调用</span></span><br><span class="line">函数名(实参<span class="number">1</span>, 实参<span class="number">2</span>, 实参<span class="number">3.</span>..); </span><br></pre></td></tr></table></figure>

<ol>
<li>调用的时候实参值是传递给形参的</li>
<li>形参简单理解为：不用声明的变量</li>
<li>实参和形参的多个参数之间用逗号（,）分隔</li>
</ol>
</li>
</ul>
<h4 id="函数形参和实参数量不匹配时"><a href="#函数形参和实参数量不匹配时" class="headerlink" title="函数形参和实参数量不匹配时"></a>函数形参和实参数量不匹配时</h4><p><img src="/images1/%E5%9B%BE%E7%89%874b.png"></p>
<pre><code>注意：在JavaScript中，形参的默认值是undefined。
</code></pre>
<p>小结：</p>
<ul>
<li>函数可以带参数也可以不带参数</li>
<li>声明函数的时候，函数名括号里面的是形参，形参的默认值为 undefined</li>
<li>调用函数的时候，函数名括号里面的是实参</li>
<li>多个参数中间用逗号分隔</li>
<li>形参的个数可以和实参个数不匹配，但是结果不可预计，我们尽量要匹配</li>
</ul>
<h3 id="2-4-函数的返回值"><a href="#2-4-函数的返回值" class="headerlink" title="2.4 函数的返回值"></a>2.4 函数的返回值</h3><h4 id="return-语句"><a href="#return-语句" class="headerlink" title="return 语句"></a>return 语句</h4><pre><code>返回值：函数调用整体代表的数据；函数执行完成后可以通过return语句将指定数据返回 。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="keyword">function</span> 函数名（）&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span>  需要返回的值；</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">函数名();    <span class="comment">// 此时调用函数就可以得到函数体内return 后面的值</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在使用 return 语句时，函数会停止执行，并返回指定的值</li>
<li>如果函数没有 return ，返回的值是 undefined</li>
</ul>
<h4 id="break-continue-return-的区别"><a href="#break-continue-return-的区别" class="headerlink" title="break ,continue ,return 的区别"></a>break ,continue ,return 的区别</h4><ul>
<li>break ：结束当前的循环体（如 for、while）</li>
<li>continue ：跳出本次循环，继续执行下次循环（如 for、while）</li>
<li>return ：不仅可以退出循环，还能够返回 return 语句中的值，同时还可以结束当前的函数体内的代码</li>
</ul>
<h3 id="2-5-arguments的使用"><a href="#2-5-arguments的使用" class="headerlink" title="2.5 arguments的使用"></a>2.5 arguments的使用</h3><p>​        当不确定有多少个参数传递的时候，可以用 arguments 来获取。JavaScript 中，arguments实际上它是当前函数的一个内置对象。所有函数都内置了一个 arguments 对象，arguments 对象中存储了传递的所有实参。arguments展示形式是一个伪数组，因此可以进行遍历。伪数组具有以下特点：</p>
<ul>
<li><p>具有 length 属性</p>
</li>
<li><p>按索引方式储存数据</p>
</li>
<li><p>不具有数组的 push , pop 等方法</p>
<p>注意：在函数内部使用该对象，用此对象获取函数调用时传的实参。</p>
</li>
</ul>
<h3 id="2-6-函数案例"><a href="#2-6-函数案例" class="headerlink" title="2.6 函数案例"></a>2.6 函数案例</h3><pre><code>    函数内部可以调用另一个函数，在同一作用域代码中，函数名即代表封装的操作，使用函数名加括号即可以将封装的操作执行。
</code></pre>
<h3 id="2-7-函数的两种声明方式"><a href="#2-7-函数的两种声明方式" class="headerlink" title="2.7 函数的两种声明方式"></a>2.7 函数的两种声明方式</h3><ul>
<li><p>自定义函数方式(命名函数)</p>
<p>利用函数关键字 function 自定义函数方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明定义方式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;...&#125;</span><br><span class="line"><span class="comment">// 调用  </span></span><br><span class="line"><span class="title function_">fn</span>();  </span><br></pre></td></tr></table></figure>

<ul>
<li>因为有名字，所以也被称为命名函数</li>
<li>调用函数的代码既可以放到声明函数的前面，也可以放在声明函数的后面</li>
</ul>
</li>
<li><p>函数表达式方式(匿名函数）</p>
<p>利用函数表达式方式的写法如下： </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是函数表达式写法，匿名函数后面跟分号结束</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span>(<span class="params"></span>)&#123;...&#125;；</span><br><span class="line"><span class="comment">// 调用的方式，函数调用必须写到函数体下面</span></span><br><span class="line"><span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li>因为函数没有名字，所以也被称为匿名函数</li>
<li>这个fn 里面存储的是一个函数  </li>
<li>函数表达式方式原理跟声明变量方式是一致的</li>
<li>函数调用的代码必须写到函数体后面</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Java版基础题</title>
    <url>/2022/04/05/Java%E7%89%88%E5%9F%BA%E7%A1%80%E9%A2%98/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">目录</span><br><span class="line">1.输入输出</span><br><span class="line">2.冒泡排序</span><br><span class="line">3.排序（快排）</span><br><span class="line">4.判闰年（面向对象）</span><br><span class="line">5.知道圆心半径，求面积（面向对象加继承）</span><br></pre></td></tr></table></figure>

<p>1.输入输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Dome &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //输出</span><br><span class="line">        System.out.println(&quot;请输入一个字符:&quot;);</span><br><span class="line">        //输入</span><br><span class="line">        Scanner scan=new Scanner(System.in);</span><br><span class="line">        String str=scan.nextLine();</span><br><span class="line">        //输出字符串</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">scan.nextInt();</span><br><span class="line">scan.nextFloat();</span><br><span class="line">scan.nextDouble();</span><br><span class="line">next() 与 nextLine() 区别</span><br><span class="line">        next():</span><br><span class="line"></span><br><span class="line">        1、一定要读取到有效字符后才可以结束输入。</span><br><span class="line">        2、对输入有效字符之前遇到的空白，next() 方法会自动将其去掉。</span><br><span class="line">        3、只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。</span><br><span class="line">        next() 不能得到带有空格的字符串。</span><br><span class="line">        nextLine()：</span><br><span class="line"></span><br><span class="line">        1、以Enter为结束符,也就是说 nextLine()方法返回的是输入回车之前的所有字符。</span><br><span class="line">        2、可以获得空白。*/</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.冒泡排序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.homework;</span><br><span class="line"></span><br><span class="line">public class Maopao &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] aa= &#123;12,34,1,-5,9,100,55,0&#125;;</span><br><span class="line">        int bb,t;</span><br><span class="line">        for (int i=0;i&lt;aa.length-1;i++)</span><br><span class="line">            for (int j=i+1;j&lt;aa.length;j++)&#123;</span><br><span class="line">                if (aa[i]&gt;aa[j])&#123;</span><br><span class="line">                    t=aa[j];</span><br><span class="line">                    aa[j]=aa[i];</span><br><span class="line">                    aa[i]=t;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        for (int ss:aa)</span><br><span class="line">            System.out.println(ss);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3.排序（快排）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.homework;</span><br><span class="line"></span><br><span class="line">public class Kuaipai &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] aa= &#123;12,34,1,-5,9,100,55,0&#125;;</span><br><span class="line">        kuaipai(aa,0,aa.length-1);</span><br><span class="line">        for (int i = 0; i &lt; aa.length; i++) &#123;</span><br><span class="line">            System.out.println(aa[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public static void kuaipai(int[] arry, int low, int hight)&#123;</span><br><span class="line">        if(low&gt;hight)</span><br><span class="line">            return;</span><br><span class="line">        int temp,bb;</span><br><span class="line">        temp=arry[low];</span><br><span class="line">        int i=low;</span><br><span class="line">        int j=hight;</span><br><span class="line">        while (i&lt;j)&#123;</span><br><span class="line">            while (temp&lt;=arry[j]&amp;&amp;i&lt;j)</span><br><span class="line">                j--;</span><br><span class="line">            while (temp&gt;=arry[i]&amp;&amp;i&lt;j)</span><br><span class="line">                i++;</span><br><span class="line">            if (i&lt;j)&#123;</span><br><span class="line">                bb=arry[j];</span><br><span class="line">                arry[j]=arry[i];</span><br><span class="line">                arry[i]=bb;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    arry[low]=arry[i];</span><br><span class="line">        arry[i]=temp;</span><br><span class="line">        kuaipai(arry,low,j-1);</span><br><span class="line">        kuaipai(arry,j+1,hight);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>4.判闰年</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//日期类</span><br><span class="line">package com.homework;</span><br><span class="line">import java.text.ParseException;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">public class Date &#123;</span><br><span class="line">    private int year;</span><br><span class="line">    private int month;</span><br><span class="line">    private int day;</span><br><span class="line">    public Date(int year,int month,int day)&#123;</span><br><span class="line">        this.year=year;</span><br><span class="line">        this.month=month;</span><br><span class="line">        this.day=day;&#125;</span><br><span class="line">    public String getDate()&#123;</span><br><span class="line">        return year+&quot;/&quot;+month+&quot;/&quot;+day;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getYear() &#123;</span><br><span class="line">        return year;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getMonth() &#123;</span><br><span class="line">        return month;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getDay() &#123;</span><br><span class="line">        return day;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setYear(int year) &#123;</span><br><span class="line">        this.year = year;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setMonth(int month) &#123;</span><br><span class="line">        this.month = month;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setDay(int day) &#123;</span><br><span class="line">        this.day = day;</span><br><span class="line">    &#125;</span><br><span class="line">    public  String isValidDate(String str) &#123;</span><br><span class="line">        SimpleDateFormat format = new SimpleDateFormat(&quot;yyyy/MM/dd&quot;);</span><br><span class="line">        String aa=&quot;字符为有效字符&quot;;</span><br><span class="line">        try &#123;format.setLenient(false);</span><br><span class="line">            format.parse(str);</span><br><span class="line">        &#125; catch (ParseException e) &#123;</span><br><span class="line">            month=1;</span><br><span class="line">            day=1;</span><br><span class="line">            aa=&quot;非有效字符已重置为1月1日&quot;;&#125;</span><br><span class="line">        return aa;&#125;</span><br><span class="line">&#125;</span><br><span class="line">//main实现</span><br><span class="line">package com.homework;</span><br><span class="line">import java.util.GregorianCalendar;</span><br><span class="line">public class Amain &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //实例化并初始化</span><br><span class="line">        Date date=new Date(2008,5,15);</span><br><span class="line">        //得到日期</span><br><span class="line">        String str=date.getDate();</span><br><span class="line">        //判断是否为有效日期</span><br><span class="line">        System.out.println(date.isValidDate(str));</span><br><span class="line">        //打印日期</span><br><span class="line">        System.out.println(date.getDate());</span><br><span class="line">        //判断闰年</span><br><span class="line">        int year = date.getYear();</span><br><span class="line">        if(year%4==0&amp;&amp;year%100!=0||year%400==0)</span><br><span class="line">            System.out.println(&quot;是闰年&quot;);</span><br><span class="line">        else</span><br><span class="line">            System.out.println(&quot;不是闰年&quot;);</span><br><span class="line"></span><br><span class="line">       /* GregorianCalendar gcalendar = new GregorianCalendar();</span><br><span class="line">        if(gcalendar.isLeapYear(date.getYear()))</span><br><span class="line">            System.out.println(&quot;是闰年&quot;);</span><br><span class="line">        else</span><br><span class="line">            System.out.println(&quot;不是闰年&quot;);*/</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>5.知道圆心半径，求面积</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//圆心类</span><br><span class="line">package com.homework;</span><br><span class="line"></span><br><span class="line">class Point</span><br><span class="line">&#123;</span><br><span class="line">    private int x;</span><br><span class="line">    private int y;</span><br><span class="line">    public static int count=0;</span><br><span class="line">    public Point(int x,int y)</span><br><span class="line">    &#123;</span><br><span class="line">        this.x=x;</span><br><span class="line">        this.y=y;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getX() &#123;</span><br><span class="line">        return x;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getY() &#123;</span><br><span class="line">        return y;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getXY() &#123;</span><br><span class="line">        return &quot;(&quot;+getX()+&quot;,&quot;+getY()+&quot;)&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//圆类</span><br><span class="line">package com.homework;</span><br><span class="line">public class Circle extends Point</span><br><span class="line">&#123;</span><br><span class="line">    private int r;</span><br><span class="line">    static double PI=3.14159265;</span><br><span class="line">    public Circle(int x, int y,int r) &#123;</span><br><span class="line">        super(x,y);</span><br><span class="line">        this.r=r;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getR() &#123;</span><br><span class="line">        return r;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setR(int r) &#123;</span><br><span class="line">        this.r = r;</span><br><span class="line">    &#125;</span><br><span class="line">    public double getD()</span><br><span class="line">    &#123;</span><br><span class="line">        return 2*r;</span><br><span class="line">    &#125;</span><br><span class="line">    public double getL()</span><br><span class="line">    &#123;</span><br><span class="line">        return 2*r*PI;</span><br><span class="line">    &#125;</span><br><span class="line">    public double getS()</span><br><span class="line">    &#123;</span><br><span class="line">        return PI*r*r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//实现类</span><br><span class="line">package com.homework;</span><br><span class="line"></span><br><span class="line">public class Bmain &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Circle circle01=new Circle(3,4,5);</span><br><span class="line">        Circle circle02=new Circle(3,5,6);</span><br><span class="line">        double d=circle01.getD();</span><br><span class="line">        double l=circle01.getL();</span><br><span class="line">        double s=circle02.getS();</span><br><span class="line">        System.out.println(&quot;坐标:&quot;+circle01.getXY());</span><br><span class="line">        System.out.println(&quot;坐标点数量:&quot;+circle02.count);</span><br><span class="line">        System.out.println(&quot;直径为:&quot;+d);</span><br><span class="line">        System.out.println(&quot;周长为:&quot;+l);</span><br><span class="line">        System.out.println(&quot;面积为:&quot;+s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>12.Java用反射获取jar包中的属性和方法</title>
    <url>/2022/05/09/Java%E7%94%A8%E5%8F%8D%E5%B0%84%E8%8E%B7%E5%8F%96jar%E5%8C%85%E4%B8%AD%E7%9A%84%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h4 id="1-使用概要："><a href="#1-使用概要：" class="headerlink" title="1.使用概要："></a>1.使用概要：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">File file =new File(jar文件全路径);  </span><br><span class="line">URL url = file.toURI().toURL();</span><br><span class="line">URLClassLoader loader = new URLClassLoader(new URL[] &#123;url&#125;);  </span><br><span class="line">Class tidyClazz = loader.loadClass(所需class的含包名的全名); </span><br></pre></td></tr></table></figure>

<p>详细说明：</p>
<p>我们知道，Java利用ClassLoader将类载入内存，并且在同一应用中，可以有很多个ClassLoader，通过委派机制，把装载的任务传递给上级的装载器的，依次类推，直到启动类装载器（没有上级类装载器）。如果启动类装载器能够装载这个类，那么它会首先装载。如果不能，则往下传递。当父类为null时，JVM内置的类(称为:bootstrap class loader)就会充当父类。想想眼下的越来越多用XML文件做配置文件或者是描述符、部署符。其实这些通过XML文档描述的配置信息最终都要变成Java类，其实都是通过ClassLoader来完成的。URLClassLoader是ClassLoader的子类，它用于从指向 JAR 文件和目录的 URL 的搜索路径加载类和资源。也就是说，通过URLClassLoader就可以加载指定jar中的class到内存中</p>
<h4 id="2-另一种方式"><a href="#2-另一种方式" class="headerlink" title="2.另一种方式"></a>2.另一种方式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package dome;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">import java.util.Enumeration;</span><br><span class="line">import java.util.jar.JarEntry;</span><br><span class="line">import java.util.jar.JarFile;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author cb</span><br><span class="line"> * @create 2022-05-2022/5/7 23:55</span><br><span class="line"> */</span><br><span class="line">public class Hook &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        String path = &quot;C:\\Users\\26257\\Desktop\\&quot;;</span><br><span class="line">        String fileName = &quot;dome-1.0-SNAPSHOT.jar&quot;;</span><br><span class="line">        //通过jarFile和JarEntry得到所有的类</span><br><span class="line">        JarFile jarFile = new JarFile(path + fileName);</span><br><span class="line">        //返回zip文件条目的枚举</span><br><span class="line">        Enumeration&lt;JarEntry&gt; e = jarFile.entries();</span><br><span class="line">        JarEntry entry;</span><br><span class="line">        //测试此枚举是否包含更多的元素</span><br><span class="line">        while (e.hasMoreElements()) &#123;</span><br><span class="line">            entry = (JarEntry) e.nextElement();</span><br><span class="line">            //下文介绍，判断是否时完整的jar包</span><br><span class="line">            if (entry.getName().indexOf(&quot;META-INF&quot;) &lt; 0 &amp;&amp; entry.getName().indexOf(&quot;.class&quot;) &gt;= 0) &#123;</span><br><span class="line">                String classFullName = entry.getName();</span><br><span class="line">                //去掉后缀.class</span><br><span class="line">                String className = classFullName.substring(0, classFullName.length() - 6).replace(&quot;/&quot;, &quot;.&quot;);</span><br><span class="line">                System.out.println(className);</span><br><span class="line">                Class&lt;?&gt; c = Class.forName(className);</span><br><span class="line">                Method[] methods = c.getDeclaredMethods();</span><br><span class="line">                /*System.out.println(methods);</span><br><span class="line">                //取消Java语言访问权限检查</span><br><span class="line">                methods[1].setAccessible(true);</span><br><span class="line">                for (Method method : methods) &#123;</span><br><span class="line">                    String methodName = method.getName();</span><br><span class="line">                    System.out.println(&quot;方法名称:&quot; + methodName);</span><br><span class="line">                    System.out.println(&quot;返回值类型&quot; + method.getReturnType());</span><br><span class="line">                    Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</span><br><span class="line">                    for (Class&lt;?&gt; clas : parameterTypes) &#123;</span><br><span class="line">                        // String parameterName = clas.getName();</span><br><span class="line">                        String parameterName = clas.getSimpleName();</span><br><span class="line">                        System.out.println(&quot;参数类型:&quot; + parameterName);</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(&quot;==========================&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>dome并还未替换其原有方法，测试了一下方法的调用</p>
<h2 id="总结如下："><a href="#总结如下：" class="headerlink" title="总结如下："></a>总结如下：</h2><p>执行jar包的main方法时，注意main方法的参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//可取消Java语言访问权限检查</span><br><span class="line">method.setAccessible(true);</span><br><span class="line">method.invoke(null, new Object[]&#123;new String[]&#123;&#125;&#125;);</span><br></pre></td></tr></table></figure>

<p>其他方法时</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Object obj =  c.newInstance();</span><br><span class="line">method.invoke(obj,无参不写);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (entry.getName().indexOf(&quot;META-INF&quot;) &lt; 0 &amp;&amp; entry.getName().indexOf(&quot;.class&quot;) &gt;= 0) &#123;</span><br><span class="line">...........</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>无论是在打<code>jar</code>或<code>war</code>包时，都会生成<code>META-INFO</code>这个文件夹。我们需要了解这个路径，丰富自己的知识框架。</p>
<p>官方一点的说法：META-INF 相当于一个信息包，目录中的文件和目录获得 Java 2 平台的认可与解释，用来配置应用程序、扩展程序、类加载器和服务<code>manifest.mf</code>文件，在打包时自动生成。</p>
<p>简单的说法：就是存储了项目的元信息，其中文件<code>manifest.mf</code>仅此一份，描述了程序的基本信息、<code>Main-Class</code>的入口、<code>jar</code>依赖路径<code>Class-Path</code>。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>15.Java运行非Web的Springboot项目的两种方法</title>
    <url>/2022/05/12/Java%E8%BF%90%E8%A1%8C%E9%9D%9EWeb%E7%9A%84Springboot%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h3 id="Java运行非Web的Springboot项目的两种方法"><a href="#Java运行非Web的Springboot项目的两种方法" class="headerlink" title="Java运行非Web的Springboot项目的两种方法"></a>Java运行非Web的Springboot项目的两种方法</h3><h4 id="一、创建打开一个Springboot项目"><a href="#一、创建打开一个Springboot项目" class="headerlink" title="一、创建打开一个Springboot项目"></a>一、创建打开一个Springboot项目</h4><p>使用idea，选择Spring Initializr进行创建</p>
<p>next，这一步不要勾选 Spring Web 依赖，不然就是个 Web 项目了</p>
<h4 id="1-用测试类"><a href="#1-用测试类" class="headerlink" title="1.用测试类"></a>1.用测试类</h4><p>先新建一个Server类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class Server &#123;</span><br><span class="line"></span><br><span class="line">    public void dome() &#123;</span><br><span class="line">        System.out.println(&quot;hello,world&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后，在包test里有一个ApplicationTests</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@SpringBootTest</span><br><span class="line">class MybatisApplicationTests &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private Server server;</span><br><span class="line">    @Test</span><br><span class="line">    void contextLoads() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    void dome1()&#123;</span><br><span class="line">        server.dome();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行测试类就可</p>
<h4 id="2-持续运行不停止（定时任务、自动执行）"><a href="#2-持续运行不停止（定时任务、自动执行）" class="headerlink" title="2.持续运行不停止（定时任务、自动执行）"></a>2.持续运行不停止（定时任务、自动执行）</h4><p>如果想要让项目不停止，一直打印HelloWorld，可以在启动类 UseToTestApplication 上添加注解 @EnableScheduling ，意思为开启定时任务，这个时候启动类就不能修改成上面的getBean那样了，要改回原来的样子</p>
<p>然后在 controller 层的DemoControlelr里面加上注解 @Component 可以确保这个类会被定时任务扫描到，然后在下面的 demo 方法上加上 @Scheduled(fixedRate &#x3D; 1000)，意思为每1000毫秒执行一次 demo 方法<br>1.设置启动类（加@EnableScheduling注解）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableScheduling</span><br><span class="line">public class MybatisApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(MybatisApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.在controller类中，设置定时时间（可以设置的久一点）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class Controler &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private Server server;</span><br><span class="line">    @Scheduled(fixedRate = 100000)</span><br><span class="line">    public void test()&#123;</span><br><span class="line">        server.dome();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行启动类就可</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>8.Java线程池</title>
    <url>/2022/05/03/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    <content><![CDATA[<h1 id="Java线程池"><a href="#Java线程池" class="headerlink" title="Java线程池"></a>Java线程池</h1><p><strong>1、new Thread的弊端</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a. 每次new Thread新建对象性能差。</span><br><span class="line">   b. 线程缺乏统一管理，可能无限制新建线程，相互之间竞争，及可能占用过多系统资源导致死机或oom（out of memory）。</span><br><span class="line">   c. 缺乏更多功能，如定时执行、定期执行、线程中断。</span><br></pre></td></tr></table></figure>

<p>相比new Thread，Java提供的四种线程池的好处在于：</p>
<pre><code>      a. 重用存在的线程，减少对象创建、消亡的开销，性能佳。
      b. 可有效控制最大并发线程数，提高系统资源的使用率，同时避免过多资源竞争，避免堵塞。
      c. 提供定时执行、定期执行、单线程、并发数控制等功能。
</code></pre>
<h5 id="2、Java-线程池"><a href="#2、Java-线程池" class="headerlink" title="2、Java 线程池"></a>2、Java 线程池</h5><p>Java通过Executors提供四种线程池，分别为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">newCachedThreadPool创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</span><br><span class="line">newFixedThreadPool 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。</span><br><span class="line">newScheduledThreadPool 创建一个定长线程池，支持定时及周期性任务执行。</span><br><span class="line">newSingleThreadExecutor 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。</span><br></pre></td></tr></table></figure>

<h5 id="1-newCachedThreadPool："><a href="#1-newCachedThreadPool：" class="headerlink" title="(1) newCachedThreadPool："></a>(1) newCachedThreadPool：</h5><p>创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。示例代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ExecutorService cachedThreadPool = Executors.newCachedThreadPool();</span><br><span class="line">  for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">    final int index = i;</span><br><span class="line">  try &#123;</span><br><span class="line">    Thread.sleep(index * 1000);</span><br><span class="line">   &#125; catch (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">  &#125; </span><br><span class="line">   cachedThreadPool.execute(new Runnable() &#123;</span><br><span class="line">     @Override</span><br><span class="line">     public void run() &#123;</span><br><span class="line">        log.info(index);</span><br><span class="line">      &#125; </span><br><span class="line">   &#125;); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>线程池为无限大，当执行第二个任务时第一个任务已经完成，会复用执行第一个任务的线程，而不用每次新建线程。</p>
<h5 id="2-newFixedThreadPool：—-需要指定线程池的大小"><a href="#2-newFixedThreadPool：—-需要指定线程池的大小" class="headerlink" title="(2) newFixedThreadPool：—  需要指定线程池的大小"></a>(2) newFixedThreadPool：—  需要指定线程池的大小</h5><p>创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。示例代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ExecutorService fixedThreadPool = Executors.newFixedThreadPool(3);</span><br><span class="line">  for (int i = 0; i &lt; 10; i++) &#123; </span><br><span class="line">  final int index = i;  </span><br><span class="line">  fixedThreadPool.execute(new Runnable() &#123;  </span><br><span class="line">  @Override </span><br><span class="line">  public void run() &#123; </span><br><span class="line">      try &#123;</span><br><span class="line">         log.info(index);</span><br><span class="line">         Thread.sleep(2000);</span><br><span class="line">      &#125; catch (InterruptedException e) &#123;</span><br><span class="line">         // TODO Auto-generated catch block</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为线程池大小为3，每个任务输出index后sleep 2秒，所以每两秒打印3个数字。</p>
<p>定长线程池的大小最好根据系统资源进行设置。如Runtime.getRuntime().availableProcessors()。可参考PreloadDataCache。</p>
<h5 id="3-newScheduledThreadPool："><a href="#3-newScheduledThreadPool：" class="headerlink" title="(3)newScheduledThreadPool："></a>(3)newScheduledThreadPool：</h5><p>创建一个定长线程池，支持定时及周期性任务执行。延迟执行示例代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(5);</span><br><span class="line"> scheduledThreadPool.schedule(new Runnable() &#123;  </span><br><span class="line">      @Override</span><br><span class="line">      public void run() &#123;</span><br><span class="line">         log.info(&quot;delay 3 seconds&quot;);</span><br><span class="line">       &#125; </span><br><span class="line"> &#125;, 3, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>

<p>表示延迟3秒执行。</p>
<p>定期执行示例代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scheduledThreadPool.scheduleAtFixedRate(new Runnable() &#123; </span><br><span class="line">      @Override </span><br><span class="line">      public void run() &#123; </span><br><span class="line">          log.info(&quot;delay 1 seconds, and excute every 3 seconds&quot;); </span><br><span class="line">      &#125; </span><br><span class="line">&#125;, 1, 3, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>

<p>表示延迟1秒后每3秒执行一次。</p>
<p>ScheduledExecutorService比Timer更安全，功能更强大</p>
<h5 id="4-newSingleThreadExecutor："><a href="#4-newSingleThreadExecutor：" class="headerlink" title="(4)newSingleThreadExecutor："></a>(4)newSingleThreadExecutor：</h5><p>创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。示例代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();</span><br><span class="line">for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">  final int index = i;</span><br><span class="line">  singleThreadExecutor.execute(new Runnable() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        log.info(index);</span><br><span class="line">        Thread.sleep(2000);</span><br><span class="line">     &#125; catch (InterruptedException e) &#123;</span><br><span class="line">         // TODO Auto-generated catch block</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果依次输出，相当于顺序执行各个任务。</p>
<h5 id="线程池的作用："><a href="#线程池的作用：" class="headerlink" title="线程池的作用："></a>线程池的作用：</h5><p>线程池作用就是限制系统中执行线程的数量。</p>
<p>根据系统的环境情况，可以自动或手动设置线程数量，达到运行的最佳效果；少了浪费了系统资源，多了造成系统拥挤效率不高。用线程池控制线程数量，其他线程排队等候。一个任务执行完毕，再从队列的中取最前面的任务开始执行。若队列中没有等待进程，线程池的这一资源处于等待。当一个新任务需要运行时，如果线程池中有等待的工作线程，就可以开始运行了；否则进入等待队列。</p>
<h5 id="为什么要用线程池"><a href="#为什么要用线程池" class="headerlink" title="为什么要用线程池:"></a>为什么要用线程池:</h5><p>1.减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。</p>
<p>2.可以根据系统的承受能力，调整线程池中工作线线程的数目，防止因为消耗过多的内存，而把服务器累趴下(每个线程需要大约1MB内存，线程开的越多，消耗的内存也就越大，最后死机)。</p>
<p>Java里面线程池的顶级接口是Executor，但是严格意义上讲Executor并不是一个线程池，而只是一个执行线程的工具。真正的</p>
<p>线程池接口是ExecutorService。</p>
<h5 id="比较重要的几个类："><a href="#比较重要的几个类：" class="headerlink" title="比较重要的几个类："></a>比较重要的几个类：</h5><p>ExecutorService： 真正的线程池接口。</p>
<p>ScheduledExecutorService： 能和Timer&#x2F;TimerTask类似，解决那些需要任务重复执行的问题。</p>
<p>ThreadPoolExecutor： ExecutorService的默认实现。</p>
<p>ScheduledThreadPoolExecutor： 继承ThreadPoolExecutor的ScheduledExecutorService接口实现，周期性任务调度的类实现。</p>
<p>要配置一个线程池是比较复杂的，尤其是对于线程池的原理不是很清楚的情况下，很有可能配置的线程池不是较优的，因此在Executors类里面提供了一些静态工厂，生成一些常用的线程池。</p>
<p>原文链接：<a href="https://blog.csdn.net/qq_35275233/article/details/87893337">https://blog.csdn.net/qq_35275233/article/details/87893337</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>6.Java面向对象</title>
    <url>/2022/05/03/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h2 id="面向对象概念"><a href="#面向对象概念" class="headerlink" title="面向对象概念"></a>面向对象概念</h2><p>  所有操作基于对象进行操作实现</p>
<h2 id="面向对象的三大特征"><a href="#面向对象的三大特征" class="headerlink" title="面向对象的三大特征"></a>面向对象的三大特征</h2><p>  封装、继承、多态</p>
<p>类：具有相同特征和行为物体的统称</p>
<p>在java中类的定义语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[修饰符] class 类名</span><br><span class="line">&#123;</span><br><span class="line">  		属性;</span><br><span class="line">  		方法;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>属性和方法称为成员、分别是成员属性和成员方法</p>
<blockquote>
<p>类的使用：<br>1.创建对象<br>结合关键字new， new 对象名(参数列表);</p>
<p>2.调用它的方法和属性<br>对象名.属性<br>对象名.方法(参数列表)</p>
<p>对象创建的详细过程：</p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> int age;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Person&#123;</span><br><span class="line">            <span class="keyword">this</span>.name=name;</span><br><span class="line">            <span class="keyword">this</span>.age=age;</span><br><span class="line">        &#125;</span><br><span class="line">        &#123;</span><br><span class="line">            age=<span class="number">20</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> static void main(String[] args)&#123;</span><br><span class="line">            Person person=new Person(<span class="string">&quot;XXX&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>对象的具体创建过程：</strong><br>1.在堆中开辟内存空间，JVM对象进行静态初始化，就是给各个属性赋予默认值</p>
<p>整数(byte、short、int、long)：0<br>小数(double、float):0.0<br>字符(char):0&#x2F;‘ ‘<br>布尔值(boolean):false</p>
</blockquote>
<blockquote>
<p><strong>this：</strong><br>出现的位置：出现在本类的构造方法中&#x2F;成员方法中</p>
<p>作用：</p>
<p>1、表示当前对象，谁调用该方法，this就指代谁</p>
<p>2、可以调用本类中的构造方法，减少代码重复</p>
</blockquote>
<blockquote>
<p><strong>局部变量和成员变量的区别：</strong></p>
<p>1.作用域：方法中可以直接使用成员变量(成员变量作用范围整个类，局部变量只能在方法中访问)</p>
<p>2.内存分配：成员变量在堆中分配内存，局部变量在栈中分配内存</p>
<p>3.成员变量：直接定义在类中 局部变量：定义在方法中，包括方法参数</p>
<p>4.生命周期：局部变量在方法执行完成就销毁，成员变量根这个对象的销毁而销毁</p>
<p>5.有无默认值：JVM不会给局部变量赋予默认值，JVM会给成员变量赋予默认值</p>
</blockquote>
<p><strong>如果一个类中局部变量和成员变量同名，优先访问局部变量，可以用this区分局部变量和成员变量<br>封装的含义：定义类的过程</strong></p>
<blockquote>
<p><strong>继承：</strong></p>
<p>为什么要有继承？</p>
<p>正面角度：拓展父类</p>
<p>反面角度：将子类中相同的代码抽象到父类中，提高代码的复用性，减少重复代码</p>
<p><strong>继承语法：</strong></p>
</blockquote>
<p><code>   public class 子类名 extends 父类名&#123;     &#125;</code></p>
<p>方法的重写：<br>子类重写父类中的方法，除了方法体重写之外，其他的和父类定义的一样<br>方法的重载：<br>在同一个类中，方法名相同，参数列表不同(类型，顺序，个数)，和返回值相同<br><strong>super：</strong><br>1、可以在子类的构造方法中调用父类的构造方法，通过super调用父类中的构造方法<br>必须放在子类构造方法中的第一行，如果子类构造方法没有调用父类的构造方法，默认调用无参构造<br>2、调用父类的构造方法给父类中定义的属性赋值，或调用父类中的属性和方法</p>
<p><strong>修饰符：</strong><br>访问修饰符、static修饰符、final修饰符</p>
<p>访问修饰符的作用：控制被修饰的内容(类、类的成员)在其他类中的访问情况，具体参考baidu</p>
<p>一般结论：属性使用private，方法使用public</p>
<p>在开发中，我们需要给类中每个属性提供一个getter获取方法和setter修改方法</p>
<p>访问修饰符：public protected default private</p>
<p>static修饰符作用：控制被修饰的内容的加载时机</p>
<p>static修饰的成员就变为静态成员，而且静态成员不在属于单个对象，而是属于类</p>
<p>直接可以通过类名.属性&#x2F;方法名直接调用</p>
<p><strong>类的加载过程：</strong></p>
<p>JAVA中的类都是懒加载，需要用的时候才去加载</p>
<p><strong>具体过程：</strong></p>
<p>1、JVM将class加载到方法区(元空间)</p>
<p>2、JVM对类进行静态初始化：给静态属性在方法区中的常量池开辟空间</p>
<p>3、JVM对类进行动态初始化：执行&lt; cinit &gt;()方法</p>
<p>&lt; cinit &gt;()方法组成：静态属性的赋值语句+静态代码块从上到下依次组成</p>
<p><strong>类的初始化小细节：</strong></p>
<p>如果父类没有初始化，首先加载父类的.class文件</p>
<p>然后再初始化本类</p>
<p><strong>final修饰符：</strong></p>
<p>final修饰类：类不可被继承</p>
<p>final修饰方法：方法不可被重写</p>
<p>final修饰变量：变量变常量</p>
<p>修饰成员变量，成员变量要再对象初始化阶段或构造方法中完成赋值</p>
<p>修饰静态变量：静态变量必须在类的初始化阶段完成赋值</p>
<p>抽象类：<br><strong>抽象方法的定义语法：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public abstract class ClassName&#123;</span><br><span class="line">            public abstract 返回值类型 方法名(参数列表);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>抽象可以含有抽象方法，但不能被实例化</p>
<p>一般的普通类不可以含有抽象方法，但含有抽象方法的一定是抽象类</p>
<p><strong>抽象类的构造方法作用：</strong></p>
<p>给子类对象在初始化的时候给父类中定义的属性赋值<br>接口：比抽象类更加抽象，在接口中只能含有抽象方法(接口中方法的访问修饰符默认是public abstract)和常量<br><strong>定义语法：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[访问修饰符] interface InterfaceName&#123;</span><br><span class="line">        public static final 数据类型 常量名=值;</span><br><span class="line">        public abstract 返回值类型 方法名(参数列表);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>使用接口：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class ClassName implement InterfaceName&#123;</span><br><span class="line">            重写接口中的方法</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p><strong>多态：</strong></p>
<p>向上转型和向下转型</p>
<p>向上转型：父类类型&#x2F;接口类型 对象名&#x3D;子类类型的对象&#x2F;子类类型对象的引用</p>
<p>父类引用指向子类的对象</p>
<p>通过对象名只能调用父类&#x2F;接口中定义的方法，编译看左边，运行看右边</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">        String name;</span><br><span class="line">        public void info()&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    class Chinese extends Person&#123;</span><br><span class="line">        @override</span><br><span class="line">        public void info()&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    class Main&#123;</span><br><span class="line">        public static void main(String[] args)&#123;</span><br><span class="line">            Person chinese=new Chinese();多态</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>向下转型：<br>语法格式：子类类型 对象名&#x3D;(子类类型)new 父类类型();</p>
<p>在编译的时候，始终是正确的<br>但在运行的时候，需要检测有边对象的真正类型，只有类型和声名类型一样才能强转成功<br><strong>例:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Animal&#123;</span><br><span class="line">    class Cat&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    class Dog&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    class Main&#123;</span><br><span class="line">            public static void main(String[] args)&#123;</span><br><span class="line">                Animal animal=new Animal();</span><br><span class="line">                Cat cat=(Cat)animal;</span><br><span class="line">                Dog dog=(Dog)animal；//错误</span><br><span class="line">                Animal01 animal01=new Dog();</span><br><span class="line">                Dog dog=(Dog)animal01;//正确</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p><strong>补充：</strong></p>
<p>instanceof:</p>
<p>A instanceof B: 判断对象A是否是B类或B的子类的实例化对象</p>
<p>getClass()方法，获取当前对象的类型</p>
<p>原文链接：<a href="https://www.cnblogs.com/Floating-dream/p/14882609.html">https://www.cnblogs.com/Floating-dream/p/14882609.html</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>3.Jsoup实现高效率爬虫</title>
    <url>/2022/04/21/Jsoup%E5%AE%9E%E7%8E%B0%E9%AB%98%E6%95%88%E7%8E%87%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<h1 id="Jsoup"><a href="#Jsoup" class="headerlink" title="Jsoup"></a>Jsoup</h1><p>我们抓取到页面之后，还需要对页面进行解析。可以使用字符串处理工具解析页面，也可以使用正则表达式，但是这些方法都会带来很大的开发成本，所以我们需要使用一款专门解析html页面的技术。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">目录</span><br><span class="line">1.1 jsoup介绍</span><br><span class="line">1.2 使用dom方式遍历文档</span><br><span class="line">1.3 使用选择器语法查找元素</span><br><span class="line">1.4 Selector选择器概述</span><br><span class="line">1.5 Selector选择器组合使用</span><br><span class="line">2.0 实现案例</span><br></pre></td></tr></table></figure>



<h2 id="1-1-jsoup介绍"><a href="#1-1-jsoup介绍" class="headerlink" title="1.1 jsoup介绍"></a>1.1 jsoup介绍</h2><p>jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</p>
<h6 id="jsoup的主要功能如下："><a href="#jsoup的主要功能如下：" class="headerlink" title="jsoup的主要功能如下："></a>jsoup的主要功能如下：</h6><ol>
<li><p>从一个URL，文件或字符串中解析HTML；</p>
</li>
<li><p>使用DOM或CSS选择器来查找、取出数据；</p>
</li>
<li><p>可操作HTML元素、属性、文本；</p>
</li>
</ol>
<p>Jsoup工程准备maven工程</p>
<p>给pom.xml加入依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">           &lt;!-- jsoup HTML parser library @ https://jsoup.org/ --&gt;</span><br><span class="line">           &lt;groupId&gt;org.jsoup&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;jsoup&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;1.14.3&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>1</p>
<p>Jsoup可以直接输入字符串，并封装为Document对象</p>
<h6 id="两种方式："><a href="#两种方式：" class="headerlink" title="两种方式："></a>两种方式：</h6><p>1.解析文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void testJsoupString() throws Exception &#123;</span><br><span class="line">    //读取文件获取</span><br><span class="line">    String html = FileUtils.readFileToString(new File(&quot;D:\\jsoup.html&quot;), &quot;UTF-8&quot;);</span><br><span class="line"></span><br><span class="line">    //    解析字符串</span><br><span class="line">    Document document = Jsoup.parse(html);</span><br><span class="line"></span><br><span class="line">    //获取title的内容</span><br><span class="line">    Element title = document.getElementsByTag(&quot;title&quot;).first();</span><br><span class="line">    System.out.println(title.text());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.获取网络资源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String url=&quot;http://........&quot;;</span><br><span class="line">   Document doc = Jsoup.connect(url).get();</span><br></pre></td></tr></table></figure>

<h3 id="1-2-使用dom方式遍历文档"><a href="#1-2-使用dom方式遍历文档" class="headerlink" title="1.2 使用dom方式遍历文档"></a>1.2 <strong>使用dom方式遍历文档</strong></h3><p>元素获取（.first表示获取第一个）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//1.    根据id查询元素getElementById</span><br><span class="line">Element element = document.getElementById(&quot;city_bj&quot;);</span><br><span class="line"></span><br><span class="line">//2.   根据标签获取元素getElementsByTag</span><br><span class="line">element = document.getElementsByTag(&quot;title&quot;).first();</span><br><span class="line"></span><br><span class="line">//3.   根据class获取元素getElementsByClass</span><br><span class="line">element = document.getElementsByClass(&quot;s_name&quot;).last();</span><br><span class="line"></span><br><span class="line">//4.   根据属性获取元素getElementsByAttribute</span><br><span class="line">element = document.getElementsByAttribute(&quot;abc&quot;).first();</span><br><span class="line">element = document.getElementsByAttributeValue(&quot;class&quot;, &quot;city_con&quot;).first();</span><br></pre></td></tr></table></figure>

<h3 id="1-3使用选择器语法查找元素"><a href="#1-3使用选择器语法查找元素" class="headerlink" title="1.3使用选择器语法查找元素"></a>1.3<strong>使用选择器语法查找元素</strong></h3><p>jsoup elements对象支持类似于CSS (或jquery)的选择器语法，来实现非常强大和灵活的查找功能。这个select 方法在Document, Element,或Elements对象中都可以使用。且是上下文相关的，因此可实现指定元素的过滤，或者链式选择访问。</p>
<p>Select方法将返回一个Elements集合，并提供一组方法来抽取和处理结果。</p>
<h3 id="1-4-Selector选择器概述"><a href="#1-4-Selector选择器概述" class="headerlink" title="1.4 Selector选择器概述"></a>1.4 <strong>Selector选择器概述</strong></h3><p><strong>tagname</strong>: 通过标签查找元素，比如：span</p>
<p><strong>#id</strong>: 通过ID查找元素，比如：# city_bj</p>
<p><strong>.class</strong>: 通过class名称查找元素，比如：.class_a</p>
<p><strong>[attribute]</strong>: 利用属性查找元素，比如：[abc]</p>
<p><strong>[attr&#x3D;value]</strong>: 利用属性值来查找元素，比如：[class&#x3D;s_name]</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//tagname: 通过标签查找元素，比如：span</span><br><span class="line">Elements span = document.select(&quot;span&quot;);</span><br><span class="line">for (Element element : span) &#123;</span><br><span class="line">    System.out.println(element.text());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//#id: 通过ID查找元素，比如：#city_bjj</span><br><span class="line">String str = document.select(&quot;#city_bj&quot;).text();</span><br><span class="line"></span><br><span class="line">//.class: 通过class名称查找元素，比如：.class_a</span><br><span class="line">str = document.select(&quot;.class_a&quot;).text();</span><br><span class="line"></span><br><span class="line">//[attribute]: 利用属性查找元素，比如：[abc]</span><br><span class="line">str = document.select(&quot;[abc]&quot;).text();</span><br><span class="line"></span><br><span class="line">//[attr=value]: 利用属性值来查找元素，比如：[class=s_name]</span><br><span class="line">str = document.select(&quot;[class=s_name]&quot;).text();</span><br></pre></td></tr></table></figure>

<h3 id="1-5-Selector选择器组合使用"><a href="#1-5-Selector选择器组合使用" class="headerlink" title="1.5 Selector选择器组合使用"></a>1.5 <strong>Selector选择器组合使用</strong></h3><p><strong>el#id</strong>: 元素+ID，比如： h3#city_bj</p>
<p><strong>el.class</strong>: 元素+class，比如： li.class_a</p>
<p><strong>el[attr]</strong>: 元素+属性名，比如： span[abc]</p>
<p><strong>任意组合</strong>: 比如：span[abc].s_name</p>
<p><strong>ancestor child</strong>: 查找某个元素下子元素，比如：.city_con li 查找”city_con”下的所有li</p>
<p><strong>parent &gt; child</strong>: 查找某个父元素下的直接子元素，比如：</p>
<p>.city_con &gt; ul &gt; li 查找city_con第一级（直接子元素）的ul，再找所有ul下的第一级li</p>
<p><strong>parent &gt; *</strong>: 查找某个父元素下所有直接子元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//el#id: 元素+ID，比如： h3#city_bj</span><br><span class="line">String str = document.select(&quot;h3#city_bj&quot;).text();</span><br><span class="line"></span><br><span class="line">//el.class: 元素+class，比如： li.class_a</span><br><span class="line">str = document.select(&quot;li.class_a&quot;).text();</span><br><span class="line"></span><br><span class="line">//el[attr]: 元素+属性名，比如： span[abc]</span><br><span class="line">str = document.select(&quot;span[abc]&quot;).text();</span><br><span class="line"></span><br><span class="line">//任意组合，比如：span[abc].s_name</span><br><span class="line">str = document.select(&quot;span[abc].s_name&quot;).text();</span><br><span class="line"></span><br><span class="line">//ancestor child: 查找某个元素下子元素，比如：.city_con li 查找&quot;city_con&quot;下的所有li</span><br><span class="line">str = document.select(&quot;.city_con li&quot;).text();</span><br><span class="line"></span><br><span class="line">//parent &gt; child: 查找某个父元素下的直接子元素，</span><br><span class="line">//比如：.city_con &gt; ul &gt; li 查找city_con第一级（直接子元素）的ul，再找所有ul下的第一级li</span><br><span class="line">str = document.select(&quot;.city_con &gt; ul &gt; li&quot;).text();</span><br><span class="line"></span><br><span class="line">//parent &gt; * 查找某个父元素下所有直接子元素.city_con &gt; *</span><br><span class="line">str = document.select(&quot;.city_con &gt; *&quot;).text();</span><br></pre></td></tr></table></figure>

<h1 id="实现案例"><a href="#实现案例" class="headerlink" title="实现案例"></a>实现案例</h1><ol>
<li></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Dome4 &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        String url=&quot;http://........&quot;;</span><br><span class="line">        Document doc = Jsoup.connect(url).get();</span><br><span class="line">        Elements picture=doc.select(&quot;img[src$=.jpg]&quot;);</span><br><span class="line">        Elements urlpath= doc.select(&quot;a[href]&quot;);</span><br><span class="line">        Elements title =doc.select(&quot;h2&quot;);</span><br><span class="line">        int j=0;</span><br><span class="line">        String photo[]=new String[50];</span><br><span class="line">        String path[]=new String[50];</span><br><span class="line">        String name[]=new String[50];</span><br><span class="line">        for (Element link : picture) &#123;</span><br><span class="line">            //System.out.println(link.attr(&quot;abs:src&quot;));</span><br><span class="line">            photo[j]=link.attr(&quot;abs:src&quot;);</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        j=0;</span><br><span class="line">        for (Element link : urlpath) &#123;</span><br><span class="line">            //System.out.println(link.attr(&quot;abs:href&quot;));</span><br><span class="line">            path[j]=link.attr(&quot;abs:href&quot;);</span><br><span class="line">            j++;</span><br><span class="line">            &#125;</span><br><span class="line">        j=0;</span><br><span class="line">        for (Element link : title) &#123;</span><br><span class="line">            //System.out.println(link.text());</span><br><span class="line">            name[j]=link.text();</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.对象类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Attribute &#123;</span><br><span class="line">    String name;</span><br><span class="line">    String pid0;</span><br><span class="line">    String pid;</span><br><span class="line">    int level;</span><br><span class="line">    String url;</span><br><span class="line">	//类属性的set，get方法省略</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Dome5 &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        String url = &quot;https://.........&quot;;</span><br><span class="line">        Document doc = Jsoup.connect(url).get();</span><br><span class="line">        Elements doc1 = doc.select(&quot;div[class=\&quot;navigation-box\&quot;]&quot;);</span><br><span class="line">        ArrayList&lt;Attribute&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        for (Element path : doc1) &#123;</span><br><span class="line">            Elements doc2 = path.select(&quot;a[href]&quot;);</span><br><span class="line">            Elements doc3 = path.select(&quot;h4&quot;);</span><br><span class="line">            String uuid = UUID.randomUUID().toString().replaceAll(&quot;-&quot;, &quot;&quot;);</span><br><span class="line">            for (Element path1 : doc2) &#123;</span><br><span class="line">                Attribute attribute = new Attribute();</span><br><span class="line">                String id = UUID.randomUUID().toString().replaceAll(&quot;-&quot;, &quot;&quot;);</span><br><span class="line">                attribute.pid0 = id;</span><br><span class="line">                attribute.level = 2;</span><br><span class="line">                attribute.pid = uuid;</span><br><span class="line">                attribute.url = path1.attr(&quot;abs:href&quot;);</span><br><span class="line">                attribute.name = path1.text();</span><br><span class="line">                for (Element path2 : doc3) &#123;</span><br><span class="line">                    if (path2.toString().contains(path1.toString())) &#123;</span><br><span class="line">                        attribute.setPid0(&quot;0&quot;);</span><br><span class="line">                        attribute.setLevel(1);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                list.add(attribute);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>具体详解请看</p>
<p><a href="https://www.cnblogs.com/zhangyinhua/p/8037599.html">https://www.cnblogs.com/zhangyinhua/p/8037599.html</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 快速入门笔记（十六）</title>
    <url>/2022/04/03/Js%E4%B9%8BVue%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89/</url>
    <content><![CDATA[<h1 id="1、Vue-快速入门"><a href="#1、Vue-快速入门" class="headerlink" title="1、Vue 快速入门"></a>1、Vue 快速入门</h1><h2 id="1-1、Vue的介绍"><a href="#1-1、Vue的介绍" class="headerlink" title="1.1、Vue的介绍"></a>1.1、Vue的介绍</h2><ul>
<li>Vue是一套构建用户界面的渐进式前端框架。</li>
<li>只关注视图层，并且非常容易学习，还可以很方便的与其它库或已有项目整合。</li>
<li>通过尽可能简单的API来实现响应数据的绑定和组合的视图组件。</li>
<li>特点<br>易用：在有HTMLCSSJavaScript的基础上，快速上手。<br>灵活：简单小巧的核心，渐进式技术栈，足以应付任何规模的应用。<br>性能：20kbmin+gzip运行大小、超快虚拟DOM、最省心的优化。</li>
</ul>
<h2 id="1-2、Vue的快速入门"><a href="#1-2、Vue的快速入门" class="headerlink" title="1.2、Vue的快速入门"></a>1.2、Vue的快速入门</h2><ul>
<li><strong>开发步骤</strong></li>
</ul>
<ol>
<li>下载和引入vue.js文件。</li>
<li>编写入门程序。<br>视图：负责页面渲染，主要由HTML+CSS构成。<br>脚本：负责业务数据模型（Model）以及数据的处理逻辑。</li>
</ol>
<ul>
<li><p><strong>代码实现</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>快速入门<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;msg&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 脚本</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#div&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>:<span class="string">&quot;Hello Vue&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="1-3、Vue快速入门详解"><a href="#1-3、Vue快速入门详解" class="headerlink" title="1.3、Vue快速入门详解"></a>1.3、Vue快速入门详解</h2><ul>
<li><p>Vue 核心对象：每一个 Vue 程序都是从一个 Vue 核心对象开始的。</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">let vm = new Vue(&#123;</span><br><span class="line"> 选项列表;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>选项列表<br>el选项：用于接收获取到页面中的元素。(根据常用选择器获取)。<br>data选项：用于保存当前Vue对象中的数据。在视图中声明的变量需要在此处赋值。<br>methods选项：用于定义方法。方法可以直接通过对象名调用，this代表当前Vue对象。</p>
</li>
<li><p>数据绑定<br>在视图部分获取脚本部分的数据。</p>
</li>
</ul>
<h2 id="1-4、Vue快速入门的升级"><a href="#1-4、Vue快速入门的升级" class="headerlink" title="1.4、Vue快速入门的升级"></a>1.4、Vue快速入门的升级</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>快速入门升级<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>班级：&#123;&#123;classRoom&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;hi()&quot;</span>&gt;</span>打招呼<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;update()&quot;</span>&gt;</span>修改班级<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 脚本</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#div&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">classRoom</span>:<span class="string">&quot;黑马程序员&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">study</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;正在&quot;</span> + <span class="variable language_">this</span>.<span class="property">classRoom</span> + <span class="string">&quot;好好学习!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//定义打招呼方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">hi</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        vm.<span class="title function_">study</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//定义修改班级</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">update</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        vm.<span class="property">classRoom</span> = <span class="string">&quot;传智播客&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="1-5、Vue小结"><a href="#1-5、Vue小结" class="headerlink" title="1.5、Vue小结"></a>1.5、Vue小结</h2><ul>
<li>Vue是一套构建用户界面的渐进式前端框架。</li>
<li>Vue的程序包含视图和脚本两个核心部分。</li>
<li>脚本部分<ul>
<li>Vue核心对象。</li>
<li>选项列表<ul>
<li>el：接收获取的元素。</li>
<li>data：保存数据。</li>
<li>methods：定义方法。</li>
</ul>
</li>
</ul>
</li>
<li>视图部分<ul>
<li>数据绑定：</li>
</ul>
</li>
</ul>
<h1 id="2、Vue-常用指令"><a href="#2、Vue-常用指令" class="headerlink" title="2、Vue 常用指令"></a>2、Vue 常用指令</h1><h2 id="2-1、指令介绍"><a href="#2-1、指令介绍" class="headerlink" title="2.1、指令介绍"></a>2.1、指令介绍</h2><ul>
<li><p>指令：是带有 v- 前缀的特殊属性，不同指令具有不同含义。例如 v-html，v-if，v-for。</p>
</li>
<li><p>使用指令时，通常编写在标签的属性上，值可以使用 JS 的表达式。</p>
</li>
<li><p>常用指令</p>
<p><img src="/images2/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4-%E6%8C%87%E4%BB%A4%E4%BB%8B%E7%BB%8D.png"></p>
</li>
</ul>
<h2 id="2-2、文本插值"><a href="#2-2、文本插值" class="headerlink" title="2.2、文本插值"></a>2.2、文本插值</h2><ul>
<li><p>v-html：把文本解析为 HTML 代码。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>文本插值<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#div&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>:<span class="string">&quot;&lt;b&gt;Hello Vue&lt;/b&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2-3、绑定属性"><a href="#2-3、绑定属性" class="headerlink" title="2.3、绑定属性"></a>2.3、绑定属性</h2><ul>
<li><p>v-bind：为 HTML 标签绑定属性值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>绑定属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.my</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;cls&quot;</span>&gt;</span>我是div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#div&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>:<span class="string">&quot;https://www.baidu.com&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">cls</span>:<span class="string">&quot;my&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2-4、条件渲染"><a href="#2-4、条件渲染" class="headerlink" title="2.4、条件渲染"></a>2.4、条件渲染</h2><ul>
<li><p>v-if：条件性的渲染某元素，判定为真时渲染,否则不渲染。</p>
</li>
<li><p>v-else：条件性的渲染。</p>
</li>
<li><p>v-else-if：条件性的渲染。</p>
</li>
<li><p>v-show：根据条件展示某元素，区别在于切换的是display属性的值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>条件渲染<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 判断num的值，对3取余  余数为0显示div1  余数为1显示div2  余数为2显示div3 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;num % 3 == 0&quot;</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;num % 3 == 1&quot;</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>=<span class="string">&quot;num % 3 == 2&quot;</span>&gt;</span>div3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>div4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#div&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">num</span>:<span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">flag</span>:<span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2-5、列表渲染"><a href="#2-5、列表渲染" class="headerlink" title="2.5、列表渲染"></a>2.5、列表渲染</h2><ul>
<li><p>v-for：列表渲染，遍历容器的元素或者对象的属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>列表渲染<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;name in names&quot;</span>&gt;</span></span><br><span class="line">                &#123;&#123;name&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;value in student&quot;</span>&gt;</span></span><br><span class="line">                &#123;&#123;value&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#div&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">names</span>:[<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">student</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">age</span>:<span class="number">23</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2-6、事件绑定"><a href="#2-6、事件绑定" class="headerlink" title="2.6、事件绑定"></a>2.6、事件绑定</h2><ul>
<li><p>v-on：为 HTML 标签绑定事件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>事件绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;change()&quot;</span>&gt;</span>改变div的内容<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:dblclick</span>=<span class="string">&quot;change()&quot;</span>&gt;</span>改变div的内容<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;change()&quot;</span>&gt;</span>改变div的内容<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#div&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&quot;黑马程序员&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">change</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;传智播客&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2-7、表单绑定"><a href="#2-7、表单绑定" class="headerlink" title="2.7、表单绑定"></a>2.7、表单绑定</h2><ul>
<li><p><strong>表单绑定</strong><br>v-model：在表单元素上创建双向数据绑定。</p>
</li>
<li><p><strong>双向数据绑定</strong><br>更新data数据，页面中的数据也会更新。<br>更新页面数据，data数据也会更新。</p>
</li>
<li><p><strong>MVVM模型(ModelViewViewModel)：是MVC模式的改进版</strong><br>在前端页面中，JS对象表示Model，页面表示View，两者做到了最大限度的分离。<br>将Model和View关联起来的就是ViewModel，它是桥梁。<br>ViewModel负责把Model的数据同步到View显示出来，还负责把View修改的数据同步回Model。</p>
<p><img src="/images2/MVVM%E6%A8%A1%E5%9E%8B.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表单绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br><span class="line">            姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;age&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#div&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">username</span>:<span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">age</span>:<span class="number">23</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2-8、小结"><a href="#2-8、小结" class="headerlink" title="2.8、小结"></a>2.8、小结</h2><ul>
<li><strong>指令：是带有v-前缀的特殊属性，不同指令具有不同含义。</strong></li>
<li><strong>文本插值</strong><br>v-html：把文本解析为HTML代码。</li>
<li><strong>绑定属性</strong><br>v-bind：为HTML标签绑定属性值。</li>
<li><strong>条件渲染</strong><br>v-if：条件性的渲染某元素，判定为真时渲染,否则不渲染。<br>v-else：条件性的渲染。<br>v-else-if：条件性的渲染。<br>v-show：根据条件展示某元素，区别在于切换的是display属性的值。</li>
<li><strong>列表渲染</strong><br>v-for：列表渲染，遍历容器的元素或者对象的属性。</li>
<li><strong>事件绑定</strong><br>v-on：为HTML标签绑定事件。</li>
<li><strong>表单绑定</strong><br>v-model：在表单元素上创建双向数据绑定。</li>
</ul>
<h1 id="3、Element-基本使用"><a href="#3、Element-基本使用" class="headerlink" title="3、Element 基本使用"></a>3、Element 基本使用</h1><h2 id="3-1、Element介绍"><a href="#3-1、Element介绍" class="headerlink" title="3.1、Element介绍"></a>3.1、Element介绍</h2><ul>
<li><p>Element：网站快速成型工具。是饿了么公司前端开发团队提供的一套基于Vue的网站组件库。</p>
</li>
<li><p>使用Element前提必须要有Vue。</p>
</li>
<li><p>组件：组成网页的部件，例如超链接、按钮、图片、表格等等~</p>
</li>
<li><p>Element官网：<a href="https://element.eleme.cn/#/zh-CN">https://element.eleme.cn/#/zh-CN</a></p>
</li>
<li><p>自己完成的按钮</p>
<p><img src="/images2/%E6%88%91%E6%98%AF%E6%8C%89%E9%92%AE.png"></p>
</li>
<li><p>Element 提供的按钮</p>
<p><img src="/images2/element%E6%8F%90%E4%BE%9B%E7%9A%84%E6%8C%89%E9%92%AE.png"></p>
</li>
</ul>
<h2 id="3-2、Element快速入门"><a href="#3-2、Element快速入门" class="headerlink" title="3.2、Element快速入门"></a>3.2、Element快速入门</h2><ul>
<li><p><strong>开发步骤</strong></p>
<ol>
<li>下载 Element 核心库。</li>
<li>引入 Element 样式文件。</li>
<li>引入 Vue 核心 js 文件。</li>
<li>引入 Element 核心 js 文件。</li>
<li>编写按钮标签。</li>
<li>通过 Vue 核心对象加载元素。</li>
</ol>
</li>
<li><p><strong>代码实现</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>快速入门<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;element-ui/lib/theme-chalk/index.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;element-ui/lib/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>我是按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span>&gt;</span>默认按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>主要按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span>&gt;</span>成功按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;info&quot;</span>&gt;</span>信息按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span>&gt;</span>警告按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span>&gt;</span>危险按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">plain</span>&gt;</span>朴素按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">plain</span>&gt;</span>主要按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> <span class="attr">plain</span>&gt;</span>成功按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;info&quot;</span> <span class="attr">plain</span>&gt;</span>信息按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span> <span class="attr">plain</span>&gt;</span>警告按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">plain</span>&gt;</span>危险按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">round</span>&gt;</span>圆角按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">round</span>&gt;</span>主要按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> <span class="attr">round</span>&gt;</span>成功按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;info&quot;</span> <span class="attr">round</span>&gt;</span>信息按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span> <span class="attr">round</span>&gt;</span>警告按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">round</span>&gt;</span>危险按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-search&quot;</span> <span class="attr">circle</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-edit&quot;</span> <span class="attr">circle</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-check&quot;</span> <span class="attr">circle</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;info&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-message&quot;</span> <span class="attr">circle</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-star-off&quot;</span> <span class="attr">circle</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-delete&quot;</span> <span class="attr">circle</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#div&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-3、基础布局"><a href="#3-3、基础布局" class="headerlink" title="3.3、基础布局"></a>3.3、基础布局</h2><p>将页面分成最多 24 个部分，自由切分。</p>
<p><img src="/images2/%E5%9F%BA%E7%A1%80%E5%B8%83%E5%B1%80.png"></p>
<ul>
<li><p><strong>代码实现</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>基础布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;element-ui/lib/theme-chalk/index.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;element-ui/lib/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.el-row</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 行距为20px */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.bg-purple-dark</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.bg-purple</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: blue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.bg-purple-light</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: green;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.grid-content</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 边框圆润度 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 行高为36px */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">min-height</span>: <span class="number">36px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">      </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;24&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-content bg-purple-dark&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-content bg-purple&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-content bg-purple-light&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;8&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-content bg-purple&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;8&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-content bg-purple-light&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;8&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-content bg-purple&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;6&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-content bg-purple&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;6&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-content bg-purple-light&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;6&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-content bg-purple&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;6&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-content bg-purple-light&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;4&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-content bg-purple&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;4&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-content bg-purple-light&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;4&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-content bg-purple&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;4&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-content bg-purple-light&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;4&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-content bg-purple&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;4&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-content bg-purple-light&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#div&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-4、容器布局"><a href="#3-4、容器布局" class="headerlink" title="3.4、容器布局"></a>3.4、容器布局</h2><p>将页面分成头部区域、侧边栏区域、主区域、底部区域。</p>
<p><img src="/images2/%E5%AE%B9%E5%99%A8%E5%B8%83%E5%B1%80.png"></p>
<ul>
<li><p><strong>代码实现</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>容器布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;element-ui/lib/theme-chalk/index.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;element-ui/lib/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.el-header</span>, <span class="selector-class">.el-footer</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#d18e66</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.el-aside</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#55e658</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">580px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.el-main</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#5fb1f3</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">520px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-header</span>&gt;</span>头部区域<span class="tag">&lt;/<span class="name">el-header</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-aside</span> <span class="attr">width</span>=<span class="string">&quot;200px&quot;</span>&gt;</span>侧边栏区域<span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-main</span>&gt;</span>主区域<span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-footer</span>&gt;</span>底部区域<span class="tag">&lt;/<span class="name">el-footer</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#div&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-5、表单组件"><a href="#3-5、表单组件" class="headerlink" title="3.5、表单组件"></a>3.5、表单组件</h2><p>由输入框、下拉列表、单选框、多选框等控件组成，用以收集、校验、提交数据。</p>
<ul>
<li><p><strong>代码实现</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表单组件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;element-ui/lib/theme-chalk/index.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;element-ui/lib/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">&quot;ruleForm&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;ruleForm&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;100px&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo-ruleForm&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;活动名称&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;活动区域&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;region&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.region&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择活动区域&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;区域一&quot;</span> <span class="attr">value</span>=<span class="string">&quot;shanghai&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;区域二&quot;</span> <span class="attr">value</span>=<span class="string">&quot;beijing&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;活动时间&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;11&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">prop</span>=<span class="string">&quot;date1&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">el-date-picker</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;选择日期&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.date1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span> <span class="attr">:span</span>=<span class="string">&quot;2&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;11&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">prop</span>=<span class="string">&quot;date2&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">el-time-picker</span> <span class="attr">placeholder</span>=<span class="string">&quot;选择时间&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.date2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-time-picker</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;即时配送&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;delivery&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-switch</span> <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.delivery&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-switch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;活动性质&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;type&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-checkbox-group</span> <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.type&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">label</span>=<span class="string">&quot;美食/餐厅线上活动&quot;</span> <span class="attr">name</span>=<span class="string">&quot;type&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">label</span>=<span class="string">&quot;地推活动&quot;</span> <span class="attr">name</span>=<span class="string">&quot;type&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">label</span>=<span class="string">&quot;线下主题活动&quot;</span> <span class="attr">name</span>=<span class="string">&quot;type&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">label</span>=<span class="string">&quot;单纯品牌曝光&quot;</span> <span class="attr">name</span>=<span class="string">&quot;type&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">el-checkbox-group</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;特殊资源&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;resource&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-radio-group</span> <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.resource&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">label</span>=<span class="string">&quot;线上品牌商赞助&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">label</span>=<span class="string">&quot;线下场地免费&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">el-radio-group</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;活动形式&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;desc&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;textarea&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.desc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submitForm(&#x27;ruleForm&#x27;)&quot;</span>&gt;</span>立即创建<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;resetForm(&#x27;ruleForm&#x27;)&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#div&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">ruleForm</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">region</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">date1</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">date2</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">delivery</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: [],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">resource</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">desc</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">rules</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">name</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入活动名称&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">min</span>: <span class="number">3</span>, <span class="attr">max</span>: <span class="number">5</span>, <span class="attr">message</span>: <span class="string">&#x27;长度在 3 到 5 个字符&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">          ],</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">region</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请选择活动区域&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;change&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">          ],</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">date1</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">type</span>: <span class="string">&#x27;date&#x27;</span>, <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请选择日期&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;change&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">          ],</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">date2</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">type</span>: <span class="string">&#x27;date&#x27;</span>, <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请选择时间&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;change&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">          ],</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">type</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">type</span>: <span class="string">&#x27;array&#x27;</span>, <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请至少选择一个活动性质&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;change&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">          ],</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">resource</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请选择活动资源&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;change&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">          ],</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">desc</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请填写活动形式&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">          ]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">submitForm</span>(<span class="params">formName</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$refs</span>[formName].<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (valid) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&#x27;submit!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error submit!!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">resetForm</span>(<span class="params">formName</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$refs</span>[formName].<span class="title function_">resetFields</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-6、表格组件"><a href="#3-6、表格组件" class="headerlink" title="3.6、表格组件"></a>3.6、表格组件</h2><p>用于展示多条结构类似的数据，可对数据进行编辑、删除或其他自定义操作。</p>
<ul>
<li><p><strong>代码实现</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表格组件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;element-ui/lib/theme-chalk/index.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;element-ui/lib/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table</span></span></span><br><span class="line"><span class="tag">              <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">                <span class="attr">prop</span>=<span class="string">&quot;date&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">label</span>=<span class="string">&quot;日期&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">                <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">                <span class="attr">prop</span>=<span class="string">&quot;address&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">label</span>=<span class="string">&quot;地址&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">                <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#div&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">tableData</span>: [&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">date</span>: <span class="string">&#x27;2016-05-02&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1518 弄&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">date</span>: <span class="string">&#x27;2016-05-04&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1517 弄&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">date</span>: <span class="string">&#x27;2016-05-01&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1519 弄&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">date</span>: <span class="string">&#x27;2016-05-03&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1516 弄&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-7、顶部导航栏组件"><a href="#3-7、顶部导航栏组件" class="headerlink" title="3.7、顶部导航栏组件"></a>3.7、顶部导航栏组件</h2><p><img src="/images2/%E9%A1%B6%E9%83%A8%E5%AF%BC%E8%88%AA%E6%A0%8F.png"></p>
<ul>
<li><p><strong>代码实现</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>顶部导航栏<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;element-ui/lib/theme-chalk/index.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;element-ui/lib/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-menu</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:default-active</span>=<span class="string">&quot;activeIndex2&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;el-menu-demo&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">mode</span>=<span class="string">&quot;horizontal&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">select</span>=<span class="string">&quot;handleSelect&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">background-color</span>=<span class="string">&quot;#545c64&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">text-color</span>=<span class="string">&quot;#fff&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">active-text-color</span>=<span class="string">&quot;#ffd04b&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span>处理中心<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span>我的工作台<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;2-1&quot;</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;2-2&quot;</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;2-3&quot;</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">index</span>=<span class="string">&quot;2-4&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span>选项4<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;2-4-1&quot;</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;2-4-2&quot;</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;2-4-3&quot;</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-submenu</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-submenu</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;3&quot;</span> <span class="attr">disabled</span>&gt;</span>消息中心<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;4&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.ele.me&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>订单管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#div&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-8、侧边导航栏组件"><a href="#3-8、侧边导航栏组件" class="headerlink" title="3.8、侧边导航栏组件"></a>3.8、侧边导航栏组件</h2><p><img src="/images2/%E4%BE%A7%E8%BE%B9%E5%AF%BC%E8%88%AA%E6%A0%8F.png"></p>
<ul>
<li><p><strong>代码实现</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>侧边导航栏<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;element-ui/lib/theme-chalk/index.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;element-ui/lib/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;6&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-menu</span></span></span><br><span class="line"><span class="tag">          <span class="attr">default-active</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;el-menu-vertical-demo&quot;</span></span></span><br><span class="line"><span class="tag">          @<span class="attr">open</span>=<span class="string">&quot;handleOpen&quot;</span></span></span><br><span class="line"><span class="tag">          @<span class="attr">close</span>=<span class="string">&quot;handleClose&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">background-color</span>=<span class="string">&quot;#545c64&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">text-color</span>=<span class="string">&quot;#fff&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">active-text-color</span>=<span class="string">&quot;#ffd04b&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-location&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>导航一<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-menu-item-group</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span>分组一<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1-1&quot;</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1-2&quot;</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-menu-item-group</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-menu-item-group</span> <span class="attr">title</span>=<span class="string">&quot;分组2&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1-3&quot;</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-menu-item-group</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">index</span>=<span class="string">&quot;1-4&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span>选项4<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1-4-1&quot;</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-submenu</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-submenu</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-menu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span>导航二<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;3&quot;</span> <span class="attr">disabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-document&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span>导航三<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;4&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-setting&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span>导航四<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#div&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-9、小结"><a href="#3-9、小结" class="headerlink" title="3.9、小结"></a>3.9、小结</h2><ul>
<li>Element：网站快速成型工具。是一套为开发者、设计师、产品经理准备的基于Vue的桌面端组件库。</li>
<li>使用Element前提必须要有Vue。</li>
<li>使用步骤<br>1.下载Element核心库。<br>2.引入Element样式文件。<br>3.引入Vue核心js文件。<br>4.引入Element核心js文件。<br>5.借助常用组件编写网页。</li>
<li>常用组件<br>网页基本组成部分，布局、按钮、表格、表单等等~~~<br>常用组件不需要记住，只需要在Element官网中复制使用即可。</li>
</ul>
<h1 id="4、综合案例-学生列表"><a href="#4、综合案例-学生列表" class="headerlink" title="4、综合案例 学生列表"></a>4、综合案例 学生列表</h1><h2 id="4-1、案例效果和分析"><a href="#4-1、案例效果和分析" class="headerlink" title="4.1、案例效果和分析"></a>4.1、案例效果和分析</h2><p><img src="/images2/%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B-%E6%95%88%E6%9E%9C%E5%9B%BE.png"></p>
<h2 id="4-2、头部区域的实现"><a href="#4-2、头部区域的实现" class="headerlink" title="4.2、头部区域的实现"></a>4.2、头部区域的实现</h2><ul>
<li><p><strong>实现思路</strong></p>
<ul>
<li>头部效果实现。</li>
<li>侧边栏和主区域效果实现。</li>
</ul>
</li>
<li><p><strong>代码实现</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>学生列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;element-ui/lib/theme-chalk/index.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;element-ui/lib/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.el-header</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#545c64</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.header-img</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 头部 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-header</span> <span class="attr">class</span>=<span class="string">&quot;el-header&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-image</span> <span class="attr">src</span>=<span class="string">&quot;img/export.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;header-img&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-image</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-menu</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:default-active</span>=<span class="string">&quot;activeIndex2&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">mode</span>=<span class="string">&quot;horizontal&quot;</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">select</span>=<span class="string">&quot;handleSelect&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">background-color</span>=<span class="string">&quot;#545c64&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">text-color</span>=<span class="string">&quot;white&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">active-text-color</span>=<span class="string">&quot;#ffd04b&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">style</span>=<span class="string">&quot;margin-left: auto;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span>处理中心<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span>我的工作台<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;2-1&quot;</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;2-2&quot;</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;2-3&quot;</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-submenu</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;学生列表.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#div&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="4-3、侧边栏区域的实现"><a href="#4-3、侧边栏区域的实现" class="headerlink" title="4.3、侧边栏区域的实现"></a>4.3、侧边栏区域的实现</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 侧边栏区域 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-container</span> <span class="attr">style</span>=<span class="string">&quot;height: 580px; border: 1px solid #eee&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-aside</span> <span class="attr">width</span>=<span class="string">&quot;200px&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: rgb(238, 241, 246)&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-menu</span> <span class="attr">:default-openeds</span>=<span class="string">&quot;[&#x27;1&#x27;]&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-menu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>学工部<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-menu-item-group</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1-1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-help&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>在校学生管理<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1-2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-help&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>学生升级/留级<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1-3&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-help&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>学生就业情况<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-menu-item-group</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-submenu</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-menu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>咨询部<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-menu-item-group</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;2-1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-help&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>意向学生管理<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;2-2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-help&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>未报名学生管理<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;2-3&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-help&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>已报名学生管理<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-menu-item-group</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-submenu</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">index</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-menu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>教研部<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-menu-item-group</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;3-1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-help&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>已有课程管理<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;3-2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-help&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>正在研发课程管理<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;3-3&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-help&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>新技术课程管理<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-menu-item-group</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-submenu</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-4、主区域的实现"><a href="#4-4、主区域的实现" class="headerlink" title="4.4、主区域的实现"></a>4.4、主区域的实现</h2><p><strong>主区域和侧边栏区域放在一起</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 主区域 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-main</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">b</span> <span class="attr">style</span>=<span class="string">&quot;color: red;font-size: 20px;&quot;</span>&gt;</span>学生列表<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;float:right&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>添加学生<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;date&quot;</span> <span class="attr">label</span>=<span class="string">&quot;日期&quot;</span> <span class="attr">width</span>=<span class="string">&quot;140&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">width</span>=<span class="string">&quot;120&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;address&quot;</span> <span class="attr">label</span>=<span class="string">&quot;地址&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>在vue中定义data</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>:<span class="string">&quot;#div&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">          <span class="attr">tableData</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">date</span>:<span class="string">&quot;2088-08-08&quot;</span>,</span><br><span class="line">              <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">              <span class="attr">address</span>:<span class="string">&quot;北京市昌平区&quot;</span></span><br><span class="line">            &#125;,&#123;</span><br><span class="line">              <span class="attr">date</span>:<span class="string">&quot;2088-08-08&quot;</span>,</span><br><span class="line">              <span class="attr">name</span>:<span class="string">&quot;李四&quot;</span>,</span><br><span class="line">              <span class="attr">address</span>:<span class="string">&quot;北京市昌平区&quot;</span></span><br><span class="line">            &#125;,&#123;</span><br><span class="line">              <span class="attr">date</span>:<span class="string">&quot;2088-08-08&quot;</span>,</span><br><span class="line">              <span class="attr">name</span>:<span class="string">&quot;王五&quot;</span>,</span><br><span class="line">              <span class="attr">address</span>:<span class="string">&quot;北京市昌平区&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Ajax快速入门笔记（十五）</title>
    <url>/2022/04/03/Js%E4%B9%8BAjax%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="1、Ajax快速入门"><a href="#1、Ajax快速入门" class="headerlink" title="1、Ajax快速入门"></a>1、Ajax快速入门</h1><h2 id="1-1、AJAX介绍"><a href="#1-1、AJAX介绍" class="headerlink" title="1.1、AJAX介绍"></a>1.1、AJAX介绍</h2><ul>
<li><p>AJAX(Asynchronous JavaScript And XML)：异步的 JavaScript 和 XML。 </p>
</li>
<li><p>本身不是一种新技术，而是多个技术综合。用于快速创建动态网页的技术。</p>
</li>
<li><p>一般的网页如果需要更新内容，必需重新加载个页面。</p>
</li>
<li><p>而 AJAX 通过浏览器与服务器进行少量数据交换，就可以使网页实现异步更新。也就是在不重新加载整个页 面的情况下，对网页的部分内容进行<strong>局部更新</strong>。</p>
<p><img src="/images2/%E7%BD%91%E9%A1%B5%E5%B1%80%E9%83%A8%E6%9B%B4%E6%96%B0.png"></p>
<p>​    <img src="/images2/ajax%E4%BB%8B%E7%BB%8D.png"></p>
</li>
</ul>
<p>​        </p>
<h2 id="1-2、原生JS实现AJAX"><a href="#1-2、原生JS实现AJAX" class="headerlink" title="1.2、原生JS实现AJAX"></a>1.2、原生JS实现AJAX</h2><ul>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="meta">@WebServlet(&quot;/userServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//设置请求和响应的乱码</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取请求参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//模拟服务器处理请求需要5秒钟</span></span><br><span class="line">        <span class="comment">/*try &#123;</span></span><br><span class="line"><span class="comment">            Thread.sleep(5000);</span></span><br><span class="line"><span class="comment">        &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">            e.printStackTrace();</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.判断姓名是否已注册</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;zhangsan&quot;</span>.equals(username)) &#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;&lt;font color=&#x27;red&#x27;&gt;用户名已注册&lt;/font&gt;&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;&lt;font color=&#x27;green&#x27;&gt;用户名可用&lt;/font&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>html代码</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br><span class="line">        姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;uSpan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1.为姓名绑定失去焦点事件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;username&quot;</span>).<span class="property">onblur</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.创建XMLHttpRequest核心对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> xmlHttp = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//3.打开链接</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> username = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;username&quot;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        xmlHttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;userServlet?username=&quot;</span>+username,<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//xmlHttp.open(&quot;GET&quot;,&quot;userServlet?username=&quot;+username,false);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//4.发送请求</span></span></span><br><span class="line"><span class="language-javascript">        xmlHttp.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//5.处理响应</span></span></span><br><span class="line"><span class="language-javascript">        xmlHttp.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//判断请求和响应是否成功</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(xmlHttp.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xmlHttp.<span class="property">status</span> == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//将响应的数据显示到span标签</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;uSpan&quot;</span>).<span class="property">innerHTML</span> = xmlHttp.<span class="property">responseText</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="1-3、原生JS实现AJAX详解"><a href="#1-3、原生JS实现AJAX详解" class="headerlink" title="1.3、原生JS实现AJAX详解"></a>1.3、原生JS实现AJAX详解</h2><ul>
<li><p><strong>核心对象：XMLHttpRequest</strong></p>
<p>​        用于在后台与服务器交换数据。可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</p>
</li>
<li><p><strong>打开链接：open(method,url,async)</strong></p>
<p>​        method：请求的类型 GET 或 POST。</p>
<p>​        url：请求资源的路径。</p>
<p>​        async：true(异步) 或 false(同步)。 </p>
</li>
<li><p><strong>发送请求：send(String params)</strong> </p>
<p>​        params：请求的参数(POST 专用)。</p>
</li>
<li><p><strong>处理响应：onreadystatechange</strong></p>
<p>​        readyState：0-请求未初始化，1-服务器连接已建立，2-请求已接收，3-请求处理中，4-请求已完成，且响应已就绪。</p>
<p>​        status：200-响应已全部 OK。</p>
</li>
<li><p><strong>获得响应数据形式</strong></p>
<p>​        responseText：获得字符串形式的响应数据。</p>
<p>​        responseXML：获得 XML 形式的响应数据。</p>
</li>
</ul>
<h2 id="1-4、JQuery的GET方式实现AJAX"><a href="#1-4、JQuery的GET方式实现AJAX" class="headerlink" title="1.4、JQuery的GET方式实现AJAX"></a>1.4、JQuery的GET方式实现AJAX</h2><ul>
<li><p><strong>核心语法：</strong>$.get(url,[data],[callback],[type]); </p>
<ul>
<li>url：请求的资源路径。</li>
<li>data：发送给服务器端的请求参数，格式可以是key&#x3D;value，也可以是 js 对象。</li>
<li>callback：当请求成功后的回调函数，可以在函数中编写我们的逻辑代码。 </li>
<li>type：预期的返回数据的类型，取值可以是 xml, html, js, json, text等。</li>
</ul>
</li>
<li><p><strong>代码实现</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br><span class="line">        姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;uSpan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.3.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1.为用户名绑定失去焦点事件</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#username&quot;</span>).<span class="title function_">blur</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> username = $(<span class="string">&quot;#username&quot;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.jQuery的GET方式实现AJAX</span></span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">get</span>(</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//请求的资源路径</span></span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;userServlet&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//请求参数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;username=&quot;</span> + username,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//回调函数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//将响应的数据显示到span标签</span></span></span><br><span class="line"><span class="language-javascript">                $(<span class="string">&quot;#uSpan&quot;</span>).<span class="title function_">html</span>(data);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//响应数据形式</span></span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="language-javascript">        );</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="1-5、JQuery的POST方式实现AJAX"><a href="#1-5、JQuery的POST方式实现AJAX" class="headerlink" title="1.5、JQuery的POST方式实现AJAX"></a>1.5、JQuery的POST方式实现AJAX</h2><ul>
<li><p><strong>核心语法：</strong>$.post(url,[data],[callback],[type]); </p>
<ul>
<li>url：请求的资源路径。</li>
<li>data：发送给服务器端的请求参数，格式可以是key&#x3D;value，也可以是 js 对象。 </li>
<li>callback：当请求成功后的回调函数，可以在函数中编写我们的逻辑代码。</li>
<li>type：预期的返回数据的类型，取值可以是 xml, html, js, json, text等。</li>
</ul>
</li>
<li><p><strong>代码实现</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br><span class="line">        姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;uSpan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.3.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1.为用户名绑定失去焦点事件</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#username&quot;</span>).<span class="title function_">blur</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> username = $(<span class="string">&quot;#username&quot;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.jQuery的POST方式实现AJAX</span></span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">post</span>(</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//请求的资源路径</span></span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;userServlet&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//请求参数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;username=&quot;</span> + username,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//回调函数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//将响应的数据显示到span标签</span></span></span><br><span class="line"><span class="language-javascript">                $(<span class="string">&quot;#uSpan&quot;</span>).<span class="title function_">html</span>(data);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//响应数据形式</span></span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="language-javascript">        );</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="1-6、JQuery的通用方式实现AJAX"><a href="#1-6、JQuery的通用方式实现AJAX" class="headerlink" title="1.6、JQuery的通用方式实现AJAX"></a>1.6、JQuery的通用方式实现AJAX</h2><ul>
<li><p><strong>核心语法：</strong>$.ajax({name:value,name:value,…}); </p>
<ul>
<li>url：请求的资源路径。</li>
<li>async：是否异步请求，true-是，false-否 (默认是 true)。</li>
<li>data：发送到服务器的数据，可以是键值对形式，也可以是 js 对象形式。</li>
<li>type：请求方式，POST 或 GET (默认是 GET)。</li>
<li>dataType：预期的返回数据的类型，取值可以是 xml, html, js, json, text等。 </li>
<li>success：请求成功时调用的回调函数。</li>
<li>error：请求失败时调用的回调函数。</li>
</ul>
</li>
<li><p><strong>代码实现</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br><span class="line">        姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;uSpan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.3.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1.为用户名绑定失去焦点事件</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#username&quot;</span>).<span class="title function_">blur</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> username = $(<span class="string">&quot;#username&quot;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.jQuery的通用方式实现AJAX</span></span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//请求资源路径</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>:<span class="string">&quot;userServletxxx&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//是否异步</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">async</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//请求参数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:<span class="string">&quot;username=&quot;</span>+username,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//请求方式</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>:<span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//数据形式</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">dataType</span>:<span class="string">&quot;text&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//请求成功后调用的回调函数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//将响应的数据显示到span标签</span></span></span><br><span class="line"><span class="language-javascript">                $(<span class="string">&quot;#uSpan&quot;</span>).<span class="title function_">html</span>(data);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//请求失败后调用的回调函数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">error</span>:<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;操作失败...&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="1-7、小结"><a href="#1-7、小结" class="headerlink" title="1.7、小结"></a>1.7、小结</h2><ul>
<li><strong>AJAX(Asynchronous JavaScript And XML)：</strong>异步的 JavaScript 和 XML。 </li>
<li><strong>通过浏览器与服务器进行少量数据交换，就可以使网页实现异步更新。也就是在不重新加载整个页面的情况下，对网页的部 分内容进行局部更新。</strong></li>
<li><strong>同步和异步</strong><ul>
<li>同步：服务器端在处理过程中，无法进行其他操作。</li>
<li>异步：服务器端在处理过程中，可以进行其他操作。</li>
</ul>
</li>
<li><strong>GET 方式实现：</strong>$.get(); </li>
<li><strong>POST 方式实现：</strong>$.post(); <ul>
<li>url：请求的资源路径。</li>
<li>data：发送给服务器端的请求参数，格式可以是key&#x3D;value，也可以是 js 对象。 </li>
<li>callback：当请求成功后的回调函数，可以在函数中编写我们的逻辑代码。</li>
<li>type：预期的返回数据的类型，取值可以是 xml, html, js, json, text等。</li>
</ul>
</li>
<li><strong>通用方式实现：</strong>$.ajax();<ul>
<li>url：请求的资源路径。</li>
<li>async：是否异步请求，true-是，false-否 (默认是 true)。</li>
<li>data：发送到服务器的数据，可以是键值对形式，也可以是 js 对象形式。</li>
<li>type：请求方式，POST 或 GET (默认是 GET)。</li>
<li>dataType：预期的返回数据的类型，取值可以是 xml, html, js, json, text等。 </li>
<li>success：请求成功时调用的回调函数。</li>
<li>error：请求失败时调用的回调函数。</li>
</ul>
</li>
</ul>
<h1 id="2、JSON的处理"><a href="#2、JSON的处理" class="headerlink" title="2、JSON的处理"></a>2、JSON的处理</h1><h2 id="2-1、JSON回顾"><a href="#2-1、JSON回顾" class="headerlink" title="2.1、JSON回顾"></a>2.1、JSON回顾</h2><ul>
<li><p>JSON(JavaScript Object Notation)：是一种轻量级的数据交换格式。 </p>
</li>
<li><p>它是基于 ECMAScript 规范的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。</p>
</li>
<li><p>简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。易于人阅读和编写，同时也易于计算机解析和生成，并有效的 提升网络传输效率。</p>
<p><img src="/images2/json%E5%9B%9E%E9%A1%BE.png"></p>
</li>
<li><p><strong>创建格式</strong></p>
<p><img src="/images2/%E5%88%9B%E5%BB%BA%E6%A0%BC%E5%BC%8F.png"></p>
</li>
<li><p><strong>常用方法</strong></p>
<p><img src="/images2/json-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95.png"></p>
</li>
</ul>
<h2 id="2-2、JSON转换工具的介绍"><a href="#2-2、JSON转换工具的介绍" class="headerlink" title="2.2、JSON转换工具的介绍"></a>2.2、JSON转换工具的介绍</h2><ul>
<li><p>我们除了可以在 JavaScript 中来使用 JSON 以外，在 JAVA 中同样也可以使用 JSON。</p>
</li>
<li><p>JSON 的转换工具是通过 JAVA 封装好的一些 JAR 工具包。 </p>
</li>
<li><p>可以将 JAVA 对象或集合转换成 JSON 格式的字符串，也可以将 JSON 格式的字符串转成 JAVA 对象。</p>
</li>
<li><p>Jackson：开源免费的 JSON 转换工具，SpringMVC 转换默认使用 Jackson。</p>
<ul>
<li><ol>
<li>导入 jar 包。 </li>
<li>创建核心对象。</li>
<li>调用方法完成转换。</li>
</ol>
</li>
</ul>
</li>
<li><p><strong>常用类</strong></p>
<p><img src="/images2/json%E8%BD%AC%E6%8D%A2%E5%B7%A5%E5%85%B7-%E5%B8%B8%E7%94%A8%E7%B1%BB.png"></p>
</li>
<li><p><strong>ObjectMapper常用方法</strong></p>
<p><img src="/images2/json%E8%BD%AC%E6%8D%A2%E5%B7%A5%E5%85%B7-objectMapper.png"></p>
</li>
</ul>
<h2 id="2-3、JSON转换练习"><a href="#2-3、JSON转换练习" class="headerlink" title="2.3、JSON转换练习"></a>2.3、JSON转换练习</h2><ol>
<li><p><strong>对象转 JSON, JSON 转对象。</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    JSON转换工具的使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectMapperTest</span> &#123;    </span><br><span class="line">	<span class="keyword">private</span> <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1.User对象转json, json转User对象</span></span><br><span class="line"><span class="comment">          json字符串 = &#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:23&#125;</span></span><br><span class="line"><span class="comment">          user对象 = User&#123;name=&#x27;张三&#x27;, age=23&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//User对象转json</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">23</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> mapper.writeValueAsString(user);</span><br><span class="line">        System.out.println(<span class="string">&quot;json字符串：&quot;</span> + json);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//json转User对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> mapper.readValue(json, User.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;java对象：&quot;</span> + user2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Map转 JSON, JSON 转 Map。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  2.map&lt;String,String&gt;转json, json转map&lt;String,String&gt;</span></span><br><span class="line"><span class="comment">  json字符串 = &#123;&quot;姓名&quot;:&quot;张三&quot;,&quot;性别&quot;:&quot;男&quot;&#125;</span></span><br><span class="line"><span class="comment">  map对象 = &#123;姓名=张三, 性别=男&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//map&lt;String,String&gt;转json</span></span><br><span class="line">    HashMap&lt;String,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;姓名&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;性别&quot;</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> mapper.writeValueAsString(map);</span><br><span class="line">    System.out.println(<span class="string">&quot;json字符串：&quot;</span> + json);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//json转map&lt;String,String&gt;</span></span><br><span class="line">    HashMap&lt;String,String&gt; map2 = mapper.readValue(json, HashMap.class);</span><br><span class="line">    System.out.println(<span class="string">&quot;java对象：&quot;</span> + map2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Map转 JSON, JSON 转 Map。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  3.map&lt;String,User&gt;转json, json转map&lt;String,User&gt;</span></span><br><span class="line"><span class="comment">    json字符串 = &#123;&quot;黑马一班&quot;:&#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:23&#125;,&quot;黑马二班&quot;:&#123;&quot;name&quot;:&quot;李四&quot;,&quot;age&quot;:24&#125;&#125;</span></span><br><span class="line"><span class="comment">    map对象 = &#123;黑马一班=User&#123;name=&#x27;张三&#x27;, age=23&#125;, 黑马二班=User&#123;name=&#x27;李四&#x27;, age=24&#125;&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//map&lt;String,User&gt;转json</span></span><br><span class="line">    HashMap&lt;String,User&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;黑马一班&quot;</span>,<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">23</span>));</span><br><span class="line">    map.put(<span class="string">&quot;黑马二班&quot;</span>,<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;李四&quot;</span>,<span class="number">24</span>));</span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> mapper.writeValueAsString(map);</span><br><span class="line">    System.out.println(<span class="string">&quot;json字符串：&quot;</span> + json);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//json转map&lt;String,User&gt;</span></span><br><span class="line">    HashMap&lt;String,User&gt; map2 = mapper.readValue(json,<span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;HashMap&lt;String,User&gt;&gt;()&#123;&#125;);</span><br><span class="line">    System.out.println(<span class="string">&quot;java对象：&quot;</span> + map2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>List转 JSON, JSON 转 List。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  4.List&lt;String&gt;转json, json转 List&lt;String&gt;</span></span><br><span class="line"><span class="comment">    json字符串 = [&quot;张三&quot;,&quot;李四&quot;]</span></span><br><span class="line"><span class="comment">    list对象 = [张三, 李四]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//List&lt;String&gt;转json</span></span><br><span class="line">    ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> mapper.writeValueAsString(list);</span><br><span class="line">    System.out.println(<span class="string">&quot;json字符串：&quot;</span> + json);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//json转 List&lt;String&gt;</span></span><br><span class="line">    ArrayList&lt;String&gt; list2 = mapper.readValue(json,ArrayList.class);</span><br><span class="line">    System.out.println(<span class="string">&quot;java对象：&quot;</span> + list2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>List转 JSON, JSON 转 List。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  5.List&lt;User&gt;转json, json转List&lt;User&gt;</span></span><br><span class="line"><span class="comment">    json字符串 = [&#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:23&#125;,&#123;&quot;name&quot;:&quot;李四&quot;,&quot;age&quot;:24&#125;]</span></span><br><span class="line"><span class="comment">    list对象 = [User&#123;name=&#x27;张三&#x27;, age=23&#125;, User&#123;name=&#x27;李四&#x27;, age=24&#125;]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test05</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//List&lt;User&gt;转json</span></span><br><span class="line">    ArrayList&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">23</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;李四&quot;</span>,<span class="number">24</span>));</span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> mapper.writeValueAsString(list);</span><br><span class="line">    System.out.println(<span class="string">&quot;json字符串：&quot;</span> + json);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//json转List&lt;User&gt;</span></span><br><span class="line">    ArrayList&lt;User&gt; list2 = mapper.readValue(json,<span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;ArrayList&lt;User&gt;&gt;()&#123;&#125;);</span><br><span class="line">    System.out.println(<span class="string">&quot;java对象：&quot;</span> + list2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="2-4、小结"><a href="#2-4、小结" class="headerlink" title="2.4、小结"></a>2.4、小结</h2><ul>
<li><p><strong>Jackson：</strong>开源免费的 JSON 转换工具，SpringMVC 转换默认使用 Jackson。</p>
</li>
<li><p><strong>可以将 JAVA 对象或集合转换成 JSON 格式的字符串，也可以将 JSON 格式的字符串转成 JAVA 对象。</strong></p>
</li>
<li><p><strong>常用类</strong></p>
<p><img src="/images2/json%E8%BD%AC%E6%8D%A2%E5%B7%A5%E5%85%B7-objectMapper.png"></p>
</li>
</ul>
<h1 id="3、综合案例-搜索联想"><a href="#3、综合案例-搜索联想" class="headerlink" title="3、综合案例 搜索联想"></a>3、综合案例 搜索联想</h1><ul>
<li><p><strong>案例效果和环境介绍</strong></p>
<p><img src="/images2/%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B-%E6%A1%88%E4%BE%8B%E6%95%88%E6%9E%9C.png"></p>
</li>
<li><p><strong>案例分析</strong></p>
<ul>
<li><strong>页面</strong><ul>
<li><ol>
<li>为用户名输入框绑定鼠标点击事件。</li>
<li>获取输入的用户名数据。</li>
<li>判断用户名是否为空。</li>
<li>如果为空，则将联想提示框隐藏。</li>
<li>如果不为空，则发送 AJAX 请求，并将响应的数据显示到联想框。</li>
</ol>
</li>
</ul>
</li>
<li><strong>控制层</strong><ul>
<li><ol>
<li>获取请求参数。</li>
<li>调用业务层的模糊查询方法。 </li>
<li>将返回的数据转成 JSON，并响应给客户端。</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>代码实现</strong></p>
<ul>
<li><p><strong>html页面</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户搜索<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">643px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&#x27;text&#x27;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">530px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&#x27;button&#x27;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">46px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="number">#38f</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">15px</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.show</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">535px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/logo.jpg&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;搜索一下&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用于显示联想的数据--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;show&quot;</span> <span class="attr">class</span>=<span class="string">&quot;show&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.3.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1.为用户名输入框绑定鼠标点击事件</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#username&quot;</span>).<span class="title function_">mousedown</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.获取输入的用户名</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> username = $(<span class="string">&quot;#username&quot;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//3.判断用户名是否为空</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(username == <span class="literal">null</span> || username == <span class="string">&quot;&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//4.如果为空，将联想框隐藏</span></span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;#show&quot;</span>).<span class="title function_">hide</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//5.如果不为空，发送AJAX请求。并将数据显示到联想框</span></span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//请求的资源路径</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>:<span class="string">&quot;userServlet&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//请求参数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;<span class="string">&quot;username&quot;</span>:username&#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//请求方式</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>:<span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//响应数据形式</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">dataType</span>:<span class="string">&quot;json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//请求成功后的回调函数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//将返回的数据显示到show的div</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> names = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                    names += <span class="string">&quot;&lt;div&gt;&quot;</span>+data[i].<span class="property">name</span>+<span class="string">&quot;&lt;/div&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                $(<span class="string">&quot;#show&quot;</span>).<span class="title function_">html</span>(names);</span></span><br><span class="line"><span class="language-javascript">                $(<span class="string">&quot;#show&quot;</span>).<span class="title function_">show</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>控制层-Java代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/userServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//设置请求和响应的编码</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取请求参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.调用业务层的模糊查询方法得到数据</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line">        List&lt;User&gt; users = service.selectLike(username);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.将数据转成JSON，响应到客户端</span></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> mapper.writeValueAsString(users);</span><br><span class="line">        resp.getWriter().write(json);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h1 id="4、综合案例-分页"><a href="#4、综合案例-分页" class="headerlink" title="4、综合案例 分页"></a>4、综合案例 分页</h1><p>​            瀑布流无限加载数据分页</p>
<h2 id="4-1、案例效果和环境准备"><a href="#4-1、案例效果和环境准备" class="headerlink" title="4.1、案例效果和环境准备"></a>4.1、案例效果和环境准备</h2><ul>
<li><p><strong>案例效果</strong></p>
<p><img src="/images2/%E7%80%91%E5%B8%83%E6%B5%81%E5%88%86%E9%A1%B5%E6%95%88%E6%9E%9C.png"></p>
</li>
<li><p><strong>环境准备</strong></p>
<ul>
<li>1.导入“案例二的sql语句.sql”文件（已在当天的<strong>SQL语句</strong>中提供）</li>
<li>2.导入“分页案例原始环境”中的ajax03项目（已在当天的<strong>资料</strong>中提供）</li>
</ul>
</li>
</ul>
<h2 id="4-2、案例的分析"><a href="#4-2、案例的分析" class="headerlink" title="4.2、案例的分析"></a>4.2、案例的分析</h2><ul>
<li><p><strong>如何确定当前显示的数据已经浏览完毕？</strong></p>
<ul>
<li>公式：(滚动条距底部的距离 + 滚动条上下滚动的距离 + 当前窗口的高度) &gt;&#x3D; 当前文档的高度</li>
<li>当前文档高度：存储10条数据，100px。</li>
<li>滚动条距底部的距离：1px。</li>
<li>当前窗口的高度：80px。</li>
<li>滚动条上下滚动的距离：&gt;&#x3D;19px。</li>
</ul>
</li>
<li><p><strong>前置知识</strong></p>
<p><img src="/images2/%E5%88%86%E9%A1%B5-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86.png"></p>
</li>
</ul>
<h2 id="4-3、案例的实现"><a href="#4-3、案例的实现" class="headerlink" title="4.3、案例的实现"></a>4.3、案例的实现</h2><ul>
<li><strong>实现思路</strong><ul>
<li><strong>页面</strong><ol>
<li>定义发送请求标记。</li>
<li>定义当前页码和每页显示的条数。 </li>
<li>定义滚动条距底部的距离。</li>
<li>设置页面加载事件。</li>
<li>为当前窗口绑定滚动条滚动事件。</li>
<li>获取必要信息(当前窗口的高度,滚动条上下滚动的距离,当前文档的高度)。</li>
<li>计算当前展示数据是否浏览完毕。</li>
<li>判断请求标记是否为 true。</li>
<li>将请求标记置为 false，当前异步操作完成前，不能重新发起请求。 </li>
<li>根据当前页和每页显示的条数来请求查询分页数据。</li>
<li>当前页码+1。</li>
</ol>
</li>
<li><strong>服务器</strong><ol>
<li>获取请求参数(当前页,每页显示的条数)。</li>
<li>根据当前页码和每页显示的条数，调用业务层的方法，得到分页 Page 对象。</li>
<li>将得到的数据转为 json。</li>
<li>将数据响应给客户端。</li>
</ol>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><p><strong>代码实现</strong></p>
<ul>
<li><p><strong>html页面</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	<span class="comment">//1.定义发送请求标记</span></span><br><span class="line">    <span class="keyword">let</span> send = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.定义当前页码和每页显示的条数</span></span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> pageSize = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.定义滚动条距底部的距离</span></span><br><span class="line">    <span class="keyword">let</span> bottom = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.设置页面加载事件</span></span><br><span class="line">    $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//5.为当前窗口绑定滚动条滚动事件</span></span><br><span class="line">        $(<span class="variable language_">window</span>).<span class="title function_">scroll</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">//6.获取必要信息，用于计算当前展示数据是否浏览完毕</span></span><br><span class="line">            <span class="comment">//当前窗口的高度</span></span><br><span class="line">            <span class="keyword">let</span> windowHeight = $(<span class="variable language_">window</span>).<span class="title function_">height</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//滚动条从上到下滚动距离</span></span><br><span class="line">            <span class="keyword">let</span> scrollTop = $(<span class="variable language_">window</span>).<span class="title function_">scrollTop</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//当前文档的高度</span></span><br><span class="line">            <span class="keyword">let</span> docHeight = $(<span class="variable language_">document</span>).<span class="title function_">height</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//7.计算当前展示数据是否浏览完毕</span></span><br><span class="line">            <span class="comment">//当 滚动条距底部的距离 + 当前滚动条滚动的距离 + 当前窗口的高度 &gt;= 当前文档的高度</span></span><br><span class="line">            <span class="keyword">if</span>((bottom + scrollTop + windowHeight) &gt;= docHeight) &#123;</span><br><span class="line">                <span class="comment">//8.判断请求标记是否为true</span></span><br><span class="line">                <span class="keyword">if</span>(send == <span class="literal">true</span>) &#123;</span><br><span class="line">                    <span class="comment">//9.将请求标记置为false，当前异步操作完成前，不能重新发起请求。</span></span><br><span class="line">                    send = <span class="literal">false</span>;</span><br><span class="line">                    <span class="comment">//10.根据当前页和每页显示的条数来 请求查询分页数据</span></span><br><span class="line">                    <span class="title function_">queryByPage</span>(start,pageSize);</span><br><span class="line">                    <span class="comment">//11.当前页码+1</span></span><br><span class="line">                    start++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义查询分页数据的函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">queryByPage</span>(<span class="params">start,pageSize</span>)&#123;</span><br><span class="line">        <span class="comment">//加载动图显示</span></span><br><span class="line">        $(<span class="string">&quot;.loading&quot;</span>).<span class="title function_">show</span>();</span><br><span class="line">        <span class="comment">//发起AJAX请求</span></span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            <span class="comment">//请求的资源路径</span></span><br><span class="line">            <span class="attr">url</span>:<span class="string">&quot;newsServlet&quot;</span>,</span><br><span class="line">            <span class="comment">//请求的参数</span></span><br><span class="line">            <span class="attr">data</span>:&#123;<span class="string">&quot;start&quot;</span>:start,<span class="string">&quot;pageSize&quot;</span>:pageSize&#125;,</span><br><span class="line">            <span class="comment">//请求的方式</span></span><br><span class="line">            <span class="attr">type</span>:<span class="string">&quot;POST&quot;</span>,</span><br><span class="line">            <span class="comment">//响应数据形式</span></span><br><span class="line">            <span class="attr">dataType</span>:<span class="string">&quot;json&quot;</span>,</span><br><span class="line">            <span class="comment">//请求成功后的回调函数</span></span><br><span class="line">            <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(data.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    $(<span class="string">&quot;.loading&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">                    $(<span class="string">&quot;#no&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot;我也是有底线的...&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//加载动图隐藏</span></span><br><span class="line">                $(<span class="string">&quot;.loading&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">                <span class="comment">//将数据显示</span></span><br><span class="line">                <span class="keyword">let</span> titles = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                    titles += <span class="string">&quot;&lt;li&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;                &lt;div class=\&quot;title-box\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;                    &lt;a href=\&quot;#\&quot; class=\&quot;link\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                                                    data[i].<span class="property">title</span> +</span><br><span class="line">                        <span class="string">&quot;                        &lt;hr&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;                    &lt;/a&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;                &lt;/div&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;            &lt;/li&gt;&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//显示到页面</span></span><br><span class="line">                $(<span class="string">&quot;.news_list&quot;</span>).<span class="title function_">append</span>(titles);</span><br><span class="line">                <span class="comment">//将请求标记设置为true</span></span><br><span class="line">                send = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>java代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.Page;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.NewsService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.impl.NewsServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="meta">@WebServlet(&quot;/newsServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NewsServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//设置请求和响应的编码</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取请求参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">start</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">pageSize</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;pageSize&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.根据当前页码和每页显示的条数来调用业务层的查询方法，得到分页Page对象</span></span><br><span class="line">        <span class="type">NewsService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NewsServiceImpl</span>();</span><br><span class="line">        <span class="type">Page</span> <span class="variable">page</span> <span class="operator">=</span> service.pageQuery(Integer.parseInt(start), Integer.parseInt(pageSize));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.将得到的数据转为JSON</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(page);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.将数据响应给客户端</span></span><br><span class="line">        resp.getWriter().write(json);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="4-4、点击按钮分页"><a href="#4-4、点击按钮分页" class="headerlink" title="4.4、点击按钮分页"></a>4.4、点击按钮分页</h2><ul>
<li><p><strong>案例效果和环境准备</strong></p>
<ul>
<li><strong>按钮效果</strong></li>
</ul>
<p><img src="/images2/%E7%BB%BC%E5%90%88%E6%8C%89%E9%92%AE-%E5%88%86%E9%A1%B5%E6%8C%89%E9%92%AE.png"></p>
<ul>
<li><strong>环境准备</strong><ol>
<li>使用已完善的ajax3项目</li>
<li>复制index.html更名为index2.html，并去掉原js中的方法</li>
</ol>
</li>
</ul>
</li>
<li><p><strong>案例的分析</strong></p>
<ul>
<li><p><strong>页面</strong></p>
<p>1.引入分页插件的样式文件和 js 文件。</p>
<ol start="2">
<li>定义当前页码和每页显示的条数。</li>
<li>调用查询数据的函数。</li>
<li>定义请求查询分页数据的函数，发起 AJAX 异步请求。</li>
<li>为分页按钮区域设置页数参数(总页数和当前页)。</li>
<li>为分页按钮绑定单击事件,完成上一页下一页查询功能。</li>
</ol>
</li>
<li><p><strong>服务器</strong></p>
<ul>
<li><ol>
<li>获取请求参数。</li>
<li>根据当前页码和每页显示的条数，调用业务层的方法，得到分页 Page 对象</li>
<li>封装 PageInfo 对象。</li>
<li>将得到的数据转为 json。</li>
<li>将数据响应给客户端。</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>案例的实现</strong></p>
<ul>
<li><p><strong>html页面</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//1.定义当前页码和每页显示的条数</span></span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> pageSize = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.调用查询数据的方法</span></span><br><span class="line">    <span class="title function_">queryByPage</span>(start,pageSize);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.定义请求查询分页数据的函数，发起AJAX异步请求，将数据显示到页面</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">queryByPage</span>(<span class="params">start,pageSize</span>) &#123;</span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            <span class="comment">//请求的资源路径</span></span><br><span class="line">            <span class="attr">url</span>:<span class="string">&quot;newsServlet2&quot;</span>,</span><br><span class="line">            <span class="comment">//请求的参数</span></span><br><span class="line">            <span class="attr">data</span>:&#123;<span class="string">&quot;start&quot;</span>:start,<span class="string">&quot;pageSize&quot;</span>:pageSize&#125;,</span><br><span class="line">            <span class="comment">//请求的方式</span></span><br><span class="line">            <span class="attr">type</span>:<span class="string">&quot;POST&quot;</span>,</span><br><span class="line">            <span class="comment">//响应数据形式</span></span><br><span class="line">            <span class="attr">dataType</span>:<span class="string">&quot;json&quot;</span>,</span><br><span class="line">            <span class="comment">//请求成功后的回调函数</span></span><br><span class="line">            <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">pageInfo</span>) &#123;</span><br><span class="line">                <span class="comment">//将数据显示到页面</span></span><br><span class="line">                <span class="keyword">let</span> titles = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; pageInfo.<span class="property">list</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                    titles += <span class="string">&quot;&lt;li&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;                &lt;div class=\&quot;title-box\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;                    &lt;a href=\&quot;#\&quot; class=\&quot;link\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                                                pageInfo.<span class="property">list</span>[i].<span class="property">title</span> +</span><br><span class="line">                        <span class="string">&quot;                        &lt;hr&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;                    &lt;/a&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;                &lt;/div&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;            &lt;/li&gt;&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                $(<span class="string">&quot;.news_list&quot;</span>).<span class="title function_">html</span>(titles);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//4.为分页按钮区域设置页数参数（总页数和当前页）</span></span><br><span class="line">                $(<span class="string">&quot;#light-pagination&quot;</span>).<span class="title function_">pagination</span>(&#123;</span><br><span class="line">                    <span class="attr">pages</span>:pageInfo.<span class="property">pages</span>,</span><br><span class="line">                    <span class="attr">currentPage</span>:pageInfo.<span class="property">pageNum</span></span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//5.为分页按钮绑定单击事件,完成上一页下一页查询功能</span></span><br><span class="line">                $(<span class="string">&quot;#light-pagination .page-link&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="comment">//获取点击按钮的文本内容</span></span><br><span class="line">                    <span class="keyword">let</span> page = $(<span class="variable language_">this</span>).<span class="title function_">html</span>();</span><br><span class="line">                    <span class="comment">//如果点击的是Prev，调用查询方法，查询当前页的上一页数据</span></span><br><span class="line">                    <span class="keyword">if</span>(page == <span class="string">&quot;Prev&quot;</span>) &#123;</span><br><span class="line">                        <span class="title function_">queryByPage</span>(pageInfo.<span class="property">pageNum</span> - <span class="number">1</span>,pageSize);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (page == <span class="string">&quot;Next&quot;</span>) &#123;</span><br><span class="line">                        <span class="comment">//如果点击的是Next，调用查询方法，查询当前页的下一页数据</span></span><br><span class="line">                        <span class="title function_">queryByPage</span>(pageInfo.<span class="property">pageNum</span> + <span class="number">1</span>,pageSize);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//调用查询方法，查询当前页的数据</span></span><br><span class="line">                        <span class="title function_">queryByPage</span>(page,pageSize);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Java代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.Page;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</span><br><span class="line"><span class="keyword">import</span> com.itheima.bean.News;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.NewsService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.impl.NewsServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/newsServlet2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NewsServlet2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//设置请求和响应的编码</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取请求参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">start</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">pageSize</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;pageSize&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.根据当前页码和每页显示的条数来调用业务层的查询方法，得到分页Page对象</span></span><br><span class="line">        <span class="type">NewsService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NewsServiceImpl</span>();</span><br><span class="line">        <span class="type">Page</span> <span class="variable">page</span> <span class="operator">=</span> service.pageQuery(Integer.parseInt(start), Integer.parseInt(pageSize));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.封装PageInfo对象</span></span><br><span class="line">        PageInfo&lt;List&lt;News&gt;&gt; info = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(page);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.将得到的数据转为JSON</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(info);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.将数据响应给客户端</span></span><br><span class="line">        resp.getWriter().write(json);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery快速入门笔记（七）</title>
    <url>/2022/04/03/Js%E4%B9%8BjQuery%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>目标：</p>
<p>能够说出什么是 jQuery<br>能够说出 jQuery 的优点<br>能够简单使用 jQuery<br>能够说出 DOM 对象和 jQuery 对象的区别<br>能够写出常用的 jQuery 选择器<br>能够操作 jQuery 样式<br>能够写出常用的 jQuery 动画 </p>
</blockquote>
<h2 id="1-1-jQuery-介绍"><a href="#1-1-jQuery-介绍" class="headerlink" title="1.1. jQuery 介绍"></a>1.1. jQuery 介绍</h2><h3 id="1-1-1-JavaScript-库"><a href="#1-1-1-JavaScript-库" class="headerlink" title="1.1.1 JavaScript 库"></a>1.1.1 JavaScript 库</h3><p>​    JavaScript库：即 library，是一个封装好的特定的集合（方法和函数）。从封装一大堆函数的角度理解库，就是在这个库中，封装了很多预先定义好的函数在里面，比如动画animate、hide、show，比如获取元素等。</p>
<blockquote>
<p>简单理解： 就是一个JS 文件，里面对我们原生js代码进行了封装，存放到里面。这样我们可以快速高效的使用这些封装好的功能了。</p>
<p>比如 jQuery，就是为了快速方便的操作DOM，里面基本都是函数（方法）。</p>
</blockquote>
<p>​    常见的JavaScript 库：jQuery、Prototype、YUI、Dojo、Ext JS、移动端的zepto等，这些库都是对原生 JavaScript 的封装，内部都是用 JavaScript 实现的，我们主要学习的是 jQuery。</p>
<h3 id="1-1-2-jQuery的概念"><a href="#1-1-2-jQuery的概念" class="headerlink" title="1.1.2 jQuery的概念"></a>1.1.2 jQuery的概念</h3><p>​    jQuery总体概况如下 :</p>
<ul>
<li><p>jQuery 是一个快速、简洁的 JavaScript 库，其设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。</p>
</li>
<li><p>j 就是 JavaScript；   Query 查询； 意思就是查询js，把js中的DOM操作做了封装，我们可以快速的查询使用里面的功能。</p>
</li>
<li><p>jQuery 封装了 JavaScript 常用的功能代码，优化了 DOM 操作、事件处理、动画设计和 Ajax 交互。</p>
</li>
<li><p>学习jQuery本质： 就是学习调用这些函数（方法）。</p>
</li>
<li><p>jQuery 出现的目的是加快前端人员的开发速度，我们可以非常方便的调用和使用它，从而提高开发效率。</p>
<p><img src="/images2/jQuery%E6%A6%82%E8%BF%B0.jpg" alt="jQuery概述"></p>
</li>
</ul>
<h3 id="1-1-3-jQuery的优点"><a href="#1-1-3-jQuery的优点" class="headerlink" title="1.1.3 jQuery的优点"></a>1.1.3 jQuery的优点</h3><ol>
<li>轻量级。核心文件才几十kb，不会影响页面加载速度。</li>
<li>跨浏览器兼容，基本兼容了现在主流的浏览器。</li>
<li>链式编程、隐式迭代。</li>
<li>对事件、样式、动画支持，大大简化了DOM操作。</li>
<li>支持插件扩展开发。有着丰富的第三方的插件，例如：树形菜单、日期控件、轮播图等。</li>
<li>免费、开源。</li>
</ol>
<h2 id="1-2-jQuery-的基本使用"><a href="#1-2-jQuery-的基本使用" class="headerlink" title="1.2. jQuery 的基本使用"></a>1.2. jQuery 的基本使用</h2><h3 id="1-2-1-jQuery-的下载"><a href="#1-2-1-jQuery-的下载" class="headerlink" title="1.2.1 jQuery 的下载"></a>1.2.1 jQuery 的下载</h3><p>​    jQuery的官网地址： <a href="https://jquery.com/%EF%BC%8C%E5%AE%98%E7%BD%91%E5%8D%B3%E5%8F%AF%E4%B8%8B%E8%BD%BD%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%E3%80%82">https://jquery.com/，官网即可下载最新版本。</a></p>
<blockquote>
<p> 各个版本的下载：<a href="https://code.jquery.com/">https://code.jquery.com/</a></p>
</blockquote>
<p>​    版本介绍：</p>
<blockquote>
<p>1x ：兼容 IE 678 等低版本浏览器， 官网不再更新</p>
<p>2x ：不兼容 IE 678 等低版本浏览器， 官网不再更新</p>
<p>3x ：不兼容 IE 678 等低版本浏览器， 是官方主要更新维护的版本</p>
</blockquote>
<h3 id="1-2-2-体验jQuery"><a href="#1-2-2-体验jQuery" class="headerlink" title="1.2.2. 体验jQuery"></a>1.2.2. 体验jQuery</h3><p>​    步骤：</p>
<ul>
<li>引入jQuery文件。</li>
<li>在文档最末尾插入 script 标签，书写体验代码。</li>
<li>$(‘div’).hide() 可以隐藏盒子。</li>
</ul>
<h3 id="1-2-3-jQuery的入口函数"><a href="#1-2-3-jQuery的入口函数" class="headerlink" title="1.2.3. jQuery的入口函数"></a>1.2.3. jQuery的入口函数</h3><p>​    jQuery中常见的两种入口函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种: 简单易用。</span></span><br><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;   </span><br><span class="line">    ...  <span class="comment">// 此处是页面 DOM 加载完成的入口</span></span><br><span class="line">&#125;) ; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种: 繁琐，但是也可以实现</span></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   ...  <span class="comment">//  此处是页面DOM加载完成的入口</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>​    总结：</p>
<ol>
<li>等着 DOM 结构渲染完毕即可执行内部代码，不必等到所有外部资源加载完成，jQuery 帮我们完成了封装。</li>
<li>相当于原生 js 中的 DOMContentLoaded。</li>
<li>不同于原生 js 中的 load 事件是等页面文档、外部的 js 文件、css文件、图片加载完毕才执行内部代码。</li>
<li>更推荐使用第一种方式。</li>
</ol>
<h3 id="1-2-4-jQuery中的顶级对象"><a href="#1-2-4-jQuery中的顶级对象" class="headerlink" title="1.2.4. jQuery中的顶级对象$"></a>1.2.4. jQuery中的顶级对象$</h3><ol>
<li>$是 jQuery 的别称，在代码中可以使用 jQuery 代替，但一般为了方便，通常都直接使用 $ 。</li>
<li>$是jQuery的顶级对象，相当于原生JavaScript中的 window。把元素利用$包装成jQuery对象，就可以调用jQuery 的方法。</li>
</ol>
<h3 id="1-2-5-jQuery-对象和-DOM-对象"><a href="#1-2-5-jQuery-对象和-DOM-对象" class="headerlink" title="1.2.5.  jQuery 对象和 DOM 对象"></a>1.2.5.  jQuery 对象和 DOM 对象</h3><p>​    使用 jQuery 方法和原生JS获取的元素是不一样的，总结如下 : </p>
<ol>
<li>用原生 JS 获取来的对象就是 DOM 对象</li>
<li>jQuery 方法获取的元素就是 jQuery 对象。</li>
<li>jQuery 对象本质是： 利用$对DOM 对象包装后产生的对象（伪数组形式存储）。</li>
</ol>
<blockquote>
<p>注意：</p>
<p>只有 jQuery 对象才能使用 jQuery 方法，DOM 对象则使用原生的 JavaScirpt 方法。</p>
</blockquote>
<p><img src="/images2/jQuery%E5%AF%B9%E8%B1%A1%E5%92%8CDOM%E5%AF%B9%E8%B1%A1.png" alt="jQuery对象和DOM对象"></p>
<h3 id="1-2-6-jQuery-对象和-DOM-对象转换"><a href="#1-2-6-jQuery-对象和-DOM-对象转换" class="headerlink" title="1.2.6.  jQuery 对象和 DOM 对象转换"></a>1.2.6.  jQuery 对象和 DOM 对象转换</h3><p>​    DOM 对象与 jQuery 对象之间是可以相互转换的。因为原生js 比 jQuery 更大，原生的一些属性和方法 jQuery没有给我们封装. 要想使用这些属性和方法需要把jQuery对象转换为DOM对象才能使用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.DOM对象转换成jQuery对象，方法只有一种</span></span><br><span class="line"><span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box&#x27;</span>);  <span class="comment">// 获取DOM对象</span></span><br><span class="line"><span class="keyword">var</span> jQueryObject = $(box);  <span class="comment">// 把DOM对象转换为 jQuery 对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.jQuery 对象转换为 DOM 对象有两种方法：</span></span><br><span class="line"><span class="comment">//   2.1 jQuery对象[索引值]</span></span><br><span class="line"><span class="keyword">var</span> domObject1 = $(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//   2.2 jQuery对象.get(索引值)</span></span><br><span class="line"><span class="keyword">var</span> domObject2 = $(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">get</span>(<span class="number">0</span>)</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>总结：实际开发比较常用的是把DOM对象转换为jQuery对象，这样能够调用功能更加强大的jQuery中的方法。</p>
<h2 id="1-3-jQuery-选择器"><a href="#1-3-jQuery-选择器" class="headerlink" title="1.3. jQuery 选择器"></a>1.3. jQuery 选择器</h2><p>​    原生 JS 获取元素方式很多，很杂，而且兼容性情况不一致，因此 jQuery 给我们做了封装，使获取元素统一标准。</p>
<h3 id="1-3-1-基础选择器"><a href="#1-3-1-基础选择器" class="headerlink" title="1.3.1. 基础选择器"></a>1.3.1. 基础选择器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;选择器&quot;</span>)   <span class="comment">//  里面选择器直接写 CSS 选择器即可，但是要加引号 </span></span><br></pre></td></tr></table></figure>

<p>​    <img src="/images2/%E5%9F%BA%E7%A1%80%E9%80%89%E6%8B%A9%E5%99%A8.png" alt="基础选择器"></p>
<h3 id="1-3-2-层级选择器"><a href="#1-3-2-层级选择器" class="headerlink" title="1.3.2. 层级选择器"></a>1.3.2. 层级选择器</h3><p>​    层级选择器最常用的两个分别为：后代选择器和子代选择器。</p>
<p>​    <img src="/images2/%E5%B1%82%E7%BA%A7%E9%80%89%E6%8B%A9%E5%99%A8.png" alt="层级选择器"></p>
<p><strong>基础选择器和层级选择器案例代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span>我是nav div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ul 的<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ul 的<span class="tag">&lt;/<span class="name">li</span>&gt;</span>        </span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ul 的<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;.nav&quot;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;ul li&quot;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-3-筛选选择器"><a href="#1-3-3-筛选选择器" class="headerlink" title="1.3.3. 筛选选择器"></a>1.3.3. 筛选选择器</h3><p>​    筛选选择器，顾名思义就是在所有的选项中选择满足条件的进行筛选选择。常见如下 :</p>
<p><img src="/images2/%E7%AD%9B%E9%80%89%E9%80%89%E6%8B%A9%E5%99%A8.png" alt="筛选选择器"></p>
<p><strong>案例代码</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>多个里面筛选几个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>多个里面筛选几个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>多个里面筛选几个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>多个里面筛选几个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>多个里面筛选几个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>多个里面筛选几个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>多个里面筛选几个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>多个里面筛选几个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>多个里面筛选几个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>多个里面筛选几个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>多个里面筛选几个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>多个里面筛选几个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;ul li:first&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;red&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;ul li:eq(2)&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;blue&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;ol li:odd&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;skyblue&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;ol li:even&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;pink&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p>另:  jQuery中还有一些筛选方法，类似DOM中的通过一个节点找另外一个节点，父、子、兄以外有所加强。</p>
<p><img src="/images2/relation.png" alt="筛选方法"></p>
<p>偏重于记忆，演示代码略。</p>
<h3 id="1-3-4-知识铺垫"><a href="#1-3-4-知识铺垫" class="headerlink" title="1.3.4 知识铺垫"></a>1.3.4 知识铺垫</h3><ul>
<li>jQuery 设置样式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;属性&#x27;</span>, <span class="string">&#x27;值&#x27;</span>)    </span><br></pre></td></tr></table></figure>

<ul>
<li>jQuery 里面的排他思想</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 想要多选一的效果，排他思想：当前元素设置样式，其余的兄弟元素清除样式。</span></span><br><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">css</span>(“color”,”red”);</span><br><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">siblings</span>(). <span class="title function_">css</span>(“color”,””);</span><br></pre></td></tr></table></figure>

<ul>
<li>隐式迭代</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 遍历内部 DOM 元素（伪数组形式存储）的过程就叫做隐式迭代。</span></span><br><span class="line"><span class="comment">// 简单理解：给匹配到的所有元素进行循环遍历，执行相应的方法，而不用我们再进行循环，简化我们的操作，方便我们调用。</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">hide</span>();  <span class="comment">// 页面中所有的div全部隐藏，不用循环操作</span></span><br></pre></td></tr></table></figure>

<ul>
<li>链式编程</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 链式编程是为了节省代码量，看起来更优雅。</span></span><br><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>).<span class="title function_">sibling</span>().<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;&#x27;</span>); </span><br></pre></td></tr></table></figure>



<h2 id="1-4-jQuery-样式操作"><a href="#1-4-jQuery-样式操作" class="headerlink" title="1.4.  jQuery 样式操作"></a>1.4.  jQuery 样式操作</h2><p>​    jQuery中常用的样式操作有两种：css() 和 设置类样式方法</p>
<h3 id="1-4-1-方法1-操作-css-方法"><a href="#1-4-1-方法1-操作-css-方法" class="headerlink" title="1.4.1. 方法1: 操作 css 方法"></a>1.4.1. 方法1: 操作 css 方法</h3><p>​    jQuery 可以使用 css 方法来修改简单元素样式； 也可以操作类，修改多个样式。</p>
<p>​    常用以下三种形式 : </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.参数只写属性名，则是返回属性值</span></span><br><span class="line"><span class="keyword">var</span> strColor = $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.  参数是属性名，属性值，逗号分隔，是设置一组样式，属性必须加引号，值如果是数字可以不用跟单位和引号</span></span><br><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&#x27;&#x27;</span>color<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>red<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.  参数可以是对象形式，方便设置多组样式。属性名和属性值用冒号隔开， 属性可以不用加引号</span></span><br><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">css</span>(&#123; <span class="string">&quot;color&quot;</span>:<span class="string">&quot;white&quot;</span>,<span class="string">&quot;font-size&quot;</span>:<span class="string">&quot;20px&quot;</span>&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​    注意：css() 多用于样式少时操作，多了则不太方便。</p>
<h3 id="1-4-2-方法2-设置类样式方法"><a href="#1-4-2-方法2-设置类样式方法" class="headerlink" title="1.4.2. 方法2: 设置类样式方法"></a>1.4.2. 方法2: 设置类样式方法</h3><p>​    作用等同于以前的 classList，可以操作类样式， 注意操作类里面的参数不要加点。</p>
<p>​    常用的三种设置类样式方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.添加类</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&quot;current&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.删除类</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">removeClass</span>(<span class="string">&quot;current&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.切换类</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">toggleClass</span>(<span class="string">&quot;current&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​    注意：</p>
<ol>
<li>设置类样式方法比较适合样式多时操作，可以弥补css()的不足。</li>
<li>原生 JS 中 className 会覆盖元素原先里面的类名，jQuery 里面类操作只是对指定类进行操作，不影响原先的类名。</li>
</ol>
<h2 id="1-5-jQuery-效果"><a href="#1-5-jQuery-效果" class="headerlink" title="1.5. jQuery 效果"></a>1.5. jQuery 效果</h2><p>​    jQuery 给我们封装了很多动画效果，最为常见的如下：</p>
<ul>
<li>显示隐藏：show() &#x2F; hide() &#x2F; toggle() ;</li>
<li>划入画出：slideDown() &#x2F; slideUp() &#x2F; slideToggle() ; </li>
<li>淡入淡出：fadeIn() &#x2F; fadeOut() &#x2F; fadeToggle() &#x2F; fadeTo() ; </li>
<li>自定义动画：animate() ;</li>
</ul>
<blockquote>
<p>注意：</p>
<p>动画或者效果一旦触发就会执行，如果多次触发，就造成多个动画或者效果排队执行。</p>
<p>jQuery为我们提供另一个方法，可以停止动画排队：stop() ;</p>
</blockquote>
<h3 id="1-5-1-显示隐藏"><a href="#1-5-1-显示隐藏" class="headerlink" title="1.5.1. 显示隐藏"></a>1.5.1. 显示隐藏</h3><p>​    显示隐藏动画，常见有三个方法：show() &#x2F; hide() &#x2F; toggle() ;</p>
<p>​    语法规范如下:</p>
<p><img src="/images2/show.png" alt="show"></p>
<p><img src="/images2/hide.png" alt="hide"></p>
<p><img src="/images2/toggle.png" alt="toggle"></p>
<p><strong>代码演示</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>显示<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>隐藏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;button&quot;</span>).<span class="title function_">eq</span>(<span class="number">0</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="string">&quot;div&quot;</span>).<span class="title function_">show</span>(<span class="number">1000</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="title function_">alert</span>(<span class="number">1</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;button&quot;</span>).<span class="title function_">eq</span>(<span class="number">1</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="string">&quot;div&quot;</span>).<span class="title function_">hide</span>(<span class="number">1000</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="title function_">alert</span>(<span class="number">1</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;button&quot;</span>).<span class="title function_">eq</span>(<span class="number">2</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              $(<span class="string">&quot;div&quot;</span>).<span class="title function_">toggle</span>(<span class="number">1000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 一般情况下，我们都不加参数直接显示隐藏就可以了</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h3 id="1-5-2-滑入滑出"><a href="#1-5-2-滑入滑出" class="headerlink" title="1.5.2. 滑入滑出"></a>1.5.2. 滑入滑出</h3><p>​    滑入滑出动画，常见有三个方法：slideDown() &#x2F; slideUp() &#x2F; slideToggle() ; </p>
<p>​    语法规范如下:</p>
<p><img src="/images2/slideDown.png" alt="slideDown"></p>
<p><img src="/images2/slideUp.png" alt="slideUp"></p>
<p><img src="/images2/slideToggle.png" alt="slideToggle"></p>
<p><strong>代码演示</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>下拉滑动<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>上拉滑动<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>切换滑动<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;button&quot;</span>).<span class="title function_">eq</span>(<span class="number">0</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 下滑动 slideDown()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="string">&quot;div&quot;</span>).<span class="title function_">slideDown</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;button&quot;</span>).<span class="title function_">eq</span>(<span class="number">1</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 上滑动 slideUp()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="string">&quot;div&quot;</span>).<span class="title function_">slideUp</span>(<span class="number">500</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;button&quot;</span>).<span class="title function_">eq</span>(<span class="number">2</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 滑动切换 slideToggle()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="string">&quot;div&quot;</span>).<span class="title function_">slideToggle</span>(<span class="number">500</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小案例：下拉菜单略（详情参看源码）。</p>
</blockquote>
<h3 id="1-5-3-淡入淡出"><a href="#1-5-3-淡入淡出" class="headerlink" title="1.5.3 淡入淡出"></a>1.5.3 淡入淡出</h3><p>​    淡入淡出动画，常见有四个方法：fadeIn() &#x2F; fadeOut() &#x2F; fadeToggle() &#x2F; fadeTo() ; </p>
<p>​    语法规范如下:</p>
<p><img src="/images2/fadeIn.png" alt="fadeIn"></p>
<p><img src="/images2/fadeOut.png" alt="fadeOut"></p>
<p><img src="/images2/fadeToggle.png" alt="fadeToggle"></p>
<p><img src="/images2/fadeTo.png" alt="fadeTo"></p>
<p><strong>代码演示</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>淡入效果<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>淡出效果<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>淡入淡出切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>修改透明度<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;button&quot;</span>).<span class="title function_">eq</span>(<span class="number">0</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 淡入 fadeIn()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="string">&quot;div&quot;</span>).<span class="title function_">fadeIn</span>(<span class="number">1000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;button&quot;</span>).<span class="title function_">eq</span>(<span class="number">1</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 淡出 fadeOut()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="string">&quot;div&quot;</span>).<span class="title function_">fadeOut</span>(<span class="number">1000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;button&quot;</span>).<span class="title function_">eq</span>(<span class="number">2</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 淡入淡出切换 fadeToggle()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="string">&quot;div&quot;</span>).<span class="title function_">fadeToggle</span>(<span class="number">1000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;button&quot;</span>).<span class="title function_">eq</span>(<span class="number">3</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">//  修改透明度 fadeTo() 这个速度和透明度要必须写</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="string">&quot;div&quot;</span>).<span class="title function_">fadeTo</span>(<span class="number">1000</span>, <span class="number">0.5</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h3 id="1-5-4-自定义动画"><a href="#1-5-4-自定义动画" class="headerlink" title="1.5.4 自定义动画"></a>1.5.4 自定义动画</h3><p>​    自定义动画非常强大，通过参数的传递可以模拟以上所有动画，方法为：animate() ;</p>
<p>​    语法规范如下:</p>
<p><img src="/images2/animate.png"></p>
<p><strong>代码演示</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>动起来<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="string">&quot;div&quot;</span>).<span class="title function_">animate</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">left</span>: <span class="number">500</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">top</span>: <span class="number">300</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">opacity</span>: <span class="number">.4</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">width</span>: <span class="number">500</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;, <span class="number">500</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h3 id="1-5-5-停止动画排队"><a href="#1-5-5-停止动画排队" class="headerlink" title="1.5.5 停止动画排队"></a>1.5.5 停止动画排队</h3><p>​    动画或者效果一旦触发就会执行，如果多次触发，就造成多个动画或者效果排队执行。</p>
<p>​    停止动画排队的方法为：stop() ; </p>
<ul>
<li>stop() 方法用于停止动画或效果。</li>
<li>stop() 写到动画或者效果的前面， 相当于停止结束上一次的动画。</li>
</ul>
<p>​        总结: 每次使用动画之前，先调用 stop() ,在调用动画。</p>
<h3 id="1-5-6-事件切换"><a href="#1-5-6-事件切换" class="headerlink" title="1.5.6. 事件切换"></a>1.5.6. 事件切换</h3><p>​    jQuery中为我们添加了一个新事件 hover() ; 功能类似 css 中的伪类 :hover 。介绍如下</p>
<p><strong>语法</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">hover</span>([over,]out)     <span class="comment">// 其中over和out为两个函数</span></span><br></pre></td></tr></table></figure>

<ul>
<li>over:鼠标移到元素上要触发的函数（相当于mouseenter）</li>
<li>out:鼠标移出元素要触发的函数（相当于mouseleave）</li>
<li>如果只写一个函数，则鼠标经过和离开都会触发它</li>
</ul>
<p><strong>hover事件和停止动画排列案例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>微博<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>私信<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>评论<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>@我<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>微博<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>私信<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>评论<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>@我<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 鼠标经过</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// $(&quot;.nav&gt;li&quot;).mouseover(function() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     // $(this) jQuery 当前元素  this不要加引号</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     // show() 显示元素  hide() 隐藏元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     $(this).children(&quot;ul&quot;).slideDown(200);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// // 鼠标离开</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// $(&quot;.nav&gt;li&quot;).mouseout(function() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     $(this).children(&quot;ul&quot;).slideUp(200);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 1. 事件切换 hover 就是鼠标经过和离开的复合写法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// $(&quot;.nav&gt;li&quot;).hover(function() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     $(this).children(&quot;ul&quot;).slideDown(200);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// &#125;, function() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     $(this).children(&quot;ul&quot;).slideUp(200);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 2. 事件切换 hover  如果只写一个函数，那么鼠标经过和鼠标离开都会触发这个函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;.nav&gt;li&quot;</span>).<span class="title function_">hover</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// stop 方法必须写到动画的前面</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="variable language_">this</span>).<span class="title function_">children</span>(<span class="string">&quot;ul&quot;</span>).<span class="title function_">stop</span>().<span class="title function_">slideToggle</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>



<h2 id="1-6-总结"><a href="#1-6-总结" class="headerlink" title="1.6. 总结"></a>1.6. 总结</h2><p><img src="/images2/%E6%80%BB%E7%BB%93.png" alt="总结"></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery快速入门笔记（九）</title>
    <url>/2022/04/03/Js%E4%B9%8BjQuery%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B9%9D%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>目标：</p>
<p>能够说出4种常见的注册事件<br>能够说出 on 绑定事件的优势<br>能够说出 jQuery 事件委派的优点以及方式<br>能够说出绑定事件与解绑事件<br>能够说出 jQuery 对象的拷贝方法<br>能够说出 jQuery 多库共存的2种方法<br>能够使用 jQuery 插件</p>
</blockquote>
<h2 id="1-1-jQuery-事件注册"><a href="#1-1-jQuery-事件注册" class="headerlink" title="1.1. jQuery 事件注册"></a>1.1. jQuery 事件注册</h2><p>​    jQuery 为我们提供了方便的事件注册机制，是开发人员抑郁操作优缺点如下：</p>
<ul>
<li>优点: 操作简单，且不用担心事件覆盖等问题。</li>
<li>缺点: 普通的事件注册不能做事件委托，且无法实现事件解绑，需要借助其他方法。</li>
</ul>
<p><strong>语法</strong></p>
<p><img src="/images/register.png" alt="register"></p>
<p><strong>演示代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 1. 单个事件注册</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;div&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;purple&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;div&quot;</span>).<span class="title function_">mouseenter</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;skyblue&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h2 id="1-2-jQuery-事件处理"><a href="#1-2-jQuery-事件处理" class="headerlink" title="1.2. jQuery 事件处理"></a>1.2. jQuery 事件处理</h2><p>​    因为普通注册事件方法的不足，jQuery又开发了多个处理方法，重点讲解如下：</p>
<ul>
<li>on(): 用于事件绑定，目前最好用的事件绑定方法</li>
<li>off(): 事件解绑</li>
<li>trigger() &#x2F; triggerHandler(): 事件触发</li>
</ul>
<h3 id="1-2-1-事件处理-on-绑定事件"><a href="#1-2-1-事件处理-on-绑定事件" class="headerlink" title="1.2.1 事件处理 on() 绑定事件"></a>1.2.1 事件处理 on() 绑定事件</h3><p>​    因为普通注册事件方法的不足，jQuery又创建了多个新的事件绑定方法bind() &#x2F; live() &#x2F; delegate() &#x2F; on()等，其中最好用的是: on()</p>
<p><strong>语法</strong></p>
<p><img src="/images/on1.png" alt="on1"></p>
<p><img src="/images/on2.png" alt="on2"></p>
<p><img src="/images/on3.png" alt="on3"></p>
<p><strong>演示代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我们都是好孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我们都是好孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我们都是好孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ol</span>&gt;</span><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// (1) on可以绑定1个或者多个事件处理程序</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// $(&quot;div&quot;).on(&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     mouseenter: function() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//         $(this).css(&quot;background&quot;, &quot;skyblue&quot;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     click: function() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//         $(this).css(&quot;background&quot;, &quot;purple&quot;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;div&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;mouseenter mouseleave&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="variable language_">this</span>).<span class="title function_">toggleClass</span>(<span class="string">&quot;current&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// (2) on可以实现事件委托（委派）</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// click 是绑定在ul 身上的，但是 触发的对象是 ul 里面的小li</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// $(&quot;ul li&quot;).click();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;ul&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="string">&quot;li&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">alert</span>(<span class="number">11</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// (3) on可以给未来动态创建的元素绑定事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;ol&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="string">&quot;li&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">alert</span>(<span class="number">11</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> li = $(<span class="string">&quot;&lt;li&gt;我是后来创建的&lt;/li&gt;&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;ol&quot;</span>).<span class="title function_">append</span>(li);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="1-2-2-事件处理-off-解绑事件"><a href="#1-2-2-事件处理-off-解绑事件" class="headerlink" title="1.2.2. 事件处理 off() 解绑事件"></a>1.2.2. 事件处理 off() 解绑事件</h3><p>​    当某个事件上面的逻辑，在特定需求下不需要的时候，可以把该事件上的逻辑移除，这个过程我们称为事件解绑。jQuery 为我们提供 了多种事件解绑方法：die() &#x2F; undelegate() &#x2F; off() 等，甚至还有只触发一次的事件绑定方法 one()，在这里我们重点讲解一下 off() ;</p>
<p><strong>语法</strong></p>
<p><img src="/images/off.png" alt="off"></p>
<p><strong>演示代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我们都是好孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我们都是好孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我们都是好孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个P标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  			<span class="comment">// 事件绑定</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;div&quot;</span>).<span class="title function_">on</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">click</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我点击了&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">mouseover</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我鼠标经过了&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;ul&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="string">&quot;li&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">alert</span>(<span class="number">11</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 1. 事件解绑 off </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// $(&quot;div&quot;).off();  // 这个是解除了div身上的所有事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;div&quot;</span>).<span class="title function_">off</span>(<span class="string">&quot;click&quot;</span>); <span class="comment">// 这个是解除了div身上的点击事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;ul&quot;</span>).<span class="title function_">off</span>(<span class="string">&quot;click&quot;</span>, <span class="string">&quot;li&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 2. one() 但是它只能触发事件一次</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;p&quot;</span>).<span class="title function_">one</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">alert</span>(<span class="number">11</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-4-事件处理-trigger-自动触发事件"><a href="#1-2-4-事件处理-trigger-自动触发事件" class="headerlink" title="1.2.4. 事件处理 trigger() 自动触发事件"></a>1.2.4. 事件处理 trigger() 自动触发事件</h3><p>​    有些时候，在某些特定的条件下，我们希望某些事件能够自动触发, 比如轮播图自动播放功能跟点击右侧按钮一致。可以利用定时器自动触发右侧按钮点击事件，不必鼠标点击触发。由此 jQuery 为我们提供了两个自动触发事件 trigger() 和 triggerHandler() ; </p>
<p><strong>语法</strong></p>
<p><img src="/images/t1.png" alt="t1"></p>
<p><img src="/images/t2.png" alt="t2"></p>
<p><strong>演示代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 绑定事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      $(<span class="string">&quot;div&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">alert</span>(<span class="number">11</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 自动触发事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 1. 元素.事件()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// $(&quot;div&quot;).click();会触发元素的默认行为</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 2. 元素.trigger(&quot;事件&quot;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// $(&quot;div&quot;).trigger(&quot;click&quot;);会触发元素的默认行为</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      $(<span class="string">&quot;input&quot;</span>).<span class="title function_">trigger</span>(<span class="string">&quot;focus&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 3. 元素.triggerHandler(&quot;事件&quot;) 就是不会触发元素的默认行为</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      $(<span class="string">&quot;input&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;focus&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="variable language_">this</span>).<span class="title function_">val</span>(<span class="string">&quot;你好吗&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 一个会获取焦点，一个不会</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      $(<span class="string">&quot;div&quot;</span>).<span class="title function_">triggerHandler</span>(<span class="string">&quot;click&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// $(&quot;input&quot;).triggerHandler(&quot;focus&quot;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="1-3-jQuery-事件对象"><a href="#1-3-jQuery-事件对象" class="headerlink" title="1.3. jQuery 事件对象"></a>1.3. jQuery 事件对象</h2><p>​    jQuery 对DOM中的事件对象 event 进行了封装，兼容性更好，获取更方便，使用变化不大。事件被触发，就会有事件对象的产生。</p>
<p><strong>语法</strong></p>
<p><img src="/images/event.png" alt="event"></p>
<p><strong>演示代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="variable language_">document</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;点击了document&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;div&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// console.log(event);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;点击了div&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                event.<span class="title function_">stopPropagation</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p>注意：jQuery中的 event 对象使用，可以借鉴 API 和 DOM 中的 event 。</p>
<h2 id="1-4-jQuery-拷贝对象"><a href="#1-4-jQuery-拷贝对象" class="headerlink" title="1.4.  jQuery 拷贝对象"></a>1.4.  jQuery 拷贝对象</h2><p>​    jQuery中分别为我们提供了两套快速获取和设置元素尺寸和位置的API，方便易用，内容如下。</p>
<p><strong>语法</strong></p>
<p><img src="/images/extend.png" alt="extend"></p>
<p><strong>演示代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  			<span class="comment">// 1.合并数据</span></span><br><span class="line">           <span class="keyword">var</span> targetObj = &#123;&#125;;</span><br><span class="line">           <span class="keyword">var</span> obj = &#123;</span><br><span class="line">               <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">               <span class="attr">name</span>: <span class="string">&quot;andy&quot;</span></span><br><span class="line">           &#125;;</span><br><span class="line">           <span class="comment">// $.extend(target, obj);</span></span><br><span class="line">           $.<span class="title function_">extend</span>(targetObj, obj);</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(targetObj);</span><br><span class="line">  </span><br><span class="line">  			<span class="comment">// 2. 会覆盖 targetObj 里面原来的数据</span></span><br><span class="line">           <span class="keyword">var</span> targetObj = &#123;</span><br><span class="line">               <span class="attr">id</span>: <span class="number">0</span></span><br><span class="line">           &#125;;</span><br><span class="line">           <span class="keyword">var</span> obj = &#123;</span><br><span class="line">               <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">               <span class="attr">name</span>: <span class="string">&quot;andy&quot;</span></span><br><span class="line">           &#125;;</span><br><span class="line">           <span class="comment">// $.extend(target, obj);</span></span><br><span class="line">           $.<span class="title function_">extend</span>(targetObj, obj);</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(targetObj); </span><br><span class="line">       &#125;)</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="1-5-jQuery-多库共存"><a href="#1-5-jQuery-多库共存" class="headerlink" title="1.5.  jQuery 多库共存"></a>1.5.  jQuery 多库共存</h2><p>​    实际开发中，很多项目连续开发十多年，jQuery版本不断更新，最初的 jQuery 版本无法满足需求，这时就需要保证在旧有版本正常运行的情况下，新的功能使用新的jQuery版本实现，这种情况被称为，jQuery 多库共存。</p>
<p><strong>语法</strong></p>
<p><img src="/images/noconfig.png" alt="noconfig"></p>
<p><strong>演示代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	$(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  		<span class="comment">// 让jquery 释放对$ 控制权 让用自己决定</span></span><br><span class="line">  		<span class="keyword">var</span> suibian = jQuery.<span class="title function_">noConflict</span>();</span><br><span class="line">  		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">suibian</span>(<span class="string">&quot;span&quot;</span>));</span><br><span class="line">	&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="1-6-jQuery-插件"><a href="#1-6-jQuery-插件" class="headerlink" title="1.6.  jQuery 插件"></a>1.6.  jQuery 插件</h2><p>​    jQuery 功能比较有限，想要更复杂的特效效果，可以借助于 jQuery 插件完成。 这些插件也是依赖于jQuery来完成的，所以必须要先引入</p>
<p>jQuery文件，因此也称为 jQuery 插件。</p>
<p>​    jQuery 插件常用的网站：</p>
<ol>
<li><p>jQuery 插件库  <a href="http://www.jq22.com/">http://www.jq22.com/</a>     </p>
</li>
<li><p>jQuery 之家   <a href="http://www.htmleaf.com/">http://www.htmleaf.com/</a> </p>
<p>jQuery 插件使用步骤：</p>
</li>
<li><p>引入相关文件。（jQuery 文件 和 插件文件）    </p>
</li>
<li><p>复制相关html、css、js (调用插件)。</p>
</li>
</ol>
<h3 id="1-4-1-瀑布流插件（重点讲解）"><a href="#1-4-1-瀑布流插件（重点讲解）" class="headerlink" title="1.4.1.  瀑布流插件（重点讲解）"></a>1.4.1.  瀑布流插件（重点讲解）</h3><p>​    我们学习的第一个插件是jQuery之家的开源插件，瀑布流。我们将重点详细讲解，从找到插件所在网页，然后点击下载代码，到插件的使用等，后面的插件使用可参考瀑布流插件的使用。</p>
<p><strong>下载位置</strong></p>
<p><img src="/images/water.png" alt="water"></p>
<p><img src="/images/download.png"></p>
<p><strong>代码演示</strong></p>
<p>​    插件的使用三点：   1. 引入css.           2.引入JS            3.引入html。 （有的简单插件只需引入html和js，甚至有的只需引入js）</p>
<ul>
<li>1.引入css.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;css/normalize.css&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/default.css&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  </span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 下面的样式代码为页面布局，可以引入，也可以自己写，自己设计页面样式，一般为直接引入，方便 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-id">#gallery-wrapper</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">position</span>: relative;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">max-width</span>: <span class="number">75%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">width</span>: <span class="number">75%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-tag">img</span><span class="selector-class">.thumb</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">max-width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">height</span>: auto;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.white-panel</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">position</span>: absolute;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">background</span>: white;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">1px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>);</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.white-panel</span> <span class="selector-tag">h1</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">font-size</span>: <span class="number">1em</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.white-panel</span> <span class="selector-tag">h1</span> <span class="selector-tag">a</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">color</span>: <span class="number">#A92733</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.white-panel</span><span class="selector-pseudo">:hover</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">margin-top</span>: -<span class="number">5px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    -webkit-<span class="attribute">transition</span>: all <span class="number">0.3s</span> ease-in-out;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    -moz-<span class="attribute">transition</span>: all <span class="number">0.3s</span> ease-in-out;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    -o-<span class="attribute">transition</span>: all <span class="number">0.3s</span> ease-in-out;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease-in-out;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>2.引入js.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 前两个必须引入 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-1.11.0.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/pinterest_grid.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;!-- 下面的为启动瀑布流代码，参数可调节属性，具体功能可参考readme.<span class="property">html</span> --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	$(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      $(<span class="string">&quot;#gallery-wrapper&quot;</span>).<span class="title function_">pinterest_grid</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">no_columns</span>: <span class="number">5</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">padding_x</span>: <span class="number">15</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">padding_y</span>: <span class="number">10</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">margin_bottom</span>: <span class="number">50</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">single_column_breakpoint</span>: <span class="number">700</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>3.引入html.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- html结构一般为事先写好，很难修改结构，但可以修改内容及图片的多少（article标签） --&gt;</span><br><span class="line">&lt;section id=&quot;gallery-wrapper&quot;&gt;</span><br><span class="line">       &lt;article class=&quot;white-panel&quot;&gt;</span><br><span class="line">           &lt;img src=&quot;images/P_000.jpg&quot; class=&quot;thumb&quot;&gt;</span><br><span class="line">           &lt;h1&gt;&lt;a href=&quot;#&quot;&gt;我是轮播图片1&lt;/a&gt;&lt;/h1&gt;</span><br><span class="line">           &lt;p&gt;里面很精彩哦&lt;/p&gt;</span><br><span class="line">       &lt;/article&gt;</span><br><span class="line">       &lt;article class=&quot;white-panel&quot;&gt;</span><br><span class="line">           &lt;img src=&quot;images/P_005.jpg&quot; class=&quot;thumb&quot;&gt;</span><br><span class="line">           &lt;h1&gt;&lt;a href=&quot;#&quot;&gt;我是轮播图片1&lt;/a&gt;&lt;/h1&gt;</span><br><span class="line">           &lt;p&gt;里面很精彩哦&lt;/p&gt;</span><br><span class="line">       &lt;/article&gt;</span><br><span class="line">       &lt;article class=&quot;white-panel&quot;&gt;</span><br><span class="line">           &lt;img src=&quot;images/P_006.jpg&quot; class=&quot;thumb&quot;&gt;</span><br><span class="line">           &lt;h1&gt;&lt;a href=&quot;#&quot;&gt;我是轮播图片1&lt;/a&gt;&lt;/h1&gt;</span><br><span class="line">           &lt;p&gt;里面很精彩哦&lt;/p&gt;</span><br><span class="line">       &lt;/article&gt;</span><br><span class="line">       &lt;article class=&quot;white-panel&quot;&gt;</span><br><span class="line">           &lt;img src=&quot;images/P_007.jpg&quot; class=&quot;thumb&quot;&gt;</span><br><span class="line">           &lt;h1&gt;&lt;a href=&quot;#&quot;&gt;我是轮播图片1&lt;/a&gt;&lt;/h1&gt;</span><br><span class="line">           &lt;p&gt;里面很精彩哦&lt;/p&gt;</span><br><span class="line">       &lt;/article&gt;</span><br><span class="line">   &lt;/section&gt;</span><br></pre></td></tr></table></figure>

<p>总结：jQuery插件就是引入别人写好的：html 、css、js  （有时也可以只引入一部分，读懂后也可以修改部分内容）</p>
<h3 id="1-4-2-图片懒加载插件"><a href="#1-4-2-图片懒加载插件" class="headerlink" title="1.4.2. 图片懒加载插件"></a>1.4.2. 图片懒加载插件</h3><p>​    图片的懒加载就是：当页面滑动到有图片的位置，图片才进行加载，用以提升页面打开的速度及用户体验。（下载略）</p>
<p><strong>代码演示</strong></p>
<p>​    懒加载只需引入html 和 js操作 即可，此插件不涉及css。</p>
<ul>
<li>1.引入js</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;js/EasyLazyload.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   	<span class="title function_">lazyLoadInit</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   		<span class="attr">showTime</span>: <span class="number">1100</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   		<span class="attr">onLoadBackEnd</span>: <span class="keyword">function</span>(<span class="params">i, e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;onLoadBackEnd:&quot;</span> + i);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   		&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   		<span class="attr">onLoadBackStart</span>: <span class="keyword">function</span>(<span class="params">i, e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;onLoadBackStart:&quot;</span> + i);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   		&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> 	&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>2.引入html</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;img data-lazy-src=<span class="string">&quot;upload/floor-1-3.png&quot;</span> alt=<span class="string">&quot;&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<h3 id="1-4-3-全屏滚动插件"><a href="#1-4-3-全屏滚动插件" class="headerlink" title="1.4.3. 全屏滚动插件"></a>1.4.3. 全屏滚动插件</h3><p>​    全屏滚动插件比较大，所以，一般大型插件都会有帮助文档，或者网站。全屏滚动插件介绍比较详细的网站为：</p>
<p><a href="http://www.dowebok.com/demo/2014/77/">http://www.dowebok.com/demo/2014/77/</a></p>
<p><strong>代码演示</strong></p>
<p>​    全屏滚动因为有多重形式，所以不一样的风格html和css也不一样，但是 js 变化不大。所以下面只演示js的引入，html和css引入根据自己实际</p>
<p>项目需要使用哪种风格引入对应的HTML和CSS。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;js/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/fullpage.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  	$(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  		$(<span class="string">&#x27;#dowebok&#x27;</span>).<span class="title function_">fullpage</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    		<span class="attr">sectionsColor</span>: [<span class="string">&#x27;pink&#x27;</span>, <span class="string">&#x27;#4BBFC3&#x27;</span>, <span class="string">&#x27;#7BAABE&#x27;</span>, <span class="string">&#x27;#f90&#x27;</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    		<span class="attr">navigation</span>: <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  		&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>注意：实际开发，一般复制文件，然后在文件中进行修改和添加功能。</p>
<h3 id="1-4-4-bootstrap组件"><a href="#1-4-4-bootstrap组件" class="headerlink" title="1.4.4. bootstrap组件"></a>1.4.4. bootstrap组件</h3><p>​    Bootstrap是 Twitter 公司设计的基于HTML、CSS、JavaScript开发的简洁、直观、强悍的前端开发框架，他依靠jQuery实现，且支持响应式</p>
<p>布局，使得 Web 开发更加方便快捷。</p>
<p>​    <strong>凡是在软件开发中用到了软件的复用，被复用的部分都可以称为组件，凡是在应用程序中已经预留接口的组件就是插件</strong>。Bootstrap组件使</p>
<p>用非常方便:  1.引入bootstrap相关css和js        2.去官网复制html</p>
<p><strong>代码演示</strong></p>
<ol>
<li>引入bootstrap相关css和js</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;bootstrap/css/bootstrap.min.css&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;bootstrap/js/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;bootstrap/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>去官网复制html的功能模块</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">   &lt;div <span class="keyword">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">       &lt;!-- <span class="title class_">Single</span> button --&gt;</span><br><span class="line">       <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">           <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default dropdown-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span> <span class="attr">aria-haspopup</span>=<span class="string">&quot;true&quot;</span> <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     		Action <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   		<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">           <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">               <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">               <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Another action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">               <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">               <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;separator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">               <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">           <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="1-4-5-bootstrap插件（JS）"><a href="#1-4-5-bootstrap插件（JS）" class="headerlink" title="1.4.5. bootstrap插件（JS）"></a>1.4.5. bootstrap插件（JS）</h3><p>​    bootstrap中的js插件其实也是组件的一部分，只不过是需要js调用功能的组件，所以一般bootstrap的js插件一般会伴随着js代码（有的也可以</p>
<p>省略js，用属性实现）。</p>
<p>​    步骤： 1.引入bootstrap相关css和js        2.去官网复制html        3.复制js代码，启动js插件。</p>
<p><strong>代码演示</strong></p>
<ol>
<li>引入bootstrap相关css和js</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;bootstrap/css/bootstrap.min.css&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;bootstrap/js/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;bootstrap/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>去官网复制html的功能模块</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 模态框 --&gt;</span><br><span class="line">&lt;!-- <span class="title class_">Large</span> modal --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;.bs-example-modal-lg&quot;</span>&gt;</span>Large modal<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal fade bs-example-modal-lg&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">role</span>=<span class="string">&quot;dialog&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;myLargeModalLabel&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog modal-lg&quot;</span> <span class="attr">role</span>=<span class="string">&quot;document&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            里面就是模态框</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>复制js代码，启动js插件。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	<span class="comment">// 当我们点击了自己定义的按钮，就弹出模态框</span></span><br><span class="line">	$(<span class="string">&quot;.myBtn&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="comment">// alert(11);</span></span><br><span class="line">		$(<span class="string">&#x27;#btn&#x27;</span>).<span class="title function_">modal</span>()</span><br><span class="line">	&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>




<h2 id="1-8-总结"><a href="#1-8-总结" class="headerlink" title="1.8. 总结"></a>1.8. 总结</h2><p><img src="/images/%E6%80%BB%E7%BB%93.png" alt="总结"></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery快速入门笔记（八）</title>
    <url>/2022/04/03/Js%E4%B9%8BjQuery%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>目标：</p>
<p>能够操作  jQuery 属性<br>能够操作  jQuery 元素<br>能够操作  jQuery 元素尺寸、位置</p>
</blockquote>
<h2 id="1-1-jQuery-属性操作"><a href="#1-1-jQuery-属性操作" class="headerlink" title="1.1. jQuery 属性操作"></a>1.1. jQuery 属性操作</h2><p>​    jQuery 常用属性操作有三种：prop() &#x2F; attr() &#x2F; data() ;</p>
<h3 id="1-1-1-元素固有属性值-prop"><a href="#1-1-1-元素固有属性值-prop" class="headerlink" title="1.1.1 元素固有属性值 prop()"></a>1.1.1 元素固有属性值 prop()</h3><p>​    所谓元素固有属性就是元素本身自带的属性，比如 <a> 元素里面的 href ，比如 <input> 元素里面的 type。 </p>
<p><strong>语法</strong></p>
<p><img src="/images1/prop.png" alt="prop"></p>
<p>​    注意：prop() 除了普通属性操作，更适合操作表单属性：disabled &#x2F; checked &#x2F; selected 等。</p>
<h3 id="1-1-2-元素自定义属性值-attr"><a href="#1-1-2-元素自定义属性值-attr" class="headerlink" title="1.1.2 元素自定义属性值 attr()"></a>1.1.2 元素自定义属性值 attr()</h3><p>​    用户自己给元素添加的属性，我们称为自定义属性。 比如给 div 添加 index &#x3D;“1”。 </p>
<p><strong>语法</strong></p>
<p><img src="/images1/attr.png" alt="attr"></p>
<p>​    注意：attr() 除了普通属性操作，更适合操作自定义属性。（该方法也可以获取 H5 自定义属性）</p>
<h3 id="1-1-3-数据缓存-data"><a href="#1-1-3-数据缓存-data" class="headerlink" title="1.1.3 数据缓存 data()"></a>1.1.3 数据缓存 data()</h3><p>​    data() 方法可以在指定的元素上存取数据，并不会修改 DOM 元素结构。一旦页面刷新，之前存放的数据都将被移除。 </p>
<p><strong>语法</strong></p>
<p><img src="/images1/data.png" alt="data"></p>
<p>​    注意：同时，还可以读取 HTML5 自定义属性  data-index ，得到的是数字型。</p>
<p><strong>演示代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.itcast.cn&quot;</span> <span class="attr">title</span>=<span class="string">&quot;都挺好&quot;</span>&gt;</span>都挺好<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">checked</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-index</span>=<span class="string">&quot;2&quot;</span>&gt;</span>我是div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>123<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//1. element.prop(&quot;属性名&quot;) 获取元素固有的属性值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;a&quot;</span>).<span class="title function_">prop</span>(<span class="string">&quot;href&quot;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;a&quot;</span>).<span class="title function_">prop</span>(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;我们都挺好&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;input&quot;</span>).<span class="title function_">change</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="variable language_">this</span>).<span class="title function_">prop</span>(<span class="string">&quot;checked&quot;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// console.log($(&quot;div&quot;).prop(&quot;index&quot;));</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 2. 元素的自定义属性 我们通过 attr()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;index&quot;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;div&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;index&quot;</span>, <span class="number">4</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;data-index&quot;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 3. 数据缓存 data() 这个里面的数据是存放在元素的内存里面</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;span&quot;</span>).<span class="title function_">data</span>(<span class="string">&quot;uname&quot;</span>, <span class="string">&quot;andy&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;span&quot;</span>).<span class="title function_">data</span>(<span class="string">&quot;uname&quot;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 这个方法获取data-index h5自定义属性 第一个 不用写data-  而且返回的是数字型</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>).<span class="title function_">data</span>(<span class="string">&quot;index&quot;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="1-2-jQuery-文本属性值"><a href="#1-2-jQuery-文本属性值" class="headerlink" title="1.2. jQuery 文本属性值"></a>1.2. jQuery 文本属性值</h2><p>​    jQuery的文本属性值常见操作有三种：html() &#x2F; text() &#x2F; val() ; 分别对应JS中的 innerHTML 、innerText 和 value 属性。</p>
<h3 id="1-2-1-jQuery内容文本值"><a href="#1-2-1-jQuery内容文本值" class="headerlink" title="1.2.1 jQuery内容文本值"></a>1.2.1 jQuery内容文本值</h3><p>​    常见操作有三种：html() &#x2F; text() &#x2F; val() ; 分别对应JS中的 innerHTML 、innerText 和 value 属性，主要针对元素的内容还有表单的值操作。</p>
<p><strong>语法</strong></p>
<p><img src="/images1/html.png" alt="html"></p>
<p>​    注意：html() 可识别标签，text() 不识别标签。</p>
<p><strong>演示代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;请输入内容&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 获取设置元素内容 html()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>).<span class="title function_">html</span>());</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// $(&quot;div&quot;).html(&quot;123&quot;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. 获取设置元素文本内容 text()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>).<span class="title function_">text</span>());</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="string">&quot;div&quot;</span>).<span class="title function_">text</span>(<span class="string">&quot;123&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 3. 获取设置表单值 val()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;input&quot;</span>).<span class="title function_">val</span>());</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="string">&quot;input&quot;</span>).<span class="title function_">val</span>(<span class="string">&quot;123&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<h2 id="1-3-jQuery-元素操作"><a href="#1-3-jQuery-元素操作" class="headerlink" title="1.3. jQuery 元素操作"></a>1.3. jQuery 元素操作</h2><p>​    jQuery 元素操作主要讲的是用jQuery方法，操作标签的遍历、创建、添加、删除等操作。</p>
<h3 id="1-3-1-遍历元素"><a href="#1-3-1-遍历元素" class="headerlink" title="1.3.1. 遍历元素"></a>1.3.1. 遍历元素</h3><p>​    jQuery 隐式迭代是对同一类元素做了同样的操作。 如果想要给同一类元素做不同操作，就需要用到遍历。</p>
<p><strong>语法1</strong></p>
<p><img src="/images1/each1.png" alt="each1"></p>
<p>​    注意：此方法用于遍历 jQuery 对象中的每一项，回调函数中元素为 DOM 对象，想要使用 jQuery 方法需要转换。</p>
<p><strong>语法2</strong></p>
<p><img src="/images1/each2.png" alt="each2"></p>
<p>​    注意：此方法用于遍历 jQuery 对象中的每一项，回调函数中元素为 DOM 对象，想要使用 jQuery 方法需要转换。</p>
<p><strong>演示代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 如果针对于同一类元素做不同操作，需要用到遍历元素（类似for，但是比for强大）</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> sum = <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> arr = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 1. each() 方法遍历元素 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;div&quot;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params">i, domEle</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 回调函数第一个参数一定是索引号  可以自己指定索引号号名称</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// console.log(i);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 回调函数第二个参数一定是 dom 元素对象，也是自己命名</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// console.log(domEle);  // 使用jQuery方法需要转换 $(domEle)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(domEle).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>, arr[i]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                sum += <span class="built_in">parseInt</span>($(domEle).<span class="title function_">text</span>());</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 2. $.each() 方法遍历元素 主要用于遍历数据，处理数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// $.each($(&quot;div&quot;), function(i, ele) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     console.log(i);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     console.log(ele);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// $.each(arr, function(i, ele) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     console.log(i);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     console.log(ele);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $.<span class="title function_">each</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">name</span>: <span class="string">&quot;andy&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">age</span>: <span class="number">18</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;, <span class="keyword">function</span>(<span class="params">i, ele</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// 输出的是 name age 属性名</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>(ele); <span class="comment">// 输出的是 andy  18 属性值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-3-创建、添加、删除"><a href="#1-3-3-创建、添加、删除" class="headerlink" title="1.3.3. 创建、添加、删除"></a>1.3.3. 创建、添加、删除</h3><p>​    jQuery方法操作元素的创建、添加、删除方法很多，则重点使用部分，如下：</p>
<p><strong>语法总和</strong></p>
<p><img src="/images1/create.png" alt="create"></p>
<p><img src="/images1/append1.png" alt="append1"></p>
<p><img src="/images1/append2.png" alt="append2"></p>
<p><img src="/images1/remove.png" alt="remove"></p>
<p>​    注意：以上只是元素的创建、添加、删除方法的常用方法，其他方法请参详API。</p>
<p><strong>案例代码</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>原先的li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span>&gt;</span>我是原先的div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 1. 创建元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> li = $(<span class="string">&quot;&lt;li&gt;我是后来创建的li&lt;/li&gt;&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 2. 添加元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 	2.1 内部添加</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// $(&quot;ul&quot;).append(li);  内部添加并且放到内容的最后面 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;ul&quot;</span>).<span class="title function_">prepend</span>(li); <span class="comment">// 内部添加并且放到内容的最前面</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//  2.2 外部添加</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> div = $(<span class="string">&quot;&lt;div&gt;我是后妈生的&lt;/div&gt;&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// $(&quot;.test&quot;).after(div);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;.test&quot;</span>).<span class="title function_">before</span>(div);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 3. 删除元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// $(&quot;ul&quot;).remove(); 可以删除匹配的元素 自杀</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// $(&quot;ul&quot;).empty(); // 可以删除匹配的元素里面的子节点 孩子</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;ul&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot;&quot;</span>); <span class="comment">// 可以删除匹配的元素里面的子节点 孩子</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>



<h2 id="1-4-jQuery-尺寸、位置操作"><a href="#1-4-jQuery-尺寸、位置操作" class="headerlink" title="1.4.  jQuery 尺寸、位置操作"></a>1.4.  jQuery 尺寸、位置操作</h2><p>​    jQuery中分别为我们提供了两套快速获取和设置元素尺寸和位置的API，方便易用，内容如下。</p>
<h3 id="1-4-1-jQuery-尺寸操作"><a href="#1-4-1-jQuery-尺寸操作" class="headerlink" title="1.4.1.  jQuery 尺寸操作"></a>1.4.1.  jQuery 尺寸操作</h3><p>​     jQuery 尺寸操作包括元素宽高的获取和设置，且不一样的API对应不一样的盒子模型。</p>
<p><strong>语法</strong></p>
<p><img src="/images1/size.png" alt="size"></p>
<p><strong>代码演示</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 1. width() / height() 获取设置元素 width和height大小 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>).<span class="title function_">width</span>());</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// $(&quot;div&quot;).width(300);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 2. innerWidth() / innerHeight()  获取设置元素 width和height + padding 大小 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>).<span class="title function_">innerWidth</span>());</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 3. outerWidth()  / outerHeight()  获取设置元素 width和height + padding + border 大小 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>).<span class="title function_">outerWidth</span>());</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 4. outerWidth(true) / outerHeight(true) 获取设置 width和height + padding + border + margin</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>).<span class="title function_">outerWidth</span>(<span class="literal">true</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p>​    注意：有了这套 API 我们将可以快速获取和子的宽高，至于其他属性想要获取和设置，还要使用 css() 等方法配合。</p>
<h3 id="1-4-2-jQuery-位置操作"><a href="#1-4-2-jQuery-位置操作" class="headerlink" title="1.4.2. jQuery 位置操作"></a>1.4.2. jQuery 位置操作</h3><p>​    jQuery的位置操作主要有三个： offset()、position()、scrollTop()&#x2F;scrollLeft() , 具体介绍如下: </p>
<p><strong>语法</strong></p>
<p><img src="/images1/offset.png" alt="offset"></p>
<p><img src="/images1/position.png" alt="position"></p>
<p><img src="/images1/scroll.png" alt="scroll"></p>
<p><strong>代码演示</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        </span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;back&quot;</span>&gt;</span>返回顶部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">   </span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 1. 获取设置距离文档的位置（偏移） offset</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;.son&quot;</span>).<span class="title function_">offset</span>());</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;.son&quot;</span>).<span class="title function_">offset</span>().<span class="property">top</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// $(&quot;.son&quot;).offset(&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     top: 200,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     left: 200</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 2. 获取距离带有定位父级位置（偏移） position   如果没有带有定位的父级，则以文档为准</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 这个方法只能获取不能设置偏移</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;.son&quot;</span>).<span class="title function_">position</span>());</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// $(&quot;.son&quot;).position(&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     top: 200,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     left: 200</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      		<span class="comment">// 3. 被卷去的头部</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      		$(<span class="variable language_">document</span>).<span class="title function_">scrollTop</span>(<span class="number">100</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 被卷去的头部 scrollTop()  / 被卷去的左侧 scrollLeft()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 页面滚动事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> boxTop = $(<span class="string">&quot;.container&quot;</span>).<span class="title function_">offset</span>().<span class="property">top</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="variable language_">window</span>).<span class="title function_">scroll</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// console.log(11);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="variable language_">document</span>).<span class="title function_">scrollTop</span>());</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">if</span> ($(<span class="variable language_">document</span>).<span class="title function_">scrollTop</span>() &gt;= boxTop) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    $(<span class="string">&quot;.back&quot;</span>).<span class="title function_">fadeIn</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    $(<span class="string">&quot;.back&quot;</span>).<span class="title function_">fadeOut</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 返回顶部</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;.back&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// $(document).scrollTop(0);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="string">&quot;body, html&quot;</span>).<span class="title function_">stop</span>().<span class="title function_">animate</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">scrollTop</span>: <span class="number">0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// $(document).stop().animate(&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">//     scrollTop: 0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// &#125;); 不能是文档而是 html和body元素做动画</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>




<h2 id="1-5总结"><a href="#1-5总结" class="headerlink" title="1.5总结"></a>1.5总结</h2><p><img src="/images1/%E6%80%BB%E7%BB%93.png" alt="总结"></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript之构造函数和原型笔记（十一）</title>
    <url>/2022/04/03/Js%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h2 id="1-构造函数和原型"><a href="#1-构造函数和原型" class="headerlink" title="1.构造函数和原型"></a>1.构造函数和原型</h2><h3 id="1-1对象的三种创建方式–复习"><a href="#1-1对象的三种创建方式–复习" class="headerlink" title="1.1对象的三种创建方式–复习"></a>1.1对象的三种创建方式–复习</h3><ol>
<li><p>字面量方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>new关键字</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p>构造函数方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;zs&#x27;</span>,<span class="number">12</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="1-2静态成员和实例成员"><a href="#1-2静态成员和实例成员" class="headerlink" title="1.2静态成员和实例成员"></a>1.2静态成员和实例成员</h3><h4 id="1-2-1实例成员"><a href="#1-2-1实例成员" class="headerlink" title="1.2.1实例成员"></a>1.2.1实例成员</h4><p>实例成员就是构造函数内部通过this添加的成员 如下列代码中uname age sing 就是实例成员,实例成员只能通过实例化的对象来访问</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname, age</span>) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property">uname</span>);<span class="comment">//实例成员只能通过实例化的对象来访问</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-2静态成员"><a href="#1-2-2静态成员" class="headerlink" title="1.2.2静态成员"></a>1.2.2静态成员</h4><p>静态成员 在构造函数本身上添加的成员  如下列代码中 sex 就是静态成员,静态成员只能通过构造函数来访问</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname, age</span>) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Star</span>.<span class="property">sex</span> = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Star</span>.<span class="property">sex</span>);<span class="comment">//静态成员只能通过构造函数来访问</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3构造函数的问题"><a href="#1-3构造函数的问题" class="headerlink" title="1.3构造函数的问题"></a>1.3构造函数的问题</h3><p>构造函数方法很好用，但是存在浪费内存的问题。</p>
<p><img src="/images1/img1.png"></p>
<h3 id="1-4构造函数原型prototype"><a href="#1-4构造函数原型prototype" class="headerlink" title="1.4构造函数原型prototype"></a>1.4构造函数原型prototype</h3><p>构造函数通过原型分配的函数是所有对象所共享的。</p>
<p>JavaScript 规定，每一个构造函数都有一个prototype 属性，指向另一个对象。注意这个prototype就是一个对象，这个对象的所有属性和方法，都会被构造函数所拥有。</p>
<p>我们可以把那些不变的方法，直接定义在 prototype 对象上，这样所有对象的实例就可以共享这些方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="keyword">var</span> zxy = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;张学友&#x27;</span>, <span class="number">19</span>);</span><br><span class="line">ldh.<span class="title function_">sing</span>();<span class="comment">//我会唱歌</span></span><br><span class="line">zxy.<span class="title function_">sing</span>();<span class="comment">//我会唱歌</span></span><br></pre></td></tr></table></figure>

<p><img src="/images1/img7.png"></p>
<h3 id="1-5对象原型"><a href="#1-5对象原型" class="headerlink" title="1.5对象原型"></a>1.5对象原型</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">对象都会有一个属性 __proto__ 指向构造函数的 prototype 原型对象，之所以我们对象可以使用构造函数 prototype 原型对象的属性和方法，就是因为对象有 __proto__ 原型的存在。</span><br><span class="line">__proto__对象原型和原型对象 prototype 是等价的</span><br><span class="line">__proto__对象原型的意义就在于为对象的查找机制提供一个方向，或者说一条路线，但是它是一个非标准属性，因此实际开发中，不可以使用这个属性，它只是内部指向原型对象 prototype</span><br></pre></td></tr></table></figure>

<p><img src="/images1/img2.png"></p>
<p><img src="/images1/img3.png"></p>
<h3 id="1-6constructor构造函数"><a href="#1-6constructor构造函数" class="headerlink" title="1.6constructor构造函数"></a>1.6constructor构造函数</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">对象原型（ __proto__）和构造函数（prototype）原型对象里面都有一个属性 constructor 属性 ，constructor 我们称为构造函数，因为它指回构造函数本身。</span><br><span class="line">constructor 主要用于记录该对象引用于哪个构造函数，它可以让原型对象重新指向原来的构造函数。</span><br><span class="line">一般情况下，对象的方法都在构造函数的原型对象中设置。如果有多个对象的方法，我们可以给原型对象采取对象形式赋值，但是这样就会覆盖构造函数原型对象原来的内容，这样修改后的原型对象 constructor  就不再指向当前构造函数了。此时，我们可以在修改后的原型对象中，添加一个 constructor 指向原来的构造函数。</span><br></pre></td></tr></table></figure>

<p>如果我们修改了原来的原型对象,给原型对象赋值的是一个对象,则必须手动的利用constructor指回原来的构造函数如:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname, age</span>) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 很多情况下,我们需要手动的利用constructor 这个属性指回 原来的构造函数</span></span><br><span class="line"> <span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line"> <span class="comment">// 如果我们修改了原来的原型对象,给原型对象赋值的是一个对象,则必须手动的利用constructor指回原来的构造函数</span></span><br><span class="line">   <span class="attr">constructor</span>: <span class="title class_">Star</span>, <span class="comment">// 手动设置指回原来的构造函数</span></span><br><span class="line">   <span class="attr">sing</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>);</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">movie</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会演电影&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> zxy = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;张学友&#x27;</span>, <span class="number">19</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zxy)</span><br></pre></td></tr></table></figure>

<p>以上代码运行结果,设置constructor属性如图:</p>
<p><img src="/images1/img8.png">如果未设置constructor属性,如图:</p>
<p><img src="/images1/img9.png"></p>
<h3 id="1-7原型链"><a href="#1-7原型链" class="headerlink" title="1.7原型链"></a>1.7原型链</h3><p>​    每一个实例对象又有一个__proto__属性，指向的构造函数的原型对象，构造函数的原型对象也是一个对象，也有__proto__属性，这样一层一层往上找就形成了原型链。</p>
<p><img src="/images1/img5.png"></p>
<h3 id="1-8构造函数实例和原型对象三角关系"><a href="#1-8构造函数实例和原型对象三角关系" class="headerlink" title="1.8构造函数实例和原型对象三角关系"></a>1.8构造函数实例和原型对象三角关系</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>构造函数的prototype属性指向了构造函数原型对象</span><br><span class="line"><span class="number">2.</span>实例对象是由构造函数创建的,实例对象的__proto__属性指向了构造函数的原型对象</span><br><span class="line"><span class="number">3.</span>构造函数的原型对象的constructor属性指向了构造函数,实例对象的原型的constructor属性也指向了构造函数</span><br></pre></td></tr></table></figure>

<p><img src="/images1/img4.png"></p>
<h3 id="1-9原型链和成员的查找机制"><a href="#1-9原型链和成员的查找机制" class="headerlink" title="1.9原型链和成员的查找机制"></a>1.9原型链和成员的查找机制</h3><p>任何对象都有原型对象,也就是prototype属性,任何原型对象也是一个对象,该对象就有__proto__属性,这样一层一层往上找,就形成了一条链,我们称此为原型链;</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性。</span><br><span class="line">如果没有就查找它的原型（也就是 __proto__指向的 prototype 原型对象）。</span><br><span class="line">如果还没有就查找原型对象的原型（Object的原型对象）。</span><br><span class="line">依此类推一直找到 Object 为止（null）。</span><br><span class="line">__proto__对象原型的意义就在于为对象成员查找机制提供一个方向，或者说一条路线。</span><br></pre></td></tr></table></figure>

<h3 id="1-10原型对象中this指向"><a href="#1-10原型对象中this指向" class="headerlink" title="1.10原型对象中this指向"></a>1.10原型对象中this指向</h3><p>构造函数中的this和原型对象的this,都指向我们new出来的实例对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> that;</span><br><span class="line"><span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>);</span><br><span class="line">    that = <span class="variable language_">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="comment">// 1. 在构造函数中,里面this指向的是对象实例 ldh</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(that === ldh);<span class="comment">//true</span></span><br><span class="line"><span class="comment">// 2.原型对象函数里面的this 指向的是 实例对象 ldh</span></span><br></pre></td></tr></table></figure>

<p><img src="/images1/img6.png"></p>
<h3 id="1-11通过原型为数组扩展内置方法"><a href="#1-11通过原型为数组扩展内置方法" class="headerlink" title="1.11通过原型为数组扩展内置方法"></a>1.11通过原型为数组扩展内置方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sum</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  sum += <span class="variable language_">this</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//此时数组对象中已经存在sum()方法了  可以始终 数组.sum()进行数据的求</span></span><br></pre></td></tr></table></figure>

<h2 id="2-继承"><a href="#2-继承" class="headerlink" title="2.继承"></a>2.继承</h2><h3 id="2-1call"><a href="#2-1call" class="headerlink" title="2.1call()"></a>2.1call()</h3><ul>
<li>call()可以调用函数</li>
<li>call()可以修改this的指向,使用call()的时候 参数一是修改后的this指向,参数2,参数3..使用逗号隔开连接</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="keyword">var</span> o = &#123;</span><br><span class="line">  	<span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line">  fn.<span class="title function_">call</span>(o, <span class="number">1</span>, <span class="number">2</span>);<span class="comment">//调用了函数此时的this指向了对象o,</span></span><br></pre></td></tr></table></figure>

<p><img src="/images1/img10.png"></p>
<h3 id="2-2子构造函数继承父构造函数中的属性"><a href="#2-2子构造函数继承父构造函数中的属性" class="headerlink" title="2.2子构造函数继承父构造函数中的属性"></a>2.2子构造函数继承父构造函数中的属性</h3><ol>
<li>先定义一个父构造函数</li>
<li>再定义一个子构造函数</li>
<li>子构造函数继承父构造函数的属性(使用call方法)</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 1. 父构造函数</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">uname, age</span>) &#123;</span><br><span class="line">   <span class="comment">// this 指向父构造函数的对象实例</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">// 2 .子构造函数 </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">uname, age, score</span>) &#123;</span><br><span class="line">  <span class="comment">// this 指向子构造函数的对象实例</span></span><br><span class="line">  <span class="number">3.</span>使用call方式实现子继承父的属性</span><br><span class="line">  <span class="title class_">Father</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, uname, age);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">score</span> = score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>, <span class="number">100</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(son);</span><br></pre></td></tr></table></figure>

<p><img src="/images1/img11.png"></p>
<h3 id="2-3借用原型对象继承方法"><a href="#2-3借用原型对象继承方法" class="headerlink" title="2.3借用原型对象继承方法"></a>2.3借用原型对象继承方法</h3><ol>
<li>先定义一个父构造函数</li>
<li>再定义一个子构造函数</li>
<li>子构造函数继承父构造函数的属性(使用call方法)</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 父构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">uname, age</span>) &#123;</span><br><span class="line">  <span class="comment">// this 指向父构造函数的对象实例</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">money</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">100000</span>);</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="comment">// 2 .子构造函数 </span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">uname, age, score</span>) &#123;</span><br><span class="line">      <span class="comment">// this 指向子构造函数的对象实例</span></span><br><span class="line">      <span class="title class_">Father</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, uname, age);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">score</span> = score;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// Son.prototype = Father.prototype;  这样直接赋值会有问题,如果修改了子原型对象,父原型对象也会跟着一起变化</span></span><br><span class="line">  <span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Father</span>();</span><br><span class="line">  <span class="comment">// 如果利用对象的形式修改了原型对象,别忘了利用constructor 指回原来的构造函数</span></span><br><span class="line">  <span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Son</span>;</span><br><span class="line">  <span class="comment">// 这个是子构造函数专门的方法</span></span><br><span class="line">  <span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">exam</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;孩子要考试&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>, <span class="number">100</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(son);</span><br></pre></td></tr></table></figure>

<p>如上代码结果如图:</p>
<p><img src="/images1/img12.png"></p>
<h2 id="3-ES5新增方法"><a href="#3-ES5新增方法" class="headerlink" title="3.ES5新增方法"></a>3.ES5新增方法</h2><h3 id="3-1数组方法forEach遍历数组"><a href="#3-1数组方法forEach遍历数组" class="headerlink" title="3.1数组方法forEach遍历数组"></a>3.1数组方法forEach遍历数组</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">value, index, array</span>) &#123;</span><br><span class="line">      <span class="comment">//参数一是:数组元素</span></span><br><span class="line">      <span class="comment">//参数二是:数组元素的索引</span></span><br><span class="line">      <span class="comment">//参数三是:当前的数组</span></span><br><span class="line">&#125;)</span><br><span class="line"> <span class="comment">//相当于数组遍历的 for循环 没有返回值</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2数组方法filter过滤数组"><a href="#3-2数组方法filter过滤数组" class="headerlink" title="3.2数组方法filter过滤数组"></a>3.2数组方法filter过滤数组</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">12</span>, <span class="number">66</span>, <span class="number">4</span>, <span class="number">88</span>, <span class="number">3</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">value, index,array</span>) &#123;</span><br><span class="line">	 <span class="comment">//参数一是:数组元素</span></span><br><span class="line">   <span class="comment">//参数二是:数组元素的索引</span></span><br><span class="line">   <span class="comment">//参数三是:当前的数组</span></span><br><span class="line">   <span class="keyword">return</span> value &gt;= <span class="number">20</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr);<span class="comment">//[66,88] //返回值是一个新数组</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3数组方法some"><a href="#3-3数组方法some" class="headerlink" title="3.3数组方法some"></a>3.3数组方法some</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">some 查找数组中是否有满足条件的元素 </span><br><span class="line"> <span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">30</span>, <span class="number">4</span>];</span><br><span class="line"> <span class="keyword">var</span> flag = arr.<span class="title function_">some</span>(<span class="keyword">function</span>(<span class="params">value,index,array</span>) &#123;</span><br><span class="line">    <span class="comment">//参数一是:数组元素</span></span><br><span class="line">     <span class="comment">//参数二是:数组元素的索引</span></span><br><span class="line">     <span class="comment">//参数三是:当前的数组</span></span><br><span class="line">     <span class="keyword">return</span> value &lt; <span class="number">3</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(flag);<span class="comment">//false返回值是布尔值,只要查找到满足条件的一个元素就立马终止循环</span></span><br></pre></td></tr></table></figure>

<h3 id="3-4筛选商品案例"><a href="#3-4筛选商品案例" class="headerlink" title="3.4筛选商品案例"></a>3.4筛选商品案例</h3><ol>
<li><p>定义数组对象数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [&#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">pname</span>: <span class="string">&#x27;小米&#x27;</span>,</span><br><span class="line">            <span class="attr">price</span>: <span class="number">3999</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">pname</span>: <span class="string">&#x27;oppo&#x27;</span>,</span><br><span class="line">            <span class="attr">price</span>: <span class="number">999</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">pname</span>: <span class="string">&#x27;荣耀&#x27;</span>,</span><br><span class="line">            <span class="attr">price</span>: <span class="number">1299</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="attr">pname</span>: <span class="string">&#x27;华为&#x27;</span>,</span><br><span class="line">            <span class="attr">price</span>: <span class="number">1999</span></span><br><span class="line">        &#125;, ];</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用forEach遍历数据并渲染到页面中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> tr = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;tr&#x27;</span>);</span><br><span class="line">  tr.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;td&gt;&#x27;</span> + value.<span class="property">id</span> + <span class="string">&#x27;&lt;/td&gt;&lt;td&gt;&#x27;</span> + value.<span class="property">pname</span> + <span class="string">&#x27;&lt;/td&gt;&lt;td&gt;&#x27;</span> + value.<span class="property">price</span> + <span class="string">&#x27;&lt;/td&gt;&#x27;</span>;</span><br><span class="line">  tbody.<span class="title function_">appendChild</span>(tr);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>根据价格筛选数据</p>
<ol>
<li><p>获取到搜索按钮并为其绑定点击事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">search_price.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用filter将用户输入的价格信息筛选出来</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">search_price.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> newDate = data.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="comment">//start.value是开始区间</span></span><br><span class="line">        <span class="comment">//end.value是结束的区间</span></span><br><span class="line">      	<span class="keyword">return</span> value.<span class="property">price</span> &gt;= start.<span class="property">value</span> &amp;&amp; value.<span class="property">price</span> &lt;= end.<span class="property">value</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(newDate);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>将筛选出来的数据重新渲染到表格中</p>
<ol>
<li><p>将渲染数据的逻辑封装到一个函数中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setDate</span>(<span class="params">mydata</span>) &#123;</span><br><span class="line">      <span class="comment">// 先清空原来tbody 里面的数据</span></span><br><span class="line">  tbody.<span class="property">innerHTML</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  mydata.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> tr = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;tr&#x27;</span>);</span><br><span class="line">    tr.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;td&gt;&#x27;</span> + value.<span class="property">id</span> + <span class="string">&#x27;&lt;/td&gt;&lt;td&gt;&#x27;</span> + value.<span class="property">pname</span> + <span class="string">&#x27;&lt;/td&gt;&lt;td&gt;&#x27;</span> + value.<span class="property">price</span> + <span class="string">&#x27;&lt;/td&gt;&#x27;</span>;</span><br><span class="line">      tbody.<span class="title function_">appendChild</span>(tr);</span><br><span class="line">  &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将筛选之后的数据重新渲染</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> search_price.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">var</span> newDate = data.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> value.<span class="property">price</span> &gt;= start.<span class="property">value</span> &amp;&amp; value.<span class="property">price</span> &lt;= end.<span class="property">value</span>;</span><br><span class="line">     &#125;);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(newDate);</span><br><span class="line">     <span class="comment">// 把筛选完之后的对象渲染到页面中</span></span><br><span class="line">     <span class="title function_">setDate</span>(newDate);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>根据商品名称筛选</p>
<ol>
<li><p>获取用户输入的商品名称</p>
</li>
<li><p>为查询按钮绑定点击事件,将输入的商品名称与这个数据进行筛选</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> search_pro.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">var</span> arr = [];</span><br><span class="line">     data.<span class="title function_">some</span>(<span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">       <span class="keyword">if</span> (value.<span class="property">pname</span> === product.<span class="property">value</span>) &#123;</span><br><span class="line">         <span class="comment">// console.log(value);</span></span><br><span class="line">         arr.<span class="title function_">push</span>(value);</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// return 后面必须写true  </span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">     <span class="comment">// 把拿到的数据渲染到页面中</span></span><br><span class="line">     <span class="title function_">setDate</span>(arr);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="3-5some和forEach区别"><a href="#3-5some和forEach区别" class="headerlink" title="3.5some和forEach区别"></a>3.5some和forEach区别</h3><ul>
<li>如果查询数组中唯一的元素, 用some方法更合适,在some 里面 遇到 return true 就是终止遍历 迭代效率更高</li>
<li>在forEach 里面 return 不会终止迭代</li>
</ul>
<h3 id="3-6trim方法去除字符串两端的空格"><a href="#3-6trim方法去除字符串两端的空格" class="headerlink" title="3.6trim方法去除字符串两端的空格"></a>3.6trim方法去除字符串两端的空格</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;   hello   &#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">trim</span>()）  <span class="comment">//hello 去除两端空格</span></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">&#x27;   he l l o   &#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">trim</span>()）  <span class="comment">//he l l o  去除两端空格</span></span><br></pre></td></tr></table></figure>

<h3 id="3-7获取对象的属性名"><a href="#3-7获取对象的属性名" class="headerlink" title="3.7获取对象的属性名"></a>3.7获取对象的属性名</h3><p>Object.keys(对象) 获取到当前对象中的属性名 ，返回值是一个数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> obj = &#123;</span><br><span class="line">     <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">     <span class="attr">pname</span>: <span class="string">&#x27;小米&#x27;</span>,</span><br><span class="line">     <span class="attr">price</span>: <span class="number">1999</span>,</span><br><span class="line">     <span class="attr">num</span>: <span class="number">2000</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> result = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)<span class="comment">//[id，pname,price,num]</span></span><br></pre></td></tr></table></figure>

<h3 id="3-8Object-defineProperty"><a href="#3-8Object-defineProperty" class="headerlink" title="3.8Object.defineProperty"></a>3.8Object.defineProperty</h3><p>Object.defineProperty设置或修改对象中的属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(对象，修改或新增的属性名，&#123;</span><br><span class="line">		<span class="attr">value</span>:修改或新增的属性的值,</span><br><span class="line">		<span class="attr">writable</span>:<span class="literal">true</span>/<span class="literal">false</span>,<span class="comment">//如果值为false 不允许修改这个属性值</span></span><br><span class="line">		<span class="attr">enumerable</span>: <span class="literal">false</span>,<span class="comment">//enumerable 如果值为false 则不允许遍历</span></span><br><span class="line">        <span class="attr">configurable</span>: <span class="literal">false</span>  <span class="comment">//configurable 如果为false 则不允许删除这个属性 属性是否可以被删除或是否可以再次修改特性</span></span><br><span class="line">&#125;)	</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript之正则表达式笔记（十三）</title>
    <url>/2022/04/03/Js%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h2 id="1-正则表达式概述"><a href="#1-正则表达式概述" class="headerlink" title="1.正则表达式概述"></a>1.正则表达式概述</h2><h3 id="1-1什么是正则表达式"><a href="#1-1什么是正则表达式" class="headerlink" title="1.1什么是正则表达式"></a>1.1什么是正则表达式</h3><p>正则表达式（ Regular Expression ）是用于匹配字符串中字符组合的模式。在JavaScript中，正则表达式也是对象。</p>
<p>正则表通常被用来检索、替换那些符合某个模式（规则）的文本，例如验证表单：用户名表单只能输入英文字母、数字或者下划线， 昵称输入框中可以输入中文(匹配)。此外，正则表达式还常用于过滤掉页面内容中的一些敏感词(替换)，或从字符串中获取我们想要的特定部分(提取)等 。</p>
<p>其他语言也会使用正则表达式，本阶段我们主要是利用JavaScript 正则表达式完成表单验证。</p>
<h3 id="1-2-正则表达式的特点"><a href="#1-2-正则表达式的特点" class="headerlink" title="1.2 正则表达式的特点"></a>1.2 正则表达式的特点</h3><ol>
<li>灵活性、逻辑性和功能性非常的强。</li>
<li>可以迅速地用极简单的方式达到字符串的复杂控制。</li>
<li>对于刚接触的人来说，比较晦涩难懂。比如：^\w+([-+.]\w+)*@\w+([-.]\w+)<em>.\w+([-.]\w+)</em>$</li>
<li>实际开发,一般都是直接复制写好的正则表达式. 但是要求会使用正则表达式并且根据实际情况修改正则表达式.   比如用户名:   &#x2F;^[a-z0-9_-]{3,16}$&#x2F;</li>
</ol>
<h2 id="2-正则表达式在js中的使用"><a href="#2-正则表达式在js中的使用" class="headerlink" title="2.正则表达式在js中的使用"></a>2.正则表达式在js中的使用</h2><h3 id="2-1正则表达式的创建"><a href="#2-1正则表达式的创建" class="headerlink" title="2.1正则表达式的创建"></a>2.1正则表达式的创建</h3><p>在 JavaScript 中，可以通过两种方式创建一个正则表达式。</p>
<p>方式一：通过调用RegExp对象的构造函数创建 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> regexp = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="regexp">/123/</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(regexp);</span><br></pre></td></tr></table></figure>

<p>方式二：利用字面量创建 正则表达式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rg = <span class="regexp">/123/</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-2测试正则表达式"><a href="#2-2测试正则表达式" class="headerlink" title="2.2测试正则表达式"></a>2.2测试正则表达式</h3><p>test() 正则对象方法，用于检测字符串是否符合该规则，该对象会返回 true 或 false，其参数是测试字符串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rg = <span class="regexp">/123/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="number">123</span>));<span class="comment">//匹配字符中是否出现123  出现结果为true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>));<span class="comment">//匹配字符中是否出现123 未出现结果为false</span></span><br></pre></td></tr></table></figure>

<p><img src="/images2/img4a.png"></p>
<h2 id="3-正则表达式中的特殊字符"><a href="#3-正则表达式中的特殊字符" class="headerlink" title="3.正则表达式中的特殊字符"></a>3.正则表达式中的特殊字符</h2><h3 id="3-1正则表达式的组成"><a href="#3-1正则表达式的组成" class="headerlink" title="3.1正则表达式的组成"></a>3.1正则表达式的组成</h3><p>一个正则表达式可以由简单的字符构成，比如 &#x2F;abc&#x2F;，也可以是简单和特殊字符的组合，比如 &#x2F;ab*c&#x2F; 。其中特殊字符也被称为元字符，在正则表达式中是具有特殊意义的专用符号，如 ^ 、$ 、+ 等。</p>
<p>特殊字符非常多，可以参考： </p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">MDN</a></p>
<p>jQuery 手册：正则表达式部分</p>
<p>[正则测试工具]( &lt;<a href="http://tool.oschina.net/regex">http://tool.oschina.net/regex</a>)</p>
<h3 id="3-2边界符"><a href="#3-2边界符" class="headerlink" title="3.2边界符"></a>3.2边界符</h3><p>正则表达式中的边界符（位置符）用来提示字符所处的位置，主要有两个字符</p>
<table>
<thead>
<tr>
<th>边界符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>^</td>
<td>表示匹配行首的文本（以谁开始）</td>
</tr>
<tr>
<td>$</td>
<td>表示匹配行尾的文本（以谁结束）</td>
</tr>
</tbody></table>
<p>如果 ^和 $ 在一起，表示必须是精确匹配。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rg = <span class="regexp">/abc/</span>; <span class="comment">// 正则表达式里面不需要加引号 不管是数字型还是字符串型</span></span><br><span class="line"><span class="comment">// /abc/ 只要包含有abc这个字符串返回的都是true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;abcd&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;aabcd&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---------------------------&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^abc/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;abcd&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aabcd&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---------------------------&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/^abc$/</span>; <span class="comment">// 精确匹配 要求必须是 abc字符串才符合规范</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;abcd&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;aabcd&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;abcabc&#x27;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3字符类"><a href="#3-3字符类" class="headerlink" title="3.3字符类"></a>3.3字符类</h3><p>字符类表示有一系列字符可供选择，只要匹配其中一个就可以了。所有可供选择的字符都放在方括号内。</p>
<h4 id="3-3-1-方括号"><a href="#3-3-1-方括号" class="headerlink" title="3.3.1 [] 方括号"></a>3.3.1 [] 方括号</h4><p>表示有一系列字符可供选择，只要匹配其中一个就可以了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rg = <span class="regexp">/[abc]/</span>; <span class="comment">// 只要包含有a 或者 包含有b 或者包含有c 都返回为true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;andy&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;baby&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;color&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;red&#x27;</span>));<span class="comment">//false</span></span><br><span class="line"><span class="keyword">var</span> rg1 = <span class="regexp">/^[abc]$/</span>; <span class="comment">// 三选一 只有是a 或者是 b  或者是c 这三个字母才返回 true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg1.<span class="title function_">test</span>(<span class="string">&#x27;aa&#x27;</span>));<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg1.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg1.<span class="title function_">test</span>(<span class="string">&#x27;b&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg1.<span class="title function_">test</span>(<span class="string">&#x27;c&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg1.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>));<span class="comment">//true</span></span><br><span class="line">----------------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[a-z]$/</span> <span class="comment">//26个英文字母任何一个字母返回 true  - 表示的是a 到z 的范围  </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;z&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;A&#x27;</span>));<span class="comment">//false</span></span><br><span class="line">-----------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">//字符组合</span></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/^[a-zA-Z0-9]$/</span>; <span class="comment">// 26个英文字母(大写和小写都可以)任何一个字母返回 true  </span></span><br><span class="line">------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">//取反 方括号内部加上 ^ 表示取反，只要包含方括号内的字符，都返回 false 。</span></span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/^[^a-zA-Z0-9]$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>));<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;B&#x27;</span>));<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="number">8</span>));<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;!&#x27;</span>));<span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h4 id="3-3-2量词符"><a href="#3-3-2量词符" class="headerlink" title="3.3.2量词符"></a>3.3.2量词符</h4><p>量词符用来设定某个模式出现的次数。</p>
<table>
<thead>
<tr>
<th>量词</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>重复0次或更多次</td>
</tr>
<tr>
<td>+</td>
<td>重复1次或更多次</td>
</tr>
<tr>
<td>?</td>
<td>重复0次或1次</td>
</tr>
<tr>
<td>{n}</td>
<td>重复n次</td>
</tr>
<tr>
<td>{n,}</td>
<td>重复n次或更多次</td>
</tr>
<tr>
<td>{n,m}</td>
<td>重复n到m次</td>
</tr>
</tbody></table>
<h4 id="3-3-3用户名表单验证"><a href="#3-3-3用户名表单验证" class="headerlink" title="3.3.3用户名表单验证"></a>3.3.3用户名表单验证</h4><p>功能需求:</p>
<ol>
<li>如果用户名输入合法, 则后面提示信息为:  用户名合法,并且颜色为绿色</li>
<li>如果用户名输入不合法, 则后面提示信息为:  用户名不符合规范, 并且颜色为红色</li>
</ol>
<p><img src="/images2/img2a.png"></p>
<p><img src="/images2/img1a.png"></p>
<p>分析:</p>
<ol>
<li>用户名只能为英文字母,数字,下划线或者短横线组成, 并且用户名长度为6~16位.</li>
<li>首先准备好这种正则表达式模式&#x2F;$[a-zA-Z0-9-_]{6,16}^&#x2F;</li>
<li>当表单失去焦点就开始验证. </li>
<li>如果符合正则规范, 则让后面的span标签添加 right类.</li>
<li>如果不符合正则规范, 则让后面的span标签添加 wrong类.</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;uname&quot;</span>&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>请输入用户名<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="comment">//  量词是设定某个模式出现的次数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="keyword">var</span> reg = <span class="regexp">/^[a-zA-Z0-9_-]&#123;6,16&#125;$/</span>; <span class="comment">// 这个模式用户只能输入英文字母 数字 下划线 中划线</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="keyword">var</span> uname = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.uname&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="keyword">var</span> span = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;span&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> uname.<span class="property">onblur</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">if</span> (reg.<span class="title function_">test</span>(<span class="variable language_">this</span>.<span class="property">value</span>)) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;正确的&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   span.<span class="property">className</span> = <span class="string">&#x27;right&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   span.<span class="property">innerHTML</span> = <span class="string">&#x27;用户名格式输入正确&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;错误的&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   span.<span class="property">className</span> = <span class="string">&#x27;wrong&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   span.<span class="property">innerHTML</span> = <span class="string">&#x27;用户名格式输入不正确&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="3-3-4-括号总结"><a href="#3-3-4-括号总结" class="headerlink" title="3.3.4 括号总结"></a>3.3.4 括号总结</h4><p>1.大括号  量词符.  里面表示重复次数</p>
<p>2.中括号 字符集合。匹配方括号中的任意字符. </p>
<p>3.小括号表示优先级</p>
<p><a href="https://c.runoob.com/">正则表达式在线测试</a></p>
<h3 id="3-4预定义类"><a href="#3-4预定义类" class="headerlink" title="3.4预定义类"></a>3.4预定义类</h3><p>预定义类指的是某些常见模式的简写方式.</p>
<p><img src="/images2/img3a.png"></p>
<p><strong>案例:验证座机号码</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;$/</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\d&#123;3,4&#125;-\d&#123;7,8&#125;$/</span>;</span><br></pre></td></tr></table></figure>

<p><strong>表单验证案例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//手机号验证:/^1[3|4|5|7|8][0-9]&#123;9&#125;$/;</span></span><br><span class="line"><span class="comment">//验证通过与不通过更换元素的类名与元素中的内容</span></span><br><span class="line"> <span class="keyword">if</span> (reg.<span class="title function_">test</span>(<span class="variable language_">this</span>.<span class="property">value</span>)) &#123;</span><br><span class="line">    <span class="comment">// console.log(&#x27;正确的&#x27;);</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">nextElementSibling</span>.<span class="property">className</span> = <span class="string">&#x27;success&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">nextElementSibling</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;i class=&quot;success_icon&quot;&gt;&lt;/i&gt; 恭喜您输入正确&#x27;</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">// console.log(&#x27;不正确&#x27;);</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">nextElementSibling</span>.<span class="property">className</span> = <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">nextElementSibling</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;i class=&quot;error_icon&quot;&gt;&lt;/i&gt;格式不正确,请从新输入 &#x27;</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//QQ号验证: /^[1-9]\d&#123;4,&#125;$/; </span></span><br><span class="line"><span class="comment">//昵称验证:/^[\u4e00-\u9fa5]&#123;2,8&#125;$/</span></span><br><span class="line"><span class="comment">//验证通过与不通过更换元素的类名与元素中的内容 ,将上一步的匹配代码进行封装,多次调用即可</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">regexp</span>(<span class="params">ele, reg</span>) &#123;</span><br><span class="line">    ele.<span class="property">onblur</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (reg.<span class="title function_">test</span>(<span class="variable language_">this</span>.<span class="property">value</span>)) &#123;</span><br><span class="line">        <span class="comment">// console.log(&#x27;正确的&#x27;);</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">nextElementSibling</span>.<span class="property">className</span> = <span class="string">&#x27;success&#x27;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">nextElementSibling</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;i class=&quot;success_icon&quot;&gt;&lt;/i&gt; 恭喜您输入正确&#x27;</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="comment">// console.log(&#x27;不正确&#x27;);</span></span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">nextElementSibling</span>.<span class="property">className</span> = <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">nextElementSibling</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;i class=&quot;error_icon&quot;&gt;&lt;/i&gt; 格式不正确,请从新输入 &#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//密码验证:/^[a-zA-Z0-9_-]&#123;6,16&#125;$/</span></span><br><span class="line"><span class="comment">//再次输入密码只需匹配与上次输入的密码值 是否一致</span></span><br></pre></td></tr></table></figure>

<h3 id="3-5正则替换replace"><a href="#3-5正则替换replace" class="headerlink" title="3.5正则替换replace"></a>3.5正则替换replace</h3><p>replace() 方法可以实现替换字符串操作，用来替换的参数可以是一个字符串或是一个正则表达式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;andy和red&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> newStr = str.<span class="title function_">replace</span>(<span class="string">&#x27;andy&#x27;</span>, <span class="string">&#x27;baby&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newStr)<span class="comment">//baby和red</span></span><br><span class="line"><span class="comment">//等同于 此处的andy可以写在正则表达式内</span></span><br><span class="line"><span class="keyword">var</span> newStr2 = str.<span class="title function_">replace</span>(<span class="regexp">/andy/</span>, <span class="string">&#x27;baby&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newStr2)<span class="comment">//baby和red</span></span><br><span class="line"><span class="comment">//全部替换</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abcabc&#x27;</span></span><br><span class="line"><span class="keyword">var</span> nStr = str.<span class="title function_">replace</span>(<span class="regexp">/a/</span>,<span class="string">&#x27;哈哈&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nStr) <span class="comment">//哈哈bcabc</span></span><br><span class="line"><span class="comment">//全部替换g</span></span><br><span class="line"><span class="keyword">var</span> nStr = str.<span class="title function_">replace</span>(<span class="regexp">/a/</span>a,<span class="string">&#x27;哈哈&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nStr) <span class="comment">//哈哈bc哈哈bc</span></span><br><span class="line"><span class="comment">//忽略大小写i</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;aAbcAba&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> newStr = str.<span class="title function_">replace</span>(<span class="regexp">/a/gi</span>,<span class="string">&#x27;哈哈&#x27;</span>)<span class="comment">//&quot;哈哈哈哈bc哈哈b哈哈&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>案例:过滤敏感词汇</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;textarea name=<span class="string">&quot;&quot;</span> id=<span class="string">&quot;message&quot;</span>&gt;&lt;<span class="regexp">/textarea&gt; &lt;button&gt;提交&lt;/</span>button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> text = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;textarea&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    	div.<span class="property">innerHTML</span> = text.<span class="property">value</span>.<span class="title function_">replace</span>(<span class="regexp">/激情|gay/g</span>, <span class="string">&#x27;**&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript之函数的定义和调用笔记（十二）</title>
    <url>/2022/04/03/Js%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h2 id="1-函数的定义和调用"><a href="#1-函数的定义和调用" class="headerlink" title="1.函数的定义和调用"></a>1.函数的定义和调用</h2><h3 id="1-1函数的定义方式"><a href="#1-1函数的定义方式" class="headerlink" title="1.1函数的定义方式"></a>1.1函数的定义方式</h3><ol>
<li><p>方式1 函数声明方式 function 关键字 (命名函数)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>方式2 函数表达式(匿名函数)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>方式3 new Function() </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;console.log(a + b)&#x27;</span>);</span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;参数1&#x27;</span>,<span class="string">&#x27;参数2&#x27;</span>..., <span class="string">&#x27;函数体&#x27;</span>)</span><br><span class="line">注意</span><br><span class="line"><span class="comment">/*Function 里面参数都必须是字符串格式</span></span><br><span class="line"><span class="comment">第三种方式执行效率低，也不方便书写，因此较少使用</span></span><br><span class="line"><span class="comment">所有函数都是 Function 的实例(对象)  </span></span><br><span class="line"><span class="comment">函数也属于对象</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="1-2函数的调用"><a href="#1-2函数的调用" class="headerlink" title="1.2函数的调用"></a>1.2函数的调用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 1. 普通函数 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;人生的巅峰&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="title function_">fn</span>(); </span><br><span class="line"><span class="comment">/* 2. 对象的方法 */</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  <span class="attr">sayHi</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;人生的巅峰&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">o.<span class="title function_">sayHi</span>();</span><br><span class="line"><span class="comment">/* 3. 构造函数*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Star</span>();</span><br><span class="line"><span class="comment">/* 4. 绑定事件函数*/</span></span><br><span class="line"> btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;   <span class="comment">// 点击了按钮就可以调用这个函数</span></span><br><span class="line"><span class="comment">/* 5. 定时器函数*/</span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;, <span class="number">1000</span>);  这个函数是定时器自动<span class="number">1</span>秒钟调用一次</span><br><span class="line"><span class="comment">/* 6. 立即执行函数(自调用函数)*/</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;人生的巅峰&#x27;</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<h2 id="2-this"><a href="#2-this" class="headerlink" title="2.this"></a>2.this</h2><h3 id="2-1函数内部的this指向"><a href="#2-1函数内部的this指向" class="headerlink" title="2.1函数内部的this指向"></a>2.1函数内部的this指向</h3><p>这些 this 的指向，是当我们调用函数的时候确定的。调用方式的不同决定了this 的指向不同</p>
<p>一般指向我们的调用者.</p>
<p><img src="/images/img1.png"></p>
<h3 id="2-2改变函数内部-this-指向"><a href="#2-2改变函数内部-this-指向" class="headerlink" title="2.2改变函数内部 this 指向"></a>2.2改变函数内部 this 指向</h3><h4 id="2-2-1-call方法"><a href="#2-2-1-call方法" class="headerlink" title="2.2.1 call方法"></a>2.2.1 call方法</h4><p>call()方法调用一个对象。简单理解为调用函数的方式，但是它可以改变函数的 this 指向</p>
<p>应用场景:  经常做继承. </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">	<span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(a+b)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>,<span class="number">2</span>)<span class="comment">// 此时的this指向的是window 运行结果为3</span></span><br><span class="line">fn.<span class="title function_">call</span>(o,<span class="number">1</span>,<span class="number">2</span>)<span class="comment">//此时的this指向的是对象o,参数使用逗号隔开,运行结果为3</span></span><br></pre></td></tr></table></figure>

<p>以上代码运行结果为:</p>
<p><img src="/images/img4.png"></p>
<h4 id="2-2-2-apply方法"><a href="#2-2-2-apply方法" class="headerlink" title="2.2.2 apply方法"></a>2.2.2 apply方法</h4><p>apply() 方法调用一个函数。简单理解为调用函数的方式，但是它可以改变函数的 this 指向。</p>
<p>应用场景:  经常跟数组有关系</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">	<span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(a+b)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">fn</span>()<span class="comment">// 此时的this指向的是window 运行结果为3</span></span><br><span class="line">fn.<span class="title function_">apply</span>(o,[<span class="number">1</span>,<span class="number">2</span>])<span class="comment">//此时的this指向的是对象o,参数使用数组传递 运行结果为3</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/img4.png"></p>
<h4 id="2-2-3-bind方法"><a href="#2-2-3-bind方法" class="headerlink" title="2.2.3 bind方法"></a>2.2.3 bind方法</h4><p>bind() 方法不会调用函数,但是能改变函数内部this 指向,返回的是原函数改变this之后产生的新函数</p>
<p>如果只是想改变 this 指向，并且不想调用这个函数的时候，可以使用bind</p>
<p>应用场景:不调用函数,但是还想改变this指向</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> o = &#123;</span><br><span class="line"> <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span></span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(a + b);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> f = fn.<span class="title function_">bind</span>(o, <span class="number">1</span>, <span class="number">2</span>); <span class="comment">//此处的f是bind返回的新函数</span></span><br><span class="line"><span class="title function_">f</span>();<span class="comment">//调用新函数  this指向的是对象o 参数使用逗号隔开</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/img5.png"></p>
<h4 id="2-2-4-call、apply、bind三者的异同"><a href="#2-2-4-call、apply、bind三者的异同" class="headerlink" title="2.2.4 call、apply、bind三者的异同"></a>2.2.4 call、apply、bind三者的异同</h4><ul>
<li><p>共同点 : 都可以改变this指向</p>
</li>
<li><p>不同点:</p>
<ul>
<li>call 和 apply  会调用函数, 并且改变函数内部this指向.</li>
<li>call 和 apply传递的参数不一样,call传递参数使用逗号隔开,apply使用数组传递</li>
<li>bind  不会调用函数, 可以改变函数内部this指向.</li>
</ul>
</li>
<li><p>应用场景</p>
<ol>
<li>call 经常做继承. </li>
<li>apply经常跟数组有关系.  比如借助于数学对象实现数组最大值最小值</li>
<li>bind  不调用函数,但是还想改变this指向. 比如改变定时器内部的this指向.</li>
</ol>
</li>
</ul>
<h2 id="3-严格模式"><a href="#3-严格模式" class="headerlink" title="3.严格模式"></a>3.严格模式</h2><h3 id="3-1什么是严格模式"><a href="#3-1什么是严格模式" class="headerlink" title="3.1什么是严格模式"></a>3.1什么是严格模式</h3><p>JavaScript 除了提供正常模式外，还提供了严格模式（strict mode）。ES5 的严格模式是采用具有限制性 JavaScript变体的一种方式，即在严格的条件下运行 JS 代码。</p>
<p>严格模式在 IE10 以上版本的浏览器中才会被支持，旧版本浏览器中会被忽略。</p>
<p>严格模式对正常的 JavaScript 语义做了一些更改： </p>
<p>1.消除了 Javascript 语法的一些不合理、不严谨之处，减少了一些怪异行为。</p>
<p>2.消除代码运行的一些不安全之处，保证代码运行的安全。</p>
<p>3.提高编译器效率，增加运行速度。</p>
<p>4.禁用了在 ECMAScript 的未来版本中可能会定义的一些语法，为未来新版本的 Javascript 做好铺垫。比如一些保留字如：class,enum,export, extends, import, super 不能做变量名</p>
<h3 id="3-2开启严格模式"><a href="#3-2开启严格模式" class="headerlink" title="3.2开启严格模式"></a>3.2开启严格模式</h3><p>严格模式可以应用到整个脚本或个别函数中。因此在使用时，我们可以将严格模式分为为脚本开启严格模式和为函数开启严格模式两种情况。</p>
<ul>
<li><p>情况一 :为脚本开启严格模式</p>
<ul>
<li><p>有的 script 脚本是严格模式，有的 script 脚本是正常模式，这样不利于文件合并，所以可以将整个脚本文件放在一个立即执行的匿名函数之中。这样独立创建一个作用域而不影响其他<br>script 脚本文件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">//在当前的这个自调用函数中有开启严格模式，当前函数之外还是普通模式</span></span><br><span class="line">　　　　<span class="string">&quot;use strict&quot;</span>;</span><br><span class="line">       <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">　　　　<span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">//或者 </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="meta"></span></span></span></span><br><span class="line"><span class="meta"><span class="language-javascript"><span class="language-xml">  　&quot;use strict&quot;</span>; <span class="comment">//当前script标签开启了严格模式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  			<span class="comment">//当前script标签未开启严格模式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>情况二: 为函数开启严格模式</p>
<ul>
<li><p>要给某个函数开启严格模式，需要把“use strict”;  (或 ‘use strict’; ) 声明放在函数体所有语句之前。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">　　<span class="string">&quot;use strict&quot;</span>;</span><br><span class="line">　　<span class="keyword">return</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//当前fn函数开启了严格模式</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="3-3严格模式中的变化"><a href="#3-3严格模式中的变化" class="headerlink" title="3.3严格模式中的变化"></a>3.3严格模式中的变化</h3><p>严格模式对 Javascript 的语法和行为，都做了一些改变。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line">num = <span class="number">10</span> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num)<span class="comment">//严格模式后使用未声明的变量</span></span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">delete</span> num2;<span class="comment">//严格模式不允许删除变量</span></span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// 严格模式下全局作用域中函数中的 this 是 undefined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();  </span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params"></span>) &#123;</span><br><span class="line">	 <span class="variable language_">this</span>.<span class="property">sex</span> = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Star();严格模式下,如果 构造函数不加new调用, this 指向的是undefined 如果给他赋值则 会报错.</span></span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property">sex</span>);</span><br><span class="line">----------------------------------------------------------------------------------</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//严格模式下，定时器 this 还是指向 window</span></span><br><span class="line">&#125;, <span class="number">2000</span>);  </span><br></pre></td></tr></table></figure>

<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode">更多严格模式要求参考</a></p>
<h2 id="4-高阶函数"><a href="#4-高阶函数" class="headerlink" title="4.高阶函数"></a>4.高阶函数</h2><p>高阶函数是对其他函数进行操作的函数，它接收函数作为参数或将函数作为返回值输出。</p>
<p><img src="/images/img2.png"></p>
<p>此时fn 就是一个高阶函数</p>
<p>函数也是一种数据类型，同样可以作为参数，传递给另外一个参数使用。最典型的就是作为回调函数。</p>
<p>同理函数也可以作为返回值传递回来</p>
<h2 id="5-闭包"><a href="#5-闭包" class="headerlink" title="5.闭包"></a>5.闭包</h2><h3 id="5-1变量的作用域复习"><a href="#5-1变量的作用域复习" class="headerlink" title="5.1变量的作用域复习"></a>5.1变量的作用域复习</h3><p>变量根据作用域的不同分为两种：全局变量和局部变量。</p>
<ol>
<li>函数内部可以使用全局变量。</li>
<li>函数外部不可以使用局部变量。</li>
<li>当函数执行完毕，本作用域内的局部变量会销毁。</li>
</ol>
<h3 id="5-2什么是闭包"><a href="#5-2什么是闭包" class="headerlink" title="5.2什么是闭包"></a>5.2什么是闭包</h3><p>闭包（closure）指有权访问另一个函数作用域中变量的函数。简单理解就是 ，一个作用域可以访问另外一个函数内部的局部变量。 </p>
<p><img src="/images/img3.png"></p>
<h3 id="5-3闭包的作用"><a href="#5-3闭包的作用" class="headerlink" title="5.3闭包的作用"></a>5.3闭包的作用</h3><p>作用：延伸变量的作用范围。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line"> 	&#125;</span><br><span class="line">    <span class="keyword">return</span> fun;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">var</span> f = <span class="title function_">fn</span>();</span><br><span class="line"><span class="title function_">f</span>();</span><br></pre></td></tr></table></figure>

<h3 id="5-4闭包的案例"><a href="#5-4闭包的案例" class="headerlink" title="5.4闭包的案例"></a>5.4闭包的案例</h3><ol>
<li>利用闭包的方式得到当前li 的索引号</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span><br><span class="line"><span class="comment">// 利用for循环创建了4个立即执行函数</span></span><br><span class="line"><span class="comment">// 立即执行函数也成为小闭包因为立即执行函数里面的任何一个函数都可以使用它的i这变量</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params">i</span>) &#123;</span><br><span class="line">    lis[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>闭包应用-3秒钟之后,打印所有li元素的内容</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span><br><span class="line">   (<span class="keyword">function</span>(<span class="params">i</span>) &#123;</span><br><span class="line">     <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(lis[i].<span class="property">innerHTML</span>);</span><br><span class="line">     &#125;, <span class="number">3000</span>)</span><br><span class="line">   &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>闭包应用-计算打车价格</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*需求分析</span></span><br><span class="line"><span class="comment">打车起步价13(3公里内),  之后每多一公里增加 5块钱.  用户输入公里数就可以计算打车价格</span></span><br><span class="line"><span class="comment">如果有拥堵情况,总价格多收取10块钱拥堵费*/</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> car = (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">var</span> start = <span class="number">13</span>; <span class="comment">// 起步价  局部变量</span></span><br><span class="line">     <span class="keyword">var</span> total = <span class="number">0</span>; <span class="comment">// 总价  局部变量</span></span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">       <span class="comment">// 正常的总价</span></span><br><span class="line">       <span class="attr">price</span>: <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (n &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">           total = start;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           total = start + (n - <span class="number">3</span>) * <span class="number">5</span></span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> total;</span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="comment">// 拥堵之后的费用</span></span><br><span class="line">       <span class="attr">yd</span>: <span class="keyword">function</span>(<span class="params">flag</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> flag ? total + <span class="number">10</span> : total;</span><br><span class="line">       &#125;</span><br><span class="line">	&#125;</span><br><span class="line"> &#125;)();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(car.<span class="title function_">price</span>(<span class="number">5</span>)); <span class="comment">// 23</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(car.<span class="title function_">yd</span>(<span class="literal">true</span>)); <span class="comment">// 33</span></span><br></pre></td></tr></table></figure>

<h3 id="5-5案例"><a href="#5-5案例" class="headerlink" title="5.5案例"></a>5.5案例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> name = <span class="string">&quot;The Window&quot;</span>;</span><br><span class="line">   <span class="keyword">var</span> object = &#123;</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&quot;My Object&quot;</span>,</span><br><span class="line">     <span class="attr">getNameFunc</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">     &#125;;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object.<span class="title function_">getNameFunc</span>()())</span><br><span class="line">-----------------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;The Window&quot;</span>;　　</span><br><span class="line">  <span class="keyword">var</span> object = &#123;　　　　</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;My Object&quot;</span>,</span><br><span class="line">    <span class="attr">getNameFunc</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> that.<span class="property">name</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object.<span class="title function_">getNameFunc</span>()())</span><br><span class="line">       </span><br></pre></td></tr></table></figure>

<h2 id="6-递归"><a href="#6-递归" class="headerlink" title="6.递归"></a>6.递归</h2><h3 id="6-1什么是递归"><a href="#6-1什么是递归" class="headerlink" title="6.1什么是递归"></a>6.1什么是递归</h3><p><strong>递归：</strong>如果一个函数在内部可以调用其本身，那么这个函数就是递归函数。简单理解:函数内部自己调用自己, 这个函数就是递归函数</p>
<p><strong>注意：</strong>递归函数的作用和循环效果一样，由于递归很容易发生“栈溢出”错误（stack overflow），所以必须要加退出条件return。</p>
<h3 id="6-2利用递归求1-n的阶乘"><a href="#6-2利用递归求1-n的阶乘" class="headerlink" title="6.2利用递归求1~n的阶乘"></a>6.2利用递归求1~n的阶乘</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//利用递归函数求1~n的阶乘 1 * 2 * 3 * 4 * ..n</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">n</span>) &#123;</span><br><span class="line">     <span class="keyword">if</span> (n == <span class="number">1</span>) &#123; <span class="comment">//结束条件</span></span><br><span class="line">       <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> n * <span class="title function_">fn</span>(n - <span class="number">1</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="number">3</span>));</span><br></pre></td></tr></table></figure>

<p><img src="/images/img6.png"></p>
<h3 id="6-3利用递归求斐波那契数列"><a href="#6-3利用递归求斐波那契数列" class="headerlink" title="6.3利用递归求斐波那契数列"></a>6.3利用递归求斐波那契数列</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用递归函数求斐波那契数列(兔子序列)  1、1、2、3、5、8、13、21...</span></span><br><span class="line"><span class="comment">// 用户输入一个数字 n 就可以求出 这个数字对应的兔子序列值</span></span><br><span class="line"><span class="comment">// 我们只需要知道用户输入的n 的前面两项(n-1 n-2)就可以计算出n 对应的序列值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fb</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span> || n === <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fb</span>(n - <span class="number">1</span>) + <span class="title function_">fb</span>(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fb</span>(<span class="number">3</span>));</span><br></pre></td></tr></table></figure>

<h3 id="6-4利用递归遍历数据"><a href="#6-4利用递归遍历数据" class="headerlink" title="6.4利用递归遍历数据"></a>6.4利用递归遍历数据</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 我们想要做输入id号,就可以返回的数据对象</span></span><br><span class="line"> <span class="keyword">var</span> data = [&#123;</span><br><span class="line">   <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&#x27;家电&#x27;</span>,</span><br><span class="line">   <span class="attr">goods</span>: [&#123;</span><br><span class="line">     <span class="attr">id</span>: <span class="number">11</span>,</span><br><span class="line">     <span class="attr">gname</span>: <span class="string">&#x27;冰箱&#x27;</span>,</span><br><span class="line">     <span class="attr">goods</span>: [&#123;</span><br><span class="line">       <span class="attr">id</span>: <span class="number">111</span>,</span><br><span class="line">       <span class="attr">gname</span>: <span class="string">&#x27;海尔&#x27;</span></span><br><span class="line">     &#125;, &#123;</span><br><span class="line">       <span class="attr">id</span>: <span class="number">112</span>,</span><br><span class="line">       <span class="attr">gname</span>: <span class="string">&#x27;美的&#x27;</span></span><br><span class="line">     &#125;,</span><br><span class="line"></span><br><span class="line">            ]</span><br><span class="line"></span><br><span class="line">   &#125;, &#123;</span><br><span class="line">     <span class="attr">id</span>: <span class="number">12</span>,</span><br><span class="line">     <span class="attr">gname</span>: <span class="string">&#x27;洗衣机&#x27;</span></span><br><span class="line">   &#125;]</span><br><span class="line"> &#125;, &#123;</span><br><span class="line">   <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&#x27;服饰&#x27;</span></span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">//1.利用 forEach 去遍历里面的每一个对象</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">getID</span>(<span class="params">json, id</span>) &#123;</span><br><span class="line">   <span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line">   json.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item</span>) &#123;</span><br><span class="line">     <span class="comment">// console.log(item); // 2个数组元素</span></span><br><span class="line">     <span class="keyword">if</span> (item.<span class="property">id</span> == id) &#123;</span><br><span class="line">       <span class="comment">// console.log(item);</span></span><br><span class="line">       o = item;</span><br><span class="line">       <span class="keyword">return</span> o;</span><br><span class="line">       <span class="comment">// 2. 我们想要得里层的数据 11 12 可以利用递归函数</span></span><br><span class="line">       <span class="comment">// 里面应该有goods这个数组并且数组的长度不为 0 </span></span><br><span class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.<span class="property">goods</span> &amp;&amp; item.<span class="property">goods</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">       o = <span class="title function_">getID</span>(item.<span class="property">goods</span>, id);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript之ES6语法笔记（十四）</title>
    <url>/2022/04/03/Js%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<h1 id="ES6语法"><a href="#ES6语法" class="headerlink" title="ES6语法"></a>ES6语法</h1><h2 id="ES6相关概念（★★）"><a href="#ES6相关概念（★★）" class="headerlink" title="ES6相关概念（★★）"></a>ES6相关概念（★★）</h2><h3 id="什么是ES6"><a href="#什么是ES6" class="headerlink" title="什么是ES6"></a>什么是ES6</h3><p>ES 的全称是 ECMAScript , 它是由 ECMA 国际标准化组织,制定的一项脚本语言的标准化规范。</p>
<p><img src="/images2/es-version.png"></p>
<h3 id="为什么使用-ES6"><a href="#为什么使用-ES6" class="headerlink" title="为什么使用 ES6 ?"></a>为什么使用 ES6 ?</h3><p>每一次标准的诞生都意味着语言的完善，功能的加强。JavaScript语言本身也有一些令人不满意的地方。</p>
<ul>
<li>变量提升特性增加了程序运行时的不可预测性</li>
<li>语法过于松散，实现相同的功能，不同的人可能会写出不同的代码</li>
</ul>
<h2 id="ES6新增语法"><a href="#ES6新增语法" class="headerlink" title="ES6新增语法"></a>ES6新增语法</h2><h3 id="let（★★★）"><a href="#let（★★★）" class="headerlink" title="let（★★★）"></a>let（★★★）</h3><p>ES6中新增了用于声明变量的关键字</p>
<h4 id="let声明的变量只在所处于的块级有效"><a href="#let声明的变量只在所处于的块级有效" class="headerlink" title="let声明的变量只在所处于的块级有效"></a>let声明的变量只在所处于的块级有效</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">if</span> (<span class="literal">true</span>) &#123; </span><br><span class="line">     <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// a is not defined</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>使用let关键字声明的变量才具有块级作用域，使用var声明的变量不具备块级作用域特性。</p>
<h4 id="不存在变量提升"><a href="#不存在变量提升" class="headerlink" title="不存在变量提升"></a>不存在变量提升</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// a is not defined </span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">20</span>;</span><br></pre></td></tr></table></figure>

<h4 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h4><p>利用let声明的变量会绑定在这个块级作用域，不会受外界的影响</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123; </span><br><span class="line">    tmp = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> tmp; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h4 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题"></a>经典面试题</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">    arr[i] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[<span class="number">0</span>]();</span><br><span class="line">arr[<span class="number">1</span>]();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/images2/let%E9%9D%A2%E8%AF%95%E9%A2%98.png"></p>
<p><strong>经典面试题图解：</strong>此题的关键点在于变量i是全局的，函数执行时输出的都是全局作用域下的i值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">    arr[i] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[<span class="number">0</span>]();</span><br><span class="line">arr[<span class="number">1</span>]();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/images2/let%E9%9D%A2%E8%AF%95%E9%A2%982.png"></p>
<p><strong>经典面试题图解：</strong>此题的关键点在于每次循环都会产生一个块级作用域，每个块级作用域中的变量都是不同的，函数执行时输出的是自己上一级（循环产生的块级作用域）作用域下的i值.</p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul>
<li>let关键字就是用来声明变量的</li>
<li>使用let关键字声明的变量具有块级作用域</li>
<li>在一个大括号中 使用let关键字声明的变量才具有块级作用域 var关键字是不具备这个特点的</li>
<li>防止循环变量变成全局变量</li>
<li>使用let关键字声明的变量没有变量提升</li>
<li>使用let关键字声明的变量具有暂时性死区特性</li>
</ul>
<h3 id="const（★★★）"><a href="#const（★★★）" class="headerlink" title="const（★★★）"></a>const（★★★）</h3><p>声明常量，常量就是值（内存地址）不能变化的量</p>
<h4 id="具有块级作用域"><a href="#具有块级作用域" class="headerlink" title="具有块级作用域"></a>具有块级作用域</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">if</span> (<span class="literal">true</span>) &#123; </span><br><span class="line">     <span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// a is not defined</span></span><br></pre></td></tr></table></figure>

<h4 id="声明常量时必须赋值"><a href="#声明常量时必须赋值" class="headerlink" title="声明常量时必须赋值"></a>声明常量时必须赋值</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span>; <span class="comment">// Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure>

<h4 id="常量赋值后，值不能修改"><a href="#常量赋值后，值不能修改" class="headerlink" title="常量赋值后，值不能修改"></a>常量赋值后，值不能修改</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span>;</span><br><span class="line"><span class="variable constant_">PI</span> = <span class="number">100</span>; <span class="comment">// Assignment to constant variable.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ary = [<span class="number">100</span>, <span class="number">200</span>];</span><br><span class="line">ary[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">ary[<span class="number">1</span>] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ary); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;]; </span></span><br><span class="line">ary = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]; <span class="comment">// Assignment to constant variable.</span></span><br></pre></td></tr></table></figure>

<h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><ul>
<li>const声明的变量是一个常量</li>
<li>既然是常量不能重新进行赋值，如果是基本数据类型，不能更改值，如果是复杂数据类型，不能更改地址值</li>
<li>声明 const时候必须要给定值</li>
</ul>
<h3 id="let、const、var-的区别"><a href="#let、const、var-的区别" class="headerlink" title="let、const、var 的区别"></a>let、const、var 的区别</h3><ul>
<li>使用 var 声明的变量，其作用域为该语句所在的函数内，且存在变量提升现象</li>
<li>使用 let 声明的变量，其作用域为该语句所在的代码块内，不存在变量提升</li>
<li>使用 const 声明的是常量，在后面出现的代码中不能再修改该常量的值</li>
</ul>
<p><img src="/images2/var&let&const%E5%8C%BA%E5%88%AB.png"></p>
<h3 id="解构赋值（★★★）"><a href="#解构赋值（★★★）" class="headerlink" title="解构赋值（★★★）"></a>解构赋值（★★★）</h3><p>ES6中允许从数组中提取值，按照对应位置，对变量赋值，对象也可以实现解构</p>
<h4 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(a)<span class="comment">//1</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(b)<span class="comment">//2</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(c)<span class="comment">//3</span></span><br><span class="line"><span class="comment">//如果解构不成功，变量的值为undefined</span></span><br></pre></td></tr></table></figure>

<h4 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;; </span><br><span class="line"><span class="keyword">let</span> &#123; name, age &#125; = person;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// &#x27;zhangsan&#x27; </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">name</span>: myName, <span class="attr">age</span>: myAge&#125; = person; <span class="comment">// myName myAge 属于别名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myName); <span class="comment">// &#x27;zhangsan&#x27; </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myAge); <span class="comment">// 20</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><ul>
<li>解构赋值就是把数据结构分解，然后给变量进行赋值</li>
<li>如果结构不成功，变量跟数值个数不匹配的时候，变量的值为undefined</li>
<li>数组解构用中括号包裹，多个变量用逗号隔开，对象解构用花括号包裹，多个变量用逗号隔开</li>
<li>利用解构赋值能够让我们方便的去取对象中的属性跟方法</li>
</ul>
<h3 id="箭头函数（★★★）"><a href="#箭头函数（★★★）" class="headerlink" title="箭头函数（★★★）"></a>箭头函数（★★★）</h3><p>ES6中新增的定义函数的方式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">() =&gt; &#123;&#125; <span class="comment">//()：代表是函数； =&gt;：必须要的符号，指向哪一个代码块；&#123;&#125;：函数体</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;&#125;<span class="comment">//代表把一个函数赋值给fn</span></span><br></pre></td></tr></table></figure>

<p>函数体中只有一句代码，且代码的执行结果就是返回值，可以省略大括号</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>) &#123; </span><br><span class="line">    <span class="keyword">return</span> num1 + num2; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//es6写法</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sum</span> = (<span class="params">num1, num2</span>) =&gt; num1 + num2; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果形参只有一个，可以省略小括号</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">function</span> <span class="title function_">fn</span> (v) &#123;</span><br><span class="line">     <span class="keyword">return</span> v;</span><br><span class="line"> &#125; </span><br><span class="line"><span class="comment">//es6写法</span></span><br><span class="line"> <span class="keyword">const</span> <span class="title function_">fn</span> = v =&gt; v;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>箭头函数不绑定this关键字，箭头函数中的this，指向的是函数定义位置的上下文this</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>&#125; </span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">fn</span> () &#123; </span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">//this 指向 是obj对象</span></span><br><span class="line">     <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123; </span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">//this 指向 的是箭头函数定义的位置，那么这个箭头函数定义在fn里面，而这个fn指向是的obj对象，所以这个this也指向是obj对象</span></span><br><span class="line">     &#125; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">const</span> resFn = fn.<span class="title function_">call</span>(obj); </span><br><span class="line"> <span class="title function_">resFn</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h4><ul>
<li>箭头函数中不绑定this，箭头函数中的this指向是它所定义的位置，可以简单理解成，定义箭头函数中的作用域的this指向谁，它就指向谁</li>
<li>箭头函数的优点在于解决了this执行环境所造成的一些问题。比如：解决了匿名函数this指向的问题（匿名函数的执行环境具有全局性），包括setTimeout和setInterval中使用this所造成的问题</li>
</ul>
<h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">	<span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">	<span class="attr">say</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">		<span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">age</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">say</span>();<span class="comment">//箭头函数this指向的是被声明的作用域里面，而对象没有作用域的，所以箭头函数虽然在对象中被定义，但是this指向的是全局作用域</span></span><br></pre></td></tr></table></figure>

<h3 id="剩余参数（★★）"><a href="#剩余参数（★★）" class="headerlink" title="剩余参数（★★）"></a>剩余参数（★★）</h3><p>剩余参数语法允许我们将一个不定数量的参数表示为一个数组，不定参数定义方式，这种方式很方便的去声明不知道参数情况下的一个函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span> (first, ...args) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(first); <span class="comment">// 10</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(args); <span class="comment">// [20, 30] </span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="title function_">sum</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="剩余参数和解构配合使用"><a href="#剩余参数和解构配合使用" class="headerlink" title="剩余参数和解构配合使用"></a>剩余参数和解构配合使用</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> students = [<span class="string">&#x27;wangwu&#x27;</span>, <span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> [s1, ...s2] = students; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1);  <span class="comment">// &#x27;wangwu&#x27; </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2);  <span class="comment">// [&#x27;zhangsan&#x27;, &#x27;lisi&#x27;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="ES6-的内置对象扩展"><a href="#ES6-的内置对象扩展" class="headerlink" title="ES6 的内置对象扩展"></a>ES6 的内置对象扩展</h2><h3 id="Array-的扩展方法（★★）"><a href="#Array-的扩展方法（★★）" class="headerlink" title="Array 的扩展方法（★★）"></a>Array 的扩展方法（★★）</h3><h4 id="扩展运算符（展开语法）"><a href="#扩展运算符（展开语法）" class="headerlink" title="扩展运算符（展开语法）"></a>扩展运算符（展开语法）</h4><p>扩展运算符可以将数组或者对象转为用逗号分隔的参数序列</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">...ary  <span class="comment">// 1, 2, 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...ary);    <span class="comment">// 1 2 3,相当于下面的代码</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<h5 id="扩展运算符可以应用于合并数组"><a href="#扩展运算符可以应用于合并数组" class="headerlink" title="扩展运算符可以应用于合并数组"></a>扩展运算符可以应用于合并数组</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法一 </span></span><br><span class="line"> <span class="keyword">let</span> ary1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"> <span class="keyword">let</span> ary2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"> <span class="keyword">let</span> ary3 = [...ary1, ...ary2];</span><br><span class="line"> <span class="comment">// 方法二 </span></span><br><span class="line"> ary1.<span class="title function_">push</span>(...ary2);</span><br></pre></td></tr></table></figure>

<h5 id="将类数组或可遍历对象转换为真正的数组"><a href="#将类数组或可遍历对象转换为真正的数组" class="headerlink" title="将类数组或可遍历对象转换为真正的数组"></a>将类数组或可遍历对象转换为真正的数组</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> oDivs = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;div&#x27;</span>); </span><br><span class="line">oDivs = [...oDivs];</span><br></pre></td></tr></table></figure>

<h4 id="构造函数方法：Array-from"><a href="#构造函数方法：Array-from" class="headerlink" title="构造函数方法：Array.from()"></a>构造函数方法：Array.from()</h4><p>将伪数组或可遍历对象转换为真正的数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个集合</span></span><br><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="attr">length</span>: <span class="number">3</span></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">//转成数组</span></span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="title class_">Array</span>.<span class="title function_">from</span>(arrayLike); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>方法还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123; </span><br><span class="line">    <span class="string">&quot;0&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;1&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;length&quot;</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> newAry = <span class="title class_">Array</span>.<span class="title function_">from</span>(arrayLike, <span class="function"><span class="params">item</span> =&gt;</span> item *<span class="number">2</span>)<span class="comment">//[2,4]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意：如果是对象，那么属性需要写对应的索引</p>
<h4 id="实例方法：find"><a href="#实例方法：find" class="headerlink" title="实例方法：find()"></a>实例方法：find()</h4><p>用于找出第一个符合条件的数组成员，如果没有找到返回undefined</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [&#123;</span><br><span class="line">     <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span></span><br><span class="line"> &#125;, &#123; </span><br><span class="line">     <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span></span><br><span class="line"> &#125;]; </span><br><span class="line"> <span class="keyword">let</span> target = ary.<span class="title function_">find</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> item.<span class="property">id</span> == <span class="number">2</span>);<span class="comment">//找数组里面符合条件的值，当数组中元素id等于2的查找出来，注意，只会匹配第一个</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="实例方法：findIndex"><a href="#实例方法：findIndex" class="headerlink" title="实例方法：findIndex()"></a>实例方法：findIndex()</h4><p>用于找出第一个符合条件的数组成员的位置，如果没有找到返回-1</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>];</span><br><span class="line"><span class="keyword">let</span> index = ary.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">value, index</span>) =&gt;</span> value &gt; <span class="number">9</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h4 id="实例方法：includes"><a href="#实例方法：includes" class="headerlink" title="实例方法：includes()"></a>实例方法：includes()</h4><p>判断某个数组是否包含给定的值，返回布尔值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">includes</span>(<span class="number">2</span>) <span class="comment">// true </span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">includes</span>(<span class="number">4</span>) <span class="comment">// false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="String-的扩展方法"><a href="#String-的扩展方法" class="headerlink" title="String 的扩展方法"></a>String 的扩展方法</h3><h4 id="模板字符串（★★★）"><a href="#模板字符串（★★★）" class="headerlink" title="模板字符串（★★★）"></a>模板字符串（★★★）</h4><p>ES6新增的创建字符串的方式，使用反引号定义</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">`zhangsan`</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="模板字符串中可以解析变量"><a href="#模板字符串中可以解析变量" class="headerlink" title="模板字符串中可以解析变量"></a>模板字符串中可以解析变量</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;张三&#x27;</span>; </span><br><span class="line"><span class="keyword">let</span> sayHello = <span class="string">`hello,my name is <span class="subst">$&#123;name&#125;</span>`</span>; <span class="comment">// hello, my name is zhangsan</span></span><br></pre></td></tr></table></figure>

<h5 id="模板字符串中可以换行"><a href="#模板字符串中可以换行" class="headerlink" title="模板字符串中可以换行"></a>模板字符串中可以换行</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = &#123; </span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>, </span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span> </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> html = <span class="string">` &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;span&gt;<span class="subst">$&#123;result.name&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;span&gt;<span class="subst">$&#123;result.age&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;span&gt;<span class="subst">$&#123;result.sex&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt; `</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="在模板字符串中可以调用函数"><a href="#在模板字符串中可以调用函数" class="headerlink" title="在模板字符串中可以调用函数"></a>在模板字符串中可以调用函数</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sayHello = <span class="keyword">function</span> (<span class="params"></span>) &#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;哈哈哈哈 追不到我吧 我就是这么强大&#x27;</span>;</span><br><span class="line"> &#125;; </span><br><span class="line"> <span class="keyword">let</span> greet = <span class="string">`<span class="subst">$&#123;sayHello()&#125;</span> 哈哈哈哈`</span>;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(greet); <span class="comment">// 哈哈哈哈 追不到我吧 我就是这么强大 哈哈哈哈</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="实例方法：startsWith-和-endsWith"><a href="#实例方法：startsWith-和-endsWith" class="headerlink" title="实例方法：startsWith() 和 endsWith()"></a>实例方法：startsWith() 和 endsWith()</h4><ul>
<li>startsWith()：表示参数字符串是否在原字符串的头部，返回布尔值</li>
<li>endsWith()：表示参数字符串是否在原字符串的尾部，返回布尔值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;Hello world!&#x27;</span>;</span><br><span class="line">str.<span class="title function_">startsWith</span>(<span class="string">&#x27;Hello&#x27;</span>) <span class="comment">// true </span></span><br><span class="line">str.<span class="title function_">endsWith</span>(<span class="string">&#x27;!&#x27;</span>)       <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="实例方法：repeat"><a href="#实例方法：repeat" class="headerlink" title="实例方法：repeat()"></a>实例方法：repeat()</h4><p>repeat方法表示将原字符串重复n次，返回一个新字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;x&#x27;</span>.<span class="title function_">repeat</span>(<span class="number">3</span>)      <span class="comment">// &quot;xxx&quot; </span></span><br><span class="line"><span class="string">&#x27;hello&#x27;</span>.<span class="title function_">repeat</span>(<span class="number">2</span>)  <span class="comment">// &quot;hellohello&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="Set-数据结构（★★）"><a href="#Set-数据结构（★★）" class="headerlink" title="Set 数据结构（★★）"></a>Set 数据结构（★★）</h3><p>ES6 提供了新的数据结构  Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p>
<p>Set本身是一个构造函数，用来生成  Set  数据结构</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br></pre></td></tr></table></figure>

<p>Set函数可以接受一个数组作为参数，用来初始化。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>]);<span class="comment">//&#123;1, 2, 3, 4&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h4><ul>
<li>add(value)：添加某个值，返回 Set 结构本身</li>
<li>delete(value)：删除某个值，返回一个布尔值，表示删除是否成功</li>
<li>has(value)：返回一个布尔值，表示该值是否为 Set 的成员</li>
<li>clear()：清除所有成员，没有返回值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">1</span>).<span class="title function_">add</span>(<span class="number">2</span>).<span class="title function_">add</span>(<span class="number">3</span>); <span class="comment">// 向 set 结构中添加值 </span></span><br><span class="line">s.<span class="title function_">delete</span>(<span class="number">2</span>)             <span class="comment">// 删除 set 结构中的2值   </span></span><br><span class="line">s.<span class="title function_">has</span>(<span class="number">1</span>)                <span class="comment">// 表示 set 结构中是否有1这个值 返回布尔值 </span></span><br><span class="line">s.<span class="title function_">clear</span>()               <span class="comment">// 清除 set 结构中的所有值</span></span><br><span class="line"><span class="comment">//注意：删除的是元素的值，不是代表的索引</span></span><br></pre></td></tr></table></figure>

<h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p>Set 结构的实例与数组一样，也拥有forEach方法，用于对每个成员执行某种操作，没有返回值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">s.<span class="title function_">forEach</span>(<span class="function"><span class="params">value</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(value))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript之面向过程与面向对象笔记（十）</title>
    <url>/2022/04/03/Js%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%EF%BC%89/</url>
    <content><![CDATA[<h2 id="1-面向过程与面向对象"><a href="#1-面向过程与面向对象" class="headerlink" title="1.面向过程与面向对象"></a>1.面向过程与面向对象</h2><h3 id="1-1面向过程"><a href="#1-1面向过程" class="headerlink" title="1.1面向过程"></a>1.1面向过程</h3><ul>
<li>面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的依次调用就可以了。</li>
</ul>
<h3 id="1-2面向对象"><a href="#1-2面向对象" class="headerlink" title="1.2面向对象"></a>1.2面向对象</h3><ul>
<li>面向对象是把事务分解成为一个个对象，然后由对象之间分工与合作。</li>
</ul>
<h3 id="1-3面向过程与面向对象对比"><a href="#1-3面向过程与面向对象对比" class="headerlink" title="1.3面向过程与面向对象对比"></a>1.3面向过程与面向对象对比</h3><table>
<thead>
<tr>
<th></th>
<th>面向过程</th>
<th>面向对象</th>
</tr>
</thead>
<tbody><tr>
<td>优点</td>
<td>性能比面向对象高，适合跟硬件联系很紧密的东西，例如单片机就采用的面向过程编程。</td>
<td>易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统 更加灵活、更加易于维护</td>
</tr>
<tr>
<td>缺点</td>
<td>不易维护、不易复用、不易扩展</td>
<td>性能比面向过程低</td>
</tr>
</tbody></table>
<h2 id="2-对象与类"><a href="#2-对象与类" class="headerlink" title="2.对象与类"></a>2.对象与类</h2><h3 id="2-1对象"><a href="#2-1对象" class="headerlink" title="2.1对象"></a>2.1对象</h3><p>对象是由属性和方法组成的：是一个无序键值对的集合,指的是一个具体的事物</p>
<ul>
<li>属性：事物的特征，在对象中用属性来表示（常用名词）</li>
<li>方法：事物的行为，在对象中用方法来表示（常用动词）</li>
</ul>
<h4 id="2-1-1创建对象"><a href="#2-1-1创建对象" class="headerlink" title="2.1.1创建对象"></a>2.1.1创建对象</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以下代码是对对象的复习</span></span><br><span class="line"><span class="comment">//字面量创建对象</span></span><br><span class="line"><span class="keyword">var</span> ldh = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;刘德华&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh);</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数创建对象</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>)<span class="comment">//实例化对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh);	</span><br></pre></td></tr></table></figure>

<p>如上两行代码运行结果为:<img src="/images2/img3.png"></p>
<h3 id="2-2类"><a href="#2-2类" class="headerlink" title="2.2类"></a>2.2类</h3><ul>
<li>在 ES6 中新增加了类的概念，可以使用 class 关键字声明一个类，之后以这个类来实例化对象。类抽象了对象的公共部分，它泛指某一大类（class）对象特指某一个，通过类实例化一个具体的对象</li>
</ul>
<h4 id="2-2-1创建类"><a href="#2-2-1创建类" class="headerlink" title="2.2.1创建类"></a>2.2.1创建类</h4><ol>
<li>语法:</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//步骤1 使用class关键字</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">name</span> &#123;</span><br><span class="line">  <span class="comment">// class body</span></span><br><span class="line">&#125;     </span><br><span class="line"><span class="comment">//步骤2使用定义的类创建实例  注意new关键字</span></span><br><span class="line"><span class="keyword">var</span> xx = <span class="keyword">new</span> <span class="title function_">name</span>();     </span><br></pre></td></tr></table></figure>

<ol start="2">
<li>示例</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 创建类 class  创建一个 明星类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Star</span> &#123;</span><br><span class="line">  <span class="comment">// 类的共有属性放到 constructor 里面</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">// 2. 利用类创建对象 new</span></span><br><span class="line">  <span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(ldh);</span><br></pre></td></tr></table></figure>

<p>以上代码运行结果: </p>
<p><img src="/images2/img4.png"></p>
<p>通过结果我们可以看出,运行结果和使用构造函数方式一样</p>
<h4 id="2-2-2类创建添加属性和方法"><a href="#2-2-2类创建添加属性和方法" class="headerlink" title="2.2.2类创建添加属性和方法"></a>2.2.2类创建添加属性和方法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 1. 创建类 class  创建一个类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Star</span> &#123;</span><br><span class="line">    <span class="comment">// 类的共有属性放到 constructor 里面 constructor是 构造器或者构造函数</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">uname, age</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;<span class="comment">//-------------------------------------------&gt;注意,方法与方法之间不需要添加逗号</span></span><br><span class="line">    <span class="title function_">sing</span>(<span class="params">song</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">uname</span> + <span class="string">&#x27;唱&#x27;</span> + song);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2. 利用类创建对象 new</span></span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh); <span class="comment">// Star &#123;uname: &quot;刘德华&quot;, age: 18&#125;</span></span><br><span class="line">ldh.<span class="title function_">sing</span>(<span class="string">&#x27;冰雨&#x27;</span>); <span class="comment">// 刘德华唱冰雨</span></span><br></pre></td></tr></table></figure>

<p> 以上代码运行结果:</p>
<p><img src="/images2/img5.png"></p>
<p><strong>注意哟:</strong></p>
<ol>
<li>通过class 关键字创建类, 类名我们还是习惯性定义首字母大写</li>
<li>类里面有个constructor 函数,可以接受传递过来的参数,同时返回实例对象</li>
<li>constructor 函数 只要 new 生成实例时,就会自动调用这个函数, 如果我们不写这个函数,类也会自动生成这个函数</li>
<li>多个函数方法之间不需要添加逗号分隔</li>
<li>生成实例 new 不能省略</li>
<li>语法规范, 创建类 类名后面不要加小括号,生成实例 类名后面加小括号, 构造函数不需要加function</li>
</ol>
<h4 id="2-2-3类的继承"><a href="#2-2-3类的继承" class="headerlink" title="2.2.3类的继承"></a>2.2.3类的继承</h4><ol>
<li>语法</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;   </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类继承父类</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">Son</span>  <span class="keyword">extends</span> <span class="title class_ inherited__">Father</span> &#123;  </span><br><span class="line">&#125;       </span><br></pre></td></tr></table></figure>

<ol start="2">
<li>示例</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">      <span class="title function_">constructor</span>(<span class="params">surname</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">surname</span>= surname;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你的姓是&#x27;</span> + <span class="variable language_">this</span>.<span class="property">surname</span>);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Father</span>&#123;  <span class="comment">// 这样子类就继承了父类的属性和方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> damao= <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;刘&#x27;</span>);</span><br><span class="line">damao.<span class="title function_">say</span>();      <span class="comment">//结果为 你的姓是刘</span></span><br></pre></td></tr></table></figure>

<p>以上代码运行结果:</p>
<p><img src="/images2/img6.png"></p>
<ul>
<li><p>子类使用super关键字访问父类的方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义了父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">   <span class="title function_">constructor</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span> + <span class="variable language_">this</span>.<span class="property">y</span>);</span><br><span class="line">	&#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//子元素继承父类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Father</span> &#123;</span><br><span class="line">   		 <span class="title function_">constructor</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    		<span class="variable language_">super</span>(x, y); <span class="comment">//使用super调用了父类中的构造函数</span></span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    son.<span class="title function_">sum</span>(); <span class="comment">//结果为3</span></span><br></pre></td></tr></table></figure>

<p><strong>注意:</strong> </p>
<ol>
<li><p>继承中,如果实例化子类输出一个方法,先看子类有没有这个方法,如果有就先执行子类的</p>
</li>
<li><p>继承中,如果子类里面没有,就去查找父类有没有这个方法,如果有,就执行父类的这个方法(就近原则)</p>
</li>
<li><p>如果子类想要继承父类的方法,同时在自己内部扩展自己的方法,利用super 调用父类的构造函数,super 必须在子类this之前调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 父类有加法方法</span></span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">   <span class="title function_">constructor</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span> + <span class="variable language_">this</span>.<span class="property">y</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 子类继承父类加法方法 同时 扩展减法方法</span></span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Father</span> &#123;</span><br><span class="line">   <span class="title function_">constructor</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">   <span class="comment">// 利用super 调用父类的构造函数 super 必须在子类this之前调用,放到this之后会报错</span></span><br><span class="line">   <span class="variable language_">super</span>(x, y);</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">subtract</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span> - <span class="variable language_">this</span>.<span class="property">y</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">son.<span class="title function_">subtract</span>(); <span class="comment">//2</span></span><br><span class="line">son.<span class="title function_">sum</span>();<span class="comment">//8</span></span><br></pre></td></tr></table></figure>

<p>以上代码运行结果为:</p>
<p><img src="/images2/img7.png"></p>
</li>
<li><p>时刻注意this的指向问题,类里面的共有的属性和方法一定要加this使用.</p>
<ol>
<li>constructor中的this指向的是new出来的实例对象 </li>
<li>自定义的方法,一般也指向的new出来的实例对象</li>
<li>绑定事件之后this指向的就是触发事件的事件源</li>
</ol>
</li>
<li><p>在 ES6 中类没有变量提升，所以必须先定义类，才能通过类实例化对象<img src="/images2/img2.png"></p>
<h2 id=""><a href="#" class="headerlink" title=""></a><img src="/images2/img1.png"></h2></li>
</ol>
</li>
</ul>
<h2 id="3-面向对象版tab-栏切换"><a href="#3-面向对象版tab-栏切换" class="headerlink" title="3.面向对象版tab 栏切换"></a>3.面向对象版tab 栏切换</h2><h3 id="3-1功能需求"><a href="#3-1功能需求" class="headerlink" title="3.1功能需求"></a>3.1功能需求</h3><ol>
<li>点击 tab栏,可以切换效果.</li>
<li>点击 + 号, 可以添加 tab 项和内容项.</li>
<li>点击 x 号, 可以删除当前的tab项和内容项.</li>
<li>双击tab项文字或者内容项文字可以修改里面的文字内容</li>
</ol>
<h3 id="3-2案例准备"><a href="#3-2案例准备" class="headerlink" title="3.2案例准备"></a>3.2案例准备</h3><ol>
<li>获取到标题元素</li>
<li>获取到内容元素</li>
<li>获取到删除的小按钮 x号</li>
<li>新建js文件,定义类,添加需要的属性方法(切换,删除,增加,修改)</li>
<li>时刻注意this的指向问题</li>
</ol>
<h3 id="3-3切换"><a href="#3-3切换" class="headerlink" title="3.3切换"></a>3.3切换</h3><ul>
<li><p>为获取到的标题绑定点击事件,展示对应的内容区域,存储对应的索引</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">lis</span>[i].<span class="property">index</span> = i;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">lis</span>[i].<span class="property">onclick</span> = <span class="variable language_">this</span>.<span class="property">toggleTab</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用排他,实现只有一个元素的显示</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">toggleTab</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//将所有的标题与内容类样式全部移除</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">lis</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">lis</span>[i].<span class="property">className</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sections</span>[i].<span class="property">className</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//为当前的标题添加激活样式</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">className</span> = <span class="string">&#x27;liactive&#x27;</span>;</span><br><span class="line">   <span class="comment">//为当前的内容添加激活样式</span></span><br><span class="line">    that.<span class="property">sections</span>[<span class="variable language_">this</span>.<span class="property">index</span>].<span class="property">className</span> = <span class="string">&#x27;conactive&#x27;</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-4添加"><a href="#3-4添加" class="headerlink" title="3.4添加"></a>3.4添加</h3><ul>
<li><p>为添加按钮+ 绑定点击事件 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">add</span>.<span class="property">onclick</span> = <span class="variable language_">this</span>.<span class="property">addTab</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现标题与内容的添加,做好排他处理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">addTab</span>(<span class="params"></span>) &#123;</span><br><span class="line">    that.<span class="title function_">clearClass</span>();</span><br><span class="line">    <span class="comment">// (1) 创建li元素和section元素 </span></span><br><span class="line">    <span class="keyword">var</span> random = <span class="title class_">Math</span>.<span class="title function_">random</span>();</span><br><span class="line">    <span class="keyword">var</span> li = <span class="string">&#x27;&lt;li class=&quot;liactive&quot;&gt;&lt;span&gt;新选项卡&lt;/span&gt;&lt;span class=&quot;iconfont icon-guanbi&quot;&gt;				&lt;/span&gt;&lt;/li&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> section = <span class="string">&#x27;&lt;section class=&quot;conactive&quot;&gt;测试 &#x27;</span> + random + <span class="string">&#x27;&lt;/section&gt;&#x27;</span>;</span><br><span class="line">    <span class="comment">// (2) 把这两个元素追加到对应的父元素里面</span></span><br><span class="line">    that.<span class="property">ul</span>.<span class="title function_">insertAdjacentHTML</span>(<span class="string">&#x27;beforeend&#x27;</span>, li);</span><br><span class="line">    that.<span class="property">fsection</span>.<span class="title function_">insertAdjacentHTML</span>(<span class="string">&#x27;beforeend&#x27;</span>, section);</span><br><span class="line">    that.<span class="title function_">init</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-5删除"><a href="#3-5删除" class="headerlink" title="3.5删除"></a>3.5删除</h3><ul>
<li><p>为元素的删除按钮x绑定点击事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">remove</span>[i].<span class="property">onclick</span> = <span class="variable language_">this</span>.<span class="property">removeTab</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取到点击的删除按钮的所在的父元素的所有,删除对应的标题与内容</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">removeTab</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    e.<span class="title function_">stopPropagation</span>(); <span class="comment">// 阻止冒泡 防止触发li 的切换点击事件</span></span><br><span class="line">    <span class="keyword">var</span> index = <span class="variable language_">this</span>.<span class="property">parentNode</span>.<span class="property">index</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line">    <span class="comment">// 根据索引号删除对应的li 和section   remove()方法可以直接删除指定的元素</span></span><br><span class="line">    that.<span class="property">lis</span>[index].<span class="title function_">remove</span>();</span><br><span class="line">    that.<span class="property">sections</span>[index].<span class="title function_">remove</span>();</span><br><span class="line">    that.<span class="title function_">init</span>();</span><br><span class="line">    <span class="comment">// 当我们删除的不是选中状态的li 的时候,原来的选中状态li保持不变</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.liactive&#x27;</span>)) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 当我们删除了选中状态的这个li 的时候, 让它的前一个li 处于选定状态</span></span><br><span class="line">    index--;</span><br><span class="line">    <span class="comment">// 手动调用我们的点击事件  不需要鼠标触发</span></span><br><span class="line">    that.<span class="property">lis</span>[index] &amp;&amp; that.<span class="property">lis</span>[index].<span class="title function_">click</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-6编辑"><a href="#3-6编辑" class="headerlink" title="3.6编辑"></a>3.6编辑</h3><ul>
<li><p>为元素(标题与内容)绑定双击事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">spans</span>[i].<span class="property">ondblclick</span> = <span class="variable language_">this</span>.<span class="property">editTab</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">sections</span>[i].<span class="property">ondblclick</span> = <span class="variable language_">this</span>.<span class="property">editTab</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在双击事件处理文本选中状态,修改内部DOM节点,实现新旧value值的传递</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">editTab</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="variable language_">this</span>.<span class="property">innerHTML</span>;</span><br><span class="line">    <span class="comment">// 双击禁止选定文字</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">getSelection</span> ? <span class="variable language_">window</span>.<span class="title function_">getSelection</span>().<span class="title function_">removeAllRanges</span>() : 				    <span class="variable language_">document</span>.<span class="property">selection</span>.<span class="title function_">empty</span>();</span><br><span class="line">    <span class="comment">// alert(11);</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;input type=&quot;text&quot; /&gt;&#x27;</span>;</span><br><span class="line">      <span class="keyword">var</span> input = <span class="variable language_">this</span>.<span class="property">children</span>[<span class="number">0</span>];</span><br><span class="line">      input.<span class="property">value</span> = str;</span><br><span class="line">      input.<span class="title function_">select</span>(); <span class="comment">// 文本框里面的文字处于选定状态</span></span><br><span class="line">      <span class="comment">// 当我们离开文本框就把文本框里面的值给span </span></span><br><span class="line">      input.<span class="property">onblur</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">parentNode</span>.<span class="property">innerHTML</span> = <span class="variable language_">this</span>.<span class="property">value</span>;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="comment">// 按下回车也可以把文本框里面的值给span</span></span><br><span class="line">      input.<span class="property">onkeyup</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (e.<span class="property">keyCode</span> === <span class="number">13</span>) &#123;</span><br><span class="line">      <span class="comment">// 手动调用表单失去焦点事件  不需要鼠标离开操作</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">blur</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis-Plus总结</title>
    <url>/2022/08/18/Mybatis-Plus%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="Mybatis-Plus"><a href="#Mybatis-Plus" class="headerlink" title="Mybatis-Plus"></a>Mybatis-Plus</h2><p>引用：<a href="http://t.csdn.cn/WQcIT">http://t.csdn.cn/WQcIT</a><br>详细：<a href="https://blog.csdn.net/q736317048/article/details/110284582?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-110284582-blog-124770608.pc_relevant_multi_platform_whitelistv4eslandingctr&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-110284582-blog-124770608.pc_relevant_multi_platform_whitelistv4eslandingctr&amp;utm_relevant_index=1">https://blog.csdn.net/q736317048/article/details/110284582?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-110284582-blog-124770608.pc_relevant_multi_platform_whitelistv4eslandingctr&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-110284582-blog-124770608.pc_relevant_multi_platform_whitelistv4eslandingctr&amp;utm_relevant_index=1</a></p>
<h2 id="CRUD操作"><a href="#CRUD操作" class="headerlink" title="CRUD操作"></a>CRUD操作</h2><p>mybatisPlus 核心库 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- mybatisPlus 核心库 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.4.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">  &lt;!--mybatisplus自动生成代码依赖--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.4.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h2 id="编辑application-yml文件"><a href="#编辑application-yml文件" class="headerlink" title="编辑application.yml文件"></a>编辑application.yml文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8080</span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql://localhost:3306/aaa?servertimezone=Asia?Shanghai&amp;useUnicode=true&amp;charaterEncoding=utf-8</span><br><span class="line">    username: root</span><br><span class="line">    password: 123</span><br><span class="line">mybatis-plus:</span><br><span class="line">  mapper-locations: classpath*:/mapper/*Mapper.xml</span><br><span class="line">  type-aliases-package: com.zking.mybatispluspro.model</span><br><span class="line">  configuration:</span><br><span class="line">    #驼峰命名规则</span><br><span class="line">    map-underscore-to-camel-case: true</span><br><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">    com.zking.mybatispl</span><br></pre></td></tr></table></figure>



<h4 id="Step1：Dao层接口介绍："><a href="#Step1：Dao层接口介绍：" class="headerlink" title="Step1：Dao层接口介绍："></a><strong>Step1：Dao层接口介绍：</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface UserTestMapper extends BaseMapper&lt;UserTest&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>BaseMapper 接口中封装了一系列 CRUD 常用操作，可以直接使用，而不用自定义 xml 与 sql 语句进行 CRUD 操作（当然根据实际开发需要，自定义 sql 还是有必要的）。</strong></p>
<h5 id="BaseMapper方法简介"><a href="#BaseMapper方法简介" class="headerlink" title="BaseMapper方法简介"></a><strong>BaseMapper方法简介</strong></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">复制代码</span><br><span class="line">【添加数据：（增）】</span><br><span class="line">    int insert(T entity);              // 插入一条记录</span><br><span class="line">注：</span><br><span class="line">    T         表示任意实体类型</span><br><span class="line">    entity    表示实体对象</span><br><span class="line"></span><br><span class="line">【删除数据：（删）】</span><br><span class="line">    int deleteById(Serializable id);    // 根据主键 ID 删除</span><br><span class="line">    int deleteByMap(@Param(Constants.COLUMN_MAP) Map&lt;String, Object&gt; columnMap);  // 根据 map 定义字段的条件删除</span><br><span class="line">    int delete(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; wrapper); // 根据实体类定义的 条件删除对象</span><br><span class="line">    int deleteBatchIds(@Param(Constants.COLLECTION) Collection&lt;? extends Serializable&gt; idList); // 进行批量删除</span><br><span class="line">注：</span><br><span class="line">    id        表示 主键 ID</span><br><span class="line">    columnMap 表示表字段的 map 对象</span><br><span class="line">    wrapper   表示实体对象封装操作类，可以为 null。</span><br><span class="line">    idList    表示 主键 ID 集合（列表、数组），不能为 null 或 empty</span><br><span class="line"></span><br><span class="line">【修改数据：（改）】</span><br><span class="line">    int updateById(@Param(Constants.ENTITY) T entity); // 根据 ID 修改实体对象。</span><br><span class="line">    int update(@Param(Constants.ENTITY) T entity, @Param(Constants.WRAPPER) Wrapper&lt;T&gt; updateWrapper); // 根据 updateWrapper 条件修改实体对象</span><br><span class="line">注：</span><br><span class="line">    update 中的 entity 为 set 条件，可以为 null。</span><br><span class="line">    updateWrapper 表示实体对象封装操作类（可以为 null,里面的 entity 用于生成 where 语句）</span><br><span class="line"></span><br><span class="line">【查询数据：（查）】</span><br><span class="line">    T selectById(Serializable id); // 根据 主键 ID 查询数据</span><br><span class="line">    List&lt;T&gt; selectBatchIds(@Param(Constants.COLLECTION) Collection&lt;? extends Serializable&gt; idList); // 进行批量查询</span><br><span class="line">    List&lt;T&gt; selectByMap(@Param(Constants.COLUMN_MAP) Map&lt;String, Object&gt; columnMap); // 根据表字段条件查询</span><br><span class="line">    T selectOne(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper); // 根据实体类封装对象 查询一条记录</span><br><span class="line">    </span><br><span class="line">    Integer selectCount(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper); // 查询记录的总条数</span><br><span class="line">    </span><br><span class="line">    List&lt;T&gt; selectList(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper); // 查询所有记录（返回 entity 集合）</span><br><span class="line">    </span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; selectMaps(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper); // 查询所有记录（返回 map 集合）</span><br><span class="line">    </span><br><span class="line">    List&lt;Object&gt; selectObjs(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper); // 查询所有记录（但只保存第一个字段的值）</span><br><span class="line">    </span><br><span class="line">    &lt;E extends IPage&lt;T&gt;&gt; E selectPage(E page, @Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper); // 查询所有记录（返回 entity 集合），分页</span><br><span class="line">    </span><br><span class="line">    &lt;E extends IPage&lt;Map&lt;String, Object&gt;&gt;&gt; E selectMapsPage(E page, @Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper); // 查询所有记录（返回 map 集合），分页</span><br><span class="line">注：</span><br><span class="line">    queryWrapper 表示实体对象封装操作类（可以为 null）</span><br><span class="line">    page 表示分页查询条件</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Step2："><a href="#Step2：" class="headerlink" title="Step2："></a>Step2：</h4><p>Service层接口介绍：<br>IService 内部进一步封装了 BaseMapper 接口的方法（当然也提供了更详细的方法）。<br>使用时，可以通过 生成的 mapper 类进行 CRUD 操作，也可以通过 生成的 service 的实现类进行 CRUD 操作。（当然，自定义代码执行也可,不选择继承IService）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface UserTestService extends IService&lt;UserTest&gt; &#123;</span><br><span class="line">	List&lt;UserTest&gt; LikeListUser(String username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">【添加数据：（增）】</span><br><span class="line">    default boolean save(T entity); // 调用 BaseMapper 的 insert 方法，用于添加一条数据。</span><br><span class="line">    boolean saveBatch(Collection&lt;T&gt; entityList, int batchSize); // 批量插入数据</span><br><span class="line">注：</span><br><span class="line">    entityList 表示实体对象集合 </span><br><span class="line">    batchSize 表示一次批量插入的数据量，默认为 1000</span><br><span class="line"></span><br><span class="line">【添加或修改数据：（增或改）】</span><br><span class="line">    boolean saveOrUpdate(T entity); // id 若存在，则修改， id 不存在则新增数据</span><br><span class="line">   default boolean saveOrUpdate(T entity, Wrapper&lt;T&gt; updateWrapper); // 先根据条件尝试更新，然后再执行 saveOrUpdate 操作</span><br><span class="line">   boolean saveOrUpdateBatch(Collection&lt;T&gt; entityList, int batchSize); // 批量插入并修改数据 </span><br><span class="line"></span><br><span class="line">【删除数据：（删）】</span><br><span class="line">    default boolean removeById(Serializable id); // 调用 BaseMapper 的 deleteById 方法，根据 id 删除数据。</span><br><span class="line">    default boolean removeByMap(Map&lt;String, Object&gt; columnMap); // 调用 BaseMapper 的 deleteByMap 方法，根据 map 定义字段的条件删除</span><br><span class="line">    default boolean remove(Wrapper&lt;T&gt; queryWrapper); // 调用 BaseMapper 的 delete 方法，根据实体类定义的 条件删除对象。</span><br><span class="line">    default boolean removeByIds(Collection&lt;? extends Serializable&gt; idList); // 用 BaseMapper 的 deleteBatchIds 方法, 进行批量删除。</span><br><span class="line">    </span><br><span class="line">【修改数据：（改）】</span><br><span class="line">    default boolean updateById(T entity); // 调用 BaseMapper 的 updateById 方法，根据 ID 选择修改。</span><br><span class="line">    default boolean update(T entity, Wrapper&lt;T&gt; updateWrapper); // 调用 BaseMapper 的 update 方法，根据 updateWrapper 条件修改实体对象。</span><br><span class="line">    boolean updateBatchById(Collection&lt;T&gt; entityList, int batchSize); // 批量更新数据</span><br><span class="line"></span><br><span class="line">【查找数据：（查）】</span><br><span class="line">    default T getById(Serializable id); // 调用 BaseMapper 的 selectById 方法，根据 主键 ID 返回数据。</span><br><span class="line">    default List&lt;T&gt; listByIds(Collection&lt;? extends Serializable&gt; idList); // 调用 BaseMapper 的 selectBatchIds 方法，批量查询数据。</span><br><span class="line">    default List&lt;T&gt; listByMap(Map&lt;String, Object&gt; columnMap); // 调用 BaseMapper 的 selectByMap 方法，根据表字段条件查询</span><br><span class="line">    default T getOne(Wrapper&lt;T&gt; queryWrapper); // 返回一条记录（实体类保存）。</span><br><span class="line">    Map&lt;String, Object&gt; getMap(Wrapper&lt;T&gt; queryWrapper); // 返回一条记录（map 保存）。</span><br><span class="line">    default int count(Wrapper&lt;T&gt; queryWrapper); // 根据条件返回 记录数。</span><br><span class="line">    default List&lt;T&gt; list(); // 返回所有数据。</span><br><span class="line">    default List&lt;T&gt; list(Wrapper&lt;T&gt; queryWrapper); // 调用 BaseMapper 的 selectList 方法，查询所有记录（返回 entity 集合）。</span><br><span class="line">    default List&lt;Map&lt;String, Object&gt;&gt; listMaps(Wrapper&lt;T&gt; queryWrapper); // 调用 BaseMapper 的 selectMaps 方法，查询所有记录（返回 map 集合）。</span><br><span class="line">    default List&lt;Object&gt; listObjs(); // 返回全部记录，但只返回第一个字段的值。</span><br><span class="line">    default &lt;E extends IPage&lt;T&gt;&gt; E page(E page, Wrapper&lt;T&gt; queryWrapper); // 调用 BaseMapper 的 selectPage 方法，分页查询</span><br><span class="line">    default &lt;E extends IPage&lt;Map&lt;String, Object&gt;&gt;&gt; E pageMaps(E page, Wrapper&lt;T&gt; queryWrapper); // 调用 BaseMapper 的 selectMapsPage 方法，分页查询</span><br><span class="line">注：</span><br><span class="line">    get 用于返回一条记录。</span><br><span class="line">    list 用于返回多条记录。</span><br><span class="line">    count 用于返回记录总数。</span><br><span class="line">    page 用于分页查询。</span><br><span class="line">    </span><br><span class="line">【链式调用：】</span><br><span class="line">    default QueryChainWrapper&lt;T&gt; query(); // 普通链式查询</span><br><span class="line">    default LambdaQueryChainWrapper&lt;T&gt; lambdaQuery(); // 支持 Lambda 表达式的修改</span><br><span class="line">    default UpdateChainWrapper&lt;T&gt; update(); // 普通链式修改</span><br><span class="line">    default LambdaUpdateChainWrapper&lt;T&gt; lambdaUpdate(); // 支持 Lambda 表达式的修改</span><br><span class="line">注：</span><br><span class="line">    query 表示查询</span><br><span class="line">    update 表示修改</span><br><span class="line">    Lambda 表示内部支持 Lambda 写法。</span><br><span class="line">形如：</span><br><span class="line">    query().eq(&quot;column&quot;, value).one();</span><br><span class="line">    lambdaQuery().eq(Entity::getId, value).list();</span><br><span class="line">    update().eq(&quot;column&quot;, value).remove();</span><br><span class="line">    lambdaUpdate().eq(Entity::getId, value).update(entity);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Step3：条件构造器（Wrapper，定义where条件）"><a href="#Step3：条件构造器（Wrapper，定义where条件）" class="headerlink" title="Step3：条件构造器（Wrapper，定义where条件）"></a>Step3：条件构造器（Wrapper，定义where条件）</h4><p>简介： 上面介绍的 接口方法的参数中，会出现各种 wrapper，比如 queryWrapper、updateWrapper 等。wrapper 的作用就是用于定义各种各样的查询条件（where）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Wrapper  条件构造抽象类</span><br><span class="line">    -- AbstractWrapper 查询条件封装，用于生成 sql 中的 where 语句。</span><br><span class="line">        -- QueryWrapper Entity 对象封装操作类，用于查询。</span><br><span class="line">        -- UpdateWrapper Update 条件封装操作类，用于更新。</span><br><span class="line">    -- AbstractLambdaWrapper 使用 Lambda 表达式封装 wrapper</span><br><span class="line">        -- LambdaQueryWrapper 使用 Lambda 语法封装条件，用于查询。</span><br><span class="line">        -- LambdaUpdateWrapper 使用 Lambda 语法封装条件，用于更新</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="Wrapper常用条件介绍"><a href="#Wrapper常用条件介绍" class="headerlink" title="Wrapper常用条件介绍"></a>Wrapper常用条件介绍</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">【通用条件：】</span><br><span class="line">【比较大小： ( =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;= )】</span><br><span class="line">    eq(R column, Object val); // 等价于 =，例: eq(&quot;name&quot;, &quot;老王&quot;) ---&gt; name = &#x27;老王&#x27;</span><br><span class="line">    ne(R column, Object val); // 等价于 &lt;&gt;，例: ne(&quot;name&quot;, &quot;老王&quot;) ---&gt; name &lt;&gt; &#x27;老王&#x27;</span><br><span class="line">    gt(R column, Object val); // 等价于 &gt;，例: gt(&quot;name&quot;, &quot;老王&quot;) ---&gt; name &gt; &#x27;老王&#x27;</span><br><span class="line">    ge(R column, Object val); // 等价于 &gt;=，例: ge(&quot;name&quot;, &quot;老王&quot;) ---&gt; name &gt;= &#x27;老王&#x27;</span><br><span class="line">    lt(R column, Object val); // 等价于 &lt;，例: lt(&quot;name&quot;, &quot;老王&quot;) ---&gt; name &lt; &#x27;老王&#x27;</span><br><span class="line">    le(R column, Object val); // 等价于 &lt;=，例: le(&quot;name&quot;, &quot;老王&quot;) ---&gt; name &lt;= &#x27;老王&#x27;</span><br><span class="line">    </span><br><span class="line">【范围：（between、not between、in、not in）】</span><br><span class="line">   between(R column, Object val1, Object val2); // 等价于 between a and b, 例： 			between(&quot;age&quot;, 18, 30) ---&gt; age between 18 and 30</span><br><span class="line">   notBetween(R column, Object val1, Object val2); // 等价于 not between a and b, 例： 	notBetween(&quot;age&quot;, 18, 30) ---&gt; age not between 18 and 30</span><br><span class="line">   in(R column, Object... values); // 等价于 字段 IN (v0, v1, ...),例: in(&quot;age&quot;,&#123;1,2,3&#125;) ---&gt; age in (1,2,3)</span><br><span class="line">   notIn(R column, Object... values); // 等价于 字段 NOT IN (v0, v1, ...), 例: notIn(&quot;age&quot;,&#123;1,2,3&#125;) ---&gt; age not in (1,2,3)</span><br><span class="line">   inSql(R column, Object... values); // 等价于 字段 IN (sql 语句), 例: inSql(&quot;id&quot;, &quot;select id from table where id &lt; 3&quot;) ---&gt; id in (select id from table where id &lt; 3)</span><br><span class="line">   notInSql(R column, Object... values); // 等价于 字段 NOT IN (sql 语句)</span><br><span class="line">   </span><br><span class="line">【模糊匹配：（like）】</span><br><span class="line">    like(R column, Object val); // 等价于 LIKE &#x27;%值%&#x27;，例: like(&quot;name&quot;, &quot;王&quot;) ---&gt; name like &#x27;%王%&#x27;</span><br><span class="line">    notLike(R column, Object val); // 等价于 NOT LIKE &#x27;%值%&#x27;，例: notLike(&quot;name&quot;, &quot;王&quot;) ---&gt; name not like &#x27;%王%&#x27;</span><br><span class="line">    likeLeft(R column, Object val); // 等价于 LIKE &#x27;%值&#x27;，例: likeLeft(&quot;name&quot;, &quot;王&quot;) ---&gt; name like &#x27;%王&#x27;</span><br><span class="line">    likeRight(R column, Object val); // 等价于 LIKE &#x27;值%&#x27;，例: likeRight(&quot;name&quot;, &quot;王&quot;) ---&gt; name like &#x27;王%&#x27;</span><br><span class="line">    </span><br><span class="line">【空值比较：（isNull、isNotNull）】</span><br><span class="line">    isNull(R column); // 等价于 IS NULL，例: isNull(&quot;name&quot;) ---&gt; name is null</span><br><span class="line">    isNotNull(R column); // 等价于 IS NOT NULL，例: isNotNull(&quot;name&quot;) ---&gt; name is not null</span><br><span class="line"></span><br><span class="line">【分组、排序：（group、having、order）】</span><br><span class="line">    groupBy(R... columns); // 等价于 GROUP BY 字段, ...， 例: groupBy(&quot;id&quot;, &quot;name&quot;) ---&gt; group by id,name</span><br><span class="line">    orderByAsc(R... columns); // 等价于 ORDER BY 字段, ... ASC， 例: orderByAsc(&quot;id&quot;, &quot;name&quot;) ---&gt; order by id ASC,name ASC</span><br><span class="line">    orderByDesc(R... columns); // 等价于 ORDER BY 字段, ... DESC， 例: orderByDesc(&quot;id&quot;, &quot;name&quot;) ---&gt; order by id DESC,name DESC</span><br><span class="line">    having(String sqlHaving, Object... params); // 等价于 HAVING ( sql语句 )， 例: having(&quot;sum(age) &gt; &#123;0&#125;&quot;, 11) ---&gt; having sum(age) &gt; 11</span><br><span class="line"></span><br><span class="line">【拼接、嵌套 sql：（or、and、nested、apply）】</span><br><span class="line">   or(); // 等价于 a or b， 例：eq(&quot;id&quot;,1).or().eq(&quot;name&quot;,&quot;老王&quot;) ---&gt; id = 1 or name = &#x27;老王&#x27;</span><br><span class="line">   or(Consumer&lt;Param&gt; consumer); // 等价于 or(a or/and b)，or 嵌套。例: or(i -&gt; i.eq(&quot;name&quot;, &quot;李白&quot;).ne(&quot;status&quot;, &quot;活着&quot;)) ---&gt; or (name = &#x27;李白&#x27; and status &lt;&gt; &#x27;活着&#x27;)</span><br><span class="line">   and(Consumer&lt;Param&gt; consumer); // 等价于 and(a or/and b)，and 嵌套。例: and(i -&gt; i.eq(&quot;name&quot;, &quot;李白&quot;).ne(&quot;status&quot;, &quot;活着&quot;)) ---&gt; and (name = &#x27;李白&#x27; and status &lt;&gt; &#x27;活着&#x27;)</span><br><span class="line">   nested(Consumer&lt;Param&gt; consumer); // 等价于 (a or/and b)，普通嵌套。例: nested(i -&gt; i.eq(&quot;name&quot;, &quot;李白&quot;).ne(&quot;status&quot;, &quot;活着&quot;)) ---&gt; (name = &#x27;李白&#x27; and status &lt;&gt; &#x27;活着&#x27;)</span><br><span class="line">   apply(String applySql, Object... params); // 拼接sql（若不使用 params 参数，可能存在 sql 注入），例: apply(&quot;date_format(dateColumn,&#x27;%Y-%m-%d&#x27;) = &#123;0&#125;&quot;, &quot;2008-08-08&quot;) ---&gt; date_format(dateColumn,&#x27;%Y-%m-%d&#x27;) = &#x27;2008-08-08&#x27;&quot;)</span><br><span class="line">   last(String lastSql); // 无视优化规则直接拼接到 sql 的最后，可能存若在 sql 注入。</span><br><span class="line">   exists(String existsSql); // 拼接 exists 语句。例: exists(&quot;select id from table where age = 1&quot;) ---&gt; exists (select id from table where age = 1)</span><br><span class="line">   </span><br><span class="line">【QueryWrapper 条件：】</span><br><span class="line">    select(String... sqlSelect); // 用于定义需要返回的字段。例： select(&quot;id&quot;, &quot;name&quot;, &quot;age&quot;) ---&gt; select id, name, age</span><br><span class="line">    select(Predicate&lt;TableFieldInfo&gt; predicate); // Lambda 表达式，过滤需要的字段。</span><br><span class="line">    lambda(); // 返回一个 LambdaQueryWrapper</span><br><span class="line">    </span><br><span class="line">【UpdateWrapper 条件：】</span><br><span class="line">    set(String column, Object val); // 用于设置 set 字段值。例: set(&quot;name&quot;, null) ---&gt; set name = null</span><br><span class="line">    etSql(String sql); // 用于设置 set 字段值。例: setSql(&quot;name = &#x27;老李头&#x27;&quot;) ---&gt; set name = &#x27;老李头&#x27;</span><br><span class="line">    lambda(); // 返回一个 LambdaUpdateWrapper </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>乐观锁原理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">乐观锁：顾名思义十分乐观，他总是认为不会出现问题，无论干什么都不会上锁！如果出现了问题，就再次更新值加锁处理</span><br><span class="line">悲观锁：顾名思义十分悲观，他总是认为无论干什么都会出现问题，所以都会上锁，再操作！</span><br></pre></td></tr></table></figure>

<p>官方乐观锁写法</p>
<p>乐观锁（OptimisticLockerInnerInterceptor）机制:</p>
<p>当要更新一条记录的时候，希望这条记录没有被别人更新</p>
<p>乐观锁实现方式：</p>
<p>取出记录时，获取当前version<br>更新时，带上这个version<br>执行更新时， set version &#x3D; newVersion where version &#x3D; oldVersion<br>如果version不对，就更新失败<br>相当于给每一个记录都加一个version字段。当我们要改记录时，把version字段拿出来看一看，对比一下这个version 有没有在你操作数据时被其他线程更改，如果依然等于oldVersion，你就对数据进行操作同时把 version &#x3D; newVersion 更新（比如+1），以此你在改数据的途中告诉其他线程不要读了脏数据。</p>
<h4 id="代码自动生成器（重点）"><a href="#代码自动生成器（重点）" class="headerlink" title="代码自动生成器（重点）"></a>代码自动生成器（重点）</h4><p>AutoGenerator 是 MyBatis-Plus 的代码生成器，通过 AutoGenerator 可以快速生成 Entity、Mapper、Mapper XML、Service、Controller 等各个模块的代码，极大的提升了开发效率。</p>
<p>使用步骤</p>
<p>配置依赖，添加如下依赖，当然，不要忘记还要 快速开始第一章节的依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- mp 代码生成器 依赖 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;3.4.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- 导入swagger --&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;io.swagger&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;swagger-annotations&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;1.5.20&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">&lt;!-- 添加模板引擎，thymeleaf 还有freemarker都是模板引擎 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-freemarker&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在任意文件夹新建立一个类进行配置</p>
<p>类的代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jdw;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line">import com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line">import com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line">import com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;</span><br><span class="line">import com.baomidou.mybatisplus.core.toolkit.StringPool;</span><br><span class="line">import com.baomidou.mybatisplus.core.toolkit.StringUtils;</span><br><span class="line">import com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line">import com.baomidou.mybatisplus.generator.InjectionConfig;</span><br><span class="line">import com.baomidou.mybatisplus.generator.config.*;</span><br><span class="line">import com.baomidou.mybatisplus.generator.config.po.TableFill;</span><br><span class="line">import com.baomidou.mybatisplus.generator.config.po.TableInfo;</span><br><span class="line">import com.baomidou.mybatisplus.generator.config.rules.DateType;</span><br><span class="line">import com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line">import com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">// 演示例子，执行 main 方法控制台输入模块表名回车自动生成对应项目目录中</span><br><span class="line">public class CodeGenerator &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * &lt;p&gt;</span><br><span class="line">     * 读取控制台内容</span><br><span class="line">     * &lt;/p&gt;</span><br><span class="line">     */</span><br><span class="line">    public static String scanner(String tip) &#123;</span><br><span class="line">        Scanner scanner = new Scanner(System.in);</span><br><span class="line">        StringBuilder help = new StringBuilder();</span><br><span class="line">        help.append(&quot;请输入&quot; + tip + &quot;：&quot;);</span><br><span class="line">        System.out.println(help.toString());</span><br><span class="line">        if (scanner.hasNext()) &#123;</span><br><span class="line">            String ipt = scanner.next();</span><br><span class="line">            if (StringUtils.isNotBlank(ipt)) &#123;</span><br><span class="line">                return ipt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        throw new MybatisPlusException(&quot;请输入正确的&quot; + tip + &quot;！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 代码生成器</span><br><span class="line">        //构建一个代码自动生成器对象</span><br><span class="line">        AutoGenerator mpg = new AutoGenerator();</span><br><span class="line"></span><br><span class="line">        // 1、创建全局配置类的对象</span><br><span class="line">        GlobalConfig gc = new GlobalConfig();</span><br><span class="line">        //获取当前项目路径</span><br><span class="line">        String projectPath = System.getProperty(&quot;user.dir&quot;);</span><br><span class="line">        System.out.println(&quot;projectPath = &quot; + projectPath);</span><br><span class="line">        //自动生成代码存放的路径</span><br><span class="line">        gc.setOutputDir(projectPath + &quot;/src/main/java&quot;);</span><br><span class="line">        //设置 --作者注释</span><br><span class="line">        gc.setAuthor(&quot;jdw&quot;);</span><br><span class="line">        //是否打开文件夹</span><br><span class="line">        gc.setOpen(false);</span><br><span class="line">        //是否覆盖已有文件</span><br><span class="line">        gc.setFileOverride(false);</span><br><span class="line">        //各层文件名称方式，例如： %sAction 生成 UserAction  %s占位符</span><br><span class="line">        gc.setServiceName(&quot;%sService&quot;);</span><br><span class="line">        //设置日期策略  date类型</span><br><span class="line">        gc.setDateType(DateType.ONLY_DATE);</span><br><span class="line">        //设置主键策略 雪花算法</span><br><span class="line">        gc.setIdType(IdType.ASSIGN_ID);</span><br><span class="line">        //设置开启 swagger2 模式</span><br><span class="line">        gc.setSwagger2(true);</span><br><span class="line">        //把全局配置放入代码生成器</span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        // 2、数据源配置</span><br><span class="line">        DataSourceConfig dsc = new DataSourceConfig();</span><br><span class="line">        dsc.setUrl(&quot;jdbc:mysql://localhost:3306/vueblog?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai&quot;);</span><br><span class="line">        dsc.setDriverName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span><br><span class="line">        dsc.setUsername(&quot;root&quot;);</span><br><span class="line">        dsc.setPassword(&quot;123456&quot;);</span><br><span class="line">        dsc.setDbType(DbType.MYSQL);</span><br><span class="line">        mpg.setDataSource(dsc); //把数据源配置加入到代码生成器</span><br><span class="line"></span><br><span class="line">        // 3、包配置</span><br><span class="line">        PackageConfig pc = new PackageConfig();</span><br><span class="line">        pc.setParent(&quot;com.jdw&quot;);</span><br><span class="line">        pc.setEntity(&quot;entity&quot;);</span><br><span class="line">        pc.setMapper(&quot;mapper&quot;);</span><br><span class="line">        pc.setService(&quot;service&quot;);</span><br><span class="line">        pc.setController(&quot;controller&quot;);</span><br><span class="line">        // ...  有默认值，点击查看源码</span><br><span class="line">        mpg.setPackageInfo(pc);//包加入代码生成器</span><br><span class="line"></span><br><span class="line">        // 4、策略配置</span><br><span class="line">        StrategyConfig strategy = new StrategyConfig();</span><br><span class="line">        //下划线转驼峰命名  表</span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        // 下划线转驼峰命名字段</span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        //实体类是否加上lombok注解</span><br><span class="line">        strategy.setEntityLombokModel(true);</span><br><span class="line">        //控制层采用RestControllerStyle注解</span><br><span class="line">        strategy.setRestControllerStyle(true);</span><br><span class="line">        // RequestMapping中 驼峰转连字符 -</span><br><span class="line">        strategy.setControllerMappingHyphenStyle(true);</span><br><span class="line">        //要映射的数据库表名  （重点）</span><br><span class="line">        strategy.setInclude(scanner(&quot;表名，多个英文逗号分割&quot;).split(&quot;,&quot;));</span><br><span class="line">        //添加表名前缀</span><br><span class="line">        //strategy.setTablePrefix(&quot;m_&quot;); //自动拼接上m_</span><br><span class="line">        //逻辑删除字段名</span><br><span class="line">        strategy.setLogicDeleteFieldName(&quot;deleted&quot;);</span><br><span class="line">        //乐观锁字段名</span><br><span class="line">        strategy.setVersionFieldName(&quot;version&quot;);</span><br><span class="line">        // -------自动填充策略</span><br><span class="line">        ArrayList&lt;TableFill&gt; fillList = new ArrayList&lt;&gt;();</span><br><span class="line">        fillList.add(new TableFill(&quot;createTime&quot;, FieldFill.INSERT));</span><br><span class="line">        fillList.add(new TableFill(&quot;updateTime&quot;,FieldFill.INSERT_UPDATE));</span><br><span class="line">        // 参数是 List&lt;TableFill&gt; 的链表</span><br><span class="line">        strategy.setTableFillList(fillList);</span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line"></span><br><span class="line">        //---------------------------------</span><br><span class="line">        // 自定义配置</span><br><span class="line">        InjectionConfig cfg = new InjectionConfig() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void initMap() &#123;</span><br><span class="line">                // to do nothing</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        // 如果模板引擎是 freemarker</span><br><span class="line">        String templatePath = &quot;/templates/mapper.xml.ftl&quot;;</span><br><span class="line">        // 如果模板引擎是 velocity</span><br><span class="line">        // String templatePath = &quot;/templates/mapper.xml.vm&quot;;</span><br><span class="line"></span><br><span class="line">        // 自定义输出配置</span><br><span class="line">        List&lt;FileOutConfig&gt; focList = new ArrayList&lt;&gt;();</span><br><span class="line">        // 自定义配置会被优先输出</span><br><span class="line">        focList.add(new FileOutConfig(templatePath) &#123;</span><br><span class="line">            @Override </span><br><span class="line">            //输出了 静态资源下的 Mapper</span><br><span class="line">            public String outputFile(TableInfo tableInfo) &#123;</span><br><span class="line">                // 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！</span><br><span class="line">                return projectPath + &quot;/src/main/resources/mapper/&quot; + pc.getModuleName()</span><br><span class="line">                        + &quot;/&quot; + tableInfo.getEntityName() + &quot;Mapper&quot; + StringPool.DOT_XML;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        cfg.setFileOutConfigList(focList);</span><br><span class="line">        mpg.setCfg(cfg);</span><br><span class="line"></span><br><span class="line">        //        FreemarkerTemplateEngine模板引擎</span><br><span class="line">        mpg.setTemplateEngine(new FreemarkerTemplateEngine());</span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MybatisPlus代码记录</title>
    <url>/2023/03/24/MybatisPlus%E4%BB%A3%E7%A0%81%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="MybatisPlus代码记录"><a href="#MybatisPlus代码记录" class="headerlink" title="MybatisPlus代码记录"></a>MybatisPlus代码记录</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line">import com.example.mybatisplus.batisplus.bean.User;</span><br><span class="line">import com.example.mybatisplus.batisplus.mapper.TestMapper;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author cb</span><br><span class="line"> * @create 2022-08-2022/8/14 21:02</span><br><span class="line"> */</span><br><span class="line">@Service</span><br><span class="line">public class TestSever &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    TestMapper userMapper;</span><br><span class="line">    //查询全部</span><br><span class="line">    public List&lt;User&gt; queryAll() &#123;</span><br><span class="line">        return userMapper.selectList(null);</span><br><span class="line">    &#125;</span><br><span class="line">    //通过id查询</span><br><span class="line">    public User queryById(User user) &#123;</span><br><span class="line">        return userMapper.selectById(user.getId());</span><br><span class="line">    &#125;</span><br><span class="line">    //通过姓名模糊查询</span><br><span class="line">    public List&lt;User&gt; queryByName1(String name) &#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; userQueryWrapper = new QueryWrapper&lt;&gt;();</span><br><span class="line">        userQueryWrapper.like(&quot;name&quot;, name); //参数为表中的列名，要查询的条件 相当于 WHERE name LIKE	%name%</span><br><span class="line">        return userMapper.selectList(userQueryWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">    //通过姓名精确查询</span><br><span class="line">    public List&lt;User&gt; queryByName2(String name) &#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; userQueryWrapper = new QueryWrapper&lt;&gt;();</span><br><span class="line">        userQueryWrapper.eq(&quot;name&quot;, name);//参数为表中的列名，要查询的条件 相当于 WHERE name = name</span><br><span class="line">        return userMapper.selectList(userQueryWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">    //还可以使用map来实现相同的效果</span><br><span class="line">    public List&lt;User&gt; queryByNameMap(String name) &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        map.put(&quot;name&quot;, name);</span><br><span class="line">        return userMapper.selectByMap(map);</span><br><span class="line">    &#125;</span><br><span class="line">    //通过Id查询批量查询</span><br><span class="line">    public List&lt;User&gt; queryByIds() &#123;</span><br><span class="line">        List&lt;Integer&gt; idList = new ArrayList&lt;&gt;();</span><br><span class="line">        idList.add(10);</span><br><span class="line">        idList.add(11);</span><br><span class="line">        return userMapper.selectBatchIds(idList);</span><br><span class="line">    &#125;</span><br><span class="line">    //计数</span><br><span class="line">    public int count() &#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; userQueryWrapper = new QueryWrapper&lt;&gt;();</span><br><span class="line">        return userMapper.selectCount(userQueryWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">    //update操作：</span><br><span class="line">    // 根据条件更新</span><br><span class="line">    public void changeBy(User user, String column, Object val) &#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; userQueryWrapper = new QueryWrapper&lt;&gt;();</span><br><span class="line">        userQueryWrapper.eq(column, val);</span><br><span class="line">        int num = userMapper.update(user, userQueryWrapper);</span><br><span class="line">        System.out.println(&quot;影响行数：&quot; + num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 通过ID修改信息</span><br><span class="line">    public void changeUserById(User user) &#123;</span><br><span class="line">        int num = userMapper.updateById(user);</span><br><span class="line">        System.out.println(&quot;影响行数：&quot; + num);</span><br><span class="line">    &#125;</span><br><span class="line">    //通过ID删除</span><br><span class="line">    public int deleteById(User user) &#123;</span><br><span class="line">        return userMapper.deleteById(user.getId());</span><br><span class="line">    &#125;</span><br><span class="line">    //通过条件删除</span><br><span class="line">    public void deleteBy(String column, Object val) &#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; userQueryWrapper = new QueryWrapper&lt;&gt;();</span><br><span class="line">        userQueryWrapper.eq(column, val);</span><br><span class="line">        int num = userMapper.delete(userQueryWrapper);</span><br><span class="line">        System.out.println(&quot;影响行数：&quot; + num);</span><br><span class="line">    &#125;</span><br><span class="line">    //注：该方法与selectByMap类似，将条件封装在columnMap中，然后调用deleteByMap方法，传入columnMap即可，返回值是Integer类型，表示影响的行数。</span><br><span class="line">    public void delete(Map&lt;String, Object&gt; map) &#123;</span><br><span class="line">        userMapper.deleteByMap(map);</span><br><span class="line">    &#125;</span><br><span class="line">    //通过id批量删除</span><br><span class="line">    //注：该方法和selectBatchIds类似，把需要删除的记录的id装进idList，然后调用deleteBatchIds，传入idList即可</span><br><span class="line">    public void deleteByIds() &#123;</span><br><span class="line">        List&lt;Integer&gt; idList = new ArrayList&lt;&gt;();</span><br><span class="line">        idList.add(10);</span><br><span class="line">        idList.add(11);</span><br><span class="line">        int num = userMapper.deleteBatchIds(idList);</span><br><span class="line">        System.out.println(&quot;影响行数：&quot; + num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //添加一条数据</span><br><span class="line">    public int add(User user) &#123;</span><br><span class="line">        return userMapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">    //添加多条数据</span><br><span class="line">    public void add(List&lt;User&gt; users) &#123;</span><br><span class="line">        for (User user : users) &#123;</span><br><span class="line">            add(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol>
<li></li>
</ol>
<p>狂神笔记:<a href="https://www.kuangstudy.com/bbs/1366329082232467457">https://www.kuangstudy.com/bbs/1366329082232467457</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test//通过条件查询之一  map</span><br><span class="line">public void testMap()&#123;</span><br><span class="line">    HashMap&lt;String, Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">    //自定义要查询的</span><br><span class="line">    map.put(&quot;name&quot;,&quot;www&quot;);</span><br><span class="line">    map.put(&quot;age&quot;,18);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectByMap(map);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testWrapper5() &#123;</span><br><span class="line">    //模糊查询</span><br><span class="line">    // SELECT id,name,age,email,version,deleted,create_time,update_time </span><br><span class="line">    //FROM user </span><br><span class="line">    //WHERE deleted=0 AND id IN </span><br><span class="line">    //(select id from user where id&lt;5)</span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = new QueryWrapper&lt;&gt;();</span><br><span class="line">    //id 在子查询中查出来</span><br><span class="line">    wrapper.inSql(&quot;id&quot;,&quot;select id from user where id&lt;5&quot;);</span><br><span class="line">    List&lt;Object&gt; objects = userMapper.selectObjs(wrapper);</span><br><span class="line">    objects.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testWrapper1() &#123;</span><br><span class="line">    //参数是一个wrapper ，条件构造器，和刚才的map对比学习！</span><br><span class="line">    //查询name不为空，email不为空，age大于18的用户</span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = new QueryWrapper&lt;&gt;();</span><br><span class="line">    wrapper</span><br><span class="line">        .isNotNull(&quot;name&quot;)</span><br><span class="line">        .isNotNull(&quot;email&quot;)</span><br><span class="line">        .ge(&quot;age&quot;,18);</span><br><span class="line">    List&lt;User&gt; userList = userMapper.selectList(wrapper);</span><br><span class="line">    userList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testWrapper2() &#123;</span><br><span class="line">    //查询name=wsk的用户</span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = new QueryWrapper&lt;&gt;();</span><br><span class="line">    wrapper.eq(&quot;name&quot;,&quot;wsk&quot;);</span><br><span class="line">    //查询一个数据selectOne，若查询出多个会报错</span><br><span class="line">    //Expected one result (or null) to be returned by selectOne(), but found: *</span><br><span class="line">    //若出现多个结果使用list或map</span><br><span class="line">    User user = userMapper.selectOne(wrapper);//查询一个数据，若出现多个结果使用list或map</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testWrapper3() &#123;</span><br><span class="line">    //查询age在10-20之间的用户</span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = new QueryWrapper&lt;&gt;();</span><br><span class="line">    wrapper.between(&quot;age&quot;, 10, 20);//区间</span><br><span class="line">    Integer count = userMapper.selectCount(wrapper);//输出查询的数量selectCount</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testWrapper4() &#123;</span><br><span class="line">    //模糊查询</span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = new QueryWrapper&lt;&gt;();</span><br><span class="line">    wrapper</span><br><span class="line">        .notLike(&quot;name&quot;,&quot;s&quot;)</span><br><span class="line">        .likeRight(&quot;email&quot;,&quot;t&quot;);//qq%  左和右？</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; maps = userMapper.selectMaps(wrapper);</span><br><span class="line">    maps.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testWrapper6() &#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = new QueryWrapper&lt;&gt;();</span><br><span class="line">    //通过id进行降序排序</span><br><span class="line">    wrapper.orderByDesc(&quot;id&quot;);</span><br><span class="line">    List&lt;User&gt; userList = userMapper.selectList(wrapper);</span><br><span class="line">    userList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">void contextLoads() &#123;</span><br><span class="line">    //参数是一个wrapper ，条件构造器，这里我们先不用 null</span><br><span class="line">    //查询全部的用户</span><br><span class="line">    List&lt;User&gt; userList = userMapper.selectList(null);</span><br><span class="line">    userList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testDeleteById()&#123;</span><br><span class="line">    userMapper.deleteById(1359507762519068681L);</span><br><span class="line">&#125;</span><br><span class="line">@Test</span><br><span class="line">public void testDeleteBatchIds()&#123;</span><br><span class="line">  userMapper.deleteBatchIds(Arrays.asList(1359507762519068675L,1359507762519068676L));</span><br><span class="line">&#125;</span><br><span class="line">@Test</span><br><span class="line">public void testD()&#123;</span><br><span class="line">    HashMap&lt;String, Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">    map.put(&quot;age&quot;,&quot;18&quot;);</span><br><span class="line">    map.put(&quot;name&quot;,&quot;lol&quot;);</span><br><span class="line">    userMapper.deleteByMap(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty的通讯与ESP8266（代码）</title>
    <url>/2022/07/17/Netty%E7%9A%84%E9%80%9A%E8%AE%AF%E4%B8%8EESP8266%EF%BC%88%E4%BB%A3%E7%A0%81%EF%BC%89/</url>
    <content><![CDATA[<h2 id="Netty的通讯与ESP8266（代码）"><a href="#Netty的通讯与ESP8266（代码）" class="headerlink" title="Netty的通讯与ESP8266（代码）"></a>Netty的通讯与ESP8266（代码）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NettyServer类</span><br><span class="line">NettyServerHandler类</span><br><span class="line">NettyClient类</span><br><span class="line">NettyClientHandler类</span><br><span class="line">ESP8266 通讯测试</span><br></pre></td></tr></table></figure>

<p>NettyServer类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class NettyServer &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        //创建BossGroup 和 WorkerGroup</span><br><span class="line">        //说明</span><br><span class="line">        //1. 创建两个线程组 bossGroup 和 workerGroup</span><br><span class="line">        //2. bossGroup 只是处理连接请求 , 真正的和客户端业务处理，会交给 workerGroup完成</span><br><span class="line">        //3. 两个都是无限循环</span><br><span class="line">        //4. bossGroup 和 workerGroup 含有的子线程(NioEventLoop)的个数</span><br><span class="line">        //   默认实际 cpu核数 * 2</span><br><span class="line">        EventLoopGroup bossGroup = new NioEventLoopGroup(1);</span><br><span class="line">        EventLoopGroup workerGroup = new NioEventLoopGroup(8); //8</span><br><span class="line">        try &#123;</span><br><span class="line">            //创建服务器端的启动对象，配置参数</span><br><span class="line">            ServerBootstrap bootstrap = new ServerBootstrap();</span><br><span class="line">            //使用链式编程来进行设置</span><br><span class="line">            bootstrap.group(bossGroup, workerGroup) //设置两个线程组</span><br><span class="line">                    .channel(NioServerSocketChannel.class) //使用NioSocketChannel 作为服务器的通道实现</span><br><span class="line">                    .option(ChannelOption.SO_BACKLOG, 128) // 设置线程队列得到连接个数</span><br><span class="line">                    .childOption(ChannelOption.SO_KEEPALIVE, true) //设置保持活动连接状态</span><br><span class="line">//                    .handler(null) // 该 handler对应 bossGroup , childHandler 对应 workerGroup</span><br><span class="line">                    .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        protected void initChannel(SocketChannel ch) throws Exception &#123;</span><br><span class="line">                            System.out.println(&quot;客户socketchannel hashcode=&quot; + ch.hashCode()); //可以使用一个集合管理 SocketChannel， 再推送消息时，可以将业务加入到各个channel 对应的 NIOEventLoop 的 taskQueue 或者 scheduleTaskQueue</span><br><span class="line">                            ch.pipeline().addLast(new NettyServerHandler());</span><br><span class="line">                        &#125;//创建一个通道初始化对象(匿名对象)</span><br><span class="line">                        //给pipeline 设置处理器</span><br><span class="line">                    &#125;); // 给我们的workerGroup 的 EventLoop 对应的管道设置处理器</span><br><span class="line">            System.out.println(&quot;.....服务器 is ready...&quot;);</span><br><span class="line">            //绑定一个端口并且同步, 生成了一个 ChannelFuture 对象</span><br><span class="line">            //启动服务器(并绑定端口)</span><br><span class="line">            ChannelFuture cf = bootstrap.bind(8087).sync();</span><br><span class="line">            //给cf 注册监听器，监控我们关心的事件</span><br><span class="line">            /*cf.addListener(new ChannelFutureListener() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void operationComplete(ChannelFuture future) throws Exception &#123;</span><br><span class="line">                    if (cf.isSuccess()) &#123;</span><br><span class="line">                        System.out.println(&quot;监听端口 6668 成功&quot;);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        System.out.println(&quot;监听端口 6668 失败&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);*/</span><br><span class="line">            //对关闭通道进行监听</span><br><span class="line">            cf.channel().closeFuture().sync();</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>NettyServerHandler类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">说明</span><br><span class="line">1. 我们自定义一个Handler 需要继续netty 规定好的某个HandlerAdapter(规范)</span><br><span class="line">2. 这时我们自定义一个Handler , 才能称为一个handler</span><br><span class="line"> */</span><br><span class="line">public class NettyServerHandler extends ChannelInboundHandlerAdapter &#123;</span><br><span class="line">    //读取数据实际(这里我们可以读取客户端发送的消息)</span><br><span class="line">    /*</span><br><span class="line">    1. ChannelHandlerContext ctx:上下文对象, 含有 管道pipeline , 通道channel, 地址</span><br><span class="line">    2. Object msg: 就是客户端发送的数据 默认Object</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        //比如这里我们有一个非常耗时长的业务-&gt; 异步执行 -&gt; 提交该channel 对应的</span><br><span class="line">        //NIOEventLoop 的 taskQueue中,</span><br><span class="line">        //解决方案1 用户程序自定义的普通任务</span><br><span class="line">        //解决方案2 : 用户自定义定时任务 -》 该任务是提交到 scheduleTaskQueue中</span><br><span class="line">        /*ctx.channel().eventLoop().execute(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(5 * 1000);</span><br><span class="line">                    ctx.writeAndFlush(Unpooled.copiedBuffer(&quot;hello, 客户端~(&gt;^ω^&lt;)喵2&quot;, CharsetUtil.UTF_8));</span><br><span class="line">                    System.out.println(&quot;channel code=&quot; + ctx.channel().hashCode());</span><br><span class="line">                &#125; catch (Exception ex) &#123;</span><br><span class="line">                    System.out.println(&quot;发生异常&quot; + ex.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);*/</span><br><span class="line">        System.out.println(&quot;go on ...&quot;);</span><br><span class="line">        System.out.println(&quot;服务器读取线程 &quot; + Thread.currentThread().getName() + &quot; channle =&quot; + ctx.channel());</span><br><span class="line">        System.out.println(&quot;server ctx =&quot; + ctx);</span><br><span class="line">        System.out.println(&quot;看看channel 和 pipeline的关系&quot;);</span><br><span class="line">        Channel channel = ctx.channel();</span><br><span class="line">        ChannelPipeline pipeline = ctx.pipeline(); //本质是一个双向链接, 出站入站</span><br><span class="line">        //将 msg 转成一个 ByteBuf</span><br><span class="line">        //ByteBuf 是 Netty 提供的，不是 NIO 的 ByteBuffer.</span><br><span class="line">        ByteBuf buf = (ByteBuf) msg;</span><br><span class="line">        System.out.println(&quot;客户端发送消息是:&quot; + buf.toString(CharsetUtil.UTF_8));</span><br><span class="line">        System.out.println(&quot;客户端地址:&quot; + channel.remoteAddress());</span><br><span class="line">    &#125;</span><br><span class="line">    //数据读取完毕</span><br><span class="line">    @Override</span><br><span class="line">    public void channelReadComplete(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class="line">        //writeAndFlush 是 write + flush</span><br><span class="line">        //将数据写入到缓存，并刷新</span><br><span class="line">        //一般讲，我们对这个发送的数据进行编码</span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(&quot;hello, 客户端~(&gt;^ω^&lt;)喵1&quot;, CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line">    //处理异常, 一般是需要关闭通道</span><br><span class="line">    @Override</span><br><span class="line">    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception &#123;</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>NettyClient类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class NettyClient &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        //客户端需要一个事件循环组</span><br><span class="line">        EventLoopGroup group = new NioEventLoopGroup();</span><br><span class="line">        try &#123;</span><br><span class="line">            //创建客户端启动对象</span><br><span class="line">            //注意客户端使用的不是 ServerBootstrap 而是 Bootstrap</span><br><span class="line">            Bootstrap bootstrap = new Bootstrap();</span><br><span class="line">            //Bootstrap bootstrap = new Bootstrap();</span><br><span class="line">            //设置相关参数</span><br><span class="line">            bootstrap.group(group) //设置线程组</span><br><span class="line">                    .channel(NioSocketChannel.class) // 设置客户端通道的实现类(反射)</span><br><span class="line">                    .handler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        @Override</span><br><span class="line">                        protected void initChannel(SocketChannel ch) throws Exception &#123;</span><br><span class="line">                            ch.pipeline().addLast(new NettyClientHandler()); //加入自己的处理器</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">            System.out.println(&quot;客户端 ok..&quot;);</span><br><span class="line"></span><br><span class="line">            //启动客户端去连接服务器端</span><br><span class="line">            //关于 ChannelFuture 要分析，涉及到netty的异步模型</span><br><span class="line">            ChannelFuture channelFuture = bootstrap.connect(&quot;127.0.0.1&quot;, 8087).sync();</span><br><span class="line">            //给关闭通道进行监听</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line"></span><br><span class="line">            group.shutdownGracefully();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>NettyClientHandler类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class NettyClientHandler extends ChannelInboundHandlerAdapter &#123;</span><br><span class="line"></span><br><span class="line">    //当通道就绪就会触发该方法</span><br><span class="line">    @Override</span><br><span class="line">    public void channelActive(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;client &quot; + ctx);</span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(&quot;hello, server: (&gt;^ω^&lt;)喵&quot;, CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //当通道有读取事件时，会触发</span><br><span class="line">    @Override</span><br><span class="line">    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        ByteBuf buf = (ByteBuf) msg;</span><br><span class="line">        System.out.println(&quot;服务器回复的消息:&quot; + buf.toString(CharsetUtil.UTF_8));</span><br><span class="line">        System.out.println(&quot;服务器的地址： &quot;+ ctx.channel().remoteAddress());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception &#123;</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>与ESP8266 通讯测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;ESP8266WiFi.h&gt;        </span><br><span class="line">#include &lt;WiFiClient.h&gt; </span><br><span class="line">/*****************网络设置项 *****************/</span><br><span class="line">const char *STAssid =&quot;iQOOZ1&quot;;                   //需要连接路由器的名称</span><br><span class="line">const char *STApassword=&quot;chenbin123&quot;;      //路由器的密码</span><br><span class="line">const char *host= &quot;192.168.94.71&quot;;              //外网服务器ip</span><br><span class="line">const int httpPort = 8087;                    //外网服务器端口</span><br><span class="line">WiFiClient client;                            //声明客户端对象</span><br><span class="line">bool is=0;                                    //用来做连接到服务器后，仅发送一次问候语                             </span><br><span class="line">void setup() &#123;</span><br><span class="line">  Serial.begin(115200);</span><br><span class="line">  Serial.println(&quot;开始连接&quot;);</span><br><span class="line">  WiFi.mode(WIFI_STA);                       //设置为STA模式 </span><br><span class="line">  WiFi.begin(STAssid, STApassword);          //配置连接信息，开始连接</span><br><span class="line">  //运行自定义函数，在未连接到路由器的过程中，打印输出......，直到连接成功   </span><br><span class="line">  gotoWifi();  </span><br><span class="line">  Serial.println(&quot;连接路由器成功&quot;);</span><br><span class="line">  //此时已经连接到路由器，可以开始连接远程服务器   </span><br><span class="line">  lianjie();                                 </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void loop() &#123;  </span><br><span class="line"> </span><br><span class="line">/****************检测WiFi连接状态****************/ </span><br><span class="line">  if (WiFi.status() != WL_CONNECTED) &#123; </span><br><span class="line">    WiFi.disconnect();</span><br><span class="line">    WiFi.begin(STAssid, STApassword);</span><br><span class="line">    gotoWifi();  </span><br><span class="line">  &#125;</span><br><span class="line">  else&#123;</span><br><span class="line">    if (!client.connected()) &#123;            //如果没有连接到服务器</span><br><span class="line">      lianjie();</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;                                //否则，就是连接到服务器</span><br><span class="line">      if(is==0)&#123;</span><br><span class="line">        client.print(&quot;hello,server&quot;); </span><br><span class="line">        Serial.println(&quot;hello,client&quot;);</span><br><span class="line">        is=1;      </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  Tcp_Handler(Read_Tcp());              //读取服务器信息，并处理</span><br><span class="line">  Tcp_HandlerClient(Write_Tcp());</span><br><span class="line">&#125;</span><br><span class="line">//读取服务器信息，返回String类型</span><br><span class="line">String Read_Tcp()&#123;</span><br><span class="line">  String data = &quot;&quot;;          </span><br><span class="line">  while (client.available() &gt; 0)&#123;</span><br><span class="line">    data += char(client.read());</span><br><span class="line">    delay(2);    </span><br><span class="line">  &#125; </span><br><span class="line">  return data;</span><br><span class="line">&#125;</span><br><span class="line">//发送信息，返回String类型</span><br><span class="line">String Write_Tcp()&#123;</span><br><span class="line">  String data = &quot;&quot;;          </span><br><span class="line">  while (Serial.available() &gt; 0)&#123;</span><br><span class="line">    data += char(Serial.read());</span><br><span class="line">    delay(2);    </span><br><span class="line">  &#125; </span><br><span class="line">  return data;</span><br><span class="line">&#125;</span><br><span class="line">//处理服务器信息</span><br><span class="line">void Tcp_Handler(String data)&#123;</span><br><span class="line">  if(data!=&quot;&quot;)&#123;</span><br><span class="line">    Serial.print(&quot;收到服务器信息：&quot;);</span><br><span class="line">    Serial.println(data);</span><br><span class="line">   </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line">//处理客户端信息</span><br><span class="line">void Tcp_HandlerClient(String data)&#123;</span><br><span class="line">   /****************获取温度湿度****************/  </span><br><span class="line">  float temperature = getTemp(); //调用函数计算温度值</span><br><span class="line">  client.print(&quot;温度:&quot;);</span><br><span class="line">  client.println(temperature);</span><br><span class="line">  if(data!=&quot;&quot;)&#123;</span><br><span class="line">    client.print(&quot;client:&quot;);</span><br><span class="line">    client.println(data);</span><br><span class="line">   </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line">//连接路由器</span><br><span class="line">void gotoWifi()&#123;</span><br><span class="line">  while (WiFi.status() != WL_CONNECTED) &#123;</span><br><span class="line">    delay(500);    </span><br><span class="line">    Serial.print(&quot;.&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">//连接服务器</span><br><span class="line">void lianjie() &#123;</span><br><span class="line">  Serial.println(&quot;开始连接服务器&quot;);</span><br><span class="line">  client.connect(host, httpPort);</span><br><span class="line">  delay(1000);</span><br><span class="line">&#125;</span><br><span class="line">//模拟温湿度</span><br><span class="line">float getTemp()&#123;</span><br><span class="line">  //returns the temperature from one DS18S20 in DEG Celsius</span><br><span class="line">  float temp[]=&#123;23.22,24.12,25.16,27.13,27.15,19.36,26.45&#125;;</span><br><span class="line">  float aa=0;</span><br><span class="line">  long randNumber = random(6);</span><br><span class="line">  delay(100); //延迟0.1S   </span><br><span class="line">  return temp[randNumber];   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>16.Mysql常用语句</title>
    <url>/2022/05/15/Mysql%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h3 id="Mysql数据基础语句"><a href="#Mysql数据基础语句" class="headerlink" title="Mysql数据基础语句"></a>Mysql数据基础语句</h3><h3 id="一，基础语句"><a href="#一，基础语句" class="headerlink" title="一，基础语句"></a>一，基础语句</h3><p>1.创建数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE 数据库名;</span><br></pre></td></tr></table></figure>

<p>2.创建数据库表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS `webdome`(</span><br><span class="line">   `id` VARCHAR(100) NOT NULL,</span><br><span class="line">   `name` VARCHAR(100),</span><br><span class="line">   `url` VARCHAR(40),</span><br><span class="line">   `pid` VARCHAR(100),</span><br><span class="line">   `path` VARCHAR(100),</span><br><span class="line">   `createtime` VARCHAR(100),</span><br><span class="line">   PRIMARY KEY ( `id` )</span><br><span class="line">)ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure>

<p>实例解析：</p>
<ul>
<li>如果你不想字段为 <strong>NULL</strong> 可以设置字段的属性为 <strong>NOT NULL</strong>， 在操作数据库时如果输入该字段的数据为<strong>NULL</strong> ，就会报错。</li>
<li>AUTO_INCREMENT定义列为自增的属性，一般用于主键，数值会自动加1。</li>
<li>PRIMARY KEY关键字用于定义列为主键。 您可以使用多列来定义主键，列间以逗号分隔。</li>
<li>ENGINE 设置存储引擎，CHARSET 设置编码。</li>
</ul>
<p>3.删除数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop database &lt;数据库名&gt;;</span><br></pre></td></tr></table></figure>

<p>4.选择数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use &lt;数据库名&gt;;</span><br></pre></td></tr></table></figure>

<p>5.删除MySQL数据表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop table table_name</span><br></pre></td></tr></table></figure>

<p>6.显示某个数据库所有表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure>

<p>7.删除 MySQL 数据表中的记录。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from table_name [where clause]</span><br></pre></td></tr></table></figure>

<p>8.插入数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO table_name ( field1, field2,...fieldN )</span><br><span class="line">                       VALUES</span><br><span class="line">                       ( value1, value2,...valueN );</span><br></pre></td></tr></table></figure>

<p>9.查询数据通用的 SELECT 语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT column_name,column_name</span><br><span class="line">FROM table_name</span><br><span class="line">[WHERE Clause]</span><br></pre></td></tr></table></figure>

<p>实例：</p>
<p>查询某张表某列所有数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from dept;</span><br></pre></td></tr></table></figure>

<p>having,用于过滤分组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select swjg_dm , sum(se) se</span><br><span class="line">  from sb_zsxx</span><br><span class="line">  group by swjg_dm</span><br><span class="line">  having sum(se)&gt;500000</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from 队员表</span><br><span class="line">select 姓名, 所在城市 as 球队所在城市 </span><br><span class="line">from 队员表,球队表</span><br><span class="line">where 队员表.球队名 = (select 反方球队 from 比赛表 where 比赛编号=&#x27;比赛001&#x27;)</span><br><span class="line">and 球队表.球队名 = (select 反方球队 from 比赛表 where 比赛编号=&#x27;比赛001&#x27;)</span><br></pre></td></tr></table></figure>

<p>10.修改表中的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update 表名称 set 列名称=新值 where 更新条件;</span><br></pre></td></tr></table></figure>

<p>以下是在表 students 中的实例:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将 id 为 5 的手机号改为默认的: </span><br><span class="line">update students settel=default where id=5;</span><br><span class="line"></span><br><span class="line">将所有人的年龄增加 1: </span><br><span class="line">update students set age=age+1;</span><br><span class="line"></span><br><span class="line">将手机号为 13288097888 的姓名改为 &quot;小明&quot;, 年龄改为 19:</span><br><span class="line">update students setname=&quot;小明&quot;, age=19 wheretel=&quot;13288097888&quot;;</span><br></pre></td></tr></table></figure>

<h3 id="二，连接Join"><a href="#二，连接Join" class="headerlink" title="二，连接Join"></a>二，连接Join</h3><p><strong>1、join</strong><br>join，其实就是“inner join”，为了简写才写成join，两个是表示一个的，内连接，表示以两个表的交集为主，查出来是两个表有交集的部分，其余没有关联就不额外显示出来，这个用的情况也是挺多的，如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from kemu</span><br><span class="line">join score on kemu.id = score.id</span><br></pre></td></tr></table></figure>

<p>在kemu中加入score表</p>
<p><strong>2、left join</strong><br>顾名思义，就是“左连接”，表1左连接表2，以左为主，表示以表1为主，关联上表2的数据，查出来的结果显示左边的所有数据，然后右边显示的是和左边有交集部分的数据。如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from kemu</span><br><span class="line">left join score on kemu.id = score.id</span><br></pre></td></tr></table></figure>

<p>完全显示kemu表的内容，score表仅展示交集部分</p>
<p><strong>2、right join</strong></p>
<p>“右连接”，表1右连接表2，以右为主，表示以表2为主，关联查询表1的数据，查出表2所有数据以及表1和表2有交集的数据，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from kemu</span><br><span class="line">right join score on kemu.id = score.id</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql基础（黑马程序员视频笔记总结）</title>
    <url>/2022/08/15/Mysql%E5%9F%BA%E7%A1%80%EF%BC%88%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A7%86%E9%A2%91%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Mysql基础（黑马程序员视频笔记总结）"><a href="#Mysql基础（黑马程序员视频笔记总结）" class="headerlink" title="Mysql基础（黑马程序员视频笔记总结）"></a>Mysql基础（黑马程序员视频笔记总结）</h1><h2 id="通用语法及分类"><a href="#通用语法及分类" class="headerlink" title="通用语法及分类"></a>通用语法及分类</h2><ul>
<li>DDL: 数据定义语言，用来定义数据库对象（数据库、表、字段）</li>
<li>DML: 数据操作语言，用来对数据库表中的数据进行增删改</li>
<li>DQL: 数据查询语言，用来查询数据库中表的记录</li>
<li>DCL: 数据控制语言，用来创建数据库用户、控制数据库的控制权限</li>
</ul>
<h3 id="DDL（数据定义语言）"><a href="#DDL（数据定义语言）" class="headerlink" title="DDL（数据定义语言）"></a>DDL（数据定义语言）</h3><p>数据定义语言</p>
<h4 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查询所有数据库：</span><br><span class="line">`SHOW DATABASES;`</span><br><span class="line">查询当前数据库：</span><br><span class="line">`SELECT DATABASE();`</span><br><span class="line">创建数据库：</span><br><span class="line">`CREATE DATABASE [ IF NOT EXISTS ] 数据库名 [ DEFAULT CHARSET 字符集] [COLLATE 排序规则 ];`</span><br><span class="line">删除数据库：</span><br><span class="line">`DROP DATABASE [ IF EXISTS ] 数据库名;`</span><br><span class="line">使用数据库：</span><br><span class="line">`USE 数据库名;`</span><br><span class="line">##### 注意事项</span><br><span class="line">- UTF8字符集长度为3字节，有些符号占4字节，所以推荐用utf8mb4字符集</span><br><span class="line">#### 表操作</span><br></pre></td></tr></table></figure>

<p>数据库表操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查询当前数据库所有表：</span><br><span class="line">`SHOW TABLES;`</span><br><span class="line">查询表结构：</span><br><span class="line">`DESC 表名;`</span><br><span class="line">查询指定表的建表语句：</span><br><span class="line">`SHOW CREATE TABLE 表名;`</span><br></pre></td></tr></table></figure>

<p>创建表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">	字段1 字段1类型 [COMMENT 字段1注释],</span><br><span class="line">	字段2 字段2类型 [COMMENT 字段2注释],</span><br><span class="line">	字段3 字段3类型 [COMMENT 字段3注释],</span><br><span class="line">	...</span><br><span class="line">	字段n 字段n类型 [COMMENT 字段n注释]</span><br><span class="line">)[ COMMENT 表注释 ];</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>实例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auto_increment_increment  = 1 ，每次插入数据，id++；</span><br><span class="line">auto_increment_offset =1 ，说明从1开始。</span><br><span class="line"></span><br><span class="line">create table user(</span><br><span class="line">    id int primary key auto_increment comment &#x27;主键&#x27;,</span><br><span class="line">    name varchar(10) not null unique comment &#x27;姓名&#x27;,</span><br><span class="line">    age int check ( age &gt; 0 &amp;&amp; age &lt;= 120 ) comment &#x27;年龄&#x27;,</span><br><span class="line">    status char(1) default &#x27;1&#x27; comment &#x27;状态&#x27;,</span><br><span class="line">    gender char(1) comment &#x27;性别&#x27;</span><br><span class="line">) comment &#x27;用户表&#x27;;</span><br><span class="line">或者</span><br><span class="line">create table user(</span><br><span class="line">    id int primary key comment &#x27;主键&#x27;,</span><br><span class="line">    name varchar(10) not null unique comment &#x27;姓名&#x27;,</span><br><span class="line">    age int check ( age &gt; 0 &amp;&amp; age &lt;= 120 ) comment &#x27;年龄&#x27;,</span><br><span class="line">    status char(1) default &#x27;1&#x27; comment &#x27;状态&#x27;,</span><br><span class="line">    gender char(1) comment &#x27;性别&#x27;</span><br><span class="line">)ENGINE=InnoDB AUTO_INCREMENT=704677 DEFAULT CHARSET=utf8 comment &#x27;用户表&#x27;;</span><br></pre></td></tr></table></figure>

<p><strong>最后一个字段后面没有逗号</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.添加字段：</span><br><span class="line">`ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];`</span><br><span class="line">例：`ALTER TABLE emp ADD nickname varchar(20) COMMENT &#x27;昵称&#x27;;`</span><br><span class="line">2.修改数据类型：</span><br><span class="line">`ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);`</span><br><span class="line">3.修改字段名和字段类型：</span><br><span class="line">`ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];`</span><br><span class="line">例：将emp表的nickname字段修改为username，类型为varchar(30)</span><br><span class="line">`ALTER TABLE emp CHANGE nickname username varchar(30) COMMENT &#x27;昵称&#x27;;`</span><br><span class="line">4.删除字段：</span><br><span class="line">`ALTER TABLE 表名 DROP 字段名;`</span><br><span class="line">5.修改表名：</span><br><span class="line">`ALTER TABLE 表名 RENAME TO 新表名`</span><br><span class="line">6.删除表：</span><br><span class="line">`DROP TABLE [IF EXISTS] 表名;`</span><br><span class="line">7.删除表，并重新创建该表：</span><br><span class="line">`TRUNCATE TABLE 表名;</span><br></pre></td></tr></table></figure>

<h3 id="DML（数据操作语言）"><a href="#DML（数据操作语言）" class="headerlink" title="DML（数据操作语言）"></a>DML（数据操作语言）</h3><h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">指定字段：</span><br><span class="line">`INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...);`</span><br><span class="line">全部字段：</span><br><span class="line">`INSERT INTO 表名 VALUES (值1, 值2, ...);`</span><br><span class="line">批量添加数据：</span><br><span class="line">`INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);`</span><br><span class="line">`INSERT INTO 表名 VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</span><br><span class="line"></span><br><span class="line">insert into user(name,age,status,gender) values (&#x27;Tom4&#x27;,80,&#x27;1&#x27;,&#x27;男&#x27;);</span><br><span class="line">insert into user(name,age,status,gender) values (&#x27;Tom5&#x27;,-1,&#x27;1&#x27;,&#x27;男&#x27;);</span><br><span class="line">insert into user(name,age,status,gender) values (&#x27;Tom5&#x27;,121,&#x27;1&#x27;,&#x27;男&#x27;);</span><br><span class="line">insert into user(name,age,gender) values (&#x27;Tom5&#x27;,120,&#x27;男&#x27;);</span><br></pre></td></tr></table></figure>

<h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><ul>
<li>字符串和日期类型数据应该包含在引号中</li>
<li>插入的数据大小应该在字段的规定范围内</li>
</ul>
<h4 id="更新和删除数据"><a href="#更新和删除数据" class="headerlink" title="更新和删除数据"></a>更新和删除数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改数据：</span><br><span class="line">`UPDATE 表名 SET 字段名1 = 值1, 字段名2 = 值2, ... [ WHERE 条件 ];`</span><br><span class="line">例：</span><br><span class="line">`UPDATE emp SET name = &#x27;Jack&#x27; WHERE id = 1;`</span><br><span class="line">删除数据：</span><br><span class="line">`DELETE FROM 表名 [ WHERE 条件 ];</span><br></pre></td></tr></table></figure>

<h3 id="DQL（数据查询语言）"><a href="#DQL（数据查询语言）" class="headerlink" title="DQL（数据查询语言）"></a>DQL（数据查询语言）</h3><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	字段列表</span><br><span class="line">FROM</span><br><span class="line">	表名字段</span><br><span class="line">WHERE</span><br><span class="line">	条件列表</span><br><span class="line">GROUP BY</span><br><span class="line">	分组字段列表</span><br><span class="line">HAVING</span><br><span class="line">	分组后的条件列表</span><br><span class="line">ORDER BY</span><br><span class="line">	排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">	分页参数</span><br></pre></td></tr></table></figure>

<h4 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查询多个字段：</span><br><span class="line">`SELECT 字段1, 字段2, 字段3, ... FROM 表名;`</span><br><span class="line">`SELECT * FROM 表名;`</span><br><span class="line">设置别名：</span><br><span class="line">`SELECT 字段1 [ AS 别名1 ], 字段2 [ AS 别名2 ], 字段3 [ AS 别名3 ], ... FROM 表名;`</span><br><span class="line">`SELECT 字段1 [ 别名1 ], 字段2 [ 别名2 ], 字段3 [ 别名3 ], ... FROM 表名;`</span><br><span class="line">去除重复记录：</span><br><span class="line">`SELECT DISTINCT 字段列表 FROM 表名;`</span><br><span class="line">转义：</span><br><span class="line">`SELECT * FROM 表名 WHERE name LIKE &#x27;/_张三&#x27; ESCAPE &#x27;/&#x27;`</span><br><span class="line">/ 之后的_不作为通配符</span><br></pre></td></tr></table></figure>

<h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 WHERE 条件列表;</code></p>
<p>条件：</p>
<table>
<thead>
<tr>
<th>比较运算符</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;&gt; 或 !&#x3D;</td>
<td>不等于</td>
</tr>
<tr>
<td>BETWEEN … AND …</td>
<td>在某个范围内（含最小、最大值）</td>
</tr>
<tr>
<td>IN(…)</td>
<td>在in之后的列表中的值，多选一</td>
</tr>
<tr>
<td>LIKE 占位符</td>
<td>模糊匹配（_匹配单个字符，%匹配任意个字符）</td>
</tr>
<tr>
<td>IS NULL</td>
<td>是NULL</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>逻辑运算符</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>AND 或 &amp;&amp;</td>
<td>并且（多个条件同时成立）</td>
</tr>
<tr>
<td>OR 或 ||</td>
<td>或者（多个条件任意一个成立）</td>
</tr>
<tr>
<td>NOT 或 !</td>
<td>非，不是</td>
</tr>
</tbody></table>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 没有身份证</span><br><span class="line">select * from employee where idcard is null or idcard = &#x27;&#x27;;</span><br><span class="line">-- 有身份证</span><br><span class="line">select * from employee where idcard;</span><br><span class="line">select * from employee where idcard is not null;</span><br><span class="line">-- 不等于</span><br><span class="line">select * from employee where age != 30;</span><br><span class="line">-- 年龄在20到30之间</span><br><span class="line">select * from employee where age between 20 and 30;</span><br><span class="line">select * from employee where age &gt;= 20 and age &lt;= 30;</span><br><span class="line">-- 下面语句不报错，但查不到任何信息</span><br><span class="line">select * from employee where age between 30 and 20;</span><br><span class="line">-- 性别为女且年龄小于30</span><br><span class="line">select * from employee where age &lt; 30 and gender = &#x27;女&#x27;;</span><br><span class="line">-- 年龄等于25或30或35</span><br><span class="line">select * from employee where age = 25 or age = 30 or age = 35;</span><br><span class="line">select * from employee where age in (25, 30, 35);</span><br><span class="line">-- 姓名为两个字</span><br><span class="line">select * from employee where name like &#x27;__&#x27;;</span><br><span class="line">-- 身份证最后为X</span><br><span class="line">select * from employee where idcard like &#x27;%X&#x27;;</span><br></pre></td></tr></table></figure>

<h4 id="聚合查询（聚合函数）"><a href="#聚合查询（聚合函数）" class="headerlink" title="聚合查询（聚合函数）"></a>聚合查询（聚合函数）</h4><p>常见聚合函数：</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>count</td>
<td>统计数量</td>
</tr>
<tr>
<td>max</td>
<td>最大值</td>
</tr>
<tr>
<td>min</td>
<td>最小值</td>
</tr>
<tr>
<td>avg</td>
<td>平均值</td>
</tr>
<tr>
<td>sum</td>
<td>求和</td>
</tr>
</tbody></table>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`SELECT 聚合函数(字段列表) FROM 表名;`</span><br><span class="line">例：</span><br><span class="line">`SELECT count(id) from employee where workaddress = &quot;广东省&quot;;`</span><br></pre></td></tr></table></figure>

<h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表名 [ WHERE 条件 ] GROUP BY 分组字段名 [ HAVING 分组后的过滤条件 ];`</span><br><span class="line"></span><br><span class="line">where 和 having 的区别：</span><br><span class="line">- 执行时机不同：where是分组之前进行过滤，不满足where条件不参与分组；having是分组后对结果进行过滤。</span><br><span class="line">- 判断条件不同：where不能对聚合函数进行判断，而having可以。</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 根据性别分组，统计男性和女性数量（只显示分组数量，不显示哪个是男哪个是女）</span><br><span class="line">select count(*) from employee group by gender;</span><br><span class="line">-- 根据性别分组，统计男性和女性数量</span><br><span class="line">select gender, count(*) from employee group by gender;</span><br><span class="line">-- 根据性别分组，统计男性和女性的平均年龄</span><br><span class="line">select gender, avg(age) from employee group by gender;</span><br><span class="line">-- 年龄小于45，并根据工作地址分组</span><br><span class="line">select workaddress, count(*) from employee where age &lt; 45 group by workaddress;</span><br><span class="line">-- 年龄小于45，并根据工作地址分组，获取员工数量大于等于3的工作地址</span><br><span class="line">select workaddress, count(*) address_count from employee where age &lt; 45 group by workaddress having address_count &gt;= 3;</span><br></pre></td></tr></table></figure>

<h5 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h5><ul>
<li>执行顺序：where &gt; 聚合函数 &gt; having</li>
<li>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义</li>
</ul>
<h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1, 字段2 排序方式2;`</span><br></pre></td></tr></table></figure>

<p>排序方式：</p>
<ul>
<li>ASC: 升序（默认）</li>
<li>DESC: 降序</li>
</ul>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 根据年龄升序排序</span><br><span class="line">SELECT * FROM employee ORDER BY age ASC;</span><br><span class="line">SELECT * FROM employee ORDER BY age;</span><br><span class="line">-- 两字段排序，根据年龄升序排序，入职时间降序排序</span><br><span class="line">SELECT * FROM employee ORDER BY age ASC, entrydate DESC;</span><br></pre></td></tr></table></figure>

<h5 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h5><p>如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序</p>
<h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数;</code></p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询第一页数据，展示10条</span><br><span class="line">SELECT * FROM employee LIMIT 0, 10;</span><br><span class="line">-- 查询第二页</span><br><span class="line">SELECT * FROM employee LIMIT 10, 10;</span><br><span class="line">1234</span><br></pre></td></tr></table></figure>

<h5 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h5><ul>
<li>起始索引从0开始，起始索引 &#x3D; （查询页码 - 1） * 每页显示记录数</li>
<li>分页查询是数据库的方言，不同数据库有不同实现，MySQL是LIMIT</li>
<li>如果查询的是第一页数据，起始索引可以省略，直接简写 LIMIT 10</li>
</ul>
<h4 id="DQL执行顺序"><a href="#DQL执行顺序" class="headerlink" title="DQL执行顺序"></a>DQL执行顺序</h4><p>FROM -&gt; WHERE -&gt; GROUP BY -&gt; SELECT -&gt; ORDER BY -&gt; LIMIT</p>
<h3 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h3><h4 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h4><p>查询用户：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">USER mysql;</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">12</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">创建用户:</span><br><span class="line">`CREATE USER &#x27;用户名&#x27;@&#x27;主机名&#x27; IDENTIFIED BY &#x27;密码&#x27;;`</span><br><span class="line"></span><br><span class="line">修改用户密码：</span><br><span class="line">`ALTER USER &#x27;用户名&#x27;@&#x27;主机名&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;新密码&#x27;;`</span><br><span class="line"></span><br><span class="line">删除用户：</span><br><span class="line">`DROP USER &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建用户test，只能在当前主机localhost访问</span><br><span class="line">create user &#x27;test&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">-- 创建用户test，能在任意主机访问</span><br><span class="line">create user &#x27;test&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">create user &#x27;test&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">-- 修改密码</span><br><span class="line">alter user &#x27;test&#x27;@&#x27;localhost&#x27; identified with mysql_native_password by &#x27;1234&#x27;;</span><br><span class="line">-- 删除用户</span><br><span class="line">drop user &#x27;test&#x27;@&#x27;localhost&#x27;;</span><br><span class="line">123456789</span><br></pre></td></tr></table></figure>

<h5 id="注意事项-4"><a href="#注意事项-4" class="headerlink" title="注意事项"></a>注意事项</h5><ul>
<li>主机名可以使用 % 通配</li>
</ul>
<h4 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h4><p>常用权限：</p>
<table>
<thead>
<tr>
<th>权限</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>ALL, ALL PRIVILEGES</td>
<td>所有权限</td>
</tr>
<tr>
<td>SELECT</td>
<td>查询数据</td>
</tr>
<tr>
<td>INSERT</td>
<td>插入数据</td>
</tr>
<tr>
<td>UPDATE</td>
<td>修改数据</td>
</tr>
<tr>
<td>DELETE</td>
<td>删除数据</td>
</tr>
<tr>
<td>ALTER</td>
<td>修改表</td>
</tr>
<tr>
<td>DROP</td>
<td>删除数据库&#x2F;表&#x2F;视图</td>
</tr>
<tr>
<td>CREATE</td>
<td>创建数据库&#x2F;表</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查询权限：</span><br><span class="line">`SHOW GRANTS FOR &#x27;用户名&#x27;@&#x27;主机名&#x27;;`</span><br><span class="line"></span><br><span class="line">授予权限：</span><br><span class="line">`GRANT 权限列表 ON 数据库名.表名 TO &#x27;用户名&#x27;@&#x27;主机名&#x27;;`</span><br><span class="line"></span><br><span class="line">撤销权限：</span><br><span class="line">`REVOKE 权限列表 ON 数据库名.表名 FROM &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure>

<p>实例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、root登录服务器 进入数据库 mysql -u root -p</span><br><span class="line">2、创建数据库 create database shop;  shop 为数据库名称</span><br><span class="line">3、查看创建数据库 show databases; (小命令 use shop; 进入数据库 show table;)</span><br><span class="line">4、创建数据库的用户</span><br><span class="line">create user &#x27;shop_user&#x27;@&#x27;%&#x27; identified by &#x27;shop@123&#x27;;</span><br><span class="line"></span><br><span class="line">&#x27;shop_user&#x27; 用户名称</span><br><span class="line">&#x27;shop@123&#x27; 用户密码</span><br><span class="line">@后的命令解释</span><br><span class="line">&#x27;%&#x27; - 所有情况都能访问</span><br><span class="line">&#x27;localhost&#x27; - 本机才能访问</span><br><span class="line">&#x27;111.222.33.44&#x27; - 指定 ip 才能访问</span><br><span class="line"> </span><br><span class="line">5、给予新用户的授予权限</span><br><span class="line">grant all/select on 数据库名.数据库表 to 用户名@&#x27;%&#x27;  identified by &quot;密码&quot;;</span><br></pre></td></tr></table></figure>

<h5 id="注意事项-5"><a href="#注意事项-5" class="headerlink" title="注意事项"></a>注意事项</h5><ul>
<li>多个权限用逗号分隔</li>
<li>授权时，数据库名和表名可以用 * 进行通配，代表所有</li>
</ul>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul>
<li>字符串函数</li>
<li>数值函数</li>
<li>日期函数</li>
<li>流程函数</li>
</ul>
<h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><p>常用函数：</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>CONCAT(s1, s2, …, sn)</td>
<td>字符串拼接，将s1, s2, …, sn拼接成一个字符串</td>
</tr>
<tr>
<td>LOWER(str)</td>
<td>将字符串全部转为小写</td>
</tr>
<tr>
<td>UPPER(str)</td>
<td>将字符串全部转为大写</td>
</tr>
<tr>
<td>LPAD(str, n, pad)</td>
<td>左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td>
</tr>
<tr>
<td>RPAD(str, n, pad)</td>
<td>右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td>
</tr>
<tr>
<td>TRIM(str)</td>
<td>去掉字符串头部和尾部的空格</td>
</tr>
<tr>
<td>SUBSTRING(str, start, len)</td>
<td>返回从字符串str从start位置起的len个长度的字符串</td>
</tr>
</tbody></table>
<p>使用示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 拼接</span><br><span class="line">SELECT CONCAT(&#x27;Hello&#x27;, &#x27;World&#x27;);</span><br><span class="line">-- 小写</span><br><span class="line">SELECT LOWER(&#x27;Hello&#x27;);</span><br><span class="line">-- 大写</span><br><span class="line">SELECT UPPER(&#x27;Hello&#x27;);</span><br><span class="line">-- 左填充</span><br><span class="line">SELECT LPAD(&#x27;01&#x27;, 5, &#x27;-&#x27;);</span><br><span class="line">-- 右填充</span><br><span class="line">SELECT RPAD(&#x27;01&#x27;, 5, &#x27;-&#x27;);</span><br><span class="line">-- 去除空格</span><br><span class="line">SELECT TRIM(&#x27; Hello World &#x27;);</span><br><span class="line">-- 切片（起始索引为1）</span><br><span class="line">SELECT SUBSTRING(&#x27;Hello World&#x27;, 1, 5);</span><br><span class="line">1234567891011121314</span><br></pre></td></tr></table></figure>

<h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><p>常见函数：</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>CEIL(x)</td>
<td>向上取整</td>
</tr>
<tr>
<td>FLOOR(x)</td>
<td>向下取整</td>
</tr>
<tr>
<td>MOD(x, y)</td>
<td>返回x&#x2F;y的模</td>
</tr>
<tr>
<td>RAND()</td>
<td>返回0~1内的随机数</td>
</tr>
<tr>
<td>ROUND(x, y)</td>
<td>求参数x的四舍五入值，保留y位小数</td>
</tr>
</tbody></table>
<h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><p>常用函数：</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>CURDATE()</td>
<td>返回当前日期</td>
</tr>
<tr>
<td>CURTIME()</td>
<td>返回当前时间</td>
</tr>
<tr>
<td>NOW()</td>
<td>返回当前日期和时间</td>
</tr>
<tr>
<td>YEAR(date)</td>
<td>获取指定date的年份</td>
</tr>
<tr>
<td>MONTH(date)</td>
<td>获取指定date的月份</td>
</tr>
<tr>
<td>DAY(date)</td>
<td>获取指定date的日期</td>
</tr>
<tr>
<td>DATE_ADD(date, INTERVAL expr type)</td>
<td>返回一个日期&#x2F;时间值加上一个时间间隔expr后的时间值</td>
</tr>
<tr>
<td>DATEDIFF(date1, date2)</td>
<td>返回起始时间date1和结束时间date2之间的天数</td>
</tr>
</tbody></table>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- DATE_ADD</span><br><span class="line">SELECT DATE_ADD(NOW(), INTERVAL 70 YEAR);</span><br><span class="line">12</span><br></pre></td></tr></table></figure>

<h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h3><p>常用函数：</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>IF(value, t, f)</td>
<td>如果value为true，则返回t，否则返回f</td>
</tr>
<tr>
<td>IFNULL(value1, value2)</td>
<td>如果value1不为空，返回value1，否则返回value2</td>
</tr>
<tr>
<td>CASE WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td>
<td>如果val1为true，返回res1，… 否则返回default默认值</td>
</tr>
<tr>
<td>CASE [ expr ] WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td>
<td>如果expr的值等于val1，返回res1，… 否则返回default默认值</td>
</tr>
</tbody></table>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select</span><br><span class="line">	name,</span><br><span class="line">	(case when age &gt; 30 then &#x27;中年&#x27; else &#x27;青年&#x27; end)</span><br><span class="line">from employee;</span><br><span class="line">select</span><br><span class="line">	name,</span><br><span class="line">	(case workaddress when &#x27;北京市&#x27; then &#x27;一线城市&#x27; when &#x27;上海市&#x27; then &#x27;一线城市&#x27; else &#x27;二线城市&#x27; end) as &#x27;工作地址&#x27;</span><br><span class="line">from employee;</span><br><span class="line">12345678</span><br></pre></td></tr></table></figure>

<h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>分类：</p>
<table>
<thead>
<tr>
<th>约束</th>
<th>描述</th>
<th>关键字</th>
</tr>
</thead>
<tbody><tr>
<td>非空约束</td>
<td>限制该字段的数据不能为null</td>
<td>NOT NULL</td>
</tr>
<tr>
<td>唯一约束</td>
<td>保证该字段的所有数据都是唯一、不重复的</td>
<td>UNIQUE</td>
</tr>
<tr>
<td>主键约束</td>
<td>主键是一行数据的唯一标识，要求非空且唯一</td>
<td>PRIMARY KEY</td>
</tr>
<tr>
<td>默认约束</td>
<td>保存数据时，如果未指定该字段的值，则采用默认值</td>
<td>DEFAULT</td>
</tr>
<tr>
<td>检查约束（8.0.1版本后）</td>
<td>保证字段值满足某一个条件</td>
<td>CHECK</td>
</tr>
<tr>
<td>外键约束</td>
<td>用来让两张图的数据之间建立连接，保证数据的一致性和完整性</td>
<td>FOREIGN KEY</td>
</tr>
</tbody></table>
<p>约束是作用于表中字段上的，可以再创建表&#x2F;修改表的时候添加约束。</p>
<h3 id="常用约束"><a href="#常用约束" class="headerlink" title="常用约束"></a>常用约束</h3><table>
<thead>
<tr>
<th>约束条件</th>
<th>关键字</th>
</tr>
</thead>
<tbody><tr>
<td>主键</td>
<td>PRIMARY KEY</td>
</tr>
<tr>
<td>自动增长</td>
<td>AUTO_INCREMENT</td>
</tr>
<tr>
<td>不为空</td>
<td>NOT NULL</td>
</tr>
<tr>
<td>唯一</td>
<td>UNIQUE</td>
</tr>
<tr>
<td>逻辑条件</td>
<td>CHECK</td>
</tr>
<tr>
<td>默认值</td>
<td>DEFAULT</td>
</tr>
</tbody></table>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table user(</span><br><span class="line">	id int primary key auto_increment,</span><br><span class="line">	name varchar(10) not null unique,</span><br><span class="line">	age int check(age &gt; 0 and age &lt; 120),</span><br><span class="line">	status char(1) default &#x27;1&#x27;,</span><br><span class="line">	gender char(1)</span><br><span class="line">);</span><br><span class="line">1234567</span><br></pre></td></tr></table></figure>

<h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>添加外键：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">	字段名 字段类型,</span><br><span class="line">	...</span><br><span class="line">	[CONSTRAINT] [外键名称] FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名)</span><br><span class="line">);</span><br><span class="line">ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名) REFERENCES 主表(主表列名);</span><br><span class="line"></span><br><span class="line">-- 例子</span><br><span class="line">alter table emp add constraint fk_emp_dept_id foreign key(dept_id) references dept(id);</span><br><span class="line">123456789</span><br></pre></td></tr></table></figure>

<p>删除外键：<br><code>ALTER TABLE 表名 DROP FOREIGN KEY 外键名;</code></p>
<h4 id="删除-x2F-更新行为"><a href="#删除-x2F-更新行为" class="headerlink" title="删除&#x2F;更新行为"></a>删除&#x2F;更新行为</h4><table>
<thead>
<tr>
<th>行为</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>NO ACTION</td>
<td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新（与RESTRICT一致）</td>
</tr>
<tr>
<td>RESTRICT</td>
<td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新（与NO ACTION一致）</td>
</tr>
<tr>
<td>CASCADE</td>
<td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则也删除&#x2F;更新外键在子表中的记录</td>
</tr>
<tr>
<td>SET NULL</td>
<td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null（要求该外键允许为null）</td>
</tr>
<tr>
<td>SET DEFAULT</td>
<td>父表有变更时，子表将外键设为一个默认值（Innodb不支持）</td>
</tr>
</tbody></table>
<p>更改删除&#x2F;更新行为：<br><code>ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段) REFERENCES 主表名(主表字段名) ON UPDATE 行为 ON DELETE 行为;</code></p>
<h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h3><ul>
<li>一对多（多对一）</li>
<li>多对多</li>
<li>一对一</li>
</ul>
<h4 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h4><p>案例：部门与员工<br>关系：一个部门对应多个员工，一个员工对应一个部门<br>实现：在多的一方建立外键，指向一的一方的主键</p>
<h4 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h4><p>案例：学生与课程<br>关系：一个学生可以选多门课程，一门课程也可以供多个学生选修<br>实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</p>
<h4 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h4><p>案例：用户与用户详情<br>关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率<br>实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的（UNIQUE）</p>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>合并查询（笛卡尔积，会展示所有组合结果）：<br><code>select * from employee, dept;</code></p>
<blockquote>
<p>笛卡尔积：两个集合A集合和B集合的所有组合情况（在多表查询时，需要消除无效的笛卡尔积）</p>
</blockquote>
<p>消除无效笛卡尔积：<br><code>select * from employee, dept where employee.dept = dept.id;</code></p>
<h3 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h3><p>内连接查询的是两张表交集的部分</p>
<p>隐式内连接：<br><code>SELECT 字段列表 FROM 表1, 表2 WHERE 条件 ...;</code></p>
<p>显式内连接：<br><code>SELECT 字段列表 FROM 表1 [ INNER ] JOIN 表2 ON 连接条件 ...;</code></p>
<p>显式性能比隐式高</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询员工姓名，及关联的部门的名称</span><br><span class="line">-- 隐式</span><br><span class="line">select e.name, d.name from employee as e, dept as d where e.dept = d.id;</span><br><span class="line">-- 显式</span><br><span class="line">select e.name, d.name from employee as e inner join dept as d on e.dept = d.id;</span><br><span class="line">12345</span><br></pre></td></tr></table></figure>

<h3 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a>外连接查询</h3><p>左外连接：<br>查询左表所有数据，以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 LEFT [ OUTER ] JOIN 表2 ON 条件 ...;</code><br>相当于查询表1的所有数据，包含表1和表2交集部分数据</p>
<p>右外连接：<br>查询右表所有数据，以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 RIGHT [ OUTER ] JOIN 表2 ON 条件 ...;</code></p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 左</span><br><span class="line">select e.*, d.name from employee as e left outer join dept as d on e.dept = d.id;</span><br><span class="line">select d.name, e.* from dept d left outer join emp e on e.dept = d.id;  -- 这条语句与下面的语句效果一样</span><br><span class="line">-- 右</span><br><span class="line">select d.name, e.* from employee as e right outer join dept as d on e.dept = d.id;</span><br><span class="line">12345</span><br></pre></td></tr></table></figure>

<p>左连接可以查询到没有dept的employee，右连接可以查询到没有employee的dept</p>
<h3 id="自连接查询"><a href="#自连接查询" class="headerlink" title="自连接查询"></a>自连接查询</h3><p>当前表与自身的连接查询，自连接必须使用表别名</p>
<p>语法：<br><code>SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ...;</code></p>
<p>自连接查询，可以是内连接查询，也可以是外连接查询</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询员工及其所属领导的名字</span><br><span class="line">select a.name, b.name from employee a, employee b where a.manager = b.id;</span><br><span class="line">-- 没有领导的也查询出来</span><br><span class="line">select a.name, b.name from employee a left join employee b on a.manager = b.id;</span><br><span class="line">1234</span><br></pre></td></tr></table></figure>

<h3 id="联合查询-union-union-all"><a href="#联合查询-union-union-all" class="headerlink" title="联合查询 union, union all"></a>联合查询 union, union all</h3><p>把多次查询的结果合并，形成一个新的查询集</p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表A ...</span><br><span class="line">UNION [ALL]</span><br><span class="line">SELECT 字段列表 FROM 表B ...</span><br><span class="line">123</span><br></pre></td></tr></table></figure>

<h4 id="注意事项-6"><a href="#注意事项-6" class="headerlink" title="注意事项"></a>注意事项</h4><ul>
<li>UNION ALL 会有重复结果，UNION 不会</li>
<li>联合查询比使用or效率高，不会使索引失效</li>
</ul>
<h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>SQL语句中嵌套SELECT语句，称谓嵌套查询，又称子查询。<br><code>SELECT * FROM t1 WHERE column1 = ( SELECT column1 FROM t2);</code><br><strong>子查询外部的语句可以是 INSERT &#x2F; UPDATE &#x2F; DELETE &#x2F; SELECT 的任何一个</strong></p>
<p>根据子查询结果可以分为：</p>
<ul>
<li>标量子查询（子查询结果为单个值）</li>
<li>列子查询（子查询结果为一列）</li>
<li>行子查询（子查询结果为一行）</li>
<li>表子查询（子查询结果为多行多列）</li>
</ul>
<p>根据子查询位置可分为：</p>
<ul>
<li>WHERE 之后</li>
<li>FROM 之后</li>
<li>SELECT 之后</li>
</ul>
<h4 id="标量子查询"><a href="#标量子查询" class="headerlink" title="标量子查询"></a>标量子查询</h4><p>子查询返回的结果是单个值（数字、字符串、日期等）。<br>常用操作符：- &lt; &gt; &gt; &gt;&#x3D; &lt; &lt;&#x3D;</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询销售部所有员工</span><br><span class="line">select id from dept where name = &#x27;销售部&#x27;;</span><br><span class="line">-- 根据销售部部门ID，查询员工信息</span><br><span class="line">select * from employee where dept = 4;</span><br><span class="line">-- 合并（子查询）</span><br><span class="line">select * from employee where dept = (select id from dept where name = &#x27;销售部&#x27;);</span><br><span class="line"></span><br><span class="line">-- 查询xxx入职之后的员工信息</span><br><span class="line">select * from employee where entrydate &gt; (select entrydate from employee where name = &#x27;xxx&#x27;);</span><br><span class="line">123456789</span><br></pre></td></tr></table></figure>

<h4 id="列子查询"><a href="#列子查询" class="headerlink" title="列子查询"></a>列子查询</h4><p>返回的结果是一列（可以是多行）。</p>
<p>常用操作符：</p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>IN</td>
<td>在指定的集合范围内，多选一</td>
</tr>
<tr>
<td>NOT IN</td>
<td>不在指定的集合范围内</td>
</tr>
<tr>
<td>ANY</td>
<td>子查询返回列表中，有任意一个满足即可</td>
</tr>
<tr>
<td>SOME</td>
<td>与ANY等同，使用SOME的地方都可以使用ANY</td>
</tr>
<tr>
<td>ALL</td>
<td>子查询返回列表的所有值都必须满足</td>
</tr>
</tbody></table>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询销售部和市场部的所有员工信息</span><br><span class="line">select * from employee where dept in (select id from dept where name = &#x27;销售部&#x27; or name = &#x27;市场部&#x27;);</span><br><span class="line">-- 查询比财务部所有人工资都高的员工信息</span><br><span class="line">select * from employee where salary &gt; all(select salary from employee where dept = (select id from dept where name = &#x27;财务部&#x27;));</span><br><span class="line">-- 查询比研发部任意一人工资高的员工信息</span><br><span class="line">select * from employee where salary &gt; any (select salary from employee where dept = (select id from dept where name = &#x27;研发部&#x27;));</span><br><span class="line">123456</span><br></pre></td></tr></table></figure>

<h4 id="行子查询"><a href="#行子查询" class="headerlink" title="行子查询"></a>行子查询</h4><p>返回的结果是一行（可以是多列）。<br>常用操作符：&#x3D;, &lt;, &gt;, IN, NOT IN</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询与xxx的薪资及直属领导相同的员工信息</span><br><span class="line">select * from employee where (salary, manager) = (12500, 1);</span><br><span class="line">select * from employee where (salary, manager) = (select salary, manager from employee where name = &#x27;xxx&#x27;);</span><br><span class="line">123</span><br></pre></td></tr></table></figure>

<h4 id="表子查询"><a href="#表子查询" class="headerlink" title="表子查询"></a>表子查询</h4><p>返回的结果是多行多列<br>常用操作符：IN</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询与xxx1，xxx2的职位和薪资相同的员工</span><br><span class="line">select * from employee where (job, salary) in (select job, salary from employee where name = &#x27;xxx1&#x27; or name = &#x27;xxx2&#x27;);</span><br><span class="line">-- 查询入职日期是2006-01-01之后的员工，及其部门信息</span><br><span class="line">select e.*, d.* from (select * from employee where entrydate &gt; &#x27;2006-01-01&#x27;) as e left join dept as d on e.dept = d.id;</span><br><span class="line">1234</span><br></pre></td></tr></table></figure>

<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务是一组操作的集合，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p>
<p>基本操作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 1. 查询张三账户余额</span><br><span class="line">select * from account where name = &#x27;张三&#x27;;</span><br><span class="line">-- 2. 将张三账户余额-1000</span><br><span class="line">update account set money = money - 1000 where name = &#x27;张三&#x27;;</span><br><span class="line">-- 此语句出错后张三钱减少但是李四钱没有增加</span><br><span class="line">模拟sql语句错误</span><br><span class="line">-- 3. 将李四账户余额+1000</span><br><span class="line">update account set money = money + 1000 where name = &#x27;李四&#x27;;</span><br><span class="line"></span><br><span class="line">-- 查看事务提交方式</span><br><span class="line">SELECT @@AUTOCOMMIT;</span><br><span class="line">-- 设置事务提交方式，1为自动提交，0为手动提交，该设置只对当前会话有效</span><br><span class="line">SET @@AUTOCOMMIT = 0;</span><br><span class="line">-- 提交事务</span><br><span class="line">COMMIT;</span><br><span class="line">-- 回滚事务</span><br><span class="line">ROLLBACK;</span><br><span class="line"></span><br><span class="line">-- 设置手动提交后上面代码改为：</span><br><span class="line">select * from account where name = &#x27;张三&#x27;;</span><br><span class="line">update account set money = money - 1000 where name = &#x27;张三&#x27;;</span><br><span class="line">update account set money = money + 1000 where name = &#x27;李四&#x27;;</span><br><span class="line">commit;</span><br><span class="line">1234567891011121314151617181920212223</span><br></pre></td></tr></table></figure>

<p>操作方式二：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">开启事务：</span><br><span class="line">`START TRANSACTION 或 BEGIN TRANSACTION;`</span><br><span class="line">提交事务：</span><br><span class="line">`COMMIT;`</span><br><span class="line">回滚事务：</span><br><span class="line">`ROLLBACK;`</span><br></pre></td></tr></table></figure>

<p>操作实例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start transaction;</span><br><span class="line">select * from account where name = &#x27;张三&#x27;;</span><br><span class="line">update account set money = money - 1000 where name = &#x27;张三&#x27;;</span><br><span class="line">update account set money = money + 1000 where name = &#x27;李四&#x27;;</span><br><span class="line">commit;</span><br><span class="line">12345</span><br></pre></td></tr></table></figure>

<h3 id="四大特性ACID"><a href="#四大特性ACID" class="headerlink" title="四大特性ACID"></a>四大特性ACID</h3><ul>
<li>原子性(Atomicity)：事务是不可分割的最小操作但愿，要么全部成功，要么全部失败</li>
<li>一致性(Consistency)：事务完成时，必须使所有数据都保持一致状态</li>
<li>隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li>
<li>持久性(Durability)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</li>
</ul>
<h3 id="并发事务"><a href="#并发事务" class="headerlink" title="并发事务"></a>并发事务</h3><table>
<thead>
<tr>
<th>问题</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>脏读</td>
<td>一个事务读到另一个事务还没提交的数据</td>
</tr>
<tr>
<td>不可重复读</td>
<td>一个事务先后读取同一条记录，但两次读取的数据不同</td>
</tr>
<tr>
<td>幻读</td>
<td>一个事务按照条件查询数据时，没有对应的数据行，但是再插入数据时，又发现这行数据已经存在</td>
</tr>
</tbody></table>
<blockquote>
<p>这三个问题的详细演示：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd</a></p>
</blockquote>
<p>并发事务隔离级别：</p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td>Read uncommitted</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>Read committed</td>
<td>×</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>Repeatable Read(默认)</td>
<td>×</td>
<td>×</td>
<td>√</td>
</tr>
<tr>
<td>Serializable</td>
<td>×</td>
<td>×</td>
<td>×</td>
</tr>
</tbody></table>
<ul>
<li><pre><code>- √表示在当前隔离级别下该问题会出现
- Serializable 性能最低；Read uncommitted 性能最高，数据安全性最差

查看事务隔离级别：
`SELECT @@TRANSACTION_ISOLATION;`
设置事务隔离级别：
`SET [ SESSION | GLOBAL ] TRANSACTION ISOLATION LEVEL &#123;READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE &#125;;`
SESSION 是会话级别，表示只针对当前会话有效，GLOBAL 表示对所有会话有效
</code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 配置</title>
    <url>/2022/09/01/Nginx%20%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="Nginx-配置"><a href="#Nginx-配置" class="headerlink" title="Nginx 配置"></a>Nginx 配置</h2><h3 id="nginx-配置文件有三部分组成"><a href="#nginx-配置文件有三部分组成" class="headerlink" title="nginx 配置文件有三部分组成"></a>nginx 配置文件有三部分组成</h3><h4 id="第一部分：全局块"><a href="#第一部分：全局块" class="headerlink" title="第一部分：全局块"></a>第一部分：全局块</h4><p>从配置文件开始到 events 块之间的内容，主要会设置一些影响nginx 服务器整体运行的配置指令，主要包括配 置运行 Nginx 服务器的用户（组）、允许生成的 worker process 数，进程 PID 存放路径、日志存放路径和类型以 及配置文件的引入等。<br>比如上面第一行配置的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">worker_processes  1;</span><br></pre></td></tr></table></figure>

<p>这是 Nginx 服务器并发处理服务的关键配置，worker_processes 值越大，可以支持的并发处理量也越多，但是 会受到硬件、软件等设备的制约。</p>
<h4 id="第二部分：events块"><a href="#第二部分：events块" class="headerlink" title="第二部分：events块"></a>第二部分：events块</h4><p>比如上面的配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">events &#123;</span><br><span class="line">    accept_mutex on;   #设置网路连接序列化，防止惊群现象发生，默认为on</span><br><span class="line">    multi_accept on;  #设置一个进程是否同时接受多个网络连接，默认为off</span><br><span class="line">    #use epoll;      #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport</span><br><span class="line">    worker_connections  1024;    #最大连接数，默认为512</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>events 块涉及的指令<strong>主要影响 Nginx 服务器与用户的网络连接，常用的设置包括是否开启对多 work process 下的网络连接进行序列化，是否 允许同时接收多个网络连接，选取哪种事件驱动模型来处理连接请求，每个 word process 可以同时支持的最大连接数等。</strong><br>上述例子就表示每个 work process 支持的最大连接数为 1024.<br>这部分的配置对 Nginx 的性能影响较大，在实际中应该灵活配置。</p>
<h4 id="第三部分："><a href="#第三部分：" class="headerlink" title="第三部分："></a>第三部分：</h4><p>这算是 Nginx 服务器配置中最频繁的部分，代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在这里。</p>
<p>需要注意的是：http 块也可以包括 http全局块、server 块。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       8800;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">       location / &#123;</span><br><span class="line">            root   D:/upload;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">	include       mime.types;   #文件扩展名与文件类型映射表</span><br><span class="line">	#gzip  on; 支持在线实时压缩输出数据流。</span><br><span class="line">    default_type  application/octet-stream; #默认文件类型，默认为text/plain</span><br><span class="line">    #access_log off; #取消服务日志   </span><br><span class="line">    log_format myFormat &#x27;$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent 			$http_referer $http_user_agent $http_x_forwarded_for&#x27;; #自定义格式</span><br><span class="line">    access_log log/access.log myFormat;  #combined为日志格式的默认值</span><br><span class="line">    sendfile on;   #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。</span><br><span class="line">    sendfile_max_chunk 100k;  #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。</span><br><span class="line">    keepalive_timeout 65;  #连接超时时间，默认为75s，可以在http，server，location块。</span><br><span class="line"> </span><br><span class="line">    upstream mysvr &#123;  </span><br><span class="line">      server 127.0.0.1:7878;</span><br><span class="line">      server 192.168.10.121:3333 backup;  #热备</span><br><span class="line">    &#125;</span><br><span class="line">    error_page 404 https://www.baidu.com; #错误页</span><br><span class="line">    server &#123;</span><br><span class="line">        keepalive_requests 120; #单连接请求上限次数。</span><br><span class="line">        listen       4545;   #监听端口</span><br><span class="line">        server_name  127.0.0.1;   #监听地址      </span><br><span class="line">        location  ~*^.+$ &#123;       #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。</span><br><span class="line">           #root path;  #根目录</span><br><span class="line">           #index vv.txt;  #设置默认页</span><br><span class="line">           proxy_pass  http://mysvr;  #请求转向mysvr 定义的服务器列表，ip是可以是公网ip，或者你使用docker部署时配置的ip</span><br><span class="line">           deny 127.0.0.1;  #拒绝的ip</span><br><span class="line">           allow 172.18.5.54; #允许的ip          </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="http全局块"><a href="#http全局块" class="headerlink" title="http全局块"></a>http全局块</h4><p>http全局块配置的指令包括文件引入、MIME-TYPE 定义、日志自定义、连接超时时间、单链接请求数上限等。</p>
<h5 id="server-块"><a href="#server-块" class="headerlink" title="server 块"></a>server 块</h5><p>这块和虚拟主机有密切关系，虚拟主机从用户角度看，和一台独立的硬件主机是完全一样的，该技术的产生是为了 节省互联网服务器硬件成本。<br>每个 http 块可以包括多个 server 块，而每个 server 块就相当于一个虚拟主机。<br>而每个 server 块也分为全局 server 块，以及可以同时包含多个 locaton 块。</p>
<h5 id="全局-server-块"><a href="#全局-server-块" class="headerlink" title="全局 server 块"></a>全局 server 块</h5><p>最常见的配置是本虚拟机主机的监听配置和本虚拟主机的名称或IP配置。</p>
<h5 id="location-块"><a href="#location-块" class="headerlink" title="location 块"></a>location 块</h5><p>一个 server 块可以配置多个 location 块。<br>这块的主要作用是基于 Nginx 服务器接收到的请求字符串（例如 server_name&#x2F;uri-string），对虚拟主机名称 （也可以是IP 别名）之外的字符串（例如 前面的 &#x2F;uri-string）进行匹配，对特定的请求进行处理。 地址定向、数据缓 存和应答控制等功能，还有许多第三方模块的配置也在这里进行。</p>
<h3 id="url匹配"><a href="#url匹配" class="headerlink" title="url匹配"></a>url匹配</h3><p>echo为页面输出</p>
<p>1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#匹配/a开头的</span><br><span class="line">location ^~ /a &#123;</span><br><span class="line">      root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">#使用正则表达式为一个~号(\w匹配数字字母下划线)</span><br><span class="line">location ~ ^/\w &#123;</span><br><span class="line">      root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">#使用正则表达式为一个~号(\w匹配数字字母下划线)</span><br><span class="line">location ~ ^/[a-z] &#123;</span><br><span class="line">      root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">#反向代理（引入到其他网址）</span><br><span class="line">location / &#123;</span><br><span class="line">      proxy_pass http://127.0.0.1:1080;</span><br><span class="line">    &#125;</span><br><span class="line">#反向代理（引入到其他网址）</span><br><span class="line">location /a/ &#123;</span><br><span class="line">      proxy_pass http://127.0.0.1:1080/;</span><br><span class="line">    &#125;</span><br><span class="line"> 输入~a/是访问http://127.0.0.1:1080/</span><br><span class="line"> 输入~a/a是访问http://127.0.0.1:1080/a</span><br><span class="line"> </span><br><span class="line"> #负载均衡</span><br><span class="line"> http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    upstream group1&#123;</span><br><span class="line">		server 192.168.8.11:8800;</span><br><span class="line">		server 192.168.8.12:8801; </span><br><span class="line">					&#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       8800;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">       location / &#123;</span><br><span class="line">            root   D:/upload;</span><br><span class="line">        &#125;</span><br><span class="line">       location /a/ &#123;</span><br><span class="line">           proxy_pass http://group1/;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 精确匹配</span><br><span class="line">    location = /google   &#123;</span><br><span class="line">      rewrite ^ http://google.com;</span><br><span class="line">    &#125;</span><br><span class="line">    # 前缀匹配</span><br><span class="line">    location ^~ /baidu  &#123;</span><br><span class="line">      rewrite ^ http://baidu.com;</span><br><span class="line">    &#125;</span><br><span class="line">    # 正则匹配 区分大小写</span><br><span class="line">    location ~ /sogou  &#123;</span><br><span class="line">      rewrite ^ http://sogou.com/;</span><br><span class="line">    &#125;</span><br><span class="line">    # 正则匹配 不 区分大小写</span><br><span class="line">    location ~* /SoGou  &#123;</span><br><span class="line">      rewrite ^ http://sogou.com/;</span><br><span class="line">    &#125;</span><br><span class="line">    # 正常匹配 优先级低于前缀匹配 （可使用正则，不区分大小写）</span><br><span class="line">    location /biying  &#123;</span><br><span class="line">       rewrite ^ http://biying.com/;</span><br><span class="line">    &#125;</span><br><span class="line">    # 全匹配</span><br><span class="line">    location / &#123;</span><br><span class="line">      root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">    # 别名匹配</span><br><span class="line">    error_page 404 = @notfound;</span><br><span class="line"></span><br><span class="line">    location @notfound &#123;</span><br><span class="line">     rewrite ^ http://taobao.com/;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">      root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">                        try_files $uri @apache;</span><br><span class="line">                        &#125;</span><br><span class="line">#所有的路径都是/开头,表示匹配所有</span><br><span class="line">                location @apache &#123;</span><br><span class="line">                        internal;</span><br><span class="line">                        proxy_pass http://127.0.0.1:1080;</span><br><span class="line">                        include proxy.conf;</span><br><span class="line">                        &#125;</span><br><span class="line">#url重定向至@apache规则</span><br><span class="line">                location ~ .*\.(php|php5)?$</span><br><span class="line">                        &#123;</span><br><span class="line">                                proxy_pass http://127.0.0.1:1080;</span><br><span class="line">                                include proxy.conf;</span><br><span class="line">                        &#125;</span><br><span class="line">#匹配所有以.php或者.php5的URL, ~表示区分大小写</span><br><span class="line">                location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class="line">                        &#123;</span><br><span class="line">                                expires      30d;</span><br><span class="line">                        &#125;</span><br><span class="line">#匹配以.gif,.jpg,.jpeg,.png,.bmp,.swf结尾的url</span><br><span class="line">                location ~ .*\.(js|css)?$</span><br><span class="line">                        &#123;</span><br><span class="line">                                expires      12h;</span><br><span class="line">                        &#125;</span><br><span class="line">#匹配以.js或者.css结尾的url</span><br><span class="line">                </span><br><span class="line">##匹配的优先级顺序</span><br><span class="line">(location =) &gt; (location完整url) &gt; (location ^~) &gt; (location ,*) &gt; (lcoaltion部分起始路径) &gt; (/)</span><br><span class="line"></span><br><span class="line">= 表示精确匹配</span><br><span class="line">^~ 表示指定的路径开头</span><br><span class="line">~ 表示区分大小写的正则匹配</span><br><span class="line">~* 表示不区分大小写的正则匹配</span><br><span class="line">/ 通用匹配,所有的URL都是以此为开头</span><br></pre></td></tr></table></figure>

<ol start="2">
<li></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location = / &#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:1080/index.php;</span><br><span class="line">&#125;</span><br><span class="line">#匹配根路径</span><br><span class="line"></span><br><span class="line">location ~* \.(gif|jpg|jpeg|png|css|js|ico)$ &#123;</span><br><span class="line">    root /web/static/;</span><br><span class="line">&#125;</span><br><span class="line">#匹配所有静态文件</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:1080/index.php;</span><br><span class="line">&#125;</span><br><span class="line">#匹配所有的路径</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ol>
<li></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       8800;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">       location / &#123;</span><br><span class="line">            root   D:/upload;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.http</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># http版本</span><br><span class="line">server &#123;</span><br><span class="line">     listen       80;</span><br><span class="line">     server_name  xxxx;</span><br><span class="line">	 location / &#123;</span><br><span class="line">        root   html;</span><br><span class="line">        try_files $uri $uri/ /index.html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      location /admin/&#123;</span><br><span class="line">            proxy_set_header Host $host ;</span><br><span class="line">            proxy_pass http://ip:8080/;# ip是可以是公网ip，或者你使用docker部署时配置的ip</span><br><span class="line">            client_max_body_size  500m;</span><br><span class="line">        &#125;</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3.https</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># https版本</span><br><span class="line">server &#123;</span><br><span class="line">    </span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name xxxx;#ssl证书绑定的域名</span><br><span class="line">    ssl_certificate 证书文件;# pem文件、crt文件均可</span><br><span class="line">    ssl_certificate_key 私钥文件;# 两个文件可以直接放在nginx.conf同一文件夹，如果另起文件夹，就需要注意配置完整的文件路径</span><br><span class="line">    ssl_protocols TLSv1.2 TLSv1.3;#表示使用的加密套件的类型，TLSv1.3 要nginx1.13版本才能使用</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root   html;</span><br><span class="line">        try_files $uri $uri/ /index.html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">      &#125;</span><br><span class="line">  	location /admin/&#123;</span><br><span class="line">         proxy_set_header Host $host ;</span><br><span class="line">         proxy_pass http://ip:8080/;# ip是可以是公网ip，或者你使用docker部署时配置的ip</span><br><span class="line">         client_max_body_size  500m;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     error_page   500 502 503 504  /50x.html;</span><br><span class="line">     location = /50x.html &#123;</span><br><span class="line">          root   html;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="负载均衡配置"><a href="#负载均衡配置" class="headerlink" title="负载均衡配置"></a>负载均衡配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream cszhi.com&#123;</span><br><span class="line">ip_hash;</span><br><span class="line">server 192.168.8.11:80;</span><br><span class="line">server 192.168.8.12:80 down;</span><br><span class="line">server 192.168.8.13:8009 max_fails=3 fail_timeout=20s;</span><br><span class="line">server 192.168.8.146:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream是Nginx的HTTP Upstream模块，这个模块通过一个简单的调度算法来实现客户端IP到后端服务器的负载均衡。</span><br><span class="line">在上面的设定中，通过upstream指令指定了一个负载均衡器的名称cszhi.com。这个名称可以任意指定，在后面需要的地方直接调用即可。</span><br><span class="line"></span><br><span class="line">Nginx的负载均衡模块目前支持4种调度算法，下面进行分别介绍，其中后两项属于第三方的调度方法。</span><br><span class="line"></span><br><span class="line">·       轮询（默认）：每个请求按时间顺序逐一分配到不同的后端服务器，如果后端某台服务器宕机，故障系统被自动剔除，使用户访问不受影响；</span><br><span class="line"></span><br><span class="line">·       Weight：指定轮询权值，Weight值越大，分配到的访问机率越高，主要用于后端每个服务器性能不均的情况下；</span><br><span class="line"></span><br><span class="line">·       ip_hash：每个请求按访问IP的hash结果分配，这样来自同一个IP的访客固定访问一个后端服务器，有效解决了动态网页存在的session共享问题；</span><br><span class="line"></span><br><span class="line">·       fair：比上面两个更加智能的负载均衡算法。此种算法可以依据页面大小和加载时间长短智能地进行负载均衡，也就是根据后端服务器的响应时间来分配请求，响应时间短的优先分配。Nginx本身是不支持fair的，如果需要使用这种调度算法，必须下载Nginx的upstream_fair模块；</span><br><span class="line"></span><br><span class="line">·       url_hash：按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，可以进一步提高后端缓存服务器的效率。Nginx本身是不支持url_hash的，如果需要使用这种调度算法，必须安装Nginx 的hash软件包。</span><br><span class="line"></span><br><span class="line">在HTTP Upstream模块中，可以通过server指令指定后端服务器的IP地址和端口，同时还可以设定每个后端服务器在负载均衡调度中的状态。常用的状态有：</span><br><span class="line"></span><br><span class="line">·       down：表示当前的server暂时不参与负载均衡；</span><br><span class="line"></span><br><span class="line">·       backup：预留的备份机器。当其他所有的非backup机器出现故障或者忙的时候，才会请求backup机器，因此这台机器的压力最轻；</span><br><span class="line"></span><br><span class="line">·       max_fails：允许请求失败的次数，默认为1。当超过最大次数时，返回proxy_next_upstream 模块定义的错误；</span><br><span class="line"></span><br><span class="line">·       fail_timeout：在经历了max_fails次失败后，暂停服务的时间。max_fails可以和fail_timeout一起使用。</span><br><span class="line"></span><br><span class="line">注意，当负载调度算法为ip_hash时，后端服务器在负载均衡调度中的状态不能是weight和backup。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js-vue概念</title>
    <url>/2022/07/09/Node-js-vue%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I&#x2F;O 的模型，使其轻量又高效。 </p>
<p>Node 是一个让 JavaScript 运行在服务端的开发平台，它让 JavaScript 成为与PHP、Python、Perl、Ruby 等服务端语言平起平坐的脚本语言。 发布于2009年5月，由Ryan Dahl开发，实质是对Chrome V8引擎进行了封装。Node 使用事件驱动， 非阻塞I&#x2F;O 模型而得以轻量和高效，非常适合在分布式设备上运行数据密集型的实时应用。</p>
<p>官网上对其特点描述为：</p>
<p>它是一个Javascript运行环境</p>
<p>依赖于Chrome V8引擎进行代码解释</p>
<p>事件驱动</p>
<p>非阻塞I&#x2F;O</p>
<p>轻量、可伸缩，适于实时数据交互应用</p>
<p>单进程，单线程</p>
<p>相对于传统的JavaScript来说，Node.js 是一个运行在服务端的框架，它的底层就使用了 V8 引擎。我们知道 Apache + PHP 以及 Java 的 Servlet 都可以用来开发动态网页，Node.js 的作用与他们类似，只不过是使用 JavaScript 来开发，它大大提升了开发的性能以及便利。</p>
<h3 id="nmp"><a href="#nmp" class="headerlink" title="nmp"></a>nmp</h3><p>npm（包管理工具）是基于 Node.js的前端项目包管理工具，是项目中对各种程序包的依赖管理，传统的开发项目主要是后端，现在技术在更新，前端有了框架的开发模式管理，也需要用包管理工具的思想去管理，目的是简化第三方程序包在项目中引用复杂化。前端的ｊｓ包是全世界JavaScript 天才开发共享的各种代码模块，把这些代码模块都按照一个独立的软件功能统一在一个库中，一个代码模块是一个程序包（package，即代码模块）。它是世界上最大的软件注册表，每星期大约有 30 亿次的下载量，包含超过 600000 个 包（package） （即，代码模块），使用包的结构使您能够轻松跟踪依赖项和版本。<br>npm是node官方的包管理器。cnpm是个中国版的npm，是淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 创建一个文件包</span><br><span class="line">2. npm init</span><br><span class="line">3. 创建一个index.js 文件，并写入一些要实现的代码</span><br><span class="line">4.npm install –D xxx  项目依赖安装，并写入package.json的devDependencies中</span><br><span class="line">5.npm install -g xxx  # 安装最新版本</span><br><span class="line">6.npm install -g xxx@1.0.0   # 安装指定版本</span><br><span class="line">7.npm install xxx  本地安装（当前文件夹） </span><br><span class="line">8.npm install –S xxx  # 和上面效果一样</span><br><span class="line">--save 安装并添加条目到 package.json 文件的 dependencies。</span><br><span class="line">--save-dev 安装并添加条目到 package.json 文件的 devDependencies。</span><br><span class="line">9.npm install --registry=https://registry.npmmirror.com 项目本次安装依赖，临时使用淘宝镜像</span><br><span class="line">9.npm get registry  查询当前源配置</span><br><span class="line">10.npm config set reg istry https://registry.npmmirror.com 设置淘宝镜像源</span><br><span class="line">11.npm info 查看每个模块的具体信息</span><br><span class="line">12.npm list 命令以树型结构列出当前项目安装的所有模块，以及它们依赖的模块。</span><br><span class="line">13.npm list -global 会列出全局安装的模块。</span><br><span class="line">5. npm link 本地调试</span><br><span class="line">6. npm login 登录</span><br><span class="line">7. npm publish 发布</span><br><span class="line">8. npm version patch // 更新版本</span><br><span class="line">9. npm update gulp            //可以把当前目录下node_modules子目录里边的对应模块更新至最新版本 </span><br><span class="line">10. npm unpublish npmhswcommonwei@1.0.2 // 可以撤销发布自己发布过的某个版本代码</span><br></pre></td></tr></table></figure>

<h3 id="Bower："><a href="#Bower：" class="headerlink" title="Bower："></a><strong>Bower：</strong></h3><p>Bower是一个客户端技术的软件包管理器，它可用于搜索、安装和卸载如JavaScript、HTML、CSS之类的网络资源。<br>其他还有一些建立在Bower基础之上的开发工具，如YeoMan和Grunt。</p>
<p>为了安装bower，你首先需要安装如下文件：</p>
<ul>
<li><p>Node：下载最新版本的node.js</p>
</li>
<li><p>NPM：NPM是node程序包管理器。它是捆绑在nodejs的安装程序上的，所以一旦你已经安装了node，NPM也就安装好了。</p>
</li>
<li><p>Git：你需要从git仓库获取一些代码包。</p>
</li>
<li><p>下载</p>
</li>
<li><p>&#96;&#96;&#96;<br>npm install -g bower</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">#### yarn</span><br><span class="line"></span><br><span class="line">Yarn是由Facebook、Google、Exponent 和 Tilde 联合推出了一个新的 JS 包管理工具 ，正如[官方文档](https://link.jianshu.com/?t=http%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%3A%2F%2Fcode.facebook.com%2Fposts%2F1840075619545360)中写的，Yarn 是为了弥补 npm 的一些缺陷而出现的。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>1、速度快<br>速度快主要来自以下两个方面：</p>
</li>
</ul>
<p>1.1、并行安装：无论 npm 还是 Yarn 在执行包的安装时，都会执行一系列任务。npm 是按照队列执行每个 package，也就是说必须要等到当前 package 安装完成之后，才能继续后面的安装。而 Yarn 是同步执行所有任务，提高了性能。<br>1.2、离线模式：如果之前已经安装过一个软件包，用Yarn再次安装时之间从缓存中获取，就不用像npm那样再从网络下载了。<br>2、安装版本统一<br>为了防止拉取到不同的版本，Yarn 有一个锁定文件 (lock file) 记录了被确切安装上的模块的版本号。每次只要新增了一个模块，Yarn 就会创建（或更新）yarn.lock 这个文件。这么做就保证了，每一次拉取同一个项目依赖时，使用的都是一样的模块版本。npm 其实也有办法实现处处使用相同版本的 packages，但需要开发者执行 npm shrinkwrap 命令。这个命令将会生成一个锁定文件，在执行 npm install 的时候，该锁定文件会先被读取，和 Yarn 读取 yarn.lock 文件一个道理。npm 和 Yarn 两者的不同之处在于，Yarn 默认会生成这样的锁定文件，而 npm 要通过 shrinkwrap 命令生成 npm-shrinkwrap.json 文件，只有当这个文件存在的时候，packages 版本信息才会被记录和更新。<br>3、更简洁的输出<br>npm 的输出信息比较冗长。在执行 npm install 的时候，命令行里会不断地打印出所有被安装上的依赖。相比之下，Yarn 简洁太多：默认情况下，结合了 emoji直观且直接地打印出必要的信息，也提供了一些命令供开发者查询额外的安装信息。<br>4、多注册来源处理<br>所有的依赖包，不管他被不同的库间接关联引用多少次，安装这个包时，只会从一个注册来源去装，要么是 npm 要么是 bower, 防止出现混乱不一致。<br>5、更好的语义化<br>yarn改变了一些npm命令的名称，比如 yarn add&#x2F;remove，感觉上比 npm 原本的 install&#x2F;uninstall 要更清晰。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<p>三、Yarn安装<br>npm install -g yarn<br>四、Yarn命令<br>1、查看版本<br>yarn -v<br>2、创建工程<br>yarn init<br>3、安装依赖<br>yarn 或者 yarn install<br>4、运行脚本<br>yarn run<br>5、打包构建<br>yarn build<br>6、显示某个包信息<br>yarn info<br>7、列出当前项目的依赖<br>yarn list<br>8、显示当前配置<br>yarn config list<br>9、列出已缓存的每个包<br>sudo yarn cache list<br>10、清除缓存<br>sudo yarn cache clean</p>
<p>&#96;&#96;&#96;</p>
<p>五、NPM对比<br>npm install react –save            yarn add react<br>npm uninstall react –save       yarn remove react<br>npm install react –save-dev    yarn add react –dev<br>npm update –save                    yarn upgrade</p>
<h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><p>首先vue.js 是库，不是框架，不是框架，不是框架。</p>
<p>Vue.js 使用了基于 HTML 的模版语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。</p>
<p>Vue.js 的核心是一个允许你采用简洁的模板语法来声明式的将数据渲染进 DOM 的系统。</p>
<p>vue.js 支持路由功能开发的 叫vue-route.js，vue.js支持数据请求功能开发的 叫vue-resource.js。<br>原文链接：<a href="https://blog.csdn.net/u013182960/article/details/110189159">https://blog.csdn.net/u013182960/article/details/110189159</a></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 爬虫最佳组合</title>
    <url>/2022/11/22/Python%20%E7%88%AC%E8%99%AB%E6%9C%80%E4%BD%B3%E7%BB%84%E5%90%88/</url>
    <content><![CDATA[<h2 id="Python-爬虫最佳组合"><a href="#Python-爬虫最佳组合" class="headerlink" title="Python 爬虫最佳组合"></a>Python 爬虫最佳组合</h2><ul>
<li>请求库： HTTPX。</li>
<li>框架：Scrapy</li>
<li>模拟爬取： Playwright</li>
<li>JS 引擎 for Python：PyMiniRacer。</li>
<li>抓包工具：Fiddler 和浏览器。</li>
</ul>
<p>本文只介绍，请求库： HTTPX。框架：Scrapy，模拟爬取： Playwright</p>
<h3 id="1-HTTPX"><a href="#1-HTTPX" class="headerlink" title="1.HTTPX"></a>1.HTTPX</h3><p>HTTPX 的 slogan 是“Python 的下一代 HTTP 客户端”，从出生开始就只支持 Python 3.6 及更高版本。使用了 Type Hint，同时支持同步和异步接口，同时支持 HTTP&#x2F;1.1 和 HTTP&#x2F;2，还提供了命令行工具，可以在命令行中直接发送 HTTP 请求。HTTPX 站在 Requests 的肩膀上，Requests 支持的功能它都支持，Requests 不支持的功能它也支持，比 Requests 更现代，没有历史包袱。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import httpx</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko&#x27;</span><br><span class="line">&#125;</span><br><span class="line">response =httpx.get(&#x27;https://www.baidu.com&#x27;, headers=headers)</span><br><span class="line">print(response.text)</span><br><span class="line"></span><br><span class="line">#SSL验证</span><br><span class="line"></span><br><span class="line"># 自带ca证书</span><br><span class="line">response = httpx.get(&#x27;https://www.baidu.com&#x27;, verify=&quot;path/cert/client.pem&quot;)</span><br><span class="line"></span><br><span class="line"># 完全禁用SSL验证</span><br><span class="line">response = httpx.get(&#x27;https://www.baidu.com&#x27;, verify=False)</span><br></pre></td></tr></table></figure>

<p>使用client发送请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import httpx</span><br><span class="line"></span><br><span class="line">with httpx.Client() as client:</span><br><span class="line">    response = client.get(&#x27;https://www.baidu.com&#x27;)</span><br><span class="line">    print(response.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import httpx</span><br><span class="line"></span><br><span class="line">proxies= &#123;</span><br><span class="line">    &#x27;http&#x27;: &#x27;http://127.0.0.1:9999&#x27;,</span><br><span class="line">    &#x27;https&#x27;: &#x27;http://127.0.0.1:8888&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">with httpx.Client(proxies=proxies) as client:</span><br><span class="line">    response = client.get(&#x27;https://www.baidu.com&#x27;)</span><br><span class="line">    print(response)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-Scrapy"><a href="#2-Scrapy" class="headerlink" title="2.Scrapy"></a>2.Scrapy</h3><p>完善中…………………………</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Selenium自动化工具的改进</title>
    <url>/2022/11/22/Python%20Selenium%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7%E7%9A%84%E6%94%B9%E8%BF%9B/</url>
    <content><![CDATA[<h2 id="Python-自动化工具的改进"><a href="#Python-自动化工具的改进" class="headerlink" title="Python 自动化工具的改进"></a>Python 自动化工具的改进</h2><p>Selenium 启动的浏览器，有几十个特征可以被网站通过 JavaScript 探测到。Puppeteer 启动的浏览器，也有很多特征能够被网站探测。</p>
<p>爬虫都会碰到某些网站刚刚打开页面就被判定为：非人类行为</p>
<p>因为很多网站有对selenium的js监测机制。比如：navigator.webdriver，navigator.languages，navigator.plugins.length……</p>
<p>具体解决方案：</p>
<p>第一种：使用mitmproxy用中间人的方式截取服务器发送来的js，修改js里面函数的参值方式发送给服务器。相当于在browser和server之间做一层中介的拦截。不过此方法要对js非常熟悉的人才好实施。</p>
<p>第二种方法依旧通过selenium，不过是在服务器在第一次发送js并在本地验证的时候，做好‘第一次’的伪装，从而实现‘第一次登陆’有效。。方法简单，适合小白。</p>
<p>第三种，最新版，Playwright规避检测。入门教程：<a href="https://www.ngui.cc/article/show-529806.html?action=onClick">https://www.ngui.cc/article/show-529806.html?action=onClick</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/487281255">https://zhuanlan.zhihu.com/p/487281255</a></p>
<h3 id="1-使用pyppeteer"><a href="#1-使用pyppeteer" class="headerlink" title="1.使用pyppeteer"></a>1.使用pyppeteer</h3><p>pyppeteer 加 asyncio 绕过selenium检测，实现鼠标滑动后自动登陆（代码很简单。主要熟悉异步模块及pyppeteer模块。pyppeteer模块看不懂就去看puppeteer文档，pyppeteer只是在puppeteer之上稍微包装了下而已 ）。</p>
<p>首先是main.py</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import asyncio</span><br><span class="line">import time,random</span><br><span class="line">from pyppeteer.launcher import launch # 控制模拟浏览器用</span><br><span class="line">from retrying import retry #设置重试次数用的</span><br><span class="line"> </span><br><span class="line">async def main(username, pwd, url):# 定义main协程函数，</span><br><span class="line">    #以下使用await 可以针对耗时的操作进行挂起</span><br><span class="line">    browser = await launch(&#123;&#x27;headless&#x27;: False, &#x27;args&#x27;: [&#x27;--no-sandbox&#x27;], &#125;) # 启动pyppeteer 属于内存中实现交互的模拟器</span><br><span class="line">    page = await browser.newPage()  # 启动个新的浏览器页面</span><br><span class="line">    await page.setUserAgent(</span><br><span class="line">        &#x27;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36&#x27;)</span><br><span class="line"> </span><br><span class="line">    await page.goto(url) # 访问登录页面</span><br><span class="line">    # 替换淘宝在检测浏览时采集的一些参数。</span><br><span class="line">    # 就是在浏览器运行的时候，始终让window.navigator.webdriver=false</span><br><span class="line">    # navigator是windiw对象的一个属性，同时修改plugins，languages，navigator 且让</span><br><span class="line">    await page.evaluate(&#x27;&#x27;&#x27;() =&gt;&#123; Object.defineProperties(navigator,&#123; webdriver:&#123; get: () =&gt; false &#125; &#125;) &#125;&#x27;&#x27;&#x27;) #以下为插入中间js，将淘宝会为了检测浏览器而调用的js修改其结果。</span><br><span class="line">    await page.evaluate(&#x27;&#x27;&#x27;() =&gt;&#123; window.navigator.chrome = &#123; runtime: &#123;&#125;,  &#125;; &#125;&#x27;&#x27;&#x27;)</span><br><span class="line">    await page.evaluate(&#x27;&#x27;&#x27;() =&gt;&#123; Object.defineProperty(navigator, &#x27;languages&#x27;, &#123; get: () =&gt; [&#x27;en-US&#x27;, &#x27;en&#x27;] &#125;); &#125;&#x27;&#x27;&#x27;)</span><br><span class="line">    await page.evaluate(&#x27;&#x27;&#x27;() =&gt;&#123; Object.defineProperty(navigator, &#x27;plugins&#x27;, &#123; get: () =&gt; [1, 2, 3, 4, 5,6], &#125;); &#125;&#x27;&#x27;&#x27;)</span><br><span class="line"> </span><br><span class="line">    # 使用type选定页面元素，并修改其数值，用于输入账号密码，修改的速度仿人类操作，因为有个输入速度的检测机制</span><br><span class="line">    # 因为 pyppeteer 框架需要转换为js操作，而js和python的类型定义不同，所以写法与参数要用字典，类型导入</span><br><span class="line">    await page.type(&#x27;.J_UserName&#x27;, username, &#123;&#x27;delay&#x27;: input_time_random() - 50&#125;)</span><br><span class="line">    await page.type(&#x27;#J_StandardPwd input&#x27;, pwd, &#123;&#x27;delay&#x27;: input_time_random()&#125;)</span><br><span class="line"> </span><br><span class="line">    #await page.screenshot(&#123;&#x27;path&#x27;: &#x27;./headless-test-result.png&#x27;&#125;)    # 截图测试</span><br><span class="line">    time.sleep(2)</span><br><span class="line"> </span><br><span class="line">    # 检测页面是否有滑块。原理是检测页面元素。</span><br><span class="line">    slider = await page.Jeval(&#x27;#nocaptcha&#x27;, &#x27;node =&gt; node.style&#x27;)  # 是否有滑块</span><br><span class="line"> </span><br><span class="line">    if slider:</span><br><span class="line">        print(&#x27;当前页面出现滑块&#x27;)</span><br><span class="line">        #await page.screenshot(&#123;&#x27;path&#x27;: &#x27;./headless-login-slide.png&#x27;&#125;) # 截图测试</span><br><span class="line">        flag,page = await mouse_slide(page=page) #js拉动滑块过去。</span><br><span class="line">        if flag:</span><br><span class="line">            await page.keyboard.press(&#x27;Enter&#x27;) # 确保内容输入完毕，少数页面会自动完成按钮点击</span><br><span class="line">            print(&quot;print enter&quot;,flag)</span><br><span class="line">            await page.evaluate(&#x27;&#x27;&#x27;document.getElementById(&quot;J_SubmitStatic&quot;).click()&#x27;&#x27;&#x27;) # 如果无法通过回车键完成点击，就调用js模拟点击登录按钮。</span><br><span class="line"> </span><br><span class="line">            time.sleep(2)</span><br><span class="line">            #cookies_list = await page.cookies()</span><br><span class="line">            #print(cookies_list)</span><br><span class="line">            await get_cookie(page) # 导出cookie 完成登陆后就可以拿着cookie玩各种各样的事情了。</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;&quot;)</span><br><span class="line">        await page.keyboard.press(&#x27;Enter&#x27;)</span><br><span class="line">        print(&quot;print enter&quot;)</span><br><span class="line">        await page.evaluate(&#x27;&#x27;&#x27;document.getElementById(&quot;J_SubmitStatic&quot;).click()&#x27;&#x27;&#x27;)</span><br><span class="line">        await page.waitFor(20)</span><br><span class="line">        await page.waitForNavigation()</span><br><span class="line"> </span><br><span class="line">        try:</span><br><span class="line">            global error # 检测是否是账号密码错误</span><br><span class="line">            print(&quot;error_1:&quot;,error)</span><br><span class="line">            error = await page.Jeval(&#x27;.error&#x27;, &#x27;node =&gt; node.textContent&#x27;)</span><br><span class="line">            print(&quot;error_2:&quot;,error)</span><br><span class="line">        except Exception as e:</span><br><span class="line">            error = None</span><br><span class="line">        finally:</span><br><span class="line">            if error:</span><br><span class="line">                print(&#x27;确保账户安全重新入输入&#x27;)</span><br><span class="line">                # 程序退出。</span><br><span class="line">                loop.close()</span><br><span class="line">              else:</span><br><span class="line">                print(page.url)</span><br><span class="line">                await get_cookie(page)</span><br><span class="line">    #time.sleep(100)</span><br><span class="line"># 获取登录后cookie</span><br><span class="line">async def get_cookie(page):</span><br><span class="line">    #res = await page.content()</span><br><span class="line">    cookies_list = await page.cookies()</span><br><span class="line">    cookies = &#x27;&#x27;</span><br><span class="line">    for cookie in cookies_list:</span><br><span class="line">        str_cookie = &#x27;&#123;0&#125;=&#123;1&#125;;&#x27;</span><br><span class="line">        str_cookie = str_cookie.format(cookie.get(&#x27;name&#x27;), cookie.get(&#x27;value&#x27;))</span><br><span class="line">        cookies += str_cookie</span><br><span class="line">    print(cookies)</span><br><span class="line">    return cookies</span><br><span class="line"> </span><br><span class="line">def retry_if_result_none(result):</span><br><span class="line">    return result is None</span><br><span class="line"> </span><br><span class="line">@retry(retry_on_result=retry_if_result_none,)</span><br><span class="line">async def mouse_slide(page=None):</span><br><span class="line">    await asyncio.sleep(2)</span><br><span class="line">    try :</span><br><span class="line">        #鼠标移动到滑块，按下，滑动到头（然后延时处理），松开按键</span><br><span class="line">        await page.hover(&#x27;#nc_1_n1z&#x27;) # 不同场景的验证码模块能名字不同。</span><br><span class="line">        await page.mouse.down()</span><br><span class="line">        await page.mouse.move(2000, 0, &#123;&#x27;delay&#x27;: random.randint(1000, 2000)&#125;)</span><br><span class="line">        await page.mouse.up()</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(e, &#x27;:验证失败&#x27;)</span><br><span class="line">        return None,page</span><br><span class="line">    else:</span><br><span class="line">        await asyncio.sleep(2)</span><br><span class="line">        # 判断是否通过</span><br><span class="line">        slider_again = await page.Jeval(&#x27;.nc-lang-cnt&#x27;, &#x27;node =&gt; node.textContent&#x27;)</span><br><span class="line">        if slider_again != &#x27;验证通过&#x27;:</span><br><span class="line">            return None,page</span><br><span class="line">        else:</span><br><span class="line">            #await page.screenshot(&#123;&#x27;path&#x27;: &#x27;./headless-slide-result.png&#x27;&#125;) # 截图测试</span><br><span class="line">            print(&#x27;验证通过&#x27;)</span><br><span class="line">            return 1,page</span><br><span class="line"> </span><br><span class="line">def input_time_random():</span><br><span class="line">    return random.randint(100, 151)</span><br><span class="line"> </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    username = &#x27;xxxxxxxxx&#x27; # 淘宝用户名</span><br><span class="line">    pwd = &#x27;xxxxxxxxxxx&#x27; #密码</span><br><span class="line">    url = &#x27;https://login.taobao.com/member/login.jhtml?style=mini&amp;css_style=b2b&amp;from=b2b&amp;full_redirect=true&amp;redirect_url=https://login.1688.com/member/jump.htm?target=https://login.1688.com/member/marketSigninJump.htm?Done=http://login.1688.com/member/taobaoSellerLoginDispatch.htm&amp;reg= http://member.1688.com/member/join/enterprise_join.htm?lead=http://login.1688.com/member/taobaoSellerLoginDispatch.htm&amp;leadUrl=http://login.1688.com/member/&#x27;</span><br><span class="line">    loop = asyncio.get_event_loop()  #协程，开启个无限循环的程序流程，把一些函数注册到事件循环上。当满足事件发生的时候，调用相应的协程函数。</span><br><span class="line">    loop.run_until_complete(main(username, pwd, url))  #将协程注册到事件循环，并启动事件循环</span><br></pre></td></tr></table></figure>

<h3 id="2-Playwright规避检测"><a href="#2-Playwright规避检测" class="headerlink" title="2.Playwright规避检测"></a>2.Playwright规避检测</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from playwright.sync_api import sync_playwright</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">p = sync_playwright().start()</span><br><span class="line">browser = p.chromium.launch(headless=False) #关闭无头模式，方便看到页面加载情况</span><br><span class="line">page = browser.new_page() #创建page对象</span><br><span class="line"></span><br><span class="line">js=&quot;&quot;&quot;</span><br><span class="line">Object.defineProperties(navigator, &#123;webdriver:&#123;get:()=&gt;undefined&#125;&#125;);</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    page.add_init_script(js);</span><br><span class="line">    page.goto(&quot;https://antispider1.scrape.center/&quot;)</span><br><span class="line">    print(page.title())</span><br><span class="line">except Exception as err:</span><br><span class="line">    print(err)</span><br><span class="line">finally:</span><br><span class="line">    time.sleep(1000) #等待1000s防止看不到页面</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>首先上一个被拷贝的惨不忍睹 上一个是滑块验证[<a href="https://www.cnblogs.com/carl-/p/15761861.html]">https://www.cnblogs.com/carl-/p/15761861.html]</a></p>
<p>还是前两天做一个商城后台爬虫，限制用户缓存，不能用谷歌开发版本，同时需要下载文件。</p>
<p>话不多说上代码[<a href="https://www.cnblogs.com/carl-/p/15762714.html]">https://www.cnblogs.com/carl-/p/15762714.html]</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import getpass</span><br><span class="line">from playwright.sync_api import sync_playwright</span><br><span class="line"># 不出意外这个可以获取到你google的本地缓存文件</span><br><span class="line">__USER_DATE_DIR_PATH__ = f&quot;C:\\Users\\&#123;getpass.getuser()&#125;\\AppData\Local\Google\Chrome\\User Data&quot;</span><br><span class="line">playwright = sync_playwright().start()</span><br><span class="line">browser = playwright.chromium.launch_persistent_context(</span><br><span class="line">                    # 指定本机用户缓存地址</span><br><span class="line">                    user_data_dir=__USER_DATE_DIR_PATH__,</span><br><span class="line">                    # 指定本机google客户端exe的路径</span><br><span class="line">                    executable_path=__EXECUTABLE_PATH__,</span><br><span class="line">                    # 要想通过这个下载文件这个必然要开  默认是False</span><br><span class="line">                    accept_downloads=True,</span><br><span class="line">                    # 设置不是无头模式</span><br><span class="line">                    headless=False,</span><br><span class="line">                    bypass_csp=True,</span><br><span class="line">                    slow_mo=10，</span><br><span class="line">                    #跳过检测</span><br><span class="line">                    args=[&#x27;--disable-blink-features=AutomationControlled&#x27;]</span><br><span class="line">                )</span><br></pre></td></tr></table></figure>

<p>注意用这个方法启动的浏览器会自带一个页面存在，当然你还是可以重新再起一个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 打开新页</span><br><span class="line">page = browser.new_page()</span><br><span class="line"># 访问谷歌首页</span><br><span class="line">page.goto(&#x27;https://www.google.com&#x27;,wait_until=&#x27;networkidle&#x27;,timeout=90000)</span><br></pre></td></tr></table></figure>

<h6 id="wait-until-x3D-’networkidle’-意思是-跳转过后再一定时间内没有网络请求链接"><a href="#wait-until-x3D-’networkidle’-意思是-跳转过后再一定时间内没有网络请求链接" class="headerlink" title="wait_until&#x3D;’networkidle’ 意思是 跳转过后再一定时间内没有网络请求链接"></a>wait_until&#x3D;’networkidle’ 意思是 跳转过后再一定时间内没有网络请求链接</h6><h6 id="timeout-很好理解-超时时间90秒"><a href="#timeout-很好理解-超时时间90秒" class="headerlink" title="timeout 很好理解 超时时间90秒"></a>timeout 很好理解 超时时间90秒</h6><p>js注入（用途的话是选择器选择元素用的，具体的js 你们自己写）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 算是获得句柄吧</span><br><span class="line">window_handle = page.evaluate_handle(&quot;window&quot;)</span><br><span class="line"># 选择元素</span><br><span class="line">window_handle.evaluate(&quot;document.querySelectorAll(&#x27;#drrReportRangeTypeRadioMonthly&#x27;)[0].checked=true&quot;)</span><br><span class="line"># 自带select选择 data自行补充</span><br><span class="line">drrMonthlySelect = page.wait_for_selector(&#x27;//select[@id=&quot;drrMonthlySelect&quot;]&#x27;)</span><br><span class="line">drrMonthlySelect.select_option(date)</span><br></pre></td></tr></table></figure>

<h4 id="接下来是下载操作"><a href="#接下来是下载操作" class="headerlink" title="接下来是下载操作"></a>接下来是下载操作</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 打开下载器</span><br><span class="line">with page.expect_download() as download_info:</span><br><span class="line">  #找到你要下载的东西，找到点击的元素，点击</span><br><span class="line">  page.wait_for_selector(&#x27;//a[@id=&quot;sspa-reports:report-settings-page:-download-button&quot;]&#x27;).click()</span><br><span class="line"># 下载的东西</span><br><span class="line">download = download_info.value</span><br><span class="line"># 下载的路径</span><br><span class="line">download.path()</span><br><span class="line"># 下载的文件名</span><br><span class="line">download.suggested_filename</span><br><span class="line"># 关闭页面</span><br><span class="line">page.close()</span><br><span class="line"># 关闭浏览器</span><br><span class="line">browser.stop()</span><br></pre></td></tr></table></figure>

<h4 id="剩下的操作-你想干啥干啥"><a href="#剩下的操作-你想干啥干啥" class="headerlink" title="剩下的操作 你想干啥干啥"></a>剩下的操作 你想干啥干啥</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 补充几个</span><br><span class="line"># 点击</span><br><span class="line">page.click(&#x27;//input[@id=&quot;signInSubmit&quot;]&#x27;)</span><br><span class="line"># 等待完成</span><br><span class="line">self.page.wait_for_load_state(&quot;domcontentloaded&quot;)</span><br><span class="line"># 输入</span><br><span class="line">page.fill(&#x27;//input[@id=&quot;ap_email&quot;]&#x27;, user_str)</span><br><span class="line"># 查找元素</span><br><span class="line">page.wait_for_selector(&#x27;//select[@id=&quot;drrMonthlySelect&quot;]&#x27;)</span><br></pre></td></tr></table></figure>

<p>原文地址：<a href="https://www.cnblogs.com/carl-/p/15762714.html">https://www.cnblogs.com/carl-/p/15762714.html</a></p>
<p><a href="https://www.pianshen.com/article/3395153606/">https://www.pianshen.com/article/3395153606/</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基础语法</title>
    <url>/2022/09/05/Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="Python基础语法总结"><a href="#Python基础语法总结" class="headerlink" title="Python基础语法总结"></a>Python基础语法总结</h2><h3 id="1-Hello-World"><a href="#1-Hello-World" class="headerlink" title="1. Hello World"></a>1. Hello World</h3><p>[1]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(&quot;Hello World&quot;)</span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure>

<h3 id="2-输入与输出"><a href="#2-输入与输出" class="headerlink" title="2. 输入与输出"></a>2. 输入与输出</h3><p>[2]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a=input(&quot;请输入一个整数&quot;)</span><br><span class="line">print(a)</span><br><span class="line">请输入一个整数33</span><br><span class="line">33</span><br></pre></td></tr></table></figure>

<h3 id="3-类型"><a href="#3-类型" class="headerlink" title="3. 类型"></a>3. 类型</h3><p>[3]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a=1</span><br><span class="line">b=&quot;1&quot;</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line">print(a==b)</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">False</span><br></pre></td></tr></table></figure>

<p>[9]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a=int(a)</span><br><span class="line">b=int(b)</span><br><span class="line">print(a==b)</span><br><span class="line">True</span><br></pre></td></tr></table></figure>

<p>[11]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a=int(a)</span><br><span class="line">print(a)</span><br><span class="line">a=float(a)</span><br><span class="line">print(a)</span><br><span class="line">a=str(a)</span><br><span class="line">print(a)</span><br><span class="line">1</span><br><span class="line">1.0</span><br><span class="line">1.0</span><br></pre></td></tr></table></figure>

<p>[20]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s=&#x27;&#x27;&#x27;鹅鹅鹅，</span><br><span class="line">曲项向天歌。</span><br><span class="line">白毛浮绿水，</span><br><span class="line">红掌拨清波。</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">print(s)</span><br><span class="line">鹅鹅鹅，</span><br><span class="line">曲项向天歌。</span><br><span class="line">白毛浮绿水，</span><br><span class="line">红掌拨清波。</span><br></pre></td></tr></table></figure>

<p>[40]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(&#x27;我能输出&quot;&#x27;)</span><br><span class="line">print(&quot;我也能输出&#x27;&quot;)</span><br><span class="line">我能输出&quot;</span><br><span class="line">我也能输出&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="4-定义的简写"><a href="#4-定义的简写" class="headerlink" title="4. 定义的简写"></a>4. 定义的简写</h3><p>[15]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a,b=1,2</span><br><span class="line">print(a,b)</span><br><span class="line">1 2</span><br></pre></td></tr></table></figure>

<h3 id="5-注释"><a href="#5-注释" class="headerlink" title="5. 注释"></a>5. 注释</h3><p>[24]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 注释</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">跨行</span><br><span class="line">注释</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure>

<p>[24]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;\n跨行\n注释\n&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="6-判断"><a href="#6-判断" class="headerlink" title="6. 判断"></a>6. 判断</h3><p>[4]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">n=input(&quot;请输入一个数字&quot;)</span><br><span class="line">if int(n)%2==1:</span><br><span class="line">    print(&quot;%s是奇数&quot;%n)</span><br><span class="line">    print(n+&quot;是奇数&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;%s是偶数&quot;%n)</span><br><span class="line">请输入一个数字1</span><br><span class="line">1是奇数</span><br></pre></td></tr></table></figure>

<p>[41]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">n=input(&quot;请输入一个数字&quot;)</span><br><span class="line">if int(n)&gt;0:</span><br><span class="line">    print(&quot;%s为正数&quot;%n)</span><br><span class="line">elif int(n)==0:</span><br><span class="line">    print(&quot;%s为零&quot;%n)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;%s为负数&quot;%n)</span><br><span class="line">请输入一个数字1</span><br><span class="line">1为正数</span><br></pre></td></tr></table></figure>

<h3 id="7-输出-Part2"><a href="#7-输出-Part2" class="headerlink" title="7. 输出 Part2"></a>7. 输出 Part2</h3><p>[35]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">n=1</span><br><span class="line">print(&quot;%i是整数&quot;%n)</span><br><span class="line">1是整数</span><br></pre></td></tr></table></figure>

<p>[38]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">n=1.1</span><br><span class="line">print(&quot;%f是浮点数&quot;%n)</span><br><span class="line">print(&quot;%.2f是浮点数&quot;%n)</span><br><span class="line">1.100000是浮点数</span><br><span class="line">1.10是浮点数</span><br></pre></td></tr></table></figure>

<p>[39]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">n=&quot;abc&quot;</span><br><span class="line">print(&quot;%s是字符串&quot;%n)</span><br><span class="line">abc是字符串</span><br></pre></td></tr></table></figure>

<p>[5]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#思考 对与错</span><br><span class="line"></span><br><span class="line">n=input(&quot;请输入一个数字&quot;)</span><br><span class="line">if int(n)%2==1:</span><br><span class="line">    print(&quot;%i是奇数&quot;%n)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;%i是偶数&quot;%n)</span><br><span class="line"></span><br><span class="line">请输入一个数字2</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-5-3691576c4c58&gt; in &lt;module&gt;</span><br><span class="line">      5     print(&quot;%i是奇数&quot;%n)</span><br><span class="line">      6 else:</span><br><span class="line">----&gt; 7     print(&quot;%i是偶数&quot;%n)</span><br><span class="line"></span><br><span class="line">TypeError: %i format: a number is required, not str</span><br></pre></td></tr></table></figure>

<h3 id="8-列表-与-元组"><a href="#8-列表-与-元组" class="headerlink" title="8. 列表 与 元组"></a>8. 列表 与 元组</h3><p>[42]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a=[1,2,3,4]</span><br><span class="line">print(a)</span><br><span class="line">a.append(5)</span><br><span class="line">print(a)</span><br><span class="line">[1, 2, 3, 4]</span><br><span class="line">[1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure>

<p>[6]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#常用写法</span><br><span class="line">result=[]</span><br><span class="line">n=1</span><br><span class="line">while n&lt;=10:</span><br><span class="line">    n+=1</span><br><span class="line">    tmp=n</span><br><span class="line">    result.append(tmp)</span><br><span class="line">print(result)</span><br><span class="line">[2, 3, 4, 5, 6, 7, 8, 9, 10, 11]</span><br></pre></td></tr></table></figure>

<p>[43]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a=(1,2,3,4)</span><br><span class="line">print(a)</span><br><span class="line">a.append(5)</span><br><span class="line">print(a)</span><br><span class="line">(1, 2, 3, 4)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">AttributeError                            Traceback (most recent call last)</span><br><span class="line">~\AppData\Local\Temp/ipykernel_82292/2209037872.py in &lt;module&gt;</span><br><span class="line">      1 a=(1,2,3,4)</span><br><span class="line">      2 print(a)</span><br><span class="line">----&gt; 3 a.append(5)</span><br><span class="line">      4 print(a)</span><br><span class="line"></span><br><span class="line">AttributeError: &#x27;tuple&#x27; object has no attribute &#x27;append&#x27;</span><br></pre></td></tr></table></figure>

<p>[45]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a=[[1,2],[3,4]]</span><br><span class="line">print(a)</span><br><span class="line">print(a[0])</span><br><span class="line">print(a[0][1])</span><br><span class="line">[[1, 2], [3, 4]]</span><br><span class="line">[1, 2]</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<p>[46]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a=[(1,2),(3,4)]</span><br><span class="line">print(a)</span><br><span class="line">print(a[0])</span><br><span class="line">print(a[0][1])</span><br><span class="line">[(1, 2), (3, 4)]</span><br><span class="line">(1, 2)</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<p>[50]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a=[]</span><br><span class="line">print(a)</span><br><span class="line">[]</span><br></pre></td></tr></table></figure>

<p>[51]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a=()</span><br><span class="line">print(a)</span><br><span class="line">()</span><br></pre></td></tr></table></figure>

<p>[52]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a=[1]</span><br><span class="line">print(a)</span><br><span class="line">[1]</span><br></pre></td></tr></table></figure>

<p>[53]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a=(1)</span><br><span class="line">print(a)</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<p>[54]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a=(1,)</span><br><span class="line">print(a)</span><br><span class="line">(1,)</span><br></pre></td></tr></table></figure>

<h3 id="9-循环"><a href="#9-循环" class="headerlink" title="9. 循环"></a>9. 循环</h3><p>break 和 continue</p>
<p>[58]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">n=1</span><br><span class="line">while True:</span><br><span class="line">    print(n)</span><br><span class="line">    n+=1</span><br><span class="line">    if n&gt;10:</span><br><span class="line">        break</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td></tr></table></figure>

<p>[59]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls=[1,2,3,4]</span><br><span class="line">for l in ls:</span><br><span class="line">    print(l)</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure>

<p>[60]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for index,l in enumerate(ls):</span><br><span class="line">    print(index,l)</span><br><span class="line">0 1</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">3 4</span><br></pre></td></tr></table></figure>

<h3 id="10-函数"><a href="#10-函数" class="headerlink" title="10. 函数"></a>10. 函数</h3><p>[61]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def ok():</span><br><span class="line">    return True</span><br><span class="line"></span><br><span class="line">if ok():</span><br><span class="line">    print(&quot;ok&quot;)</span><br><span class="line">ok</span><br></pre></td></tr></table></figure>

<p>[62]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def odd(n):</span><br><span class="line">    if n%2==1:</span><br><span class="line">        return True</span><br><span class="line">    else:</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line">n=1</span><br><span class="line">if odd(n):</span><br><span class="line">    print(&quot;%s是奇数&quot;%n)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;%s是偶数&quot;%n)</span><br><span class="line">1是奇数</span><br></pre></td></tr></table></figure>

<p>[64]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def bigger(a,b):</span><br><span class="line">    if a&gt;b:</span><br><span class="line">        print(str(a)+&quot;&gt;&quot;+str(b))</span><br><span class="line">    elif a==b:</span><br><span class="line">        print(str(a)+&quot;=&quot;+str(b))</span><br><span class="line">    else:</span><br><span class="line">        print(str(a)+&quot;&lt;&quot;+str(b))</span><br><span class="line"></span><br><span class="line">bigger(3,2)</span><br><span class="line">3&gt;2</span><br></pre></td></tr></table></figure>

<h3 id="11-简单计算"><a href="#11-简单计算" class="headerlink" title="11. 简单计算"></a>11. 简单计算</h3><p>[65]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(2+3)</span><br><span class="line">print(2-3)</span><br><span class="line">print(2*3)</span><br><span class="line">print(2/3)</span><br><span class="line">print(2**3)</span><br><span class="line">print(2//3)</span><br><span class="line">5</span><br><span class="line">-1</span><br><span class="line">6</span><br><span class="line">0.6666666666666666</span><br><span class="line">8</span><br><span class="line">0</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python数据分析</title>
    <url>/2022/09/26/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="Python数据分析"><a href="#Python数据分析" class="headerlink" title="Python数据分析"></a>Python数据分析</h2><h3 id="1-机器学习库sklearn（分类问题）"><a href="#1-机器学习库sklearn（分类问题）" class="headerlink" title="1.机器学习库sklearn（分类问题）"></a>1.机器学习库sklearn（分类问题）</h3><p>1、请分析iris.data文件中的鸢尾花特征<br></p>
<p>编写一个判断鸢尾花种类的程序（输入萼片长、萼片宽、花瓣长、花瓣宽，输出鸢尾花种类）</p>
<p>将iris.data中的150条数据，输入程序，输出准确率（做对的数量&#x2F;150）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import csv</span><br><span class="line">from sklearn.tree import DecisionTreeClassifier</span><br><span class="line"></span><br><span class="line">iris_data = []</span><br><span class="line">with open(&quot;iris.data&quot;) as csvfile:</span><br><span class="line">    csv_reader = csv.reader(csvfile)</span><br><span class="line">    for row in csv_reader:</span><br><span class="line">        iris_data.append(row)</span><br><span class="line">iris_data = np.array (iris_data)</span><br><span class="line">#将数据存入iris_data列表</span><br><span class="line">x=iris_data[:,:-1].astype(float)</span><br><span class="line">#数据去取四列去掉类型列</span><br><span class="line">#print(x)</span><br><span class="line">#setosa-0 versicolor-1 virginica-2</span><br><span class="line">y=[i//50 for i in range(150)]</span><br><span class="line">#得三种类型0,1,2</span><br><span class="line">print(y)</span><br><span class="line">clf = DecisionTreeClassifier()      # 所以参数均置为默认状态</span><br><span class="line">clf.fit(x, y)</span><br><span class="line">#将数据与y进行绑定</span><br><span class="line">pred = clf.predict(x)</span><br><span class="line">print(pred)</span><br><span class="line">print(&quot;准确率：&quot;+str(np.sum(y==pred)/150))</span><br></pre></td></tr></table></figure>

<p>2.函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PetalLength = iris_data[:,2].astype(float)</span><br><span class="line">#取第三列</span><br><span class="line"></span><br><span class="line">np.sort(PetalLength)</span><br><span class="line">#将数据从小到大排列</span><br><span class="line"></span><br><span class="line">np.unique(PetalLength)</span><br><span class="line">#去掉相同项，将数据从小到大排列</span><br><span class="line"></span><br><span class="line">np.sum(PetalLength)#求和</span><br><span class="line">np.mean(PetalLength)#求均值</span><br><span class="line">np.std(PetalLength)#求标准差</span><br><span class="line">np.var(PetalLength)#求方差</span><br><span class="line">np.min(PetalLength)#求最小值</span><br><span class="line">np.max(PetalLength)#求最大值</span><br><span class="line"></span><br><span class="line">#切片</span><br><span class="line">setosa=iris_data[0:50,0:4]</span><br><span class="line">versicolor=iris_data[50:100,0:4]</span><br><span class="line">virginica=iris_data[100:150,0:4]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h2>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python语法补充讲解，老师课件</title>
    <url>/2022/09/05/Python%E8%AF%AD%E6%B3%95%E8%A1%A5%E5%85%85%EF%BC%8C%E8%80%81%E5%B8%88%E8%AF%BE%E4%BB%B6/</url>
    <content><![CDATA[<h4 id="Python语法补充讲解，老师课件"><a href="#Python语法补充讲解，老师课件" class="headerlink" title="Python语法补充讲解，老师课件"></a>Python语法补充讲解，老师课件</h4><h4 id="1-输出hello-world-语句"><a href="#1-输出hello-world-语句" class="headerlink" title="1. 输出hello world 语句"></a>1. 输出hello world 语句</h4><p>In [1]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(&quot;hello world&quot;)</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure>

<p>In [2]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># python 2.x</span><br><span class="line"># @徐洁</span><br><span class="line">print &quot;hello world&quot;</span><br><span class="line">  File &quot;C:\Users\Lenovo\AppData\Local\Temp/ipykernel_10488/3923495743.py&quot;, line 1</span><br><span class="line">    print &quot;hello world&quot;</span><br><span class="line">          ^</span><br><span class="line">SyntaxError: Missing parentheses in call to &#x27;print&#x27;. Did you mean print(&quot;hello world&quot;)?</span><br></pre></td></tr></table></figure>

<h4 id="2-温度转换"><a href="#2-温度转换" class="headerlink" title="2. 温度转换"></a>2. 温度转换</h4><p>经常出国旅行的驴友都知道，需要时时了解当地的气温状况，但不少国家采用了不同的温度计量单位∶有些使用华氏温度标准(F），有些使用摄氏温度(C)。现在，请你根据温度转换公式设计一个温度转换程序，可以进行温度转换。如果输入摄氏温度，显示转换的华氏温度;如果输入华氏温度，显示转换的摄氏温度。<br>温度转换的公式为︰F&#x3D;(C * 9 &#x2F; 5) + 32; C&#x3D;(F - 32) * 5 &#x2F; 9﹔式中F–华氏温度，C–摄氏温度。</p>
<p>In [5]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># @徐帅航 物联网2020</span><br><span class="line">x, n = map(int, input().split(&#x27; &#x27;))</span><br><span class="line">if x %2 == 1:</span><br><span class="line">    ans = (n - 32)* 5 / 9</span><br><span class="line">    print( &quot;The centigrade is %.2f&quot; % ans)</span><br><span class="line">else:</span><br><span class="line">    ans = n * 9 / 5 +32</span><br><span class="line">    print( &quot;The centigrade is %.2f&quot; % ans)</span><br><span class="line">1 100</span><br><span class="line">The centigrade is 37.78</span><br></pre></td></tr></table></figure>

<p>In [13]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 基础写法</span><br><span class="line">x,n=input().split(&#x27; &#x27;) #或者x,n=input(),input()</span><br><span class="line">x,n=int(x),int(n)</span><br><span class="line">if x == 1:</span><br><span class="line">    ans = (n - 32)* 5 / 9</span><br><span class="line">    print( &quot;The centigrade is %.2f&quot; % ans)</span><br><span class="line">else:</span><br><span class="line">    ans = n * 9 / 5 +32</span><br><span class="line">    print( &quot;The centigrade is %.2f&quot; % ans)</span><br><span class="line">1 100</span><br><span class="line">The centigrade is 37.78</span><br></pre></td></tr></table></figure>

<p>In [ ]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x, n = map(int, input().split(&#x27; &#x27;))</span><br><span class="line">print(type(x))</span><br></pre></td></tr></table></figure>

<p>map(函数, 序列1, 序列2, …)</p>
<p>In [1]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def square(x) :</span><br><span class="line">    return x ** 2</span><br><span class="line"></span><br><span class="line">tmp=map(square, [1,2,3,4,5])</span><br><span class="line">print(tmp)</span><br><span class="line">print(list(tmp))</span><br><span class="line">&lt;map object at 0x000001EA8142EA90&gt;</span><br><span class="line">[1, 4, 9, 16, 25]</span><br></pre></td></tr></table></figure>

<p>In [9]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def square(a,b) :</span><br><span class="line">    return a * b</span><br><span class="line"></span><br><span class="line">tmp=map(square, [1,2,3,4,5], [2,2,2,2,2])</span><br><span class="line">print(list(tmp))</span><br><span class="line">[2, 4, 6, 8, 10]</span><br></pre></td></tr></table></figure>

<p>lambda 匿名函数</p>
<p>In [10]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">def square(x) :</span><br><span class="line">    return x ** 2</span><br><span class="line"></span><br><span class="line">tmp=map(square, [1,2,3,4,5])</span><br><span class="line">print(list(tmp))</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">tmp=map(lambda x:x**2, [1,2,3,4,5])</span><br><span class="line">print(list(tmp))</span><br><span class="line">[1, 4, 9, 16, 25]</span><br></pre></td></tr></table></figure>

<p>In [11]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tmp=map(lambda a,b:a*b, [1,2,3,4,5], [2,2,2,2,2])</span><br><span class="line">print(list(tmp))</span><br><span class="line">[2, 4, 6, 8, 10]</span><br></pre></td></tr></table></figure>

<h4 id="3-计算a-aa-aaa-——-aaaaaaa"><a href="#3-计算a-aa-aaa-——-aaaaaaa" class="headerlink" title="3. 计算a+aa+aaa+——+aaaaaaa"></a>3. 计算a+aa+aaa+——+aaaaaaa</h4><p>tips: 在 01-讲义.ipynb 中补充了相关知识(range())</p>
<p>In [5]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def val(a,n):</span><br><span class="line">    tmp=0</span><br><span class="line">    for i in range(n+1):</span><br><span class="line">        tmp+=a * (10**i)</span><br><span class="line">    return tmp</span><br><span class="line"></span><br><span class="line">a,n,ans=int(input()),int(input()),0</span><br><span class="line">for i in range(n):</span><br><span class="line">    ans += val(a,i)</span><br><span class="line">print(ans)</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">246</span><br></pre></td></tr></table></figure>

<p>In [27]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># @徐帅航 物联网2020</span><br><span class="line">a,n = map( int, input().split(&#x27; &#x27;))</span><br><span class="line">ans,x = 0,0</span><br><span class="line">for i in range(1,n+1):</span><br><span class="line">    x= x*10 + a</span><br><span class="line">    ans += x</span><br><span class="line">print(ans)</span><br><span class="line">2 3</span><br><span class="line">246</span><br></pre></td></tr></table></figure>

<h4 id="4-求矩阵的两对角线上的元素之和"><a href="#4-求矩阵的两对角线上的元素之和" class="headerlink" title="4. 求矩阵的两对角线上的元素之和"></a>4. 求矩阵的两对角线上的元素之和</h4><p>In [28]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 读取</span><br><span class="line">n,l=int(input()),[]</span><br><span class="line">for i in range(n):</span><br><span class="line">    tmp=input().split(&#x27; &#x27;)</span><br><span class="line">    l.append(tmp)</span><br><span class="line">print(l)</span><br><span class="line">2</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">[[&#x27;1&#x27;, &#x27;2&#x27;], [&#x27;2&#x27;, &#x27;3&#x27;]]</span><br></pre></td></tr></table></figure>

<p>In [31]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">n,l=int(input()),[]</span><br><span class="line">for i in range(n):</span><br><span class="line">    tmp=input().split(&#x27; &#x27;)</span><br><span class="line">    l.append(tmp)</span><br><span class="line">ans=0</span><br><span class="line">for i in range(n):</span><br><span class="line">    for j in range(n):</span><br><span class="line">        if i==j or i+j==n-1:</span><br><span class="line">            ans+=int(l[i][j])</span><br><span class="line">print(ans)</span><br><span class="line">3</span><br><span class="line">1 2 3</span><br><span class="line">4 5 6</span><br><span class="line">7 8 9</span><br><span class="line">25</span><br></pre></td></tr></table></figure>

<p>In [ ]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># @徐帅航 物联网2020</span><br><span class="line">n = int(input())</span><br><span class="line">ans = 0</span><br><span class="line">for i in range(n):</span><br><span class="line">    d = list(map(int, input().split(&#x27; &#x27;)))</span><br><span class="line">    for j in range(n):</span><br><span class="line">        if i -= j or i + j == n - 1:</span><br><span class="line">            ans += d[j]</span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure>

<h4 id="5-瀑布矩阵"><a href="#5-瀑布矩阵" class="headerlink" title="5. 瀑布矩阵"></a>5. 瀑布矩阵</h4><h5 id="5-1-初始化列表的几种方法"><a href="#5-1-初始化列表的几种方法" class="headerlink" title="5.1 初始化列表的几种方法"></a>5.1 初始化列表的几种方法</h5><p>In [33]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arr = []</span><br><span class="line">for i in range(10):</span><br><span class="line">    arr.append(0)</span><br><span class="line">print(arr)</span><br><span class="line">[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</span><br></pre></td></tr></table></figure>

<p>In [36]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arr = []</span><br><span class="line">i = 0</span><br><span class="line">while(i&lt;10):</span><br><span class="line">    arr.append(0)</span><br><span class="line">    i+=1</span><br><span class="line">print(arr)</span><br><span class="line">[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</span><br></pre></td></tr></table></figure>

<p>In [37]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arr = [0 for i in range(10)]</span><br><span class="line">print(arr)</span><br><span class="line">[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</span><br></pre></td></tr></table></figure>

<p>In [38]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arr = [0]*10</span><br><span class="line">print(arr)</span><br><span class="line">[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</span><br></pre></td></tr></table></figure>

<h5 id="5-2-初始化二维列表（二维数组）"><a href="#5-2-初始化二维列表（二维数组）" class="headerlink" title="5.2 初始化二维列表（二维数组）"></a>5.2 初始化二维列表（二维数组）</h5><p>In [40]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def list_item(n):</span><br><span class="line">    return [0]*n</span><br><span class="line"></span><br><span class="line">n=int(input())</span><br><span class="line">res=[]</span><br><span class="line">for i in range(n):</span><br><span class="line">    res.append(list_item(n))</span><br><span class="line">print(res)</span><br><span class="line">3</span><br><span class="line">[[0, 0, 0], [0, 0, 0], [0, 0, 0]]</span><br></pre></td></tr></table></figure>

<p>In [44]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">n=int(input())</span><br><span class="line">res=[]</span><br><span class="line">list_item=lambda n:[0]*n</span><br><span class="line">for i in range(n):</span><br><span class="line">    res.append(list_item(n))</span><br><span class="line">print(res)</span><br><span class="line">3</span><br><span class="line">[[0, 0, 0], [0, 0, 0], [0, 0, 0]]</span><br></pre></td></tr></table></figure>

<p>In [45]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">n=int(input())</span><br><span class="line">res=[[0 for j in range(n)] for i in range(n)]</span><br><span class="line">print(res)</span><br><span class="line">3</span><br><span class="line">[[0, 0, 0], [0, 0, 0], [0, 0, 0]]</span><br></pre></td></tr></table></figure>

<p>In [48]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">3</span><br><span class="line">[[0, 1, 2], [3, 4, 5], [6, 7, 8]]</span><br></pre></td></tr></table></figure>

<p>In [53]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># @徐帅航 物联网2020</span><br><span class="line">n = int(input())</span><br><span class="line">x= 1</span><br><span class="line">a = [[0 for j in range(n)] for i in range(n)]</span><br><span class="line">for j in range(n):</span><br><span class="line">    for i in range(n):</span><br><span class="line">        a[i][j] = x</span><br><span class="line">        x += 1</span><br><span class="line">for i in range(n):</span><br><span class="line">    for j in range(n):</span><br><span class="line">        print(a[i][j], end = &#x27; &#x27;)</span><br><span class="line">    print()</span><br><span class="line">3</span><br><span class="line">1 4 7 </span><br><span class="line">2 5 8 </span><br><span class="line">3 6 9 </span><br></pre></td></tr></table></figure>

<p>In [51]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#偷鸡写法</span><br><span class="line">n=int(input())</span><br><span class="line">a=[[j+i*n+1 for j in range(n)] for i in range(n)]</span><br><span class="line">for i in range(n):</span><br><span class="line">    for j in range(n):</span><br><span class="line">        print(a[j][i], end = &#x27; &#x27;)</span><br><span class="line">    print()</span><br><span class="line">3</span><br><span class="line">1 4 7 </span><br><span class="line">2 5 8 </span><br><span class="line">3 6 9 </span><br></pre></td></tr></table></figure>

<h4 id="6-矩阵求积"><a href="#6-矩阵求积" class="headerlink" title="6. 矩阵求积"></a>6. 矩阵求积</h4><p>In [54]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># @徐帅航 物联网2020</span><br><span class="line">#初始化</span><br><span class="line">n = int(input())</span><br><span class="line">a = [[0 for j in range(n)] for i in range(n)]</span><br><span class="line">b = [[0 for j in range(n)] for i in range(n)]</span><br><span class="line">c = [[0 for j in range(n)] for i in range(n)]</span><br><span class="line">#输入a和b</span><br><span class="line">for i in range(n) :</span><br><span class="line">    d = list(map(int, input().split()))</span><br><span class="line">    for j in range(n):</span><br><span class="line">        a[i][j] = d[j]</span><br><span class="line">for i in range(n) :</span><br><span class="line">    d = list(map(int, input().split()))</span><br><span class="line">    for j in range(n):</span><br><span class="line">        b[i][j] = d[j]</span><br><span class="line">#计算c</span><br><span class="line">for i in range(n) :</span><br><span class="line">    for j in range(n) :</span><br><span class="line">        for k in range(n):</span><br><span class="line">            c[i][j] += a[i][k] * b[k][j]</span><br><span class="line">#输出</span><br><span class="line">for i in range(n) :</span><br><span class="line">    for j in range(n):</span><br><span class="line">        print( c[i][j], end = &#x27; &#x27;)</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line">3</span><br><span class="line">2 5 6</span><br><span class="line">8 10 9</span><br><span class="line">12 4 3</span><br><span class="line">5 6 13</span><br><span class="line">14 5 36</span><br><span class="line">4 8 17</span><br><span class="line">104 85 308 </span><br><span class="line">216 170 617 </span><br><span class="line">128 116 351 </span><br></pre></td></tr></table></figure>

<h4 id="7-月份牌（1900年以后）"><a href="#7-月份牌（1900年以后）" class="headerlink" title="7 月份牌（1900年以后）"></a>7 月份牌（1900年以后）</h4><p>In [6]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">n, m = map(int, input().split())</span><br><span class="line">month = [0,31,28,31,30,31,30,31,31,30,31,30,31]</span><br><span class="line">def leap_year(year) :</span><br><span class="line">    return year % 4 == 0 and year % 100 != 0 or year % 400 == 0</span><br><span class="line">if leap_year(n):</span><br><span class="line">    month[2] += 1</span><br><span class="line">res = 0</span><br><span class="line">for i in range(1900, n):</span><br><span class="line">    res += 366 if leap_year(i) else 365</span><br><span class="line">for i in range(1, m):</span><br><span class="line">    res += month[i]</span><br><span class="line">week = (res + 1)%7</span><br><span class="line">ans = [0]* week + list(range(1,month[m]+1))</span><br><span class="line">print( &quot;Su Mo Tu We Th Fr Sa&quot;, end = &#x27; &#x27;)</span><br><span class="line">for index, x in enumerate(ans) :</span><br><span class="line">    if index % 7 == 0:</span><br><span class="line">        print()</span><br><span class="line">    if x == 0:</span><br><span class="line">        print(&quot;  &quot;, end = &#x27; &#x27;)</span><br><span class="line">    else:</span><br><span class="line">        print( &quot;%2d&quot;% x, end = &#x27; &#x27;)</span><br><span class="line">1300 1</span><br><span class="line">Su Mo Tu We Th Fr Sa </span><br><span class="line">    1  2  3  4  5  6 </span><br><span class="line"> 7  8  9 10 11 12 13 </span><br><span class="line">14 15 16 17 18 19 20 </span><br><span class="line">21 22 23 24 25 26 27 </span><br><span class="line">28 29 30 31 </span><br></pre></td></tr></table></figure>

<p>In [7]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#偷鸡写法</span><br><span class="line">import calendar</span><br><span class="line">n, m = map(int, input().split())</span><br><span class="line">print(calendar.month(n, m))</span><br><span class="line">1300 1</span><br><span class="line">    January 1300</span><br><span class="line">Mo Tu We Th Fr Sa Su</span><br><span class="line">             1  2  3</span><br><span class="line"> 4  5  6  7  8  9 10</span><br><span class="line">11 12 13 14 15 16 17</span><br><span class="line">18 19 20 21 22 23 24</span><br><span class="line">25 26 27 28 29 30 31</span><br></pre></td></tr></table></figure>



<h4 id="包的导入"><a href="#包的导入" class="headerlink" title="包的导入"></a>包的导入</h4><p>pip3 install 【包名，例如：numpy】 -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></p>
<h4 id="Anaconda-下的已安装的包查看"><a href="#Anaconda-下的已安装的包查看" class="headerlink" title="Anaconda 下的已安装的包查看"></a>Anaconda 下的已安装的包查看</h4><p>conda list</p>
<h4 id="虚拟环境的概念"><a href="#虚拟环境的概念" class="headerlink" title="虚拟环境的概念"></a>虚拟环境的概念</h4><p>conda env list<br>conda create -n 【虚拟环境名】 python&#x3D;x.x<br>conda activate 【虚拟环境名】</p>
<p>In [ ]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>9.ServerSocket与Socket之间的通讯Dome</title>
    <url>/2022/05/07/ServerSocket%E4%B8%8ESocket%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E8%AE%AFDome/</url>
    <content><![CDATA[<p>1.ServerSocket</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.io.*;</span><br><span class="line">import java.net.ServerSocket;</span><br><span class="line">import java.net.Socket;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            ServerSocket server=null;</span><br><span class="line">            try&#123;</span><br><span class="line">                //创建一个ServerSocket在端口2105监听客户请求</span><br><span class="line">                server=new ServerSocket(2105);</span><br><span class="line">            &#125;catch(Exception e)&#123;</span><br><span class="line">                e.printStackTrace();//出错，打印出错信息</span><br><span class="line">            &#125;</span><br><span class="line">            Socket socket=null;</span><br><span class="line">            try&#123;</span><br><span class="line">                //使用accept()阻塞等待客户请求，有客户</span><br><span class="line">                socket=server.accept();//请求到来则产生一个Socket对象，并继续执行</span><br><span class="line">            &#125;catch(Exception e)&#123;</span><br><span class="line">                e.printStackTrace();//出错，打印出错信息</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            BufferedReader is=new BufferedReader(new InputStreamReader(socket.getInputStream()));</span><br><span class="line">            //由Socket对象得到输出流，并构造PrintWriter对象</span><br><span class="line">            PrintWriter os=new PrintWriter(socket.getOutputStream());</span><br><span class="line">            //由系统标准输入设备构造BufferedReader对象</span><br><span class="line">            while(true)&#123;</span><br><span class="line">                String s = is.readLine();</span><br><span class="line">                System.out.println(&quot;Client:&quot;+s);</span><br><span class="line">                os.println(&quot;收到！&quot;);</span><br><span class="line">                os.flush();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;catch(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();//出错，打印出错信息</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.Socket</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.io.*;</span><br><span class="line">import java.net.Socket;</span><br><span class="line">public class Socket01 &#123;</span><br><span class="line">        public static void main(String[] args) throws IOException &#123;</span><br><span class="line">            try&#123;</span><br><span class="line">                //向本机的2105端口发出客户请求</span><br><span class="line">                Socket socket=new Socket(&quot;192.168.31.162&quot;,2105);</span><br><span class="line">                //由系统标准输入设备构造BufferedReader对象</span><br><span class="line">                BufferedReader sin=new BufferedReader(new InputStreamReader(System.in));</span><br><span class="line">                //由Socket对象得到输出流，并构造PrintWriter对象</span><br><span class="line">                PrintWriter os=new PrintWriter(socket.getOutputStream());</span><br><span class="line">                //由Socket对象得到输入流，并构造相应的BufferedReader对象</span><br><span class="line">                BufferedReader is=new BufferedReader(new InputStreamReader(socket.getInputStream()));</span><br><span class="line">                String readline;</span><br><span class="line">                readline=sin.readLine(); //从系统标准输入读入一字符串</span><br><span class="line">                //若从标准输入读入的字符串为 &quot;bye&quot;则停止循环</span><br><span class="line">                while(!readline.equals(&quot;bye&quot;))&#123;</span><br><span class="line">                    //将从系统标准输入读入的字符串输出到Server</span><br><span class="line"></span><br><span class="line">                    os.println(readline);</span><br><span class="line">                    //刷新输出流，使Server马上收到该字符串</span><br><span class="line">                    os.flush();</span><br><span class="line">                    //在系统标准输出上打印读入的字符串</span><br><span class="line">                    System.out.println(&quot;Client:&quot;+readline);</span><br><span class="line">                    //从Server读入一字符串，并打印到标准输出上</span><br><span class="line">                    System.out.println(&quot;Server:&quot;+is.readLine());</span><br><span class="line">                    readline=sin.readLine(); //从系统标准输入读入一字符串</span><br><span class="line">                &#125;</span><br><span class="line">                os.close(); //关闭Socket输出流</span><br><span class="line">                is.close(); //关闭Socket输入流</span><br><span class="line">                socket.close(); //关闭Socket</span><br><span class="line">            &#125;catch(Exception e)&#123;</span><br><span class="line">                e.printStackTrace();//出错，打印出错信息</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring boot中前后端数据交互之前端对后端数据的调用(Thymeleaf的用法)</title>
    <url>/2022/06/29/Spring-boot%E4%B8%AD%E5%89%8D%E5%90%8E%E7%AB%AF%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92%E4%B9%8B%E5%89%8D%E7%AB%AF%E5%AF%B9%E5%90%8E%E7%AB%AF%E6%95%B0%E6%8D%AE%E7%9A%84%E8%B0%83%E7%94%A8-Thymeleaf%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h4 id="Thymeleaf模板"><a href="#Thymeleaf模板" class="headerlink" title="Thymeleaf模板"></a>Thymeleaf模板</h4><p>参考：<a href="https://blog.csdn.net/weixin_43055096/article/details/87704493">https://blog.csdn.net/weixin_43055096/article/details/87704493</a></p>
<p>菜鸟教程：<a href="https://blog.csdn.net/baiduwenku112/article/details/120071356">https://blog.csdn.net/baiduwenku112/article/details/120071356</a></p>
<p>创建</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;index&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>“&lt;html lang&#x3D;“en” xmlns:th&#x3D;“<a href="http://www.thymeleaf.org/">http://www.thymeleaf.org</a>”：这段代码就是引入了th模板</p>
<p>主体内容</p>
<h5 id="如果你要传入的是一个字符串"><a href="#如果你要传入的是一个字符串" class="headerlink" title="如果你要传入的是一个字符串"></a>如果你要传入的是一个字符串</h5><pre><code>@Controller
public class NodeController &#123;
    @Resource
    private StudentServiceImp ssi;

    @RequestMapping(value = &quot;/&quot;)
    public String index(Model model)&#123; 
    String students =&quot;刘洋&quot;;
     model.addAttribute(&quot;s&quot;,students)
    return &quot;index&quot;;
    &#125;
&#125;
</code></pre>
<p>model.addAttribute(“s”,students) s就为传入前端的标识<br>Html代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;index&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;span th:text=&quot;$&#123;s&#125;&quot;&gt; &lt;/span&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol>
<li><strong>如果你要传入的是一个list集合.</strong><br>我们都知道如果传入的是一个list集合，前端就必须要展示list集合的属性。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class NodeController &#123;</span><br><span class="line">    @Resource</span><br><span class="line">    private StudentServiceImp ssi;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/&quot;)</span><br><span class="line">    public String index(Model model)&#123; </span><br><span class="line">    List&lt;Student&gt; list = ssi.findStudentByAge(15);</span><br><span class="line">     model.addAttribute(&quot;s&quot;,list)</span><br><span class="line">    return &quot;index&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Html代码如下，这里只是拿出了s中的属性。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;index&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;table th:each=&quot;i:$&#123;s&#125;&quot;&gt;</span><br><span class="line">    &lt;tr &gt;</span><br><span class="line">        &lt;td&gt;学生Id&lt;/td&gt;</span><br><span class="line">        &lt;td th:text=&quot;$&#123;i.id&#125;&quot;&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr &gt;</span><br><span class="line">          &lt;td&gt;学生姓名&lt;/td&gt;</span><br><span class="line">         &lt;td th:text=&quot;$&#123;i.name&#125;&quot;&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr &gt;</span><br><span class="line">        &lt;td&gt;学生分数&lt;/td&gt;</span><br><span class="line">        &lt;td th:text=&quot;$&#123;i.score&#125;&quot;&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<ol>
<li><strong>如果你要传入的是一个对象.</strong></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class NodeController &#123;</span><br><span class="line">  @Resource</span><br><span class="line">  private StudentServiceImp ssi;</span><br><span class="line"></span><br><span class="line">  @RequestMapping(value = &quot;/&quot;)</span><br><span class="line">  public String index(Model model)&#123; </span><br><span class="line">  Student students =new Student(0,1,2,3,4);</span><br><span class="line">   model.addAttribute(&quot;s&quot;,students);</span><br><span class="line">  return &quot;index&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Html代码如下,这里就要用到get方法了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;index&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;table th:each=&quot;i:$&#123;s&#125;&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;tr &gt;</span><br><span class="line">        &lt;td&gt;学生Id&lt;/td&gt;</span><br><span class="line">        &lt;td th:text=&quot;$&#123;i.getId(&#125;&quot;&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr &gt;</span><br><span class="line">          &lt;td&gt;学生姓名&lt;/td&gt;</span><br><span class="line">         &lt;td th:text=&quot;$&#123;i.getName()&#125;&quot;&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr &gt;</span><br><span class="line">        &lt;td&gt;学生分数&lt;/td&gt;</span><br><span class="line">        &lt;td th:text=&quot;$&#123;i.getScore()&#125;&quot;&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h4 id="遍历时的状态变量"><a href="#遍历时的状态变量" class="headerlink" title="遍历时的状态变量"></a>遍历时的状态变量</h4><p><code>&lt;tr th:each=&quot;user,userStat:$&#123;users&#125;&quot;&gt;</code><br>userStat是状态变量，有 index,count,size,current,even,odd,first,last等属性，如果没有显示设置状态变量，thymeleaf会默 认给个“变量名+Stat”的状态变量。</p>
<p>th:each&#x3D;”user, userStat : ${userList}” 中的 ${userList} 是后台传过来的集合</p>
<p>◼ user：定义变量，去接收遍历${userList}集合中的一个数据<br>◼ userStat：${userList} 循环体的信息<br>◼ 其中 user 及 userStat 自己可以随便取名<br>◼ userStat 是循环体的信息，通过该变量可以获取如下信息</p>
<p>index: 当前迭代对象的 index （从 0 开始计算）</p>
<p>count: 当前迭代对象的个数（从 1 开始计算） 这两个用的较多<br>size: 被迭代对象的大小<br>current: 当前迭代变量<br>even&#x2F;odd: 布尔值，当前循环是否是偶数&#x2F;奇数（从 0 开始计算）<br>first: 布尔值，当前循环是否是第一个<br>last: 布尔值，当前循环是否是最后一个<br>息 注意：循环体信息 userStat 也可以不定义，则默认采用迭代变量加上 Stat 后缀，即 userStat2.1.2 *{…}</p>
<h4 id="简单表达式"><a href="#简单表达式" class="headerlink" title="简单表达式"></a>简单表达式</h4><p>变量表达式<code>$&#123;&#125;</code>是面向整个上下文的，而选择变量表达式<code>*&#123;&#125;</code>的上下文是父标签（<code>th:object</code>）所选择的对象：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:object</span>=<span class="string">&quot;$&#123;session.user&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;sex&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;age&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>它相当于：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;session.user.name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;session.user.sex&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;session.user.age&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">如果对象没有被选择，那么，*&#123;&#125;和$&#123;&#125;表达式所达到的效果是完全相同的：</span><br></pre></td></tr></table></figure>

<h3 id="…"><a href="#…" class="headerlink" title="@{…}"></a>@{…}</h3><p>链接表达式<code>@&#123;&#125;</code>是专门用来处理 URL 链接地址的。</p>
<p>绝对地址示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://fanlychie.github.io --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;@&#123;https://fanlychie.github.io&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>页面相对地址示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- commons/base.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;@&#123;commons/base.html&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上下文相对地址（相对于当前的服务）示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- /css/mian.css --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;@&#123;/css/mian.css&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>服务器相对地址（相对于部署在同一个服务器中的不同服务）示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- /image/upload --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;@&#123;~/image/upload&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码的移用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div th:replace=&quot;banner::swiper($&#123;banners&#125;)&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="转载一篇我认为很牛的一个Thymeleaf-教程（防丢失）"><a href="#转载一篇我认为很牛的一个Thymeleaf-教程（防丢失）" class="headerlink" title="转载一篇我认为很牛的一个Thymeleaf 教程（防丢失）"></a>转载一篇我认为很牛的一个Thymeleaf 教程（防丢失）</h3><p>菜鸟教程：<a href="https://blog.csdn.net/baiduwenku112/article/details/120071356">https://blog.csdn.net/baiduwenku112/article/details/120071356</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">目录</span><br><span class="line">1. 创建模板文件</span><br><span class="line">2. 标准表达式语法</span><br><span class="line">2.1 简单表达式</span><br><span class="line"> 2.1.1 $&#123;…&#125;</span><br><span class="line"> 2.1.2 *&#123;…&#125;</span><br><span class="line">2.1.3 #&#123;…&#125;</span><br><span class="line">2.1.4 @&#123;…&#125;</span><br><span class="line">2.1.5 ~&#123;…&#125;</span><br><span class="line">2.1.6 内置对象</span><br><span class="line">2.1.7 工具类</span><br><span class="line">2.2 字面值</span><br><span class="line">2.2.1 文字字面值</span><br><span class="line">2.2.2 数字字面值</span><br><span class="line">2.2.3 布尔字面值</span><br><span class="line">2.2.4 空字面值</span><br><span class="line">2.2.5 字面令牌</span><br><span class="line">2.3 文本操作</span><br><span class="line">2.3.1 字符串连接</span><br><span class="line">2.3.2 字面值替换</span><br><span class="line">2.4 算术运算</span><br><span class="line">2.5 布尔运算</span><br><span class="line">2.6 比较和相等</span><br><span class="line">2.7 条件运算</span><br><span class="line">2.8 无操作符</span><br><span class="line">3. 使用文本</span><br><span class="line">3.1 th:text</span><br><span class="line">3.2 th:utext</span><br><span class="line">4. 设置属性值</span><br><span class="line">4.1 th:attr</span><br><span class="line">4.2 th:*</span><br><span class="line">4.3 th:*-*</span><br><span class="line">4.4 th:attrappend &amp; th:attrprepend</span><br><span class="line">4.5 布尔属性</span><br><span class="line">5. 遍历</span><br><span class="line">6. 条件判断</span><br><span class="line">6.1 th:if</span><br><span class="line">6.2 th:unless</span><br><span class="line">6.3 th:swith</span><br><span class="line">7. 定义局部变量</span><br><span class="line">8. 注释</span><br><span class="line">8.1 标准注释</span><br><span class="line">8.1.1 单行注释</span><br><span class="line">8.1.2 多行注释</span><br><span class="line">8.2 解析器级注释</span><br><span class="line">8.2.1 单行注释：</span><br><span class="line">8.2.2 多行注释</span><br><span class="line">9. 内联表达式</span><br><span class="line">9.1 [[…]]</span><br><span class="line">9.2 [(…)]</span><br><span class="line">9.3 th:inline</span><br><span class="line">9.3.1 none</span><br><span class="line"> 9.3.2 text</span><br><span class="line">9.3.3 css</span><br><span class="line">9.3.4 javascript</span><br></pre></td></tr></table></figure>

<p>Thymeleaf 是一个服务器端 Java 模板引擎，能够处理 HTML、XML、CSS、JAVASCRIPT 等模板文件。Thymeleaf 模板可以直接当作静态原型来使用，它主要目标是为开发者的开发工作流程带来优雅的自然模板，也是 Java 服务器端 HTML5 开发的理想选择。</p>
<h3 id="1-创建模板文件"><a href="#1-创建模板文件" class="headerlink" title="1. 创建模板文件"></a>1. 创建模板文件</h3><p>创建一个 HTML 模板文件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Index Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;message&#125;&quot;</span>&gt;</span>Welcome to BeiJing!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过<code>&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</code>引入 Thymeleaf 命名空间。<code>th:text</code>用于处理<code>p</code>标签体的文本内容。该模板文件直接在任何浏览器中正确显示，浏览器会自动忽略它们不能理解的属性<code>th:text</code>。但这不是一个真正有效的 <a href="https://so.csdn.net/so/search?q=HTML5&spm=1001.2101.3001.7020">HTML5</a> 文档，因为 HTML5 规范是不允许使用<code>th:*</code>这些非标准属性的。我们可以切换到 Thymeleaf 的<code>data-th-*</code>语法，以此来替换<code>th:*</code>语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Index Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">data-th-text</span>=<span class="string">&quot;$&#123;message&#125;&quot;</span>&gt;</span>Welcome to BeiJing!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>HTML5 规范是允许<code>data-*</code>这样自定义的属性的。<code>th:*</code>和<code>data-th-*</code>这两个符号是完全等效且可以互换的。但为了简单直观和代码的紧凑性，本文采用<code>th:*</code>的表示形式。</p>
<h1 id="2-标准表达式语法"><a href="#2-标准表达式语法" class="headerlink" title="2. 标准表达式语法"></a>2. 标准表达式语法</h1><p>Thymeleaf 提供了非常丰富的标准表达式语法，总共有 8 大类：</p>
<ul>
<li>简单表达式</li>
<li>字面值</li>
<li>文本操作</li>
<li>算术运算</li>
<li>布尔运算</li>
<li>比较和相等</li>
<li>条件运算</li>
<li>无操作符</li>
</ul>
<h2 id="2-1-简单表达式"><a href="#2-1-简单表达式" class="headerlink" title="2.1 简单表达式"></a>2.1 简单表达式</h2><p><img src="https://img-blog.csdnimg.cn/20210902223946307.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6I-c6bif55WM55qE6I-c6bif,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h3 id="2-1-1-…"><a href="#2-1-1-…" class="headerlink" title="2.1.1 ${…}"></a>2.1.1 ${…}</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/standard-expression-syntax/variables&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">variables</span><span class="params">(ModelMap model, HttpSession session)</span> &#123;</span><br><span class="line">    model.put(<span class="string">&quot;now&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    model.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;Welcome to BeiJing!&quot;</span>);</span><br><span class="line">    session.setAttribute(<span class="string">&quot;user&quot;</span>, <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;fanlychie&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">24</span>));</span><br><span class="line">    ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过变量表达式<code>$&#123;&#125;</code>取出上下文环境中的<code>message</code>变量：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Welcome to BeiJing! --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;message&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>它相当于：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ctx.getVariable(<span class="string">&quot;message&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="2-1-2-…"><a href="#2-1-2-…" class="headerlink" title="2.1.2 *{…}"></a>2.1.2 *{…}</h3><p>变量表达式<code>$&#123;&#125;</code>是面向整个上下文的，而选择变量表达式<code>*&#123;&#125;</code>的上下文是父标签（<code>th:object</code>）所选择的对象：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:object</span>=<span class="string">&quot;$&#123;session.user&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;sex&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;age&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>它相当于：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;session.user.name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;session.user.sex&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;session.user.age&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">如果对象没有被选择，那么，*&#123;&#125;和$&#123;&#125;表达式所达到的效果是完全相同的：</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;session.user.name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;session.user.name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-1-3-…"><a href="#2-1-3-…" class="headerlink" title="2.1.3 #{…}"></a>2.1.3 #{…}</h3><p>消息表达式可用于国际化文字信息。首先我们来了解一下 i18n 资源文件的命名规则：</p>
<ul>
<li>basename.properties</li>
<li>basename_language.properties</li>
<li>basename_language_country.properties</li>
</ul>
<p><code>basename</code>是自定义的资源文件名称，<code>language</code>和<code>country</code>必须是 Java 支持的语言和国家。<code>basename.properties</code>是缺省加载的资源文件，当客户端根据本地语言查找不到相关的资源文件时，则使用该配置文件。</p>
<p>创建文件<code>src/main/resources/messages.properties</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">welcome.message = 北京欢迎你！</span><br></pre></td></tr></table></figure>

<p>创建文件<code>src/main/resources/messages_en_US.properties</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">welcome.message = Welcome to BeiJing!</span><br></pre></td></tr></table></figure>

<p>在 IntelliJ IDEA 编辑视图：</p>
<p><code>messages</code>是 Spring Boot 加载资源文件默认采用的名称（<code>basename</code>），如果你所使用的资源文件名称不是以<code>messages</code>命名或所使用的资源文件不是在<code>src/main/resources</code>根目录，你可以通过<code>spring.messages.basename</code>属性来做具体的配置。如，资源文件<code>messages.properties</code>和<code>messages_en_US.properties</code>假设它们所在的目录位置是<code>src/main/resources/i18n</code>。</p>
<p>application.properties 配置示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring.messages.basename:i18n/messages</span><br></pre></td></tr></table></figure>

<p>application.yml 配置示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">spring</span><br><span class="line">  messages</span><br><span class="line">    basename: i18n/messages</span><br></pre></td></tr></table></figure>

<p>静态文本消息示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 北京欢迎你！ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;welcom.message&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>消息表达式<code>#&#123;&#125;</code>是不允许直接处理非静态的文本消息的，但是你可以在资源文件中通过使用占位符<code>&#123;&#125;</code>来处理非静态的文本消息：</p>
<p>messages.properties 配置示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">welcome.user.message = &#123;<span class="number">0</span>&#125;, 北京欢迎你！</span><br></pre></td></tr></table></figure>

<p>messages_en_US.properties 配置示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">welcome.user.message = &#123;<span class="number">0</span>&#125;, Welcome to BeiJing!</span><br></pre></td></tr></table></figure>

<p>非静态文本消息，以参数的形式传递变量的值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!-- fanlychie, 北京欢迎你！ --&gt;</span><br><span class="line">&lt;p th:text=<span class="string">&quot;#&#123;welcome.user.message($&#123;session.user.name&#125;)&#125;&quot;</span>&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-1-4-…"><a href="#2-1-4-…" class="headerlink" title="2.1.4 @{…}"></a>2.1.4 @{…}</h3><p>链接表达式<code>@&#123;&#125;</code>是专门用来处理 URL 链接地址的。</p>
<p>绝对地址示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://fanlychie.github.io --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;@&#123;https://fanlychie.github.io&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>页面相对地址示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- commons/base.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;@&#123;commons/base.html&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上下文相对地址（相对于当前的服务）示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- /css/mian.css --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;@&#123;/css/mian.css&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>服务器相对地址（相对于部署在同一个服务器中的不同服务）示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- /image/upload --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;@&#123;~/image/upload&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>参数使用示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- /css/mian.css?v=1.0 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;@&#123;/css/mian.css(v=1.0)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /user/order?username=fanlychie --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;@&#123;/user/order(username=$&#123;session.user.name&#125;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /user/order?username=fanlychie&amp;status=PAIED --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;@&#123;/user/order(username=$&#123;session.user.name&#125;,status=&#x27;PAIED&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /user/fanlychie/info --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;@&#123;/user/&#123;username&#125;/info(username=$&#123;session.user.name&#125;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-1-5-…"><a href="#2-1-5-…" class="headerlink" title="2.1.5 ~{…}"></a>2.1.5 ~{…}</h3><p>片段表达式<code>~&#123;&#125;</code>可以用来引用一段公共的 HTML 代码片段。</p>
<p><img src="https://img-blog.csdnimg.cn/20210902225600873.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6I-c6bif55WM55qE6I-c6bif,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p> 在 Thymeleaf 模板文件中，你可以使用<code>th:fragment</code>属性来定义一段公共的代码片段，然后你可以通过使用<code>th:insert</code>、<code>th:replace</code>、<code>th:include</code>（Thymeleaf 3.0 开始不再推荐使用，本文也将不再介绍它）属性来将这些公共的代码片段引入到模板文件中来。</p>
<p>src&#x2F;main&#x2F;resources&#x2F;templates&#x2F;base.html，通过<code>th:fragment</code>属性定义一段公共的代码片段：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">th:fragment</span>=<span class="string">&quot;footerFragment&quot;</span>&gt;</span><span class="symbol">&amp;copy;</span> 2017 fanlychie<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>src&#x2F;main&#x2F;resources&#x2F;templates&#x2F;index.html，通过<code>th:insert</code>属性引用一段公共的代码片段：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">&quot;~&#123;base :: footerFragment&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中，<code>~&#123;&#125;</code>是可选的，我们可以去掉这层的包裹：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">&quot;base :: footerFragment&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>若 index.html 与 base.html 不在同级目录，如 templates&#x2F;commons&#x2F;base.html：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">&quot;~&#123;commons/base :: footerFragment&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用<code>th:fragment</code>属性定义代码片段时，你还可以声明一组参数：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">&quot;crumbs(parent, child)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;parent&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> <span class="tag">&lt;<span class="name">i</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;child&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;i&gt;用户中心&lt;/i&gt;</span></span><br><span class="line"><span class="comment">&lt;i&gt;我的订单&lt;/i&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">&quot;::crumbs(&#x27;用户中心&#x27;, &#x27;我的订单&#x27;)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此外，我们还可以通过类选择器、ID选择器等来引用公共的代码片段：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">&quot;~&#123;base :: #footer&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>除了<code>th:insert</code>属性<code>th:replace</code>也可以用来引用公共的代码片段。不同的是，<code>th:insert</code>是直接将代码片段插入到标签体内，而<code>th:replace</code>则是用代码片段直接替换标签体内容。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;div&gt;</span></span><br><span class="line"><span class="comment">    &lt;div id=&quot;footer&quot;&gt;© 2017 fanlychie&lt;/div&gt;</span></span><br><span class="line"><span class="comment">&lt;/div&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">&quot;~&#123;base :: footerFragment&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;div id=&quot;footer&quot;&gt;© 2017 fanlychie&lt;/div&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;~&#123;base :: footerFragment&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-1-6-内置对象"><a href="#2-1-6-内置对象" class="headerlink" title="2.1.6 内置对象"></a>2.1.6 内置对象</h3><p><img src="https://img-blog.csdnimg.cn/20210902230018208.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6I-c6bif55WM55qE6I-c6bif,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p><code>#ctx</code>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- zh_CN --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#ctx.getLocale()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Welcome to BeiJing! --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#ctx.getVariable(&#x27;message&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- true --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#ctx.containsVariable(&#x27;message&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <code>#vars</code>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- zh_CN --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#vars.getLocale()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Welcome to BeiJing! --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#vars.getVariable(&#x27;message&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- true --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#vars.containsVariable(&#x27;message&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">#locale示例</span><br><span class="line"><span class="comment">&lt;!-- zh_CN --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#locale&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- CN --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#locale.country&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 中国 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#locale.displayCountry&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- zh --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#locale.language&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 中文 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#locale.displayLanguage&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 中文 (中国) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#locale.displayName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>#request</code>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTTP/1.1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#request.protocol&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- http --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#request.scheme&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- localhost --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#request.serverName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 8080 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#request.serverPort&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- GET --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#request.method&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /standard-expression-syntax/variables --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#request.requestURI&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- http://localhost:8080/standard-expression-syntax/variables --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#request.requestURL&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /standard-expression-syntax/variables --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#request.servletPath&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- java.util.Collections$3@203646fe --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#request.parameterNames&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &#123;q=[Ljava.lang.String;@3308c69f&#125; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#request.parameterMap&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- q=expression --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#request.queryString&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意，请求地址的 URL 参数直接通过<code>#request.x</code>是取不出来的，需要使用<code>param.x</code>语法来取出。如，URL：<code>/standard-expression-syntax/variables?q=expression</code>，取出 q 参数的正确姿势：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;param.q&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>#response</code>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 200 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#response.status&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 8192 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#response.bufferSize&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- UTF-8 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#response.characterEncoding&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- text/html;charset=UTF-8 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#response.contentType&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>#session</code>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 2BCB2A0EACFF2D9D249D9799431B5127 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#session.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1499786693244 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#session.lastAccessedTime&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- fanlychie --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#session.getAttribute(&#x27;user&#x27;).name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意，放到会话里面的对象直接通过<code>#session.x</code>是取不出来的，需要使用<code>session.x</code>语法来取出。如，取出会话里面的 user 对象的正确姿势：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;session.user.name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-1-7-工具类"><a href="#2-1-7-工具类" class="headerlink" title="2.1.7 工具类"></a>2.1.7 工具类</h3><p><img src="https://img-blog.csdnimg.cn/20210902231013808.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6I-c6bif55WM55qE6I-c6bif,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- false --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#strings.isEmpty(message)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2017-07-12 00:37:25 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.format(now, &#x27;yyyy-MM-dd HH:mm:ss&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-2-字面值"><a href="#2-2-字面值" class="headerlink" title="2.2 字面值"></a>2.2 字面值</h2><p>所谓字面值，首先它不是一个变量，它是一个具体的确切的值，通常这些值是比较简单的，例如：<code>18</code>、<code>&#39;welcome&#39;</code>等，它们没有名称，以至于我们只能用值来称呼它们，因此我们称其为字面值。</p>
<h3 id="2-2-1-文字字面值"><a href="#2-2-1-文字字面值" class="headerlink" title="2.2.1 文字字面值"></a>2.2.1 文字字面值</h3><p>文字字面值是用单引号引起来的任何字符内容，如果字符内容里面含有单引号，则需要进行转义：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Welcome to BeiJing! --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;&#x27;Welcome to BeiJing!&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &#x27;Welcome to BeiJing!&#x27; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;&#x27;\&#x27;Welcome to BeiJing!\&#x27;&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-2-数字字面值"><a href="#2-2-2-数字字面值" class="headerlink" title="2.2.2 数字字面值"></a>2.2.2 数字字面值</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 2017 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;2017&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2018 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;2017 + 1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-3-布尔字面值"><a href="#2-2-3-布尔字面值" class="headerlink" title="2.2.3 布尔字面值"></a>2.2.3 布尔字面值</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- false --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;1 &gt; 2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 否 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;1 &gt; 2 ? &#x27;是&#x27; : &#x27;否&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-4-空字面值"><a href="#2-2-4-空字面值" class="headerlink" title="2.2.4 空字面值"></a>2.2.4 空字面值</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- false --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user == null&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-5-字面令牌"><a href="#2-2-5-字面令牌" class="headerlink" title="2.2.5 字面令牌"></a>2.2.5 字面令牌</h3><p>字面令牌（Literal Tokens）的内容只能含有（不能含有空格、特殊符号等）：</p>
<ul>
<li>大写或小写的字母、中文等不含空格和特殊符号的文本</li>
<li>0 到 9 的数字</li>
<li>中括号</li>
<li>下划线</li>
<li>连字符（-）</li>
<li>点符号（.）</li>
</ul>
<p>实际上，数字、布尔和空字面值都是字面令牌的特殊情况。字面令牌能够用来对标准表达式语法进行简化，我们可以将包裹它的内容的单引号去掉：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;Welcome to BeiJing!&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>它等效于：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;&#x27;Welcome to BeiJing!&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-3-文本操作"><a href="#2-3-文本操作" class="headerlink" title="2.3 文本操作"></a>2.3 文本操作</h2><p>我们可以对文本内容进行两种常用的操作，它们分别为字符串连接和字符串替换。</p>
<h3 id="2-3-1-字符串连接"><a href="#2-3-1-字符串连接" class="headerlink" title="2.3.1 字符串连接"></a>2.3.1 字符串连接</h3><p>不管是字面值还是表达式的结果，我们都可以使用<code>+</code>符号将它们连接起来：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Welcome to BeiJing! --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;&#x27;Welcome to &#x27; + $&#123;location&#125; + &#x27;!&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-2-字面值替换"><a href="#2-3-2-字面值替换" class="headerlink" title="2.3.2 字面值替换"></a>2.3.2 字面值替换</h3><p>符号<code>||</code>可以用来将字面值和表达式包裹起来，这样就能方便的替换变量的值，而不需要使用<code>+</code>连接符：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Welcome to BeiJing! --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;|Welcome to $&#123;location&#125;!|&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-4-算术运算"><a href="#2-4-算术运算" class="headerlink" title="2.4 算术运算"></a>2.4 算术运算</h2><p>支持<code>+</code>（加）、<code>-</code>（减）、<code>*</code>（乘）、<code>/</code>（除）、<code>%</code>（模）运算：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 6 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;4 + 2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;4 - 2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 8 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;4 * 2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;4 / 2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 0 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;4 % 2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;pagination.page + 1&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;pagination.page&#125; + 1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-5-布尔运算"><a href="#2-5-布尔运算" class="headerlink" title="2.5 布尔运算"></a>2.5 布尔运算</h2><p>支持<code>and</code>（且）、<code>or</code>（或）、<code>!</code>（非）、<code>not</code>（非）运算：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.online and user.vip&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.online or user.vip&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;!user.online&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;not user.online&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-6-比较和相等"><a href="#2-6-比较和相等" class="headerlink" title="2.6 比较和相等"></a>2.6 比较和相等</h2><p>支持<code>&lt;</code>（<code>lt</code>）、<code>&gt;</code>（<code>gt</code>）、<code>&lt;=</code>（<code>le</code>）、<code>&gt;=</code>（<code>ge</code>）、<code>==</code>（<code>eq</code>）、<code>！=</code>（<code>ne</code>）：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.age &lt; 60&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.age &lt;= 60&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.age &gt; 18&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.age &gt;= 18&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.age == 18&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.age != 18&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-7-条件运算"><a href="#2-7-条件运算" class="headerlink" title="2.7 条件运算"></a>2.7 条件运算</h2><p>三元运算符：<code>(if) ? (then) : (else)</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.online ? &#x27;在线&#x27; : &#x27;离线&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.online ? (user.vip ? &#x27;VIP用户在线&#x27; : &#x27;普通用户在线&#x27;) : &#x27;离线&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>二元运算符：<code>(value) ?: (defaultValue)</code>。</p>
<p>其中，<code>value</code>非空（null）即真，条件为真时输出<code>value</code>，否则输出<code>defaultValue</code>。假设<code>token = null</code>，<code>user.email = fanlychie@gmail.com</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 你还没有登录，请先登录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;token&#125; ?: &#x27;你还没有登录，请先登录&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- fanlychie@gmail.com --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.email&#125; ?: &#x27;你还没有绑定邮箱&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-8-无操作符"><a href="#2-8-无操作符" class="headerlink" title="2.8 无操作符"></a>2.8 无操作符</h2><p>当模板运行在服务器端时，Thymeleaf 会解析<code>th:*</code>属性的具体值替换标签体的内容。无操作符（<code>_</code>）则允许你使用原型标签体的内容作为默认值：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 你还没有登录，请先登录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;token&#125; ?: _&quot;</span>&gt;</span>你还没有登录，请先登录<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="3-使用文本"><a href="#3-使用文本" class="headerlink" title="3. 使用文本"></a>3. 使用文本</h1><p>首先介绍两个最基础的<code>th:*</code>属<code>th:text</code>和<code>th:utext</code>，它们都是用于处理文本消息内容。</p>
<h2 id="3-1-th-text"><a href="#3-1-th-text" class="headerlink" title="3.1 th:text"></a>3.1 th:text</h2><p>在标签体中展示表达式评估结果的文本内容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;message&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用外部化的文本内容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;message&#125;&quot;</span>&gt;</span>Welcome to BeiJing!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当它作为静态文件直接运行时，浏览器会自动忽略它不能识别的<code>th:text</code>属性，而显示<code>&lt;p&gt;</code>标签体的文本内容<code>Welcome to BeiJing!</code></p>
<p>当它作为模板文件运行在服务器端时，<code>th:text</code>属性的具体值将会替换<code>&lt;p&gt;</code>标签体的文本内容。</p>
<h2 id="3-2-th-utext"><a href="#3-2-th-utext" class="headerlink" title="3.2 th:utext"></a>3.2 th:utext</h2><p>属性<code>th:utext</code>与<code>th:text</code>的区别在于：</p>
<ul>
<li><code>th:text</code>默认会对含有 HTML 标签的内容进行字符转义；</li>
<li><code>th:utext</code>（Unescaped Text）则不会对含有 HTML 标签的内容进行字符转义；</li>
</ul>
<p>假设：<code>message = &quot;&lt;b&gt;Welcome to BeiJing!&lt;/b&gt;&quot;</code>。</p>
<p>使用<code>th:text</code>属性：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;message&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>th:text</code>效果：<b>Welcome to BeiJing!</b></p>
<p>使用<code>th:utext</code>属性：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:utext</span>=<span class="string">&quot;$&#123;message&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>th:utext</code>效果：<strong>Welcome to BeiJing!</strong></p>
<h1 id="4-设置属性值"><a href="#4-设置属性值" class="headerlink" title="4. 设置属性值"></a>4. 设置属性值</h1><p>在 Thymeleaf 模板文件中，你可以使用<code>th:*</code>（或者使用<code>th:attr</code>属性）来设置任意的 HTML5 标签属性的值。不仅如此，你还可以<code>th:*-*</code>来同时为多个不同的标签属性设置相同的一个值，甚至你可以使用<code>th:attrappend</code>和<code>th:attrprepend</code>来追加新的值到现有的标签属性值中。</p>
<h3 id="4-1-th-attr"><a href="#4-1-th-attr" class="headerlink" title="4.1 th:attr"></a>4.1 th:attr</h3><p>这种方式是不被推荐的，了解一下就行。下面是用<code>th:attr=&quot;href=...&quot;</code>来设置标签<code>href</code>属性的值：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:attr</span>=<span class="string">&quot;href=@&#123;https://www.google.com.hk&#125;&quot;</span>&gt;</span>谷歌一下你就知道<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-2-th"><a href="#4-2-th" class="headerlink" title="4.2 th:*"></a>4.2 th:*</h2><p>显然<code>th:attr=&quot;href=@&#123;http://www.baidu.com&#125;&quot;</code>不够简洁，我们更推荐下面的这种语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;https://www.google.com.hk&#125;&quot;</span>&gt;</span>谷歌一下你就知道<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中<code>th:*</code>中的<code>*</code>可以是 HTML5 支持的任意属性名称，甚至这些属性名称可以是自定义的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;div item-id=&quot;1001&quot;&gt;Welcome to BeiJing!&lt;/div&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:item-id</span>=<span class="string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span>Welcome to BeiJing!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-3-th"><a href="#4-3-th" class="headerlink" title="4.3 th:-"></a>4.3 th:<em>-</em></h2><p>如果想要同时为标签的多个不同属性设置相同的一个值，可以使用<code>th:*-*</code>的语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;logo.png&quot;</span> <span class="attr">th:alt-title</span>=<span class="string">&quot;LOGO图片&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>它相当于：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;logo.png&quot;</span> <span class="attr">th:alt</span>=<span class="string">&quot;LOGO图片&quot;</span> <span class="attr">th:title</span>=<span class="string">&quot;LOGO图片&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-4-th-attrappend-amp-th-attrprepend"><a href="#4-4-th-attrappend-amp-th-attrprepend" class="headerlink" title="4.4 th:attrappend &amp; th:attrprepend"></a>4.4 th:attrappend &amp; th:attrprepend</h3><p><code>th:attrappend</code>和<code>th:attrprepend</code>可以将表达式的结果分别追加到指定的属性值之后和之前。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;button class=&quot;btn enable&quot;&gt;购买&lt;/button&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">th:attrappend</span>=<span class="string">&quot;class=$&#123;outOfStock&#125; ? &#x27; enable&#x27; : &#x27; disable&#x27;&quot;</span>&gt;</span>购买<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;button class=&quot;enable btn&quot;&gt;购买&lt;/button&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">th:attrprepend</span>=<span class="string">&quot;class=$&#123;outOfStock&#125; ? &#x27;enable &#x27; : &#x27;disable &#x27;&quot;</span>&gt;</span>购买<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>另外，还有两个常用的具体附加属性<code>th:classappend=&quot;...&quot;</code>和<code>th:styleappend=&quot;&quot;</code>。</p>
<p>它们分别用来代替<code>th:attrappend=&quot;class=...&quot;</code>和<code>th:attrappend=&quot;style=...&quot;</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;button class=&quot;btn enable&quot;&gt;购买&lt;/button&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">th:classappend</span>=<span class="string">&quot;$&#123;outOfStock&#125; ? &#x27; enable&#x27; : &#x27; disable&#x27;&quot;</span>&gt;</span>购买<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-5-布尔属性"><a href="#4-5-布尔属性" class="headerlink" title="4.5 布尔属性"></a>4.5 布尔属性</h2><p>在 HTML 中有些属性是布尔属性，布尔属性是指没有值的属性，如<code>readonly</code>、<code>checked</code>、<code>selected</code>等。它们若存在那就意味着值为 true。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;rememberme&quot;</span> <span class="attr">checked</span> /&gt;</span> 记住我</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">checked</span>&gt;</span> 男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span> 女</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;appId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;J123654&quot;</span> <span class="attr">readonly</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Thymeleaf 也允许我们通过<code>th:*</code>（这里的<code>*</code>表示任意的布尔属性） 来选择是否使用这些布尔属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;rememberme&quot;</span> <span class="attr">ch:checked</span>=<span class="string">&quot;$&#123;rememberme&#125;&quot;</span> /&gt;</span> 记住我</span><br></pre></td></tr></table></figure>

<p>正如你所见，如果表达式的结果为<code>true</code>，则自动勾选复选框，若为<code>false</code>，则不会自动勾选。</p>
<h1 id="5-遍历"><a href="#5-遍历" class="headerlink" title="5. 遍历"></a>5. 遍历</h1><p>遍历（迭代）的语法<code>th:each=&quot;自定义的元素变量名称 : $&#123;集合变量名称&#125;&quot;</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spn</span>&gt;</span>你所在城市：<span class="tag">&lt;/<span class="name">spn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;mycity&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">th:each</span>=<span class="string">&quot;city : $&#123;cities&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;city.name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>属性<code>th:each</code>提供了一个用于跟踪迭代的状态变量，它包含以下几个属性：</p>
<p><img src="https://img-blog.csdnimg.cn/20210902233706581.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6I-c6bif55WM55qE6I-c6bif,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>状态变量的使用语法：<code>th:each=&quot;自定义的元素变量名称, 自定义的状态变量名称 : $&#123;集合变量名称&#125;&quot;</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spn</span>&gt;</span>所在城市：<span class="tag">&lt;/<span class="name">spn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;mycity&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">th:each</span>=<span class="string">&quot;city, status : $&#123;cities&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;city.name&#125;&quot;</span> <span class="attr">th:item-index</span>=<span class="string">&quot;$&#123;status.count&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> 不管什么时候，Thymeleaf 始终会为每个<code>th:each</code>创建一个状态变量，默认的状态变量名称就是自定义的元素变量名称后面加<code>Stat</code>字符串组成：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spn</span>&gt;</span>所在城市：<span class="tag">&lt;/<span class="name">spn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;mycity&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">th:each</span>=<span class="string">&quot;city : $&#123;cities&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;city.name&#125;&quot;</span> <span class="attr">th:item-index</span>=<span class="string">&quot;$&#123;cityStat.count&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="6-条件判断"><a href="#6-条件判断" class="headerlink" title="6. 条件判断"></a>6. 条件判断</h1><p>条件判断语句有三种，分别是：<code>th:if</code>、<code>th:unless</code>、<code>th:swith</code>。</p>
<h2 id="6-1-th-if"><a href="#6-1-th-if" class="headerlink" title="6.1 th:if"></a>6.1 th:if</h2><p>当表达式的评估结果为真时则显示内容，否则不显示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/order(uid=$&#123;user.id&#125;)&#125;&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;user != null&#125;&quot;</span>&gt;</span>我的订单<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>真假评估的依据：</p>
<ul>
<li>当表达式的值不为空（null）时<ul>
<li>如果表达式的值是一个布尔类型，且值为<code>true</code>评估为真，否则为假</li>
<li>如果表达式的值是一个数字类型，且值为非<code>0</code>评估为真，否则为假</li>
<li>如果表达式的值是一个字符类型，且值为非<code>0</code>评估为真，否则为假</li>
<li>如果表达式的值是一个字符串类型，且值为非<code>&quot;false&quot;</code>、<code>&quot;off&quot;</code>、<code>&quot;no&quot;</code>评估为真，否则为假</li>
<li>如果表达式的值不是一个<code>布尔</code>、<code>数字</code>、<code>字符</code>或<code>字符串</code>评估为真</li>
</ul>
</li>
<li>当表达式的值为空（null）时，评估结果为假</li>
</ul>
<p>因此，上面代码我们也可以简写成：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/order(uid=$&#123;user.id&#125;)&#125;&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;user&#125;&quot;</span>&gt;</span>我的订单<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但是，为了代码的可读性，我们并不建议这样使用。</p>
<h2 id="6-2-th-unless"><a href="#6-2-th-unless" class="headerlink" title="6.2 th:unless"></a>6.2 th:unless</h2><p><code>th:unless</code>与<code>th:if</code>判断恰好相反，当表达式的评估结果为假时则显示内容，否则不显示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/order(uid=$&#123;user.id&#125;)&#125;&quot;</span> <span class="attr">th:unless</span>=<span class="string">&quot;$&#123;user == null&#125;&quot;</span>&gt;</span>我的订单<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-3-th-swith"><a href="#6-3-th-swith" class="headerlink" title="6.3 th:swith"></a>6.3 th:swith</h2><p>多路选择语句，它需要搭配<code>th:case</code>来使用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">&quot;$&#123;user.role&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">&quot;admin&quot;</span>&gt;</span>管理员<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">&quot;user&quot;</span>&gt;</span>普通用户<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="7-定义局部变量"><a href="#7-定义局部变量" class="headerlink" title="7. 定义局部变量"></a>7. 定义局部变量</h1><p>使用<code>th:with</code>属性可以定义局部变量：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:with</span>=<span class="string">&quot;name=&#x27;fanlychie&#x27;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>同时定义多个局部变量时，用英文<code>,</code>号分隔开：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:with</span>=<span class="string">&quot;name=$&#123;user.name&#125;,age=&#123;user.age&#125;&quot;</span>&gt;</span></span><br><span class="line">    ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="8-注释"><a href="#8-注释" class="headerlink" title="8. 注释"></a>8. 注释</h1><p>下面介绍常见的两种注释：</p>
<h2 id="8-1-标准注释"><a href="#8-1-标准注释" class="headerlink" title="8.1 标准注释"></a>8.1 标准注释</h2><p>语法：<code>&lt;!-- ... ---&gt;</code>，注释的代码块会在文件源代码中显示出来。</p>
<h3 id="8-1-1-单行注释"><a href="#8-1-1-单行注释" class="headerlink" title="8.1.1 单行注释"></a>8.1.1 单行注释</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;span&gt;$&#123;message&#125;&lt;/span&gt; ---&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="8-1-2-多行注释"><a href="#8-1-2-多行注释" class="headerlink" title="8.1.2 多行注释"></a>8.1.2 多行注释</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;div th:switch=&quot;$&#123;user.role&#125;&quot;&gt;</span></span><br><span class="line"><span class="comment">    &lt;p th:case=&quot;admin&quot;&gt;管理员&lt;/p&gt;</span></span><br><span class="line"><span class="comment">    &lt;p th:case=&quot;user&quot;&gt;普通用户&lt;/p&gt;</span></span><br><span class="line"><span class="comment">&lt;/div&gt;</span></span><br><span class="line"><span class="comment">---&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="8-2-解析器级注释"><a href="#8-2-解析器级注释" class="headerlink" title="8.2 解析器级注释"></a>8.2 解析器级注释</h2><p>语法：<code>&lt;!--/* ... */--&gt;</code>，注释的代码块会在引擎解析的时候抹去。</p>
<h3 id="8-2-1-单行注释："><a href="#8-2-1-单行注释：" class="headerlink" title="8.2.1 单行注释："></a>8.2.1 单行注释：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--/* &lt;span&gt;$&#123;message&#125;&lt;/span&gt; */--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="8-2-2-多行注释"><a href="#8-2-2-多行注释" class="headerlink" title="8.2.2 多行注释"></a>8.2.2 多行注释</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--/*--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">&quot;$&#123;user.role&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">&quot;admin&quot;</span>&gt;</span>管理员<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">&quot;user&quot;</span>&gt;</span>普通用户<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--*/--&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="9-内联表达式"><a href="#9-内联表达式" class="headerlink" title="9. 内联表达式"></a>9. 内联表达式</h1><p>内联表达式允许我们直接在 HTML 文本中使用标准表达式，而不需要使用<code>th:*</code>标签属性。</p>
<h2 id="9-1-…"><a href="#9-1-…" class="headerlink" title="9.1 [[…]]"></a>9.1 [[…]]</h2><p><code>[[]]</code>相当于<code>th:text</code>，对含有 HTML 标签的内容自动进行字符转义。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The message is : [[$&#123;htmlContent&#125;]]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="9-2-…"><a href="#9-2-…" class="headerlink" title="9.2 [(…)]"></a>9.2 [(…)]</h2><p><code>[()]</code>相当于<code>th:utext</code>，对含有 HTML 标签的内容不进行字符转义。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The message is : [($&#123;htmlContent&#125;)]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="9-3-th-inline"><a href="#9-3-th-inline" class="headerlink" title="9.3 th:inline"></a>9.3 th:inline</h2><p>我们已经了解到，使用<code>[[]]</code>和<code>[()]</code>语法可以直接在 HTML 文本中使用标准表达式，如果想要使用更多高级的功能，需要使用<code>th:inline</code>属性来激活，它的取值如下：</p>
<p><img src="https://img-blog.csdnimg.cn/20210902234825146.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6I-c6bif55WM55qE6I-c6bif,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h3 id="9-3-1-none"><a href="#9-3-1-none" class="headerlink" title="9.3.1 none"></a>9.3.1 none</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- [[1, 2], [3, 4]] --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:inline</span>=<span class="string">&quot;none&quot;</span>&gt;</span>[[1, 2], [3, 4]]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="9-3-2-text"><a href="#9-3-2-text" class="headerlink" title="9.3.2 text"></a>9.3.2 text</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 北京 上海 广州 深圳 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:inline</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    [# th:each=&quot;city : $&#123;cities&#125;&quot;]</span><br><span class="line">        [($&#123;city.name&#125;)]</span><br><span class="line">    [/]</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="9-3-3-css"><a href="#9-3-3-css" class="headerlink" title="9.3.3 css"></a>9.3.3 css</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">th:inline</span>=<span class="string">&quot;css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>:[[$&#123;bgColor&#125;]];</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="9-3-4-javascript"><a href="#9-3-4-javascript" class="headerlink" title="9.3.4 javascript"></a>9.3.4 javascript</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:inline</span>=<span class="string">&quot;javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> user = [[$&#123;user&#125;]];</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&quot;用户名：&quot;</span> + user.<span class="property">name</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring boot中前后端数据交互之后端对前端数据的获取</title>
    <url>/2022/06/29/Spring-boot%E4%B8%AD%E5%89%8D%E5%90%8E%E7%AB%AF%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92%E4%B9%8B%E5%90%8E%E7%AB%AF%E5%AF%B9%E5%89%8D%E7%AB%AF%E6%95%B0%E6%8D%AE%E7%9A%84%E8%8E%B7%E5%8F%96/</url>
    <content><![CDATA[<h3 id="1-Springboot前后台数据传输"><a href="#1-Springboot前后台数据传输" class="headerlink" title="1.Springboot前后台数据传输"></a>1.Springboot前后台数据传输</h3><p>类似于</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/qing&quot;)</span><br><span class="line">public class Controler &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private Server mus;</span><br><span class="line">    </span><br><span class="line">@GetMapping(&quot;/login&quot;)</span><br><span class="line">    public String Login(Model model,HttpServletRequest request) throws Exception &#123;</span><br><span class="line">    //oneclass,twoclass分别代表着一级分类与二级分类</span><br><span class="line">        String oneclass=request.getParameter(&quot;oneclass&quot;);//从前端请求到输入的数据</span><br><span class="line">        String twoclass=request.getParameter(&quot;twoclass&quot;);//从前端请求到输入的数据</span><br><span class="line">        //request.getSession().setAttribute(&quot;oneclass&quot;,oneclass);</span><br><span class="line">        //request.getSession().setAttribute(&quot;twoclass&quot;,twoclass);</span><br><span class="line">        //调用的业务层（server）进行处理</span><br><span class="line">        ArrayList&lt;Music&gt; music=mus.data(Integer.parseInt(oneclass));</span><br><span class="line">        //数据会存放到Model对象中，当需要生成HTML的时候，模板引擎会根据名字来定位数据</span><br><span class="line">        model.addAttribute(&quot;music&quot;,music);</span><br><span class="line">        return &quot;Index02.html&quot;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>前端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;login&quot; method=&quot;get&quot;&gt;</span><br><span class="line">       &lt;input type=&quot;text&quot; placeholder=&quot;一级分类（0-12）&quot; name=&quot;oneclass&quot;&gt;</span><br><span class="line">       &lt;input type=&quot;text&quot; placeholder=&quot;二级分类（名字）&quot;name=&quot;twoclass&quot;&gt;</span><br><span class="line">       &lt;input type=&quot;submit&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>也可以</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用户触发点击事件</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input type=&quot;button&quot; value=&quot;一级分类&quot; onclick=&quot;creationRanking(&#x27;content&#x27;)&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;button&quot; value=&quot;二级分类&quot; onclick=&quot;cloudWorld(&#x27;content&#x27;)&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">去执行JS代码</span><br><span class="line">function creationRanking(id) &#123;</span><br><span class="line">    $.get(&#123;</span><br><span class="line">        url: &quot;/analyze/creation/ranking&quot;,</span><br><span class="line">        dataType: &quot;json&quot;,</span><br><span class="line">        method: &quot;get&quot;,</span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line">        &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取前端参数的方式"><a href="#获取前端参数的方式" class="headerlink" title="获取前端参数的方式"></a>获取前端参数的方式</h3><h4 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h4><p>在控制器中，数据会存放到Model对象中，当需要生成HTML的时候，模板引擎会根据名字来定位数据</p>
<p>Attribute特征，特性，属性;</p>
<p>Parameter界限;参数</p>
<p>从广义上来说，Model指的是MVC中的M，即Model(模型)。从狭义上讲，Model就是个key-value集合。实际上，上图home方法得到的model对象就是一个 <code>java.util.Map</code> ，你可以将Model类型替换为<code>Map&lt;String, Object&gt;</code> ，或者ModelMap——一个实现了Model接口的<code>java.util.HashMap</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface Model &#123;</span><br><span class="line">    Model addAttribute(String attributeName, @Nullable Object attributeValue);</span><br><span class="line">    Model addAttribute(Object attributeValue);</span><br><span class="line">    Model addAllAttributes(Collection&lt;?&gt; attributeValues);</span><br><span class="line">    Model addAllAttributes(Map&lt;String, ?&gt; attributes);</span><br><span class="line">    Model mergeAttributes(Map&lt;String, ?&gt; attributes);</span><br><span class="line">    boolean containsAttribute(String attributeName);</span><br><span class="line">    @Nullable</span><br><span class="line">    Object getAttribute(String attributeName);</span><br><span class="line">    Map&lt;String, Object&gt; asMap();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>意味着model.addattribute可以往前台传数据，可以传对象，可以传List，通过表达式 ${}可以获取到</p>
<p>ModelAndView的用法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;model&quot;)</span><br><span class="line">public ModelAndView testModel(String name) &#123;</span><br><span class="line">    //构建ModelAndView实例，并设置跳转地址</span><br><span class="line">    ModelAndView view = new ModelAndView(&quot;test&quot;);</span><br><span class="line">    //将数据放置到ModelAndView对象view中,第二个参数可以是任何java类型</span><br><span class="line">    view.addObject(&quot;name&quot;,name);</span><br><span class="line">    //返回ModelAndView对象view</span><br><span class="line">    return view;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然还可以这样设置跳转地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ModelAndView view = new ModelAndView();</span><br><span class="line">view.setViewName(&quot;test&quot;);</span><br><span class="line">//其中的test表示templates中的test.html，springboot默认的模版文件一般都在resources/templates下</span><br></pre></td></tr></table></figure>

<h3 id="后端获取前端数据三种方式"><a href="#后端获取前端数据三种方式" class="headerlink" title="后端获取前端数据三种方式"></a>后端获取前端数据三种方式</h3><p>Param参数;Variable变量;</p>
<p>参考：<a href="http://www.javashuo.com/article/p-kkkebbuc-mv.html">http://www.javashuo.com/article/p-kkkebbuc-mv.html</a></p>
<h4 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">前端发出的请求：path?id=1;</span><br><span class="line">@RequestMapper(value=&quot;path&quot;)</span><br><span class="line">public void test(@RequestParam(&quot;id&quot;) int id)&#123;</span><br><span class="line">	System.out.println(id);</span><br><span class="line">&#125;</span><br><span class="line">获取前端传来的非json格式的数据</span><br><span class="line">// 单个数据,@RequestParam中的值必定要与前端属性名一致</span><br><span class="line">public void test(@RequestParam(&quot;name)&quot; String name)&#123;</span><br><span class="line">	System.out.println(params);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 数组数据</span><br><span class="line">@RequestMapper(value=&quot;path&quot;)</span><br><span class="line">public void test(@RequestParam Map&lt;String,Object&gt; params)&#123;</span><br><span class="line">	System.out.println(params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">前端发出的请求：path/&#123;id&#125;;</span><br><span class="line">@RequestMapper(value=&quot;path/&#123;id&#125;&quot;)</span><br><span class="line">public void test(@PathVariable(&quot;id&quot;) int id)&#123;</span><br><span class="line">	System.out.println(id);</span><br><span class="line">&#125;</span><br><span class="line">@GetMapping(&quot;/ting&quot;)</span><br><span class="line">    public String homePageController(Model model,@PathVariable(&quot;currentIndex&quot;) int currentIndex) throws Exception&#123;</span><br><span class="line">        ArrayList&lt;Music&gt; music=mus.data(currentIndex);</span><br><span class="line">        model.addAttribute(&quot;music&quot;,music);</span><br><span class="line">        // model.addAttribute(&quot;index&quot;,currentIndex);</span><br><span class="line">        return &quot;Index01.html&quot;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h4><p>获取前台出来的json格式的数据javascript</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">        type: &#x27;POST&#x27;,//方法类型</span><br><span class="line">        url: url,</span><br><span class="line">        contentType: &#x27;application/json&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">        	&quot;username&quot;:&quot;小明&quot;,</span><br><span class="line">        	&quot;sex&quot;:&quot;男&quot;,</span><br><span class="line">        	&quot;age&quot;:&quot;18&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        success: function (result) &#123;</span><br><span class="line">            if (result == 200) &#123;</span><br><span class="line">                $(&#x27;#goodsModal&#x27;).modal(&#x27;hide&#x27;);</span><br><span class="line">                swal(&#123;</span><br><span class="line">                    title: swlMessage,</span><br><span class="line">                    type: &#x27;success&#x27;,</span><br><span class="line">                    showCancelButton: false,</span><br><span class="line">                    confirmButtonColor: &#x27;#1baeae&#x27;,</span><br><span class="line">                    confirmButtonText: &#x27;返回商品列表&#x27;,</span><br><span class="line">                    confirmButtonClass: &#x27;btn btn-success&#x27;,</span><br><span class="line">                    buttonsStyling: false</span><br><span class="line">                &#125;).then(function () &#123;</span><br><span class="line">                    window.location.href = &quot;/admin/goods&quot;;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                $(&#x27;#goodsModal&#x27;).modal(&#x27;hide&#x27;);</span><br><span class="line">                swal(result.message, &#123;</span><br><span class="line">                    icon: &quot;error&quot;,</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">// bean</span><br><span class="line">public class User&#123;</span><br><span class="line">	private String username;</span><br><span class="line">	private String sex;</span><br><span class="line">		..</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Controller中代码片断</span><br><span class="line">@RequestMapper(value=&quot;path/&#123;id&#125;&quot;,method = RequestMethod.POST)</span><br><span class="line">public void test(@RequestBody User user)&#123;</span><br><span class="line">	System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-HttpServletRequest方法"><a href="#2-HttpServletRequest方法" class="headerlink" title="2 HttpServletRequest方法"></a>2 HttpServletRequest方法</h4><p>原文链接：<a href="https://blog.csdn.net/qq_43656233/article/details/103000794">https://blog.csdn.net/qq_43656233/article/details/103000794</a></p>
<p>很古老的方法，简单来说就是通过调用request的getParameter方法来获取参数，不建议使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   @Controller</span><br><span class="line">public class indexController &#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/login&quot;)</span><br><span class="line">    public String Login(HttpServletRequest request)&#123;</span><br><span class="line">        String username=request.getParameter(&quot;username&quot;);</span><br><span class="line">        String password=request.getParameter(&quot;password&quot;);</span><br><span class="line">        Student student = new Student(username,password);</span><br><span class="line">        request.getSession().setAttribute(&quot;username&quot;,username);</span><br><span class="line">        request.getSession().setAttribute(&quot;password&quot;,password);</span><br><span class="line">        return &quot;Result&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/&quot;)</span><br><span class="line">    public String index()&#123;</span><br><span class="line">        return &quot;Login&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">①getParameter()获取的是客户端设置的数据。</span><br><span class="line">getAttribute()获取的是服务器设置的数据。</span><br><span class="line">②getParameter()永远返回字符串</span><br><span class="line">getAttribute()返回值是任意类型</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<p>login页面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">        &lt;title&gt;Getting Started: Handling Form Submission&lt;/title&gt;</span><br><span class="line">        &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=&quot;login&quot; method=&quot;get&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;passwod&quot; name=&quot;password&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>Result页面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">        &lt;title&gt;Getting Started: Handling Form Submission&lt;/title&gt;</span><br><span class="line">        &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">    123</span><br><span class="line">    &lt;p th:text=&quot;$&#123;session.username&#125;&quot;/&gt;</span><br><span class="line">    &lt;p th:text=&quot;$&#123;session.password&#125;&quot;/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="HttpServletRequest与Model的区别"><a href="#HttpServletRequest与Model的区别" class="headerlink" title="HttpServletRequest与Model的区别"></a>HttpServletRequest与Model的区别</h3><p>原文链接：<a href="https://blog.csdn.net/weixin_47872288/article/details/122362891">https://blog.csdn.net/weixin_47872288/article/details/122362891</a></p>
<p>1.1 HttpServletRequest<br>HttpServletRequest对象代表客户端的请求，当客户端通过HTTP协议访问服务器时，HTTP请求头中的所有信息都封装在这个对象中，通过这个对象提供的方法，可以获得客户端请求的所有信息</p>
<p>具体其功能函数有如下：</p>
<ul>
<li><p>函数                        功能<br>getRequestURL     返回客户端请求时的完整URL<br>getQueryString     返回请求行中的参数部分<br>getPathInfo           返回请求URL中的额外路径信息<br>getRemoteAddr    返回发出请求的客户机的IP地址<br>getRemoteHost    返回发出请求的客户机的完整主机名<br>getRemotePort     返回客户机所使用的网络端口号<br>getLocalAddr        返回WEB服务器的IP地址<br>getLocalName      返回WEB服务器的主机名</p>
</li>
<li><h4 id="model"><a href="#model" class="headerlink" title="model"></a>model</h4></li>
<li><p>关于model的这个类</p>
</li>
</ul>
<p>只传输数据而不会自动寻址，由于model的每次请求会自动创建对象，所以不用new<br>ModelAndView会自动寻址，就会链接到WebCotent下的view，modelandview请求不会自动创建对象，每次使用都要new</p>
<p>srpingMVC内部机制决定的,请求处理方法执行完成后，最终返回一个 ModelAndView 对象。</p>
<p>model数据最终还是写到HttpServletRequest属性中，只是model的写法更体现了MVC思想减少各层间耦合</p>
<ol start="2">
<li>总结<br>Model是每次请求中都存在的默认参数，利用其addAttribute()方法即可将服务器的值传递到jsp页面中；<br>ModelAndView包含model和view两部分，使用时需要自己实例化，利用ModelMap用来传值，也可以设置view的名称<br>关于其写法的具体展示<br>具体如下：</li>
</ol>
<p>1.request.setAttribute(“name”,”manongyanjiuseng”);&#x2F;&#x2F;把值存到request<br>其取值具体是通过request.getAttribute(“manongyanjiuseng”)<br>2.modelMap.addAttribute(“name”,”manongyanjiuseng”);&#x2F;&#x2F;把值存到modelMap<br>其取值具体是通过${manongyanjiuseng}<br>3.model.addAttribute(“name”,”manongyanjiuseng”);&#x2F;&#x2F;把值存到model<br>其取值具体是通过${manongyanjiuseng}<br>4.request.getSession.setAttribute(“name”,”manongyanjiuseng”);&#x2F;&#x2F;先获取，在把值存到Session<br>其取值具体是通过request.getSession().getAttribute(“manongyanjiuseng”)</p>
<p>以上取值中${manongyanjiuseng}这种方式是最快的</p>
<h4 id="也就是model和HttpServletRequest，model的取值比较快"><a href="#也就是model和HttpServletRequest，model的取值比较快" class="headerlink" title="也就是model和HttpServletRequest，model的取值比较快"></a>也就是model和HttpServletRequest，model的取值比较快</h4>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>14.SpringBoot 常用的基础注解</title>
    <url>/2022/05/12/SpringBoot-%E5%B8%B8%E7%94%A8%E7%9A%84%E5%9F%BA%E7%A1%80%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="SpringBoot-常用的基础注解"><a href="#SpringBoot-常用的基础注解" class="headerlink" title="SpringBoot 常用的基础注解"></a>SpringBoot 常用的基础注解</h1><h3 id="什么是-Spring-Boot"><a href="#什么是-Spring-Boot" class="headerlink" title="什么是 Spring Boot"></a>什么是 Spring Boot</h3><p><strong>1. Spring Boot 入门</strong>（一个简单上手的微服务框架）</p>
<p>Spring Boot是Spring社区较新的一个项目。该项目的目的是帮助开发者更容易的创建基于Spring的应用程序和服务，让更多人的人更快的对Spring进行入门体验，让Java开发也能够实现Ruby on Rails那样的生产效率。为Spring生态系统提供了一种固定的、约定优于配置风格的框架。</p>
<p>Spring Boot框架的核心就是自动配置，只要存在相应的jar包，Spring就帮我们自动配置。如果默认配置不能满足需求，我们还可以替换掉自动配置类，使用我们自己的配置。另外，Spring Boot还集成了嵌入式的Web服务器，系统监控等很多有用的功，让我们快速构建企业及应用程序。</p>
<ol>
<li>为基于Spring的开发提供更快的入门体验</li>
<li>开箱即用，没有代码生成，也无需XML配置。同时也可以修改默认值来满足特定的需求。</li>
<li>提供了一些大型项目中常见的非功能性特性，如嵌入式服务器、安全、指标，健康检测、外部配置等。</li>
<li>Spring Boot并不是对Spring功能上的增强，而是提供了一种快速使用Spring的方式。</li>
</ol>
<h4 id="基础注解介绍"><a href="#基础注解介绍" class="headerlink" title="基础注解介绍"></a>基础注解介绍</h4><p>注入到spring容器的常见5个注解</p>
<h5 id="RestController"><a href="#RestController" class="headerlink" title="@RestController:"></a>@RestController:</h5><p>用于标注控制层组件(如struts中的action)，包含@Controller和@ResponseBody，当使用此注解时，不需要再在方法上使用<code>@ResponseBody</code>注解。</p>
<p><strong>@ResponseBody</strong></p>
<p>表示该方法的返回结果直接写入HTTP response body中</p>
<h5 id="Controller"><a href="#Controller" class="headerlink" title="@Controller:"></a>@Controller:</h5><p>用于标注是控制层组件，需要返回页面时请用@Controller而不是@RestController；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class ControllerTest &#123;</span><br><span class="line">    @RequestMapping(&quot;/test&quot;)</span><br><span class="line">    public String home() &#123;</span><br><span class="line">        return &quot;home&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//此时返回字符串home</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class ControllerTest &#123;</span><br><span class="line">    @RequestMapping(&quot;/test&quot;)</span><br><span class="line">    public String home() &#123;</span><br><span class="line">        return &quot;home.html&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//此时是跳转到home.html页面</span><br></pre></td></tr></table></figure>

<p><strong>@Component</strong></p>
<p>@Component注解用于标注一个普通的组件类，它没有明确的业务范围，只是通知Spring被此注解的类需要被纳入到Spring Bean容器中并进行管理。常与@Bean注解联用，@Bean主要的作用是告知Spring，被此注解所标注的类将需要纳入到Bean管理工厂中。@Bean注解的用法很简单，重点是@Bean注解中<code>initMethod</code>和<code>destroyMethod</code>的用法。具体请百度</p>
<p><strong>@Service</strong></p>
<p><code>@Service</code>注解是<code>@Component</code>的一个延伸（特例），它用于标注业务逻辑类。与<code>@Component</code>注解一样，被此注解标注的类，会自动被Spring所管理。</p>
<h5 id="Mapper"><a href="#Mapper" class="headerlink" title="@Mapper"></a>@Mapper</h5><p>注解的的作用</p>
<p>1:为了把mapper这个DAO交给Spring管理 <a href="http://412887952-qq-com.iteye.com/blog/2392672">http://412887952-qq-com.iteye.com/blog/2392672</a></p>
<p>2:为了不再写mapper映射文件 <a href="https://blog.csdn.net/weixin_39666581/article/details/103899495">https://blog.csdn.net/weixin_39666581/article/details/103899495</a></p>
<p>3:为了给mapper接口 自动根据一个添加@Mapper注解的接口生成一个实现类</p>
<h4 id="在-Mapper的接口中可用-select，-Insert，-Update，-Delete，对数据库进行增删改查"><a href="#在-Mapper的接口中可用-select，-Insert，-Update，-Delete，对数据库进行增删改查" class="headerlink" title="在@Mapper的接口中可用@select，@Insert，@Update，@Delete，对数据库进行增删改查"></a>在@Mapper的接口中可用@select，@Insert，@Update，@Delete，对数据库进行增删改查</h4><h4 id="通常，控制层加-Controller，业务层加-Service，持久层接口里用-Mapper，其他需要注入到spring中的用-Component"><a href="#通常，控制层加-Controller，业务层加-Service，持久层接口里用-Mapper，其他需要注入到spring中的用-Component" class="headerlink" title="通常，控制层加@Controller，业务层加@Service，持久层接口里用@Mapper，其他需要注入到spring中的用@Component"></a>通常，控制层加@Controller，业务层加@Service，持久层接口里用@Mapper，其他需要注入到spring中的用@Component</h4><p><strong>@AutoWired</strong>：</p>
<p>它可以对类成员变量、方法及<a href="https://so.csdn.net/so/search?q=%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0&spm=1001.2101.3001.7020">构造函数</a>进行标注，让 spring 完成 bean 自动装配的工作。自动导入依赖的bean。byType方式。把配置好的Bean拿来用，完成属性、方法的组装，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。当加上（required&#x3D;false）时，就算找不到bean也不报错。</p>
<p>看dome，Man是数据库的属性类</p>
<p>1.Dataselect，接口类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Mapper</span><br><span class="line">public interface Dataselect &#123;</span><br><span class="line">    //1级查询</span><br><span class="line">    @Select(&quot;select * from test where level = 1&quot;)</span><br><span class="line">    List&lt;Man&gt; getclassificationFirst();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>用@Autowired实例化一个私有的对象</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class Servser &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private Dataselect dataselect;</span><br><span class="line">public void selectdata() throws Exception &#123;</span><br><span class="line">	...........</span><br><span class="line">	..........</span><br><span class="line">	dataselect.方法</span><br><span class="line">	//进行逻辑处理</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.Control类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/hello&quot;)</span><br><span class="line">public class Control &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private Servser servser;</span><br><span class="line">        </span><br><span class="line">    @RequestMapping(&quot;/wx&quot;)</span><br><span class="line">    public String onPiece() throws Exception &#123;</span><br><span class="line">    //servser.selectdata();</span><br><span class="line">        return &quot;dome.html&quot;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a><strong>@SpringBootApplication</strong></h5><p>放置在Springboot启动类上，表明该类是开启Springboot容器的入口，它是一个复合注解。里面包含了包扫描，自动注入，配置注入的功能</p>
<p><strong>@RequestMapping</strong>：</p>
<p>@RequestMapping注解的主要用途是将Web请求与请求处理类中的方法进行映射。Spring MVC和Spring WebFlux都通过RquestMappingHandlerMapping和RequestMappingHndlerAdapter两个类来提供对@RequestMapping注解的支持。</p>
<p>@RequestMapping注解对请求处理类中的请求处理方法进行标注；@RequestMapping注解拥有以下的六个配置属性：</p>
<p>value:映射的请求URL或者其别名</p>
<p>method:兼容HTTP的方法名</p>
<p>params:根据HTTP参数的存在、缺省或值对请求进行过滤</p>
<p>header:根据HTTP Header的存在、缺省或值对请求进行过滤</p>
<p>consume:设定在HTTP请求正文中允许使用的媒体类型</p>
<p>product:在HTTP响应体中允许使用的媒体类型</p>
<p>最常用的是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">//也可@RequestMapping(value=&quot;/hi&quot;)</span><br><span class="line">@RequestMapping(&quot;/hi&quot;)</span><br><span class="line">public class ControllerTest &#123;</span><br><span class="line">    @RequestMapping(&quot;/test&quot;)</span><br><span class="line">    public String home() &#123;</span><br><span class="line">        return &quot;/home.html&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="GetMapping"><a href="#GetMapping" class="headerlink" title="GetMapping"></a>GetMapping</h4><p>@GetMapping用于将HTTP get请求映射到特定处理程序的方法注解<br>具体来说，@GetMapping是一个组合注解，是@RequestMapping(method &#x3D; RequestMethod.GET)的缩写。</p>
<h6 id="1、-RequestMapping和-GetMapping区别"><a href="#1、-RequestMapping和-GetMapping区别" class="headerlink" title="1、@RequestMapping和@GetMapping区别"></a>1、@RequestMapping和@GetMapping区别</h6><ul>
<li>@RequestMapping可以指定GET、POST请求方式</li>
<li>@GetMapping等价于@RequestMapping的GET请求方式</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping</span><br><span class="line">public class HelloController &#123;</span><br><span class="line">    //@RequestMapping(value = &quot;hello&quot;, method= RequestMethod.GET )</span><br><span class="line">    @GetMapping(&quot;hello&quot;)</span><br><span class="line">    public String hello() &#123;</span><br><span class="line">       return &quot;hello spring boot&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>和前端get按钮相呼应</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;login&quot; method=&quot;get&quot;&gt;</span><br><span class="line">       &lt;input type=&quot;text&quot; placeholder=&quot;一级分类（0-12）&quot; name=&quot;oneclass&quot;&gt;</span><br><span class="line">       &lt;input type=&quot;text&quot; placeholder=&quot;二级分类（名字）&quot;name=&quot;twoclass&quot;&gt;</span><br><span class="line">       &lt;input type=&quot;submit&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>点击会直接跳转到<del>&#x2F;login?oneclass&#x3D;</del>&amp;twoclass&#x3D;~页面</p>
<h4 id="PostMapping"><a href="#PostMapping" class="headerlink" title="PostMapping"></a>PostMapping</h4><p>@PostMapping用于将HTTP post请求映射到特定处理程序的方法注解<br>具体来说，@PostMapping是一个组合注解，是@RequestMapping(method &#x3D; RequestMethod.POST)的缩写</p>
<p><strong>@Configuration</strong></p>
<p>指出该类是 Bean 配置的信息源，相当于XML中的<beans></beans>，一般加在主类上。</p>
<p><strong>@Bean</strong></p>
<p>相当于XML中的<bean></bean>,放在方法的上面，而不是类，意思是产生一个bean,并交给spring管理。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>17.Springboot之Mybatis注解开发单表操作与多表联查</title>
    <url>/2022/05/15/Springboot%E4%B9%8BMybatis%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91%E5%8D%95%E8%A1%A8%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="一-Springboot之Mybatis注解开发单表操作"><a href="#一-Springboot之Mybatis注解开发单表操作" class="headerlink" title="一.Springboot之Mybatis注解开发单表操作"></a>一.Springboot之Mybatis注解开发单表操作</h3><h4 id="1-1-MyBatis的常用注解"><a href="#1-1-MyBatis的常用注解" class="headerlink" title="1.1 MyBatis的常用注解"></a>1.1 MyBatis的常用注解</h4><p>这几年来注解开发越来越流行，Mybatis也可以使用注解开发方式，这样更加便利了操作。</p>
<p>@Insert：实现新增</p>
<p>@Update：实现更新</p>
<p>@Delete：实现删除</p>
<p>@Select：实现查询</p>
<p>@Result：实现结果集封装</p>
<p>@Results：可以与@Result 一起使用，封装多个结果集</p>
<p>@One：实现一对一结果集封装</p>
<p>@Many：实现一对多结果集封装</p>
<h4 id="1-2-MyBatis的增删改查"><a href="#1-2-MyBatis的增删改查" class="headerlink" title="1.2 MyBatis的增删改查"></a>1.2 MyBatis的增删改查</h4><p>我们完成简单的student表的增删改查的操作</p>
<ul>
<li><p>步骤一:持久层，在dao中创建mapper接口，Student对象类省略</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentMapper</span> &#123;</span><br><span class="line">    <span class="comment">//查询全部</span></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM student&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增操作</span></span><br><span class="line">    <span class="meta">@Insert(&quot;INSERT INTO student VALUES (#&#123;id&#125;,#&#123;name&#125;,#&#123;age&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">insert</span><span class="params">(Student stu)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改操作</span></span><br><span class="line">    <span class="meta">@Update(&quot;UPDATE student SET name=#&#123;name&#125;,age=#&#123;age&#125; WHERE id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">update</span><span class="params">(Student stu)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除操作</span></span><br><span class="line">    <span class="meta">@Delete(&quot;DELETE FROM student WHERE id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>步骤二：业务层，Server类</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class Server&#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private StudentMapper studentMapper; </span><br><span class="line">    </span><br><span class="line">	//查询全部</span><br><span class="line">    public List&lt;Student&gt; selectstu() &#123;</span><br><span class="line">        return studentMapper.selectAll();</span><br><span class="line">    &#125;</span><br><span class="line">    //新增操作</span><br><span class="line">    public Integer insertstu(Student stu)&#123;</span><br><span class="line">    	return studentMapper.insert(stu);</span><br><span class="line">    &#125;</span><br><span class="line">    //修改操作</span><br><span class="line">    public Integer updatestu(Student stu)&#123;</span><br><span class="line">    	return studentMapper.update(stu);</span><br><span class="line">    &#125;</span><br><span class="line">    //删除操作</span><br><span class="line">    public Integer delete(Integer id)&#123;</span><br><span class="line">    	return studentMapper.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li><p>步骤三：打开springboot测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MybatisApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Server server;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加测试方法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">selectdome</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.调用实现类对象中的方法，接收结果</span></span><br><span class="line">        List&lt;Student&gt; list = server.selectstu();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.处理结果</span></span><br><span class="line">        <span class="keyword">for</span> (Student student : list) &#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insertdome</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.调用实现类对象中的方法，接收结果</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">4</span>,<span class="string">&quot;赵六&quot;</span>,<span class="number">26</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> server.insertstu(stu);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.处理结果</span></span><br><span class="line">        System.out.println(result); </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updatedome</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.调用实现类对象中的方法，接收结果</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">4</span>,<span class="string">&quot;赵六&quot;</span>,<span class="number">26</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> server.updatestu(stu);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.处理结果</span></span><br><span class="line">        System.out.println(result); </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deletedome</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.调用实现类对象中的方法，接收结果</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> server.deletestu(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.处理结果</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="1-3-注解开发总结"><a href="#1-3-注解开发总结" class="headerlink" title="1.3 注解开发总结"></a>1.3 注解开发总结</h4><p>注解可以简化开发操作，省略映射配置文件的编写。 </p>
<ul>
<li><p>常用注解 </p>
<p>@Select(“查询的 SQL 语句”)：执行查询操作注解</p>
<p> @Insert(“查询的 SQL 语句”)：执行新增操作注解</p>
<p> @Update(“查询的 SQL 语句”)：执行修改操作注解</p>
<p> @Delete(“查询的 SQL 语句”)：执行删除操作注解</p>
</li>
</ul>
<h3 id="二-MyBatis注解开发的多表操作"><a href="#二-MyBatis注解开发的多表操作" class="headerlink" title="二.MyBatis注解开发的多表操作"></a>二.MyBatis注解开发的多表操作</h3><h4 id="2-1-MyBatis的注解实现复杂映射开发"><a href="#2-1-MyBatis的注解实现复杂映射开发" class="headerlink" title="2.1  MyBatis的注解实现复杂映射开发"></a>2.1  MyBatis的注解实现复杂映射开发</h4><p>实现复杂关系映射之前我们可以在映射文件中通过配置<resultMap>来实现，使用注解开发后，我们可以使用@Results注解，@Result注解，@One注解，@Many注解组合完成复杂关系的配置</p>
<p><img src="/images3/%E5%9B%BE%E7%89%8710.png"></p>
<p><img src="/images3/%E5%9B%BE%E7%89%8711.png"></p>
<p>通常在@Results(………,fetchType&#x3D; FetchType.EAGER)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Select(&quot;select * from test where level = 1&quot;)</span><br><span class="line">    @Results(value = &#123;</span><br><span class="line">            @Result(id = true,column = &quot;pid0&quot;,property = &quot;pid0&quot;),</span><br><span class="line">            @Result(column = &quot;pid0&quot;, property = &quot;child&quot;, many = @Many(select = &quot;com.example.demo.Database.Dataselect.getpid&quot;,fetchType= FetchType.EAGER))</span><br><span class="line">    &#125;)</span><br><span class="line">    List&lt;Classdify&gt; getclassification();</span><br></pre></td></tr></table></figure>



<h4 id="2-2-一对一查询"><a href="#2-2-一对一查询" class="headerlink" title="2.2  一对一查询"></a>2.2  一对一查询</h4><h5 id="2-2-1-一对一查询的模型"><a href="#2-2-1-一对一查询的模型" class="headerlink" title="2.2.1 一对一查询的模型"></a>2.2.1 一对一查询的模型</h5><p>一对一查询的需求：查询一个用户信息，与此同时查询出该用户对应的身份证信息</p>
<p><img src="/images3/1590942011460.png" alt="picture"></p>
<h5 id="2-2-2-一对一查询的语句"><a href="#2-2-2-一对一查询的语句" class="headerlink" title="2.2.2 一对一查询的语句"></a>2.2.2 一对一查询的语句</h5><p>对应的sql语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> card；</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> person <span class="keyword">WHERE</span> id<span class="operator">=</span>#&#123;id&#125;;</span><br></pre></td></tr></table></figure>

<h5 id=""><a href="#" class="headerlink" title=""></a></h5><h5 id="2-2-3-创建PersonMapper接口"><a href="#2-2-3-创建PersonMapper接口" class="headerlink" title="2.2.3 创建PersonMapper接口"></a>2.2.3 创建PersonMapper接口</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PersonMapper</span> &#123;</span><br><span class="line">    <span class="comment">//根据id查询</span></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM person WHERE id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Person <span class="title function_">selectById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="2-2-4-使用注解配置Mapper"><a href="#2-2-4-使用注解配置Mapper" class="headerlink" title="2.2.4 使用注解配置Mapper"></a>2.2.4 使用注解配置Mapper</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CardMapper</span> &#123;</span><br><span class="line">    <span class="comment">//查询全部</span></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM card&quot;)</span></span><br><span class="line">    <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;id&quot;,property = &quot;id&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;number&quot;,property = &quot;number&quot;),</span></span><br><span class="line"><span class="meta">            @Result(</span></span><br><span class="line"><span class="meta">                    property = &quot;p&quot;,             // 被包含对象的变量名</span></span><br><span class="line"><span class="meta">                    javaType = Person.class,    // 被包含对象的实际数据类型</span></span><br><span class="line"><span class="meta">                    column = &quot;pid&quot;,             // 根据查询出的card表中的pid字段来查询person表</span></span><br><span class="line"><span class="meta">                    /*</span></span><br><span class="line"><span class="meta">                        one、@One 一对一固定写法</span></span><br><span class="line"><span class="meta">                        select属性：指定调用哪个接口中的哪个方法</span></span><br><span class="line"><span class="meta">                     */</span></span><br><span class="line"><span class="meta">                    one = @One(select = &quot;com.itheima.one_to_one.PersonMapper.selectById&quot;)</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> List&lt;Card&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-2-5-测试类省略"><a href="#2-2-5-测试类省略" class="headerlink" title="2.2.5 测试类省略"></a>2.2.5 测试类省略</h5><h5 id="2-2-6-一对一配置总结"><a href="#2-2-6-一对一配置总结" class="headerlink" title="2.2.6  一对一配置总结"></a>2.2.6  一对一配置总结</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Results：封装映射关系的父注解。</span><br><span class="line">	Result[] value()：定义了 Result 数组</span><br><span class="line">@Result：封装映射关系的子注解。</span><br><span class="line">	column 属性：查询出的表中字段名称</span><br><span class="line">	property 属性：实体对象中的属性名称</span><br><span class="line">	javaType 属性：被包含对象的数据类型</span><br><span class="line">	one 属性：一对一查询固定属性</span><br><span class="line"> @One：一对一查询的注解。</span><br><span class="line">	select 属性：指定调用某个接口中的方法</span><br></pre></td></tr></table></figure>



<h4 id="2-3-一对多查询"><a href="#2-3-一对多查询" class="headerlink" title="2.3 一对多查询"></a>2.3 一对多查询</h4><h5 id="2-3-1-一对多查询的模型"><a href="#2-3-1-一对多查询的模型" class="headerlink" title="2.3.1 一对多查询的模型"></a>2.3.1 一对多查询的模型</h5><p>一对多查询的需求：查询一个课程，与此同时查询出该该课程对应的学生信息</p>
<p><img src="/images3/1590942772892.png" alt="picture"></p>
<h5 id="2-3-2-一对多查询的语句"><a href="#2-3-2-一对多查询的语句" class="headerlink" title="2.3.2 一对多查询的语句"></a>2.3.2 一对多查询的语句</h5><p>对应的sql语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> classes</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> cid<span class="operator">=</span>#&#123;cid&#125;</span><br></pre></td></tr></table></figure>

<h5 id="-1"><a href="#-1" class="headerlink" title=""></a></h5><h5 id="2-3-3-创建StudentMapper接口"><a href="#2-3-3-创建StudentMapper接口" class="headerlink" title="2.3.3 创建StudentMapper接口"></a>2.3.3 创建StudentMapper接口</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentMapper</span> &#123;</span><br><span class="line">    <span class="comment">//根据cid查询student表</span></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM student WHERE cid=#&#123;cid&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> List&lt;Student&gt; <span class="title function_">selectByCid</span><span class="params">(Integer cid)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="2-3-4-使用注解配置Mapper"><a href="#2-3-4-使用注解配置Mapper" class="headerlink" title="2.3.4 使用注解配置Mapper"></a>2.3.4 使用注解配置Mapper</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ClassesMapper</span> &#123;</span><br><span class="line">    <span class="comment">//查询全部</span></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM classes&quot;)</span></span><br><span class="line">    <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;id&quot;,property = &quot;id&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;name&quot;,property = &quot;name&quot;),</span></span><br><span class="line"><span class="meta">            @Result(</span></span><br><span class="line"><span class="meta">                    property = &quot;students&quot;,  // 被包含对象的变量名</span></span><br><span class="line"><span class="meta">                    javaType = List.class,  // 被包含对象的实际数据类型</span></span><br><span class="line"><span class="meta">                    column = &quot;id&quot;,          // 根据查询出的classes表的id字段来查询student表</span></span><br><span class="line"><span class="meta">                    /*</span></span><br><span class="line"><span class="meta">                        many、@Many 一对多查询的固定写法</span></span><br><span class="line"><span class="meta">                        select属性：指定调用哪个接口中的哪个查询方法</span></span><br><span class="line"><span class="meta">                     */</span></span><br><span class="line"><span class="meta">                    many = @Many(select = &quot;com.itheima.one_to_many.StudentMapper.selectByCid&quot;)</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> List&lt;Classes&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-3-5-测试类省略"><a href="#2-3-5-测试类省略" class="headerlink" title="2.3.5 测试类省略"></a>2.3.5 测试类省略</h5><h5 id="2-3-6-一对多配置总结"><a href="#2-3-6-一对多配置总结" class="headerlink" title="2.3.6 一对多配置总结"></a>2.3.6 一对多配置总结</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Results：封装映射关系的父注解。</span><br><span class="line">	Result[] value()：定义了 Result 数组</span><br><span class="line">@Result：封装映射关系的子注解。</span><br><span class="line">	column 属性：查询出的表中字段名称</span><br><span class="line">	property 属性：实体对象中的属性名称</span><br><span class="line">	javaType 属性：被包含对象的数据类型</span><br><span class="line">	many 属性：一对多查询固定属性</span><br><span class="line">@Many：一对多查询的注解。</span><br><span class="line">	select 属性：指定调用某个接口中的方法</span><br></pre></td></tr></table></figure>



<h4 id="2-4-多对多查询"><a href="#2-4-多对多查询" class="headerlink" title="2.4  多对多查询"></a>2.4  多对多查询</h4><h5 id="2-4-1-多对多查询的模型"><a href="#2-4-1-多对多查询的模型" class="headerlink" title="2.4.1 多对多查询的模型"></a>2.4.1 多对多查询的模型</h5><p>多对多查询的需求：查询学生以及所对应的课程信息</p>
<p><img src="/images3/1590943489827.png" alt="picture"></p>
<h5 id="2-4-2-多对多查询的语句"><a href="#2-4-2-多对多查询的语句" class="headerlink" title="2.4.2 多对多查询的语句"></a>2.4.2 多对多查询的语句</h5><p>对应的sql语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> s.id,s.name,s.age <span class="keyword">FROM</span> student s,stu_cr sc <span class="keyword">WHERE</span> sc.sid<span class="operator">=</span>s.id</span><br><span class="line"><span class="keyword">SELECT</span> c.id,c.name <span class="keyword">FROM</span> stu_cr sc,course c <span class="keyword">WHERE</span> sc.cid<span class="operator">=</span>c.id <span class="keyword">AND</span> sc.sid<span class="operator">=</span>#&#123;id&#125;</span><br></pre></td></tr></table></figure>



<h5 id="2-4-3-添加CourseMapper-接口方法"><a href="#2-4-3-添加CourseMapper-接口方法" class="headerlink" title="2.4.3  添加CourseMapper 接口方法"></a>2.4.3  添加CourseMapper 接口方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CourseMapper</span> &#123;</span><br><span class="line">    <span class="comment">//根据学生id查询所选课程</span></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT c.id,c.name FROM stu_cr sc,course c WHERE sc.cid=c.id AND sc.sid=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> List&lt;Course&gt; <span class="title function_">selectBySid</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="2-4-4-使用注解配置Mapper"><a href="#2-4-4-使用注解配置Mapper" class="headerlink" title="2.4.4 使用注解配置Mapper"></a>2.4.4 使用注解配置Mapper</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentMapper</span> &#123;</span><br><span class="line">    <span class="comment">//查询全部</span></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT DISTINCT s.id,s.name,s.age FROM student s,stu_cr sc WHERE sc.sid=s.id&quot;)</span></span><br><span class="line">    <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;id&quot;,property = &quot;id&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;name&quot;,property = &quot;name&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;age&quot;,property = &quot;age&quot;),</span></span><br><span class="line"><span class="meta">            @Result(</span></span><br><span class="line"><span class="meta">                    property = &quot;courses&quot;,   // 被包含对象的变量名</span></span><br><span class="line"><span class="meta">                    javaType = List.class,  // 被包含对象的实际数据类型</span></span><br><span class="line"><span class="meta">                    column = &quot;id&quot;,          // 根据查询出student表的id来作为关联条件，去查询中间表和课程表</span></span><br><span class="line"><span class="meta">                    /*</span></span><br><span class="line"><span class="meta">                        many、@Many 一对多查询的固定写法</span></span><br><span class="line"><span class="meta">                        select属性：指定调用哪个接口中的哪个查询方法</span></span><br><span class="line"><span class="meta">                     */</span></span><br><span class="line"><span class="meta">                    many = @Many(select = &quot;com.itheima.many_to_many.CourseMapper.selectBySid&quot;)</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> List&lt;Student&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="2-4-5-测试类省略"><a href="#2-4-5-测试类省略" class="headerlink" title="2.4.5 测试类省略"></a>2.4.5 测试类省略</h5><h5 id="2-4-6-多对多配置总结"><a href="#2-4-6-多对多配置总结" class="headerlink" title="2.4.6 多对多配置总结"></a>2.4.6 多对多配置总结</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Results：封装映射关系的父注解。</span><br><span class="line">	Result[] value()：定义了 Result 数组</span><br><span class="line">@Result：封装映射关系的子注解。</span><br><span class="line">	column 属性：查询出的表中字段名称</span><br><span class="line">	property 属性：实体对象中的属性名称</span><br><span class="line">	javaType 属性：被包含对象的数据类型</span><br><span class="line">	many 属性：一对多查询固定属性</span><br><span class="line">@Many：一对多查询的注解。</span><br><span class="line">	select 属性：指定调用某个接口中的方法</span><br></pre></td></tr></table></figure>



<h3 id="三-构建sql"><a href="#三-构建sql" class="headerlink" title="三.构建sql"></a>三.构建sql</h3><h4 id="3-1-SQL-构建对象介绍"><a href="#3-1-SQL-构建对象介绍" class="headerlink" title="3.1 SQL 构建对象介绍"></a>3.1 SQL 构建对象介绍</h4><ul>
<li>我们之前通过注解开发时，相关 SQL 语句都是自己直接拼写的。一些关键字写起来比较麻烦、而且容易出错。 </li>
<li>MyBatis 给我们提供了 org.apache.ibatis.jdbc.SQL 功能类，专门用于构建 SQL 语句    </li>
<li><img src="/images3/1590943921472.png" alt="picture"></li>
</ul>
<h4 id="3-2-查询功能的实现"><a href="#3-2-查询功能的实现" class="headerlink" title="3.2  查询功能的实现"></a>3.2  查询功能的实现</h4><ul>
<li><p>定义功能类并提供获取查询的 SQL 语句的方法。 </p>
</li>
<li><p>@SelectProvider：生成查询用的 SQL 语句注解。</p>
<p>type 属性：生成 SQL 语句功能类对象 </p>
<p>method 属性：指定调用方法</p>
</li>
</ul>
<h4 id="3-3-新增功能的实现"><a href="#3-3-新增功能的实现" class="headerlink" title="3.3  新增功能的实现"></a>3.3  新增功能的实现</h4><ul>
<li><p>定义功能类并提供获取新增的 SQL 语句的方法。 </p>
</li>
<li><p>@InsertProvider：生成新增用的 SQL 语句注解。 </p>
<p>type 属性：生成 SQL 语句功能类对象 </p>
<p>method 属性：指定调用方法</p>
</li>
</ul>
<h4 id="3-4-修改功能的实现"><a href="#3-4-修改功能的实现" class="headerlink" title="3.4  修改功能的实现"></a>3.4  修改功能的实现</h4><ul>
<li><p>定义功能类并提供获取修改的 SQL 语句的方法。 </p>
</li>
<li><p>@UpdateProvider：生成修改用的 SQL 语句注解。 </p>
<p>type 属性：生成 SQL 语句功能类对象</p>
<p> method 属性：指定调用方法</p>
</li>
</ul>
<h4 id="3-5-删除功能的实现"><a href="#3-5-删除功能的实现" class="headerlink" title="3.5  删除功能的实现"></a>3.5  删除功能的实现</h4><ul>
<li><p>定义功能类并提供获取删除的 SQL 语句的方法。 </p>
</li>
<li><p>@DeleteProvider：生成删除用的 SQL 语句注解。</p>
<p>type 属性：生成 SQL 语句功能类对象 </p>
<p>method 属性：指定调用方法</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>css音频与html5新特性（八）</title>
    <url>/2022/04/02/css-html%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89/</url>
    <content><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul>
<li>能够说出 3~5 个 HTML5 新增布局和表单标签</li>
<li>能够说出 CSS3 的新增特性有哪些</li>
</ul>
<h1 id="HTML5新特性"><a href="#HTML5新特性" class="headerlink" title="HTML5新特性"></a>HTML5新特性</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>HTML5 的新增特性主要是针对于以前的不足，增加了一些新的标签、新的表单和新的表单属性等。 </p>
<p>这些新特性都有兼容性问题，基本是 <strong>IE9+ 以上版本的浏览器</strong>才支持，如果不考虑兼容性问题，可以大量使用这些新特性。</p>
<h2 id="语义化标签-（★★）"><a href="#语义化标签-（★★）" class="headerlink" title="语义化标签 （★★）"></a>语义化标签 （★★）</h2><p>以前布局，我们基本用 div 来做。div 对于搜索引擎来说，是没有语义的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">“header”</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">“nav”</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">“content”</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">“footer”</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>发展到了HTML5后，新增了一些语义化标签，这样的话更加有利于浏览器的搜索引擎搜索，也方便了网站的seo（Search Engine Optimization，搜索引擎优化），下面就是新增的一些语义化标签</p>
<ul>
<li><code>&lt;header&gt;</code> 头部标签</li>
<li><code>&lt;nav&gt;</code> 导航标签</li>
<li><code>&lt;article&gt;</code> 内容标签</li>
<li><code>&lt;section&gt;</code> 定义文档某个区域</li>
<li><code>&lt;aside&gt;</code> 侧边栏标签</li>
<li><code>&lt;footer&gt;</code> 尾部标签</li>
</ul>
<p><img src="/images/%E8%AF%AD%E4%B9%89%E5%8C%96%E6%A0%87%E7%AD%BE.png"></p>
<h2 id="多媒体标签"><a href="#多媒体标签" class="headerlink" title="多媒体标签"></a>多媒体标签</h2><p>多媒体标签分为 音频 <strong>audio</strong> 和视频 <strong>video</strong> 两个标签 使用它们，我们可以很方便的在页面中嵌入音频和视频，而不再去使用落后的flash和其他浏览器插件了。</p>
<p>因为多媒体标签的 属性、方法、事件比较多，因此我们需要什么功能的时候，就需要去查找相关的文档进行学习使用。</p>
<p><img src="/images/%E5%A4%9A%E5%AA%92%E4%BD%93%E6%A0%87%E7%AD%BE.png"></p>
<h3 id="视频标签-video（★★★）"><a href="#视频标签-video（★★★）" class="headerlink" title="视频标签- video（★★★）"></a>视频标签- video（★★★）</h3><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>当前 <strong><video></strong> 元素支持三种视频格式： 尽量使用 <strong>mp4格式</strong></p>
<p><strong>使用语法：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;media/mi.mp4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/video%E6%94%AF%E6%8C%81%E6%A0%BC%E5%BC%8F.png"></p>
<h4 id="兼容写法"><a href="#兼容写法" class="headerlink" title="兼容写法"></a>兼容写法</h4><p>由于各个浏览器的支持情况不同，所以我们会有一种兼容性的写法，这种写法了解一下即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span>  <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span>  <span class="attr">width</span>=<span class="string">&quot;300&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;move.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/ogg&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;move.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span> &gt;</span></span><br><span class="line">    您的浏览器暂不支持 <span class="tag">&lt;<span class="name">video</span>&gt;</span> 标签播放视频</span><br><span class="line">&lt;/ video &gt;</span><br></pre></td></tr></table></figure>

<p><strong>上面这种写法，浏览器会匹配video标签中的source，如果支持就播放，如果不支持往下匹配，直到没有匹配的格式，就提示文本</strong></p>
<h4 id="video-常用属性"><a href="#video-常用属性" class="headerlink" title="video 常用属性"></a>video 常用属性</h4><p><img src="/images/video%E5%B8%B8%E7%94%A8%E5%B1%9E%E6%80%A7.png"></p>
<p><strong>属性很多，有一些属性需要大家重点掌握：</strong></p>
<ul>
<li><code>autoplay</code>  自动播放<ul>
<li>注意： 在google浏览器上面，默认禁止了自动播放，如果想要自动播放的效果，需要设置 muted属性</li>
</ul>
</li>
<li><code>width</code>  宽度</li>
<li><code>height</code>  高度</li>
<li><code>loop</code>  循环播放</li>
<li><code>src</code>  播放源</li>
<li><code>muted</code> 静音播放</li>
</ul>
<p><strong>示例代码：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;media/mi.mp4&quot;</span> <span class="attr">autoplay</span>=<span class="string">&quot;autoplay&quot;</span> <span class="attr">muted</span>=<span class="string">&quot;muted&quot;</span>  <span class="attr">loop</span>=<span class="string">&quot;loop&quot;</span> <span class="attr">poster</span>=<span class="string">&quot;media/mi9.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="音频标签-audio"><a href="#音频标签-audio" class="headerlink" title="音频标签- audio"></a>音频标签- audio</h3><h4 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h4><p>当前 <strong><audio></strong> 元素支持三种视频格式： 尽量使用 <strong>mp3格式</strong></p>
<p><strong>使用语法：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;media/music.mp3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/audio%E6%94%AF%E6%8C%81%E6%A0%BC%E5%BC%8F.png"></p>
<h4 id="兼容写法-1"><a href="#兼容写法-1" class="headerlink" title="兼容写法"></a>兼容写法</h4><p>由于各个浏览器的支持情况不同，所以我们会有一种兼容性的写法，这种写法了解一下即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt; audio controls=&quot;controls&quot;  &gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;happy.mp3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mpeg&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;happy.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/ogg&quot;</span> &gt;</span></span><br><span class="line">    您的浏览器暂不支持 <span class="tag">&lt;<span class="name">audio</span>&gt;</span> 标签。</span><br><span class="line">&lt;/ audio&gt;</span><br></pre></td></tr></table></figure>

<p><strong>上面这种写法，浏览器会匹配audio标签中的source，如果支持就播放，如果不支持往下匹配，直到没有匹配的格式，就提示文本</strong></p>
<h4 id="audio-常用属性"><a href="#audio-常用属性" class="headerlink" title="audio 常用属性"></a>audio 常用属性</h4><p><img src="/images/audio%E5%B8%B8%E7%94%A8%E5%B1%9E%E6%80%A7.png"></p>
<p><strong>示例代码：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;media/music.mp3&quot;</span> <span class="attr">autoplay</span>=<span class="string">&quot;autoplay&quot;</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li>音频标签和视频标签使用方式基本一致</li>
<li>浏览器支持情况不同</li>
<li>谷歌浏览器把音频和视频自动播放禁止了</li>
<li>我们可以给视频标签添加 muted 属性来静音播放视频，音频不可以（可以通过JavaScript解决）</li>
<li>视频标签是重点，我们经常设置自动播放，不使用 controls 控件，循环和设置大小属性</li>
</ul>
<h2 id="新增的表单元素-（★★）"><a href="#新增的表单元素-（★★）" class="headerlink" title="新增的表单元素 （★★）"></a>新增的表单元素 （★★）</h2><p>在H5中，帮我们新增加了很多类型的表单，这样方便了程序员的开发</p>
<p><strong>课堂案例：在这个案例中，熟练了新增表单的用法</strong></p>
<p><img src="/images/input%E6%A1%88%E4%BE%8B.png"></p>
<p><strong>案例代码：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 我们验证的时候必须添加form表单域 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>邮箱: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>网址: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>日期: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>时间: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;time&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>数量: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>手机号码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;tel&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>搜索: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>颜色: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当我们点击提交按钮就可以验证表单了 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <strong>常见输入类型</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">text password radio checkbox button file hidden submit reset image</span><br></pre></td></tr></table></figure>

<p><strong>新的输入类型</strong></p>
<p><img src="/images/%E6%96%B0%E5%A2%9Einput%E8%A1%A8%E5%8D%95.png"></p>
<p>类型很多，我们现阶段<strong>重点记忆三个</strong>： <strong><code>number</code>   <code>tel</code>   <code>search</code></strong></p>
<h1 id="CSS3新特性"><a href="#CSS3新特性" class="headerlink" title="CSS3新特性"></a>CSS3新特性</h1><h2 id="CSS3-的现状"><a href="#CSS3-的现状" class="headerlink" title="CSS3 的现状"></a>CSS3 的现状</h2><ul>
<li>新增的CSS3特性有兼容性问题，ie9+才支持</li>
<li>移动端支持优于 PC 端 </li>
<li>不断改进中 </li>
<li>应用相对广泛</li>
<li>现阶段主要学习：新增选择器和盒子模型以及其他特性</li>
</ul>
<h2 id="CSS3-新增选择器"><a href="#CSS3-新增选择器" class="headerlink" title="CSS3  新增选择器"></a>CSS3  新增选择器</h2><p>CSS3 给我们新增了选择器，可以更加便捷，更加自由的选择目标元素。 </p>
<ul>
<li>属性选择器</li>
<li>结构伪类选择器</li>
<li>伪元素选择器</li>
</ul>
<h3 id="属性选择器（★★）"><a href="#属性选择器（★★）" class="headerlink" title="属性选择器（★★）"></a>属性选择器（★★）</h3><p>属性选择器，按照字面意思，都是根据标签中的属性来选择元素</p>
<p><img src="/images/%E5%B1%9E%E6%80%A7%E9%80%89%E6%8B%A9%E5%99%A8.png"></p>
<p><strong>示例代码：</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/* 只选择 type =text 文本框的input 选取出来 */</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=text]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 选择首先是div 然后 具有class属性 并且属性值 必须是 icon开头的这些元素 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[class^=icon]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 选择首先是section 然后 具有class属性 并且属性值 必须是 data结尾的这些元素 */</span></span><br><span class="line"><span class="selector-tag">section</span><span class="selector-attr">[class$=data]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>属性选择器，按照字面意思，都是根据标签中的属性来选择元素</li>
<li>属性选择器可以根据元素特定属性的来选择元素。 这样就可以不用借助于类或者id选择器</li>
<li>属性选择器也可以选择出来自定义的属性</li>
<li><strong>注意：</strong>类选择器、属性选择器、伪类选择器，权重为 10。</li>
</ul>
<h3 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h3><p>结构伪类选择器主要根据文档结构来选择器元素， 常用于根据父级选择器里面的子元素</p>
<p><img src="/images/%E7%BB%93%E6%9E%84%E4%BC%AA%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8-01.png"></p>
<h4 id="E-first-child"><a href="#E-first-child" class="headerlink" title="E:first-child"></a>E:first-child</h4><p>匹配父元素的第一个子元素E</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">   <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child&#123;</span></span><br><span class="line"><span class="language-css">     <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css"> </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项四<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/first-child.png"></p>
<p><strong>E:last-child</strong>  则是选择到了最后一个li标签</p>
<h4 id="E-nth-child-n-（★★★）"><a href="#E-nth-child-n-（★★★）" class="headerlink" title="E:nth-child(n)（★★★）"></a>E:nth-child(n)（★★★）</h4><p>匹配到父元素的第n个元素</p>
<ul>
<li><p>匹配到父元素的第2个子元素  </p>
<p><code>ul li:nth-child(2)&#123;&#125;</code></p>
</li>
<li><p>匹配到父元素的序号为奇数的子元素</p>
<p><code>ul li:nth-child(odd)&#123;&#125;</code>    <strong>odd</strong> 是关键字  奇数的意思（3个字母 ）</p>
</li>
<li><p>匹配到父元素的序号为偶数的子元素</p>
<p><code>ul li:nth-child(even)&#123;&#125;</code>   <strong>even</strong>（4个字母 ）</p>
</li>
<li><p><strong>匹配到父元素的前3个子元素</strong></p>
<p><code>ul li:nth-child(-n+3)&#123;&#125;</code>    </p>
<p>选择器中的  <strong>n</strong> 是怎么变化的呢？</p>
<p>因为 n是从 0 ，1，2，3.. 一直递增</p>
<p>所以 -n+3 就变成了   </p>
<ul>
<li>n&#x3D;0 时   -0+3&#x3D;3</li>
<li>n&#x3D;1时    -1+3&#x3D;2</li>
<li>n&#x3D;2时    -2+3&#x3D;1</li>
<li>n&#x3D;3时    -3+3&#x3D;0 </li>
<li>…</li>
</ul>
</li>
</ul>
<p><strong>一些常用的公式： 公式不是死的，在这里列举出来让大家能够找寻到这个模式，能够理解代码，这样才能写出满足自己功能需求的代码</strong></p>
<p><img src="/images/nth-child%E5%85%AC%E5%BC%8F.png"></p>
<p><strong>常用的结构伪类选择器是：</strong> <code>nth-child(n) &#123;...&#125;</code></p>
<h4 id="E-nth-child-与-E-nth-of-type-的区别"><a href="#E-nth-child-与-E-nth-of-type-的区别" class="headerlink" title="E:nth-child 与 E:nth-of-type 的区别"></a>E:nth-child 与 E:nth-of-type 的区别</h4><p>这里只讲明  <strong>E:nth-child(n)</strong>  和 <strong>E:nth-of-type(n)</strong>  的区别  剩下的 <strong>E:first-of-type</strong>     <strong>E:last-of-type</strong>  <strong>E:nth-last-of-type(n)</strong>   同理做推导即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>)&#123;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 字体变成红色 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>)&#123;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 背景变成绿色 */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>乱来的p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项四<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/nth-child%E4%B8%8Enth-of-type%E5%8C%BA%E5%88%AB.png"></p>
<p>也就是说：</p>
<ul>
<li><code>E:nth-child(n)</code>     匹配父元素的第n个子元素E，也就是说，nth-child 对父元素里面所有孩子排序选择（序号是固定的）  先找到第n个孩子，然后看看是否和E匹配</li>
<li><code>E:nth-of-type(n)</code> 匹配同类型中的第n个同级兄弟元素E，也就是说，对父元素里面指定子元素进行排序选择。 先去匹配E ，然后再根据E 找第n个孩子</li>
</ul>
<h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><ul>
<li>结构伪类选择器一般用于选择父级里面的第几个孩子</li>
<li>nth-child 对父元素里面所有孩子排序选择（序号是固定的）  先找到第n个孩子，然后看看是否和E匹配</li>
<li>nth-of-type 对父元素里面指定子元素进行排序选择。 先去匹配E ，然后再根据E 找第n个孩子</li>
<li>关于 nth-child（n） 我们要知道 n 是从 0 开始计算的，要记住常用的公式</li>
<li>如果是无序列表，我们肯定用 nth-child 更多</li>
<li>类选择器、属性选择器、伪类选择器，权重为 10</li>
</ul>
<h3 id="伪元素选择器（★★★）"><a href="#伪元素选择器（★★★）" class="headerlink" title="伪元素选择器（★★★）"></a>伪元素选择器（★★★）</h3><p>伪元素选择器可以帮助我们利用CSS创建新标签元素，而不需要HTML标签，从而简化HTML结构</p>
<p><img src="/images/%E4%BC%AA%E5%85%83%E7%B4%A0.png"></p>
<p><strong>示例demo</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* div::before 权重是2 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 这个content是必须要写的 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">content</span>: <span class="string">&#x27;我&#x27;</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">content</span>: <span class="string">&#x27;小猪佩奇&#x27;</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        是</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>before 和 after 创建一个元素，但是属于行内元素</li>
<li>新创建的这个元素在文档树中是找不到的，所以我们称为伪元素</li>
<li>语法：  element::before {}   </li>
<li>before 和 after 必须有 content 属性 </li>
<li>before 在父元素内容的前面创建元素，after 在父元素内容的后面插入元素<br>伪元素选择器和标签选择器一样，权重为 1</li>
</ul>
<h4 id="应用场景一：-字体图标"><a href="#应用场景一：-字体图标" class="headerlink" title="应用场景一： 字体图标"></a>应用场景一： 字体图标</h4><p>在实际工作中，字体图标基本上都是用伪元素来实现的，好处在于我们不需要在结构中额外去定义字体图标的标签，通过content属性来设置字体图标的 编码</p>
<p><strong>步骤：</strong></p>
<ul>
<li>结构中定义div盒子</li>
<li>在style中先申明字体  @font-face</li>
<li>在style中定义after伪元素 div::after{…}</li>
<li>在after伪元素中 设置content属性，属性的值就是字体编码</li>
<li>在after伪元素中 设置font-family的属性</li>
<li>利用定位的方式，让伪元素定位到相应的位置；记住定位口诀：子绝父相</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="keyword">@font-face</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: <span class="string">&#x27;icomoon&#x27;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.eot?1lv3na&#x27;</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.eot?1lv3na#iefix&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;embedded-opentype&#x27;</span>),</span></span><br><span class="line"><span class="language-css">                <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.ttf?1lv3na&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;truetype&#x27;</span>),</span></span><br><span class="line"><span class="language-css">                <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.woff?1lv3na&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>),</span></span><br><span class="line"><span class="language-css">                <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.svg?1lv3na#icomoon&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;svg&#x27;</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>: normal;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-style</span>: normal;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-display</span>: block;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: <span class="string">&#x27;icomoon&#x27;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* content: &#x27;&#x27;; */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">content</span>: <span class="string">&#x27;\e91e&#x27;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="应用场景二：-仿土豆效果"><a href="#应用场景二：-仿土豆效果" class="headerlink" title="应用场景二： 仿土豆效果"></a>应用场景二： 仿土豆效果</h4><p>把之前的代码进行了改善</p>
<p><strong>步骤：</strong></p>
<ul>
<li>找到之前写过的仿土豆的结构和样式，拷贝到自己的页面中</li>
<li>删除之前的mask遮罩</li>
<li>在style中，给大的div盒子（类名叫tudou的），设置 before伪元素</li>
<li>这个伪元素充当的是遮罩的角色，所以我们不用设置内容，但是需要设置content属性，属性的值为空字符串</li>
<li>给这个遮罩设置宽高，背景颜色，默认是隐藏的</li>
<li>当鼠标移入到 div盒子时候，让遮罩显示，利用 hover 来实现</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tudou</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">444px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">320px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">30px</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tudou</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tudou</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 隐藏遮罩层 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">4</span>) <span class="built_in">url</span>(<span class="string">images/arr.png</span>) no-repeat center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 当我们鼠标经过了 土豆这个盒子，就让里面before遮罩层显示出来 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tudou</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 而是显示元素 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tudou&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/tudou.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tudou&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/tudou.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tudou&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/tudou.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tudou&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/tudou.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="应用场景三：-清除浮动"><a href="#应用场景三：-清除浮动" class="headerlink" title="应用场景三： 清除浮动"></a>应用场景三： 清除浮动</h4><p>回忆一下清除浮动的方式：</p>
<ul>
<li>额外标签法也称为隔墙法，是 W3C 推荐的做法。</li>
<li>父级添加 overflow 属性</li>
<li>父级添加after伪元素</li>
<li>父级添加双伪元素</li>
</ul>
<p><strong>额外标签法</strong>也称为隔墙法，是 W3C 推荐的做法</p>
<p><img src="/images/%E9%A2%9D%E5%A4%96%E6%A0%87%E7%AD%BE%E6%B3%95.png"></p>
<p><strong>注意：</strong> 要求这个新的空标签必须是块级元素</p>
<p>后面两种伪元素清除浮动算是第一种额外标签法的一个<strong>升级</strong>和<strong>优化</strong></p>
<p><img src="/images/%E5%8D%95%E4%BC%AA%E5%85%83%E7%B4%A0.png"></p>
<p><img src="/images/%E5%8F%8C%E4%BC%AA%E5%85%83%E7%B4%A0.png"></p>
<h2 id="盒子模型（★★★）"><a href="#盒子模型（★★★）" class="headerlink" title="盒子模型（★★★）"></a>盒子模型（★★★）</h2><p>CSS3 中可以通过 box-sizing 来指定盒模型，有2个值：即可指定为 content-box、border-box，这样我们计算盒子大小的方式就发生了改变</p>
<p>可以分成两种情况：</p>
<ul>
<li>box-sizing: content-box  盒子大小为 width + padding + border  （以前默认的）</li>
<li>box-sizing: border-box  盒子大小为 width</li>
</ul>
<p>如果盒子模型我们改为了box-sizing: border-box  ， 那padding和border就不会撑大盒子了（前提padding和border不会超过width宽度）</p>
<h2 id="其他特性（★）"><a href="#其他特性（★）" class="headerlink" title="其他特性（★）"></a>其他特性（★）</h2><h3 id="图标变模糊-–-CSS3滤镜filter"><a href="#图标变模糊-–-CSS3滤镜filter" class="headerlink" title="图标变模糊  – CSS3滤镜filter"></a>图标变模糊  – CSS3滤镜filter</h3><p>filter CSS属性将模糊或颜色偏移等图形效果应用于元素</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">filter</span>:   函数(); --&gt;  例如： <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">5px</span>);  --&gt;  blur模糊处理  数值越大越模糊</span><br></pre></td></tr></table></figure>

<p><img src="/images/filter.png"></p>
<h3 id="计算盒子宽度-–-calc-函数"><a href="#计算盒子宽度-–-calc-函数" class="headerlink" title="计算盒子宽度 – calc 函数"></a>计算盒子宽度 – calc 函数</h3><p>calc() 此CSS函数让你在声明CSS属性值时执行一些计算</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">80px</span>);</span><br></pre></td></tr></table></figure>

<p>括号里面可以使用 + - *  &#x2F; 来进行计算</p>
<h2 id="CSS3-过渡（★★★）"><a href="#CSS3-过渡（★★★）" class="headerlink" title="CSS3 过渡（★★★）"></a>CSS3 过渡（★★★）</h2><p>过渡（transition)是CSS3中具有颠覆性的特征之一，我们可以在不使用 Flash 动画或 JavaScript 的情况下，当元素从一种样式变换为另一种样式时为元素添加效果。</p>
<p><strong>过渡动画：</strong> 是从一个状态 渐渐的过渡到另外一个状态</p>
<p>可以让我们页面更好看，更动感十足，虽然 低版本浏览器不支持（ie9以下版本） 但是不会影响页面布局。</p>
<p>我们现在经常和 :hover 一起 搭配使用。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transition</span>: 要过渡的属性  花费时间  运动曲线  何时开始;</span><br></pre></td></tr></table></figure>

<ul>
<li>属性 ： 想要变化的 css 属性， 宽度高度 背景颜色 内外边距都可以 。如果想要所有的属性都变化过渡， 写一个all 就可以</li>
<li>花费时间： 单位是 秒（必须写单位） 比如 0.5s </li>
<li>运动曲线： 默认是 ease （可以省略）</li>
<li>何时开始：单位是 秒（必须写单位）可以设置延迟触发时间  默认是 0s  （可以省略）</li>
<li><strong>后面两个属性可以省略</strong></li>
<li><strong>记住过渡的使用口诀： 谁做过渡给谁加</strong></li>
</ul>
<p><img src="/images/%E8%BF%90%E5%8A%A8%E6%9B%B2%E7%BA%BF.png"></p>
<h4 id="过渡练习"><a href="#过渡练习" class="headerlink" title="过渡练习"></a>过渡练习</h4><p><img src="/images/%E8%BF%9B%E5%BA%A6%E6%9D%A1.png"></p>
<p>步骤：</p>
<ul>
<li>创建两个div的盒子，属于的嵌套关系，外层类名叫 bar，里层类名叫 bar_in</li>
<li>给外层的bar 这个盒子设置边框，宽高，圆角边框</li>
<li>给里层的bar_in  设置 初试的宽度，背景颜色，过渡效果</li>
<li>给外层的 bar 添加 hover事件，当触发了hover事件 让里层的bar_in 来进行宽度的变化</li>
</ul>
<p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.bar</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">7px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.bar_in</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 谁做过渡给谁加 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: all .<span class="number">7s</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.bar</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.bar_in</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar_in&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="广义H5说法-了解"><a href="#广义H5说法-了解" class="headerlink" title="广义H5说法 了解"></a>广义H5说法 了解</h1><h3 id="狭隘H5"><a href="#狭隘H5" class="headerlink" title="狭隘H5"></a>狭隘H5</h3><p><img src="/images/%E5%B9%BF%E4%B9%89H5.png"></p>
<h3 id="广义H5"><a href="#广义H5" class="headerlink" title="广义H5"></a>广义H5</h3><ul>
<li>广义的 HTML5 是 HTML5 本身 + CSS3 + JavaScript 。</li>
<li>这个集合有时称为 HTML5 和朋友，通常缩写为 HTML5 。</li>
<li>虽然 HTML5 的一些特性仍然不被某些浏览器支持，但是它是一种发展趋势。</li>
<li>HTML5 MDN 介绍：<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/HTML">https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/HTML</a></li>
</ul>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css选择器和文本属性（一）</title>
    <url>/2022/04/02/css%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p>###css简介<br>    CSS 是层叠样式表 ( Cascading Style Sheets ) 的简称.<br>    有时我们也会称之为 CSS 样式表或级联样式表。<br>    CSS 是也是一种标记语言<br>    CSS 主要用于设置 HTML 页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及版面的布局和外观显示样式。<br>    CSS 让我们的网页更加丰富多彩，布局更加灵活自如。简单理解：CSS 可以美化 HTML , 让 HTML 更漂亮， 让页面布局更简单。<br>    CSS 最大价值: 由 HTML 专注去做结构呈现，样式交给 CSS，即 结构 ( HTML ) 与样式( CSS ) 相分离</p>
<p><img src="/images/%E5%B0%8F%E9%B8%9F.png"></p>
<p>###css语法规范<br>    1.使用 HTML 时，需要遵从一定的规范，CSS 也是如此。要想熟练地使用 CSS 对网页进行修饰，首先需要了解CSS 样式规则。<br>    2.CSS 规则由两个主要的部分构成：选择器以及一条或多条声明。</p>
<p><img src="/images/css%E5%B1%9E%E6%80%A7%E8%A7%84%E5%88%99.png"></p>
<p> 1.选择器是用于指定 CSS 样式的 HTML 标签，花括号内是对该对象设置的具体样式<br> 2.属性和属性值以“键值对”的形式出现<br> 3.属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等<br> 4.属性和属性值之间用英文“:”分开<br> 5.多个“键值对”之间用英文“;”进行区分<br> 例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">所有的样式，都包含在 &lt;style&gt; 标签内，表示是样式表。&lt;style&gt; 一般写到 &lt;/head&gt; 上方</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;style&gt;</span><br><span class="line">            h4 &#123;</span><br><span class="line">                color: blue;</span><br><span class="line">                font-size: 100px;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/style&gt;</span><br><span class="line">    &lt;/head&gt;</span><br></pre></td></tr></table></figure>

<p>###css代码风格：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 样式格式书写</span><br><span class="line">        1.紧凑格式   </span><br><span class="line">            h3 &#123; color: deeppink;font-size: 20px;&#125;</span><br><span class="line">        2.展开格式   </span><br><span class="line">         h3 &#123;</span><br><span class="line">            color: pink;</span><br><span class="line">            font-size: 20px;    </span><br><span class="line">         &#125;</span><br><span class="line">    强烈推荐第二种格式， 因为更直观。</span><br><span class="line">    2. 样式大小写风格</span><br><span class="line">        1.小写格式</span><br><span class="line">            h3 &#123;</span><br><span class="line">                color: pink;</span><br><span class="line">            &#125;</span><br><span class="line">        2.大写格式</span><br><span class="line">             H3 &#123;</span><br><span class="line">                COLOR: PINK;   </span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<p>​    强烈推荐样式选择器，属性名，属性值关键字全部使用小写字母，特殊情况除外。<br>​    3. 样式空格风格<br>​<br>​       <code>​        1. h3 &#123; ​                   color: pink;     ​               &#125; ​      </code><br>​<br>​       ​    属性值前面，冒号后面，保留一个空格<br>​       ​    选择器（标签）和大括号中间保留空格<br>​       ###css选择器的作用<br>​       ​    答：选择器(选择符)就是根据不同需求把不同的标签选出来这就是选择器的作用。  简单来说，就是选择标签用的。<br>​       ​    <img src="/images/css%E5%B1%9E%E6%80%A7%E8%A7%84%E5%88%99.png"><br>​       ​    找到所有的 h1 标签。  选择器（选对人）<br>​       ​    设置这些标签的样式，比如颜色为红色（做对事）。<br>​       ##css基础选择器</p>
<p>基础选择器又包括：标签选择器、类选择器、id 选择器和通配符选择器<br>###标签选择器：<br>    标签选择器（元素选择器）是指用 HTML 标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的 CSS 样式。<br>语法：<br>    标签选择器{<br>        属性：属性值<br>        …<br>    }<br>作用：<br>    标签选择器（元素选择器）是指用 HTML 标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的 CSS 样式。<br>###类选择器<br>    如果想要差异化选择不同的标签，单独选一个或者某几个标签，可以使用类选择器.<br>语法：<br>    .类名 {<br>        属性1: 属性值1;<br>        …<br>    }<br>    结构需要用class属性来调用  class  类的意思</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;类名&quot;&gt; 变红色 &lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>​    1.如果想要差异化选择不同的标签，单独选一个或者某几个标签，可以使用类选择器。<br>​    2.类选择器在 HTML 中以 class 属性表示，在 CSS 中，类选择器以一个点“.”号显示。<br>​    3.类选择器使用“.”（英文点号）进行标识，后面紧跟类名（自定义，我们自己命名的）。<br>​    4.可以理解为给这个标签起了一个名字，来表示。<br>​    5.长名称或词组可以使用中横线来为选择器命名。<br>​    6.不要使用纯数字、中文等命名，尽量使用英文字母来表示。<br>​    7.命名要有意义，尽量使别人一眼就知道这个类名的目的。<br>​    8.命名规范：见附件（ Web 前端开发规范手册.doc）<br>###多类名选择器<br>​    我们可以给一个标签指定多个类名，从而达到更多的选择目的。 这些类名都可以选出这个标签.<br>​    简单理解就是一个标签有多个名字. </p>
<p><img src="/images/%E6%B7%98%E5%AE%9D%E7%BD%91%E5%A4%9A%E7%B1%BB%E5%90%8D.png"><br>    多类名的具体使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. &lt;div class=&quot;red font20&quot;&gt;亚瑟&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>​    注意：<br>​        1.在标签class 属性中写 多个类名<br>​        2.多个类名中间必须用空格分开<br>​        3.这个标签就可以分别具有这些类名的样式<br>###id选择器：<br>​    id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。<br>​    HTML 元素以 id 属性来设置 id 选择器，CSS 中 id 选择器以“#” 来定义。<br>​    语法：<br>​         #id名 {<br>​            属性1: 属性值1;<br>​            …<br>​        }<br>​        注意：id 属性只能在每个 HTML 文档中出现一次<br>###id选择器和类选择器的区别：<br>​    1.类选择器（class）好比人的名字，一个人可以有多个名字，同时一个名字也可以被多个人使用。<br>​    2.id 选择器好比人的身份证号码，全中国是唯一的，不得重复。<br>​    3.id 选择器和类选择器最大的不同在于使用次数上。<br>​    4.类选择器在修改样式中用的最多，id 选择器一般用于页面唯一性的元素上，经常和 JavaScript 搭配使用。</p>
<p><img src="/images/id%E4%B8%8E%E7%B1%BB%E5%90%8D%E7%9A%84%E5%8C%BA%E5%88%AB.png"><br>###通配符选择器：<br>    语法：<br>        * {<br>            属性1: 属性值1;<br>            …<br>        }<br>    通配符选择器不需要调用， 自动就给所有的元素使用样式<br>    特殊情况才使用，后面讲解使用场景(以下是清除所有的元素标签的内外边距,后期讲)<br>     * {<br>            margin: 0;<br>            padding: 0;<br>        }<br>###选择器总结</p>
<p><img src="/images/%E5%9F%BA%E7%A1%80%E9%80%89%E6%8B%A9%E5%99%A8%E6%80%BB%E7%BB%93.png"></p>
<p>##css字体属性:<br>###字体大小：<br>    CSS 使用 font-size 属性定义字体大小。<br>语法：<br>     p {<br>        font-size: 20px;<br>    }<br>    1.px（像素）大小是我们网页的最常用的单位<br>    2.谷歌浏览器默认的文字大小为16px<br>    3.不同浏览器可能默认显示的字号大小不一致，我们尽量给一个明确值大小，不要默认大小<br>    4.可以给 body 指定整个页面文字的大小<br>###字体粗细：<br>    CSS 使用 font-weight 属性设置文本字体的粗细。<br>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p &#123;  </span><br><span class="line">        font-weight: bold; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E5%AD%97%E4%BD%93%E7%B2%97%E7%BB%86.png"></p>
<p>1.学会让加粗标签（比如 h 和 strong 等) 不加粗，或者其他标签加粗<br>2.实际开发时，我们更喜欢用数字表示粗细<br>###字体样式：<br>    CSS 使用 font-style 属性设置文本的风格。<br>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p &#123;  </span><br><span class="line">     font-style: normal;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E6%96%87%E5%AD%97%E5%80%BE%E6%96%9C.png"></p>
<p>###字体的综合写法</p>
<p>字体属性可以把以上文字样式综合来写, 这样可以更节约代码:</p>
<p> body {   font: font-style  font-weight  font-size&#x2F;line-height  font-family;}</p>
<p>使用 font 属性时，必须按上面语法格式中的顺序书写，不能更换顺序，并且各个属性间以空格隔开 不需要设置的属性可以省略（取默认值），但必须保留 font-size 和 font-family 属性，否则 font 属性将不起作用</p>
<p>###字体总结：</p>
<p><img src="/images/%E5%AD%97%E4%BD%93%E6%80%BB%E7%BB%93.png"></p>
<p>##css文本属性：<br>###文本颜色：<br>    color 属性用于定义文本的颜色。<br>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div &#123; </span><br><span class="line">       color: red;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E9%A2%9C%E8%89%B2%E5%80%BC.png"></p>
<p>开发中最常用的是十六进制<br>###文本对齐：<br>text-align 属性用于设置元素内文本内容的水平对齐方式。<br>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div &#123; </span><br><span class="line">       text-align: center;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E5%AF%B9%E9%BD%90%E6%96%87%E6%9C%AC.png"></p>
<p>###修饰文本：<br>    语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<p> div {<br>        text-decoration：underline；<br>     }</p>
<p><img src="/images/%E4%BF%AE%E9%A5%B0%E6%96%87%E6%9C%AC.png"></p>
<p>重点记住如何添加下划线 ? 如何删除下划线 ? 其余了解即可.</p>
<p>###文本缩进<br>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div &#123; </span><br><span class="line">      text-indent：20px；</span><br><span class="line">  &#125;</span><br><span class="line">  div &#123; </span><br><span class="line">      text-indent：2em；</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E6%96%87%E6%9C%AC%E7%BC%A9%E8%BF%9B.png"></p>
<pre><code>em 是一个相对单位，就是当前元素（font-size) 1 个文字的大小, 如果当前元素没有设置大小，则会按照父元素的 1 个文字大小。
</code></pre>
<p>###行间距：<br>    line-height 属性用于设置行间的距离（行高）。可以控制文字行与行之间的距离<br>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p &#123; </span><br><span class="line">        line-height: 26px;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>​    行高的文本分为 上间距  文本高度 下间距 &#x3D; 行间距<br>##css样式表：<br>​    按照 CSS 样式书写的位置（或者引入的方式），CSS 样式表可以分为三大类：<br>###行内样式表（行内式）<br>​        行内样式表（内联样式表）是在元素标签内部的 style 属性中设定 CSS 样式。适合于修改简单样式.<br>​        语法：<br>​           </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div style=&quot;color: red; font-size: 12px;&quot;&gt;青春不常在，抓紧谈恋爱&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>​        1.style 其实就是标签的属性<br>​        在双引号中间，写法要符合 CSS 规范<br>​        2.可以控制当前的标签设置样式<br>​        3.由于书写繁琐，并且没有体现出结构与样式相分离的思想，所以不推荐大量使用，只有对当前元素添加简单样式的时候，可以考虑使用<br>​        4.使用行内样式表设定 CSS，通常也被称为行内式引入</p>
<p>###内部样式表（嵌入式）<br>        内部样式表（内嵌样式表）是写到html页面内部. 是将所有的 CSS 代码抽取出来，单独放到一个 <style> 标签中<br>        语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">               div &#123;</span><br><span class="line">               color: red;</span><br><span class="line">               font-size: 12px;</span><br><span class="line">               &#125;</span><br><span class="line">           &lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>​       </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 1.&lt;style&gt; 标签理论上可以放在 HTML 文档的任何地方，但一般会放在文档的&lt;head&gt;标签中</span><br><span class="line">        2.通过此种方式，可以方便控制当前整个页面中的元素样式设置</span><br><span class="line">        3.代码结构清晰，但是并没有实现结构与样式完全分离</span><br><span class="line">        4.使用内部样式表设定 CSS，通常也被称为嵌入式引入，这种方式是我们练习时常用的方式</span><br><span class="line">###外部样式表（链接式）</span><br><span class="line">    实际开发都是外部样式表. 适合于样式比较多的情况. 核心是:样式单独写到CSS 文件中，之后把CSS文件引入到 HTML 页面中使用.</span><br><span class="line">    引入外部样式表分为两步：</span><br><span class="line">    1. 新建一个后缀名为 .css 的样式文件，把所有 CSS 代码都放入此文件中。</span><br><span class="line">    2. 在 HTML 页面中，使用&lt;link&gt; 标签引入这个文件。</span><br><span class="line">    语法：</span><br><span class="line">        &lt;link rel=&quot;stylesheet&quot;  href=&quot;css文件路径&quot;&gt;</span><br></pre></td></tr></table></figure>



<p><img src="/images/css%E5%BC%95%E5%85%A5%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93.png"></p>
<p>##Chrome调试工具：</p>
<p><img src="/images/%E8%B0%B7%E6%AD%8C%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7.png"></p>
<p> 1.Ctrl+滚轮 可以放大开发者工具代码大小。<br> 2.左边是 HTML 元素结构，右边是 CSS 样式。<br> 3.右边 CSS 样式可以改动数值（左右箭头或者直接输入）和查看颜色。<br> 4.Ctrl + 0 复原浏览器大小。<br> 5.如果点击元素，发现右侧没有样式引入，极有可能是类名或者样式引入错误。<br> 6.如果有样式，但是样式前面有黄色叹号提示，则是样式属性书写错误。</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css精灵图与图标（七）</title>
    <url>/2022/04/02/css%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">目标：</span><br><span class="line"></span><br><span class="line">​	能够使用精灵图</span><br><span class="line"></span><br><span class="line">​	能够使用字体图标</span><br><span class="line"></span><br><span class="line">​	能够写出 CSS 三角</span><br><span class="line"></span><br><span class="line">​	能够写出常见的 CSS 用户界面样式</span><br><span class="line"></span><br><span class="line">​	能够说出常见的布局技巧</span><br></pre></td></tr></table></figure>


</blockquote>
<h2 id="1-精灵图（重点）"><a href="#1-精灵图（重点）" class="headerlink" title="1. 精灵图（重点）"></a>1. 精灵图（重点）</h2><h3 id="1-1-为什么需要精灵图"><a href="#1-1-为什么需要精灵图" class="headerlink" title="1.1 为什么需要精灵图"></a>1.1 为什么需要精灵图</h3><p><img src="/images/1571482435259.png" alt="1571482435259"></p>
<p>一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接收和发送请求图片，造成服务器请求压力过大，这将大大降低页面的加载速度。</p>
<p><strong>为什么使用精灵图（目的）：</strong></p>
<p>​    <strong>为了有效地减少服务器接收和发送请求的次数</strong>，<strong>提高</strong>页面的<strong>加载速度</strong>，出现了 <strong>CSS 精灵技术</strong>（也称 CSS Sprites、CSS 雪碧）。</p>
<p><strong>核心原理</strong>：</p>
<p>​    将网页中的一些小背景图像整合到一张大图中 ，这样服务器只需要一次请求就可以了。</p>
<p><strong>精灵图举例</strong>:</p>
<p><img src="/images/1571519067073.png" alt="1571519067073"></p>
<h3 id="1-2-精灵图（sprites）的使用"><a href="#1-2-精灵图（sprites）的使用" class="headerlink" title="1.2 精灵图（sprites）的使用"></a>1.2 精灵图（sprites）的使用</h3><p>使用精灵图核心：</p>
<ol>
<li>精灵技术主要针对于背景图片使用。就是把多个小背景图片整合到一张大图片中。</li>
<li>这个大图片也称为 sprites  精灵图  或者 雪碧图</li>
<li>移动背景图片位置， 此时可以使用 background-position 。</li>
<li>移动的距离就是这个目标图片的 x 和 y 坐标。注意网页中的坐标有所不同</li>
<li>因为一般情况下都是往上往左移动，所以数值是负值。</li>
<li>使用精灵图的时候需要精确测量，每个小背景图片的大小和位置。</li>
</ol>
<p>使用精灵图核心总结：</p>
<ol>
<li><p>精灵图主要<strong>针对于小的背景图片</strong>使用。</p>
</li>
<li><p>主要借助于背景位置来实现—<strong>background-position</strong> 。</p>
</li>
<li><p>一般情况下精灵图都是<strong>负值</strong>。（千万注意网页中的坐标： x轴右边走是正值，左边走是负值， y轴同理。）</p>
</li>
</ol>
<h3 id="1-3-案例：拼出自己名字"><a href="#1-3-案例：拼出自己名字" class="headerlink" title="1.3 案例：拼出自己名字"></a>1.3 案例：拼出自己名字</h3><h4 id="1-3-1-案例效果"><a href="#1-3-1-案例效果" class="headerlink" title="1.3.1 案例效果"></a>1.3.1 案例效果</h4><p><img src="/images/1571519368229.png" alt="1571519368229"></p>
<h4 id="1-3-2-代码参考"><a href="#1-3-2-代码参考" class="headerlink" title="1.3.2 代码参考"></a>1.3.2 代码参考</h4><p>结构</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;p&quot;</span>&gt;</span>p<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;i&quot;</span>&gt;</span>i<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;n&quot;</span>&gt;</span>n<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;k&quot;</span>&gt;</span>k<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">images/abcd.jpg</span>) no-repeat;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.p</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">112px</span>;</span><br><span class="line">    <span class="comment">/* background-color: pink; */</span></span><br><span class="line">    <span class="attribute">background-position</span>:  -<span class="number">493px</span> -<span class="number">276px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.i</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">108px</span>;</span><br><span class="line">    <span class="comment">/* background-color: pink; */</span></span><br><span class="line">    <span class="attribute">background-position</span>: -<span class="number">327px</span> -<span class="number">142px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.n</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">108px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">109px</span>;</span><br><span class="line">    <span class="comment">/* background-color: pink; */</span></span><br><span class="line">    <span class="attribute">background-position</span>: -<span class="number">215px</span> -<span class="number">141px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.k</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">105px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">114px</span>;</span><br><span class="line">    <span class="comment">/* background-color: pink; */</span></span><br><span class="line">    <span class="attribute">background-position</span>: -<span class="number">495px</span> -<span class="number">142px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-字体图标"><a href="#2-字体图标" class="headerlink" title="2. 字体图标"></a>2. 字体图标</h2><h3 id="2-1-字体图标的产生"><a href="#2-1-字体图标的产生" class="headerlink" title="2.1 字体图标的产生"></a>2.1 字体图标的产生</h3><p>字体图标使用场景：  主要用于显示网页中通用、常用的一些小图标。</p>
<p>精灵图是有诸多优点的，但是缺点很明显。</p>
<p>1.图片文件还是比较大的。</p>
<p>2.图片本身放大和缩小会失真。</p>
<p>3.一旦图片制作完毕想要更换非常复杂。</p>
<p>此时，有一种技术的出现很好的解决了以上问题，就是<strong>字体图标 iconfont</strong>。</p>
<p><strong>字体图标</strong>可以为前端工程师提供一种方便高效的图标使用方式，<strong>展示的是图标，本质属于字体</strong>。</p>
<h3 id="2-2-字体图标的优点"><a href="#2-2-字体图标的优点" class="headerlink" title="2.2 字体图标的优点"></a>2.2 字体图标的优点</h3><p><strong>轻量级</strong>：一个图标字体要比一系列的图像要小。一旦字体加载了，图标就会马上渲染出来，减少了服务器请求</p>
<ul>
<li>灵活性：本质其实是文字，可以很随意的改变颜色、产生阴影、透明效果、旋转等</li>
<li>兼容性：几乎支持所有的浏览器，请放心使用</li>
<li>注意： 字体图标不能替代精灵技术，只是对工作中图标部分技术的提升和优化。</li>
</ul>
<p><strong>总结：</strong></p>
<p>1.如果遇到一些结构和样式比较简单的小图标，就用字体图标。<img src="/images/1571519724473.png" alt="1571519724473"></p>
<p>2.如果遇到一些结构和样式复杂一点的小图片，就用精灵图。</p>
<p><img src="/images/1571519739775.png" alt="1571519739775"></p>
<p><strong>使用步骤</strong></p>
<p>字体图标是一些网页常见的小图标，我们直接网上下载即可。 因此使用可以分为：</p>
<p>1.字体图标的下载 </p>
<p>2.字体图标的引入 （引入到我们html页面中）</p>
<p>3.字体图标的追加 （以后添加新的小图标）</p>
<h3 id="2-3-字体图标的下载"><a href="#2-3-字体图标的下载" class="headerlink" title="2.3 字体图标的下载"></a><strong>2.3</strong> <strong>字体图标的下载</strong></h3><p><strong>推荐下载网站：</strong></p>
<ul>
<li><strong>icomoon</strong> <strong>字库</strong>  <a href="http://icomoon.io/">http://icomoon.io</a>    推荐指数  <strong>★★★★★</strong></li>
</ul>
<p>IcoMoon 成立于 2011 年，推出了第一个自定义图标字体生成器，它允许用户选择所需要的图标，使它们成一字型。该字库内容种类繁多，非常全面，唯一的遗憾是国外服务器，打开网速较慢。</p>
<ul>
<li><strong>阿里</strong> <strong>iconfont</strong> <strong>字库</strong>   <a href="http://www.iconfont.cn/">http://www.iconfont.cn/</a>   推荐指数   <strong>★★★★★</strong></li>
</ul>
<p>这个是阿里妈妈 M2UX 的一个 iconfont 字体图标字库，包含了淘宝图标库和阿里妈妈图标库。可以使用 AI制作图标上传生成。 重点是，免费！</p>
<h3 id="2-4-字体图标的引入"><a href="#2-4-字体图标的引入" class="headerlink" title="2.4 字体图标的引入"></a><strong>2.4</strong> <strong>字体图标的引入</strong></h3><p><strong>下载完毕之后，注意原先的文件不要删，后面会用</strong>。</p>
<ol>
<li>把下载包里面的 <strong>fonts</strong> 文件夹放入页面根目录下</li>
</ol>
<p><img src="/images/1571520092646.png" alt="1571520092646"></p>
<ul>
<li><strong>字体文件格式</strong></li>
</ul>
<p>不同浏览器所支持的字体格式是不一样的，字体图标之所以兼容，就是因为包含了主流浏览器支持的字体文件。</p>
<p>1).TureType(  <strong>.ttf</strong>  )格式.ttf字体是Windows和Mac的最常见的字体，支持这种字体的浏览器有IE9+、Firefox3.5+、Chrome4+、Safari3+、Opera10+、iOS Mobile、Safari4.2+；</p>
<p>2).Web Open Font Format( <strong>.woff</strong> )格式woff字体，支持这种字体的浏览器有IE9+、Firefox3.5+、Chrome6+、Safari3.6+、Opera11.1+；</p>
<p>3).Embedded Open Type( <strong>.eot</strong> )格式.eot字体是IE专用字体，支持这种字体的浏览器有IE4+；</p>
<p>4).SVG(  .<strong>svg</strong>  )格式.svg字体是基于SVG字体渲染的一种格式，支持这种字体的浏览器有Chrome4+、Safari3.1+、Opera10.0+、iOS Mobile Safari3.2+；</p>
<p>2.在 CSS 样式中全局声明字体： 简单理解把这些字体文件通过css引入到我们页面中。</p>
<p>一定注意字体文件路径的问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@font-face &#123;</span><br><span class="line">  font-family: &#x27;icomoon&#x27;;</span><br><span class="line">  src:  url(&#x27;fonts/icomoon.eot?7kkyc2&#x27;);</span><br><span class="line">  src:  url(&#x27;fonts/icomoon.eot?7kkyc2#iefix&#x27;) format(&#x27;embedded-opentype&#x27;),</span><br><span class="line">    url(&#x27;fonts/icomoon.ttf?7kkyc2&#x27;) format(&#x27;truetype&#x27;),</span><br><span class="line">    url(&#x27;fonts/icomoon.woff?7kkyc2&#x27;) format(&#x27;woff&#x27;),</span><br><span class="line">    url(&#x27;fonts/icomoon.svg?7kkyc2#icomoon&#x27;) format(&#x27;svg&#x27;);</span><br><span class="line">  font-weight: normal;</span><br><span class="line">  font-style: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ol start="3">
<li>html 标签内添加小图标。</li>
</ol>
<p><img src="/images/1571520411345.png" alt="1571520411345"></p>
<ol start="4">
<li>给标签定义字体。</li>
</ol>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">span &#123;</span><br><span class="line">  font-family: &quot;icomoon&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  注意：务必保证 这个字体和上面@font-face里面的字体保持一致 </p>
<p>  <img src="/images/1571520485350.png" alt="1571520485350"></p>
<h3 id="2-5-字体图标的追加"><a href="#2-5-字体图标的追加" class="headerlink" title="2.5 字体图标的追加"></a>2.5 字体图标的追加</h3><p>如果工作中，原来的字体图标不够用了，我们需要添加新的字体图标到原来的字体文件中。</p>
<p>把压缩包里面的 <strong>selection.json</strong> 从新上传，然后选中自己想要新的图标，从新下载压缩包，并替换原来的文件即可。</p>
<p><img src="/images/1571520554317.png" alt="1571520554317"></p>
<h3 id="2-6-字体图标加载的原理："><a href="#2-6-字体图标加载的原理：" class="headerlink" title="2.6 字体图标加载的原理："></a>2.6 字体图标加载的原理：</h3><p><img src="/images/%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%8E%9F%E7%90%86.gif" alt="1571520617270"></p>
<h2 id="3-CSS-三角"><a href="#3-CSS-三角" class="headerlink" title="3. CSS 三角"></a>3. CSS 三角</h2><h3 id="3-1-介绍"><a href="#3-1-介绍" class="headerlink" title="3.1 介绍"></a>3.1 介绍</h3><p>网页中常见一些三角形，使用 CSS 直接画出来就可以，不必做成图片或者字体图标。</p>
<p>一张图， 你就知道 CSS 三角是怎么来的了, 做法如下：</p>
<p><img src="/images/1571520965966.png" alt="1571520965966"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">0</span>; </span><br><span class="line">   <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">border</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line"><span class="attribute">border-color</span>: red green blue black;</span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">0</span>;</span><br><span class="line">   <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>我们用css 边框可以模拟三角效果</li>
<li>宽度高度为0</li>
<li>我们4个边框都要写， 只保留需要的边框颜色，其余的不能省略，都改为 transparent 透明就好了</li>
<li>为了照顾兼容性 低版本的浏览器，加上 font-size: 0;  line-height: 0;</li>
</ol>
<h3 id="3-2-案例：京东三角"><a href="#3-2-案例：京东三角" class="headerlink" title="3.2 案例：京东三角"></a>3.2 案例：京东三角</h3><h4 id="3-2-1效果图"><a href="#3-2-1效果图" class="headerlink" title="3.2.1效果图"></a>3.2.1效果图</h4><p><img src="/images/1571521183026.png" alt="1571521183026"></p>
<h4 id="3-2-2-代码参考"><a href="#3-2-2-代码参考" class="headerlink" title="3.2.2 代码参考"></a>3.2.2 代码参考</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS 三角制作<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* border: 10px solid pink; */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-top</span>: <span class="number">10px</span> solid pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-right</span>: <span class="number">10px</span> solid red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-bottom</span>: <span class="number">10px</span> solid blue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-left</span>: <span class="number">10px</span> solid green;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">50px</span> solid transparent;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-left-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.jd</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">249px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.jd</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">right</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: -<span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 为了照顾兼容性 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">0</span>;  </span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">5px</span> solid transparent;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-bottom-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;jd&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="4-CSS-用户界面样式"><a href="#4-CSS-用户界面样式" class="headerlink" title="4. CSS 用户界面样式"></a>4. CSS 用户界面样式</h2><p><strong>什么是界面样式</strong></p>
<p>所谓的界面样式，就是更改一些用户操作样式，以便提高更好的用户体验。</p>
<ul>
<li>更改用户的鼠标样式 </li>
<li>表单轮廓</li>
<li>防止表单域拖拽</li>
</ul>
<h3 id="4-1-鼠标样式-cursor"><a href="#4-1-鼠标样式-cursor" class="headerlink" title="4.1 鼠标样式 cursor"></a>4.1 鼠标样式 cursor</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">	<span class="attribute">cursor</span>: pointer; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。</p>
<p><img src="/images/1571521805183.png" alt="1571521805183"></p>
<h3 id="4-2-轮廓线-outline"><a href="#4-2-轮廓线-outline" class="headerlink" title="4.2 轮廓线 outline"></a>4.2 轮廓线 outline</h3><p>给表单添加 outline: 0;   或者  outline: none; 样式之后，就可以去掉默认的蓝色边框。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">	<span class="attribute">outline</span>: none; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-3-防止拖拽文本域-resize"><a href="#4-3-防止拖拽文本域-resize" class="headerlink" title="4.3 防止拖拽文本域 resize"></a>4.3 防止拖拽文本域 resize</h3><p> 实际开发中，我们文本域右下角是不可以拖拽的。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">textarea</span>&#123; </span><br><span class="line">	<span class="attribute">resize</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>vertical-align 属性应用</p>
<h2 id="5-vertical-align-属性应用"><a href="#5-vertical-align-属性应用" class="headerlink" title="5. vertical-align 属性应用"></a>5. vertical-align 属性应用</h2><p>CSS 的 <strong>vertical-align</strong> 属性使用场景： 经常用于设置图片或者表单(行内块元素）和文字垂直对齐。</p>
<p>官方解释： 用于设置一个元素的<strong>垂直对齐方式</strong>，但是它只针对于行内元素或者行内块元素有效。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">vertical-align</span> : baseline | top | middle | bottom </span><br></pre></td></tr></table></figure>

<p><img src="/images/1571522023413.png" alt="1571522023413"></p>
<p><img src="/images/1571522040645.png" alt="1571522040645"></p>
<h3 id="5-1-图片、表单和文字对齐"><a href="#5-1-图片、表单和文字对齐" class="headerlink" title="5.1 图片、表单和文字对齐"></a><strong>5.1</strong> <strong>图片、表单和文字对齐</strong></h3><p>图片、表单都属于行内块元素，默认的 vertical-align 是基线对齐。</p>
<p><img src="/images/1571522093729.png" alt="1571522093729"></p>
<p>此时可以给图片、表单这些行内块元素的 <strong>vertical-align 属性设置为 middle</strong> 就可以让文字和图片垂直居中对齐了。</p>
<h3 id="5-2-解决图片底部默认空白缝隙问题"><a href="#5-2-解决图片底部默认空白缝隙问题" class="headerlink" title="5.2 解决图片底部默认空白缝隙问题"></a>5.2 解决图片底部默认空白缝隙问题</h3><p>bug：图片底侧会有一个空白缝隙，原因是行内块元素会和文字的基线对齐。</p>
<p>主要解决方法有两种：</p>
<p>1.<strong>给图片</strong>添加 <strong>vertical-align:middle | top| bottom</strong> 等。 （提倡使用的）</p>
<p>2.把图片转换为块级元素  <strong>display: block</strong>; </p>
<p><img src="/images/1571522162225.png" alt="1571522162225"></p>
<h2 id="6-溢出的文字省略号显示"><a href="#6-溢出的文字省略号显示" class="headerlink" title="6. 溢出的文字省略号显示"></a>6. 溢出的文字省略号显示</h2><h3 id="6-1-单行文本溢出显示省略号"><a href="#6-1-单行文本溢出显示省略号" class="headerlink" title="6.1 单行文本溢出显示省略号"></a>6.1 单行文本溢出显示省略号</h3><p><img src="/images/1571522317809.png" alt="1571522317809"></p>
<p>单行文本溢出显示省略号–必须满足三个条件：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*1. 先强制一行内显示文本*/</span></span><br><span class="line"> <span class="attribute">white-space</span>: nowrap;  （ 默认 <span class="attribute">normal</span> 自动换行）</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*2. 超出的部分隐藏*/</span></span><br><span class="line"> <span class="attribute">overflow</span>: hidden;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*3. 文字用省略号替代超出的部分*/</span></span><br><span class="line"> <span class="attribute">text-overflow</span>: ellipsis;</span><br></pre></td></tr></table></figure>



<h3 id="6-2-多行文本溢出显示省略号（了解）"><a href="#6-2-多行文本溢出显示省略号（了解）" class="headerlink" title="6.2 多行文本溢出显示省略号（了解）"></a>6.2 多行文本溢出显示省略号（了解）</h3><p><img src="/images/1571522334591.png" alt="1571522334591"></p>
<p>多行文本溢出显示省略号，<strong>有较大兼容性问题</strong>，适合于webKit浏览器或移动端（移动端大部分是webkit内核）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*1. 超出的部分隐藏 */</span></span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*2. 文字用省略号替代超出的部分 */</span></span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3. 弹性伸缩盒子模型显示 */</span></span><br><span class="line"><span class="attribute">display</span>: -webkit-box;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 4. 限制在一个块元素显示的文本的行数 */</span></span><br><span class="line">-webkit-line-clamp: <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 5. 设置或检索伸缩盒对象的子元素的排列方式 */</span></span><br><span class="line">-webkit-box-orient: vertical;</span><br></pre></td></tr></table></figure>

<p><strong>更推荐让后台人员来做这个效果，因为后台人员可以设置显示多少个字，操作更简单。</strong></p>
<h2 id="7-常见布局技巧"><a href="#7-常见布局技巧" class="headerlink" title="7. 常见布局技巧"></a>7. 常见布局技巧</h2><p><strong>巧妙利用一个技术更快更好的布局：</strong></p>
<ol>
<li>margin负值的运用</li>
<li>文字围绕浮动元素</li>
<li>行内块的巧妙运用</li>
<li>CSS三角强化</li>
</ol>
<h3 id="7-1-margin负值运用"><a href="#7-1-margin负值运用" class="headerlink" title="7.1. margin负值运用"></a>7.1. margin负值运用</h3><p><img src="/images/1571522666082.png" alt="1571522666082"></p>
<p><img src="/images/1571522683897.png" alt="1571522683897"></p>
<p>1.让每个盒子margin 往左侧移动 -1px 正好压住相邻盒子边框</p>
<p>2.鼠标经过某个盒子的时候，提高当前盒子的层级即可（如果没有有定位，则加相对定位（保留位置），如果有定位，则加z-index）</p>
<h3 id="7-2-文字围绕浮动元素"><a href="#7-2-文字围绕浮动元素" class="headerlink" title="7.2 文字围绕浮动元素"></a>7.2 文字围绕浮动元素</h3><p><strong>效果</strong></p>
<p><img src="/images/1571522777745.png" alt="1571522777745"></p>
<p><strong>布局示意图</strong></p>
<p><img src="/images/1571522761996.png" alt="1571522761996"></p>
<p><strong>巧妙运用浮动元素不会压住文字的特性</strong></p>
<h3 id="7-3-行内块巧妙运用"><a href="#7-3-行内块巧妙运用" class="headerlink" title="7.3 行内块巧妙运用"></a>7.3 行内块巧妙运用</h3><p><img src="/images/1571522898744.png" alt="1571522898744"></p>
<p>页码在页面中间显示:</p>
<ol>
<li>把这些链接盒子转换为行内块， 之后给父级指定  text-align:center;</li>
<li>利用行内块元素中间有缝隙，并且给父级添加 text-align:center; 行内块元素会水平会居中</li>
</ol>
<p><img src="/images/1571522910580.png" alt="1571522910580"></p>
<h3 id="7-4-CSS-三角强化-案例"><a href="#7-4-CSS-三角强化-案例" class="headerlink" title="7.4. CSS 三角强化 案例"></a>7.4. CSS 三角强化 案例</h3><h4 id="7-4-1-原理"><a href="#7-4-1-原理" class="headerlink" title="7.4.1 原理"></a><strong>7.4.1 原理</strong></h4><p><img src="/images/1571550959181.png" alt="1571550959181"></p>
<p><img src="/images/1571551000391.png" alt="1571551000391"></p>
<p><img src="/images/1571548058053.png" alt="1571548058053"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 把上边框宽度调大 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* border-top: 100px solid transparent;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        border-right: 50px solid skyblue; */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 左边和下边的边框宽度设置为0 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* border-bottom: 0 solid blue;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        border-left: 0 solid green; */</span></span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 1.只保留右边的边框有颜色 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-color</span>: transparent red transparent transparent;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 2. 样式都是solid */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-style</span>: solid;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 3. 上边框宽度要大， 右边框 宽度稍小， 其余的边框该为 0 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-width</span>: <span class="number">100px</span> <span class="number">50px</span> <span class="number">0</span> <span class="number">0</span> ;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="7-4-2-案例效果"><a href="#7-4-2-案例效果" class="headerlink" title="7.4.2 案例效果"></a>7.4.2 案例效果</h4><p><img src="/images/1571548099631.png" alt="1571548099631"></p>
<h4 id="7-4-3-代码参考"><a href="#7-4-3-代码参考" class="headerlink" title="7.4.3 代码参考"></a><strong>7.4.3 代码参考</strong></h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS三角强化的巧妙运用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.price</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">160px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">line-height</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.miaosha</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">90px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-color</span>:red;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">font-weight</span>: <span class="number">700</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin-right</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.miaosha</span> <span class="selector-tag">i</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border-color</span>: transparent <span class="number">#fff</span> transparent transparent;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border-style</span>: solid;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border-width</span>: <span class="number">24px</span> <span class="number">10px</span> <span class="number">0</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.origin</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">color</span>: gray;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">text-decoration</span>: line-through;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;price&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;miaosha&quot;</span>&gt;</span></span><br><span class="line">                ¥1650</span><br><span class="line">                <span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;origin&quot;</span>&gt;</span>¥5650<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="8-CSS-初始化"><a href="#8-CSS-初始化" class="headerlink" title="8. CSS 初始化"></a>8. CSS 初始化</h2><p>不同浏览器对有些标签的默认值是不同的，为了消除不同浏览器对HTML文本呈现的差异，照顾浏览器的兼容，我们需要对CSS 初始化</p>
<p>简单理解： CSS初始化是指重设浏览器的样式。 (也称为CSS reset）</p>
<p>每个网页都必须首先进行 CSS初始化。</p>
<p>这里我们以 京东CSS初始化代码为例。</p>
<p><strong>Unicode编码字体：</strong></p>
<p>把中文字体的名称用相应的Unicode编码来代替，这样就可以有效的避免浏览器解释CSS代码时候出现乱码的问题。</p>
<p>比如：</p>
<p>黑体 \9ED1\4F53<br>宋体 \5B8B\4F53<br>微软雅黑 \5FAE\8F6F\96C5\9ED1</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css盒子模型（三）</title>
    <url>/2022/04/02/css%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h2 id="一、css三大特性"><a href="#一、css三大特性" class="headerlink" title="一、css三大特性"></a>一、css三大特性</h2><h3 id="1、层叠性"><a href="#1、层叠性" class="headerlink" title="1、层叠性"></a>1、层叠性</h3><p>​        相同选择器给设置相同的样式，此时一个样式就会覆盖（层叠）另一个冲突的样式。层叠性主要解决样式冲突的问题</p>
<p>​        层叠性原则:</p>
<ul>
<li>样式冲突，遵循的原则是就近原则，哪个样式离结构近，就执行哪个样式</li>
<li>样式不冲突，不会层叠</li>
</ul>
<p><img src="/images/1571490015544.png" alt="1571490015544"></p>
<h3 id="2、继承性"><a href="#2、继承性" class="headerlink" title="2、继承性"></a>2、继承性</h3><p>​        CSS中的继承: 子标签会继承父标签的某些样式，如文本颜色和字号。恰当地使用继承可以简化代码，降低 CSS 样式的复杂性。</p>
<p><img src="/images/1571490049279.png" alt="1571490049279"></p>
<p>子元素可以继承父元素的样式：</p>
<p>​    </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（text-，font-，line-这些元素开头的可以继承，以及color属性）</span><br></pre></td></tr></table></figure>

<p>继承性口诀：龙生龙，凤生凤，老鼠生的孩子会打洞</p>
<p>行高的继承性：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>:<span class="number">12px</span>/<span class="number">1.5</span> Microsoft YaHei；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>行高可以跟单位也可以不跟单位</li>
<li>如果子元素没有设置行高，则会继承父元素的行高为 1.5</li>
<li>此时子元素的行高是：当前子元素的文字大小 * 1.5</li>
<li>body 行高 1.5  这样写法最大的优势就是里面子元素可以根据自己文字大小自动调整行高</li>
</ul>
<h3 id="3、优先级"><a href="#3、优先级" class="headerlink" title="3、优先级"></a>3、优先级</h3><p>当同一个元素指定多个选择器，就会有优先级的产生。</p>
<ul>
<li>选择器相同，则执行层叠性</li>
<li>选择器不同，则根据选择器权重执行</li>
</ul>
<p>选择器优先级计算表格：</p>
<p><img src="/images/1571490129794.png" alt="1571490129794"></p>
<p>优先级注意点:</p>
<ol>
<li><p>权重是有4组数字组成,但是不会有进位。</p>
</li>
<li><p>可以理解为类选择器永远大于元素选择器, id选择器永远大于类选择器,以此类推..</p>
</li>
<li><p>等级判断从左向右，如果某一位数值相同，则判断下一位数值。</p>
</li>
<li><p>可以简单记忆法:  通配符和继承权重为0, 标签选择器为1,类(伪类)选择器为 10, id选择器 100, 行内样式表为 1000, !important 无穷大.</p>
</li>
<li><p>继承的权重是0， 如果该元素没有直接选中，不管父元素权重多高，子元素得到的权重都是 0。</p>
</li>
</ol>
<p>权重叠加：如果是复合选择器，则会有权重叠加，需要计算权重。</p>
<ul>
<li>div ul  li   ——&gt;      0,0,0,3</li>
<li>.nav ul li   ——&gt;      0,0,1,2</li>
<li>a:hover      —–—&gt;   0,0,1,1</li>
<li>.nav a       ——&gt;      0,0,1,1</li>
</ul>
<h2 id="二、盒子模型"><a href="#二、盒子模型" class="headerlink" title="二、盒子模型"></a>二、盒子模型</h2><h3 id="1、网页布局的本质"><a href="#1、网页布局的本质" class="headerlink" title="1、网页布局的本质"></a>1、网页布局的本质</h3><p>网页布局的核心本质： 就是利用 CSS 摆盒子。</p>
<p><img src="/images/1571492334739.png" alt="1571492334739"></p>
<p>网页布局过程：</p>
<ol>
<li>先准备好相关的网页元素，网页元素基本都是盒子 Box 。</li>
<li>利用 CSS 设置好盒子样式，然后摆放到相应位置。</li>
<li>往盒子里面装内容</li>
</ol>
<h3 id="2、盒子模型（Box-Model）组成"><a href="#2、盒子模型（Box-Model）组成" class="headerlink" title="2、盒子模型（Box Model）组成"></a>2、盒子模型（Box Model）组成</h3><p>​        盒子模型：把 HTML 页面中的布局元素看作是一个矩形的盒子，也就是一个盛装内容的容器。</p>
<p>​        CSS 盒子模型本质上是一个盒子，封装周围的 HTML 元素，它包括：<strong>边框</strong>、<strong>外边距</strong>、<strong>内边距</strong>、和 <strong>实际内容</strong></p>
<p><img src="/images/1571492536942.png" alt="1571492536942"></p>
<h3 id="3、边框（border）"><a href="#3、边框（border）" class="headerlink" title="3、边框（border）"></a>3、边框（border）</h3><h4 id="3-1、边框的使用"><a href="#3-1、边框的使用" class="headerlink" title="3.1、边框的使用"></a>3.1、边框的使用</h4><p>1、border可以设置元素的边框。边框有三部分组成：边框宽度(粗细) 边框样式  边框颜色；</p>
<p>2、语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border</span> : border-width || border-style || border-color;   </span><br></pre></td></tr></table></figure>

<p><img src="/images/1571492659260.png" alt="1571492659260"></p>
<p>边框样式 border-style 可以设置如下值：</p>
<ul>
<li>none：没有边框即忽略所有边框的宽度（默认值）</li>
<li>solid：边框为单实线(最为常用的)</li>
<li>dashed：边框为虚线  </li>
<li>dotted：边框为点线</li>
</ul>
<p>3、边框的合写分写</p>
<p>边框简写：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid red;  </span><br></pre></td></tr></table></figure>

<p>边框分开写法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-top</span>: <span class="number">1px</span> solid red;  <span class="comment">/* 只设定上边框， 其余同理 */</span>   </span><br></pre></td></tr></table></figure>

<h4 id="3-2、表格的细线边框"><a href="#3-2、表格的细线边框" class="headerlink" title="3.2、表格的细线边框"></a>3.2、表格的细线边框</h4><p>1、border-collapse 属性控制浏览器绘制表格边框的方式。它控制相邻单元格的边框。</p>
<p>2、语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-collapse</span>:collapse; </span><br></pre></td></tr></table></figure>

<p>collapse 单词是合并的意思</p>
<p>border-collapse: collapse; 表示相邻边框合并在一起</p>
<h4 id="3-3、边框会影响盒子实际大小"><a href="#3-3、边框会影响盒子实际大小" class="headerlink" title="3.3、边框会影响盒子实际大小"></a>3.3、边框会影响盒子实际大小</h4><p>边框会额外增加盒子的实际大小。因此我们有两种方案解决：</p>
<ul>
<li>测量盒子大小的时候,不量边框。</li>
<li>如果测量的时候包含了边框,则需要 width&#x2F;height 减去边框宽度</li>
</ul>
<h3 id="4、内边距（padding）"><a href="#4、内边距（padding）" class="headerlink" title="4、内边距（padding）"></a>4、内边距（padding）</h3><h4 id="4-1、内边距的使用方式"><a href="#4-1、内边距的使用方式" class="headerlink" title="4.1、内边距的使用方式"></a>4.1、内边距的使用方式</h4><p>1、padding 属性用于设置内边距，即边框与内容之间的距离。</p>
<p>2、语法：</p>
<p>合写属性：</p>
<p><img src="/images/1571493298248.png" alt="1571493298248"></p>
<p>分写属性：</p>
<p><img src="/images/1571493260536.png" alt="1571493260536"></p>
<h4 id="4-2、内边距会影响盒子实际大小"><a href="#4-2、内边距会影响盒子实际大小" class="headerlink" title="4.2、内边距会影响盒子实际大小"></a>4.2、内边距会影响盒子实际大小</h4><p>1、当我们给盒子指定 padding 值之后，发生了 2 件事情：</p>
<ol>
<li>内容和边框有了距离，添加了内边距。</li>
<li>padding影响了盒子实际大小。</li>
</ol>
<p>2、内边距对盒子大小的影响：</p>
<ul>
<li>如果盒子已经有了宽度和高度，此时再指定内边框，会撑大盒子。</li>
<li>如何盒子本身没有指定width&#x2F;height属性, 则此时padding不会撑开盒子大小。</li>
</ul>
<p>3、解决方案：</p>
<p>​        如果保证盒子跟效果图大小保持一致，则让 width&#x2F;height 减去多出来的内边距大小即可。</p>
<h3 id="5、外边距（margin）"><a href="#5、外边距（margin）" class="headerlink" title="5、外边距（margin）"></a>5、外边距（margin）</h3><h4 id="5-1、外边距的使用方式"><a href="#5-1、外边距的使用方式" class="headerlink" title="5.1、外边距的使用方式"></a>5.1、外边距的使用方式</h4><p>margin 属性用于设置外边距，即控制盒子和盒子之间的距离。</p>
<p><img src="/images/1571493741272.png" alt="1571493741272"></p>
<h4 id="5-2、外边距典型应用"><a href="#5-2、外边距典型应用" class="headerlink" title="5.2、外边距典型应用"></a>5.2、外边距典型应用</h4><p>外边距可以让块级盒子水平居中的两个条件：</p>
<ul>
<li>盒子必须指定了宽度（width）。</li>
<li>盒子左右的外边距都设置为 auto 。</li>
</ul>
<p>常见的写法，以下三种都可以：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">margin-left</span>: auto;   <span class="attribute">margin-right</span>: auto;</span><br><span class="line"><span class="attribute">margin</span>: auto;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br></pre></td></tr></table></figure>

<p>注意：以上方法是让块级元素水平居中，行内元素或者行内块元素水平居中给其父元素添加 text-align:center 即可。</p>
<h4 id="5-3、外边距合并"><a href="#5-3、外边距合并" class="headerlink" title="5.3、外边距合并"></a>5.3、外边距合并</h4><p>使用 margin 定义块元素的垂直外边距时，可能会出现外边距的合并。</p>
<p>主要有两种情况:</p>
<p>1、相邻块元素垂直外边距的合并</p>
<p>​        当上下相邻的两个块元素（兄弟关系）相遇时，如果上面的元素有下外边距 margin-bottom，下面的元素有上外边距 margin-top ，则他们之间的垂直间距不是 margin-bottom 与 margin-top 之和。取两个值中的较大者这种现象被称为相邻块元素垂直外边距的合并。</p>
<p><img src="/images/1571494239103.png" alt="1571494239103"></p>
<p>解决方案：<br>        尽量只给一个盒子添加 margin 值。</p>
<p>2、嵌套块元素垂直外边距的塌陷</p>
<p>​        对于两个嵌套关系（父子关系）的块元素，父元素有上外边距同时子元素也有上外边距，此时父元素会塌陷较大的外边距值。</p>
<p><img src="/images/1571494373778.png" alt="1571494373778"></p>
<p>解决方案：</p>
<ul>
<li>可以为父元素定义上边框。</li>
<li>可以为父元素定义上内边距。</li>
<li>可以为父元素添加 overflow:hidden。</li>
</ul>
<h4 id="5-4、清除内外边距"><a href="#5-4、清除内外边距" class="headerlink" title="5.4、清除内外边距"></a>5.4、清除内外边距</h4><p>​        网页元素很多都带有默认的内外边距，而且不同浏览器默认的也不一致。因此我们在布局前，首先要清除下网页元素的内外边距。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">   <span class="attribute">padding</span>:<span class="number">0</span>;   <span class="comment">/* 清除内边距 */</span></span><br><span class="line">   <span class="attribute">margin</span>:<span class="number">0</span>;    <span class="comment">/* 清除外边距 */</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>​        注意：行内元素为了照顾兼容性，尽量只设置左右内外边距，不要设置上下内外边距。但是转换为块级和行内块元素就可以了</p>
<h2 id="三、PS-基本操作"><a href="#三、PS-基本操作" class="headerlink" title="三、PS 基本操作"></a>三、PS 基本操作</h2><p>​        因为网页美工大部分效果图都是利用 PS（Photoshop）来做的，所以以后我们大部分切图工作都是在 PS 里面完成。</p>
<p>​        部分操作：</p>
<ul>
<li>文件→打开 ：可以打开我们要测量的图片</li>
<li>Ctrl+R：可以打开标尺，或者 视图→标尺</li>
<li>右击标尺，把里面的单位改为像素</li>
<li>Ctrl+ 加号(+)可以放大视图， Ctrl+ 减号(-)可以缩小视图</li>
<li>按住空格键，鼠标可以变成小手，拖动 PS 视图</li>
<li>用选区拖动  可以测量大小</li>
<li>Ctrl+ D 可以取消选区，或者在旁边空白处点击一下也可以取消选区</li>
</ul>
<p><img src="/images/1571494543539.png" alt="1571494543539"></p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css复合选择器与各种标签和背景属性（二）</title>
    <url>/2022/04/02/css%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h2 id="一、emmet语法"><a href="#一、emmet语法" class="headerlink" title="一、emmet语法"></a>一、emmet语法</h2><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><p>​        Emmet语法的前身是Zen coding,它使用缩写,来提高html&#x2F;css的编写速度, Vscode内部已经集成该语法。</p>
<p>​        快速生成HTML结构语法</p>
<p>​        快速生成CSS样式语法</p>
<h3 id="2、快速生成HTML结构语法"><a href="#2、快速生成HTML结构语法" class="headerlink" title="2、快速生成HTML结构语法"></a>2、快速生成HTML结构语法</h3><ul>
<li>生成标签 直接输入标签名 按tab键即可   比如  div   然后tab 键， 就可以生成 <div></div></li>
<li>如果想要生成多个相同标签  加上 * 就可以了 比如   div*3  就可以快速生成3个div</li>
<li>如果有父子级关系的标签，可以用 &gt;  比如   ul &gt; li就可以了</li>
<li>如果有兄弟关系的标签，用  +  就可以了 比如 div+p  </li>
<li>如果生成带有类名或者id名字的，  直接写  .demo  或者  #two   tab 键就可以了</li>
<li>如果生成的div 类名是有顺序的， 可以用 自增符号  $ </li>
<li>如果想要在生成的标签内部写内容可以用  { }  表示</li>
</ul>
<h3 id="3、快速生成CSS样式语法"><a href="#3、快速生成CSS样式语法" class="headerlink" title="3、快速生成CSS样式语法"></a>3、快速生成CSS样式语法</h3><p>CSS 基本采取简写形式即可</p>
<p>​        比如 w200   按tab  可以 生成  width: 200px;</p>
<p>​        比如 lh26px   按tab  可以生成  line-height: 26px;</p>
<h3 id="4、快速格式化代码"><a href="#4、快速格式化代码" class="headerlink" title="4、快速格式化代码"></a>4、快速格式化代码</h3><p>Vscode  快速格式化代码:   shift+alt+f</p>
<p>也可以设置 当我们 保存页面的时候自动格式化代码:</p>
<p>1）文件 ——.&gt;【首选项】———-&gt;【设置】；</p>
<p>2）搜索emmet.include;</p>
<p>3）在settings.json下的【工作区设置】中添加以下语句：</p>
<p>​        “editor.formatOnType”: true,</p>
<p>​        “editor.formatOnSave”: true</p>
<h2 id="二、css的复合选择器"><a href="#二、css的复合选择器" class="headerlink" title="二、css的复合选择器"></a>二、css的复合选择器</h2><h3 id="1、什么是复合选择器？"><a href="#1、什么是复合选择器？" class="headerlink" title="1、什么是复合选择器？"></a>1、什么是复合选择器？</h3><p>​        在 CSS 中，可以根据选择器的类型把选择器分为<em><strong>基础选择器</strong></em>和<em><strong>复合选择器</strong></em>，复合选择器是建立在基础选择器之上，对基本选择器进行组合形成的。<br>​        复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的，可以更准确、更高效的选择目标元素（标签）<br>​        常用的复合选择器包括：<strong>后代选择器、子选择器、并集选择器、伪类选择器</strong>等等</p>
<h3 id="2、后代选择器-重要）"><a href="#2、后代选择器-重要）" class="headerlink" title="2、后代选择器 (重要）"></a>2、后代选择器 (重要）</h3><p><strong>定义：</strong></p>
<p>​        后代选择器又称为包含选择器，可以选择父元素里面子元素。其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代。</p>
<p><strong>语法：</strong></p>
<p><img src="/images/01.png" alt="1570867555401"></p>
<p>​        上述语法表示选择元素 1 里面的所有元素 2 (后代元素)。</p>
<p><strong>语法说明</strong>：</p>
<ul>
<li>元素1 和 元素2 中间用空格隔开</li>
<li>元素1 是父级，元素2 是子级，最终选择的是元素2</li>
<li>元素2 可以是儿子，也可以是孙子等，只要是元素1 的后代即可</li>
<li>元素1 和 元素2 可以是任意基础选择器</li>
</ul>
<p><strong>例子：</strong></p>
<p><img src="/images/02.png" alt="1570867652832"></p>
<h3 id="3、子选择器-重要）"><a href="#3、子选择器-重要）" class="headerlink" title="3、子选择器 (重要）"></a>3、子选择器 (重要）</h3><p><strong>定义：</strong></p>
<p>​        子元素选择器（子选择器）只能选择作为某元素的最近一级子元素。</p>
<p>​        （简单理解就是选亲儿子元素）</p>
<p><strong>语法：</strong></p>
<img src="/images/03.png"/>

<p>​        上述语法表示选择元素1 里面的所有直接后代(子元素) 元素2。</p>
<p><strong>语法说明</strong>：</p>
<ul>
<li>元素1 和 元素2 中间用 大于号 隔开</li>
<li>元素1 是父级，元素2 是子级，最终选择的是元素2</li>
<li>元素2 必须是亲儿子，其孙子、重孙之类都不归他管. 你也可以叫他 亲儿子选择器</li>
</ul>
<p><strong>例子：</strong></p>
<p><img src="/images/04.png" alt="1570867652832"></p>
<h3 id="4、并集选择器-重要）"><a href="#4、并集选择器-重要）" class="headerlink" title="4、并集选择器 (重要）"></a>4、并集选择器 (重要）</h3><p><strong>定义：</strong></p>
<p>​        并集选择器可以选择多组标签, 同时为他们定义相同的样式，通常用于集体声明。并集选择器是各选择器通过英文逗号（,）连接而成，任何形式的选择器都可以作为并集选择器的一部分。</p>
<p><strong>语法：</strong></p>
<img src="/images/05.png"/>

<p>​        上述语法表示选择元素1 和 元素2。</p>
<p><strong>语法说明</strong>：</p>
<ul>
<li>元素1 和 元素2 中间用逗号隔开</li>
<li>逗号可以理解为和的意思</li>
<li>并集选择器通常用于集体声明</li>
</ul>
<p><strong>例子：</strong></p>
<p><img src="/images/06.png" alt="1570867652832"></p>
<h3 id="5、伪类选择器"><a href="#5、伪类选择器" class="headerlink" title="5、伪类选择器"></a>5、伪类选择器</h3><p><strong>定义：</strong></p>
<p>​        伪类选择器用于向某些选择器添加特殊的效果，比如给链接添加特殊效果，或选择第1个，第n个元素。</p>
<p><strong>语法：</strong></p>
<p>​        伪类选择器书写最大的特点是用冒号（:）表示，比如 :hover 、 :first-child 。</p>
<h3 id="6、链接伪类选择器"><a href="#6、链接伪类选择器" class="headerlink" title="6、链接伪类选择器"></a>6、链接伪类选择器</h3><p><strong>定义：</strong></p>
<p>​        伪类选择器用于向某些选择器添加特殊的效果，比如给链接添加特殊效果，或选择第1个，第n个元素。</p>
<p><strong>语法：</strong></p>
<p>​        伪类选择器书写最大的特点是用冒号（:）表示，比如 :hover 、 :first-child 。</p>
<p>​        a:link    没有点击过的(访问过的)链接<br>​        a:visited    点击过的(访问过的)链接<br>​        a:hover    鼠标经过的那个链接<br>​        a:active    鼠标正在按下还没有弹起鼠标的那个链接</p>
<p><strong>链接伪类选择器注意事项</strong></p>
<p>​        为了确保生效，请按照 LVHA 的循顺序声明 :link－:visited－:hover－:active。</p>
<p>​        记忆法：love hate 或者 lv 包包 hao 。</p>
<p>​        因为 a 链接在浏览器中具有默认样式，所以我们实际工作中都需要给链接单独指定样式。</p>
<p><strong>链接伪类选择器实际工作开发中的写法</strong>：</p>
<p><img src="/images/1570868845786.png" alt="1570868845786"></p>
<h3 id="7、-focus-伪类选择器"><a href="#7、-focus-伪类选择器" class="headerlink" title="7、:focus 伪类选择器"></a>7、:focus 伪类选择器</h3><p><strong>定义：</strong></p>
<p>​        :focus 伪类选择器用于选取获得焦点的表单元素。</p>
<p>​        焦点就是光标，一般情况 <input> 类表单元素才能获取</p>
<p>例子：</p>
<p><img src="/images/1570868891669.png" alt="1570868891669"></p>
<h3 id="复合选择器总结"><a href="#复合选择器总结" class="headerlink" title="复合选择器总结"></a>复合选择器总结</h3><p><img src="/images/1570868930472.png" alt="1570868930472"></p>
<h2 id="三、css的显示模式"><a href="#三、css的显示模式" class="headerlink" title="三、css的显示模式"></a>三、css的显示模式</h2><h3 id="1、什么是元素的显示模式"><a href="#1、什么是元素的显示模式" class="headerlink" title="1、什么是元素的显示模式"></a>1、什么是元素的显示模式</h3><p><strong>定义：</strong></p>
<p>​        元素显示模式就是元素（标签）以什么方式进行显示，比如<div>自己占一行，比如一行可以放多个<span>。</p>
<p><strong>作用：</strong></p>
<p>​        网页的标签非常多，在不同地方会用到不同类型的标签，了解他们的特点可以更好的布局我们的网页。</p>
<h3 id="2、元素显示模式的分类"><a href="#2、元素显示模式的分类" class="headerlink" title="2、元素显示模式的分类"></a>2、元素显示模式的分类</h3><h4 id="2-1、块元素"><a href="#2-1、块元素" class="headerlink" title="2.1、块元素"></a>2.1、块元素</h4><p><strong>常见的块元素</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;</span><br></pre></td></tr></table></figure>

<p>​    </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt; 标签是最典型的块元素。</span><br></pre></td></tr></table></figure>

<p><strong>块级元素的特点</strong>：</p>
<ul>
<li>比较霸道，自己独占一行。</li>
<li>高度，宽度、外边距以及内边距都可以控制。</li>
<li>宽度默认是容器（父级宽度）的100%。</li>
<li>是一个容器及盒子，里面可以放行内或者块级元素。</li>
</ul>
<p><strong>注意：</strong></p>
<p>​        文字类的元素内不能放块级元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt; 标签主要用于存放文字，因此 &lt;p&gt; 里面不能放块级元素，特别是不能放&lt;div&gt; </span><br><span class="line">同理， &lt;h1&gt;~&lt;h6&gt;等都是文字类块级标签，里面也不能放其他块级元素</span><br></pre></td></tr></table></figure>



<h4 id="2-2、行内元素"><a href="#2-2、行内元素" class="headerlink" title="2.2、行内元素"></a>2.2、行内元素</h4><p><strong>常见的行内元素：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;</span><br></pre></td></tr></table></figure>

<p>​        </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span&gt; 标签是最典型的行内元素。有的地方也将行内元素称为内联元素。</span><br></pre></td></tr></table></figure>



<p><strong>行内元素的特点：</strong></p>
<ul>
<li><p>相邻行内元素在一行上，一行可以显示多个。</p>
</li>
<li><p>高、宽直接设置是无效的。</p>
</li>
<li><p>默认宽度就是它本身内容的宽度。</p>
</li>
<li><p>行内元素只能容纳文本或其他行内元素。</p>
</li>
</ul>
<p><strong>注意：</strong><br>        链接里面不能再放链接<br>        特殊情况链接 <a> 里面可以放块级元素，但是给 <a> 转换一下块级模式最安全</p>
<h4 id="2-3、行内块元素"><a href="#2-3、行内块元素" class="headerlink" title="2.3、行内块元素"></a>2.3、行内块元素</h4><p><strong>常见的行内块标签</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img /&gt;、&lt;input /&gt;、&lt;td&gt;</span><br></pre></td></tr></table></figure>

<p>​        它们同时具有块元素和行内元素的特点。有些资料称它们为行内块元素。</p>
<p><strong>行内块元素的特点</strong>：</p>
<ul>
<li>和相邻行内元素（行内块）在一行上，但是他们之间会有空白缝隙。</li>
<li>一行可以显示多个（行内元素特点）。</li>
<li>默认宽度就是它本身内容的宽度（行内元素特点）。</li>
<li>高度，行高、外边距以及内边距都可以控制（块级元素特点）。</li>
</ul>
<h4 id="2-4、元素显示模式总结"><a href="#2-4、元素显示模式总结" class="headerlink" title="2.4、元素显示模式总结"></a>2.4、元素显示模式总结</h4><p><img src="/images/1570870718415.png" alt="1570870718415"></p>
<p>​        学习元素显示模式的主要目的就是分清它们各自的特点，当我们网页布局的时候，在合适的地方用合适的标签元素。</p>
<h3 id="3、元素显示模式的转换"><a href="#3、元素显示模式的转换" class="headerlink" title="3、元素显示模式的转换"></a>3、元素显示模式的转换</h3><p><strong>简单理解</strong>: </p>
<p>​        一个模式的元素需要另外一种模式的特性<br>​        比如想要增加链接 <a> 的触发范围。   </p>
<p><strong>转换方式</strong></p>
<ul>
<li>转换为块元素：display:block;</li>
<li>转换为行内元素：display:inline;</li>
<li>转换为行内块：display: inline-block;</li>
</ul>
<h3 id="4、单行文字垂直居中的代码"><a href="#4、单行文字垂直居中的代码" class="headerlink" title="4、单行文字垂直居中的代码"></a>4、单行文字垂直居中的代码</h3><p><strong>解决方案</strong>:    </p>
<p>​        让文字的行高等于盒子的高度  就可以让文字在当前盒子内垂直居中</p>
<p><img src="/images/1570870368253.png" alt="1570870368253"></p>
<p><img src="/images/1570870387089.png" alt="1570870387089"></p>
<p><strong>简单理解</strong>: </p>
<p>​        行高的上空隙和下空隙把文字挤到中间了，</p>
<p>​        如果行高小于盒子高度,文字会偏上，</p>
<p>​        如果行高大于盒子高度,则文字偏下。</p>
<h2 id="四、css的背景"><a href="#四、css的背景" class="headerlink" title="四、css的背景"></a>四、css的背景</h2><p>通过 CSS 背景属性，可以给页面元素添加背景样式。<br>背景属性可以设置背景颜色、背景图片、背景平铺、背景图片位置、背景图像固定等。</p>
<h3 id="1、背景颜色"><a href="#1、背景颜色" class="headerlink" title="1、背景颜色"></a>1、背景颜色</h3><p><strong>样式名称</strong>：</p>
<p>​        background-color 定义元素的背景颜色</p>
<p><strong>使用方式</strong>：</p>
<p><img src="/images/1570886137899.png" alt="1570886137899"></p>
<p><strong>其他说明</strong>：</p>
<p>​        元素背景颜色默认值是 transparent（透明）</p>
<p><img src="/images/1570886176292.png" alt="1570886176292"></p>
<h3 id="2、背景图片"><a href="#2、背景图片" class="headerlink" title="2、背景图片"></a>2、背景图片</h3><p><strong>样式名称</strong>：</p>
<p>​        background-image  定义元素的背景图片</p>
<p><strong>使用方式</strong>：</p>
<p><img src="/images/1570886322557.png" alt="1570886322557"></p>
<p><img src="/images/1570886362813.png" alt="1570886362813"></p>
<p><strong>其他说明</strong>：</p>
<p>​        实际开发常见于 logo 或者一些装饰性的小图片或者是超大的背景图片, 优点是非常便于控制位置. (精灵图也是一种运用场景)</p>
<p>​        注意：背景图片后面的地址，千万不要忘记加 URL， 同时里面的路径<strong>不要加引号</strong>。</p>
<h3 id="3、背景平铺"><a href="#3、背景平铺" class="headerlink" title="3、背景平铺"></a>3、背景平铺</h3><p><strong>样式名称：</strong></p>
<p>​        background-repeat 设置元素背景图像的平铺 </p>
<p><strong>使用方式：</strong></p>
<p><img src="/images/1570886648887.png" alt="1570886648887"></p>
<p><img src="/images/1570886688306.png" alt="1570886688306"></p>
<h3 id="4、背景图片位置"><a href="#4、背景图片位置" class="headerlink" title="4、背景图片位置"></a>4、背景图片位置</h3><p><strong>样式名称：</strong></p>
<p>​        background-position 属性可以改变图片在背景中的位置</p>
<p><strong>使用方式：</strong></p>
<p>​        <img src="/images/1570886973530.png" alt="1570886973530"></p>
<p>​        参数代表的意思是：x 坐标和 y 坐标。 可以使用 方位名词 或者 精确单位</p>
<p><img src="/images/1570887034135.png" alt="1570887034135"></p>
<p><strong>其他说明：</strong></p>
<p>1、参数是方位名词</p>
<p>​        如果指定的两个值都是方位名词，则两个值前后顺序无关，比如 left  top 和 top  left 效果一致</p>
<p>​        如果只指定了一个方位名词，另一个值省略，则第二个值默认居中对齐</p>
<p>2、参数是精确单位</p>
<p>​        如果参数值是精确坐标，那么第一个肯定是 x 坐标，第二个一定是 y 坐标</p>
<p>​        如果只指定一个数值，那该数值一定是 x 坐标，另一个默认垂直居中</p>
<p>3、参数是混合单位</p>
<p>​        如果指定的两个值是精确单位和方位名词混合使用，则第一个值是 x 坐标，第二个值是 y 坐标</p>
<h3 id="5、背景图片固定"><a href="#5、背景图片固定" class="headerlink" title="5、背景图片固定"></a>5、背景图片固定</h3><p><strong>样式名称：</strong></p>
<p>​        background-attachment 属性设置背景图像是否固定或者随着页面的其余部分滚动。</p>
<p><strong>使用方式：</strong></p>
<p>​        <img src="/images/1570887652404.png" alt="1570887652404"></p>
<p><img src="/images/1570887699177.png" alt="1570887699177"></p>
<p><strong>其他说明：</strong></p>
<p>​        background-attachment 后期可以制作视差滚动的效果。</p>
<h3 id="6、背景样式合写"><a href="#6、背景样式合写" class="headerlink" title="6、背景样式合写"></a>6、背景样式合写</h3><p><strong>背景合写样式：</strong></p>
<p>​        background: 背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置;</p>
<p><strong>使用方式：</strong></p>
<p><img src="/images/1570887809455.png" alt="1570887809455"></p>
<h3 id="7、背景色半透明"><a href="#7、背景色半透明" class="headerlink" title="7、背景色半透明"></a>7、背景色半透明</h3><p>CSS3 提供了背景颜色半透明的效果。 </p>
<p><strong>使用方式：</strong></p>
<p><img src="/images/1570887978061.png" alt="1570887978061"></p>
<ul>
<li>最后一个参数是 alpha 透明度，取值范围在 0~1之间</li>
<li>我们习惯把 0.3 的 0 省略掉，写为 background: rgba(0, 0, 0, .3);</li>
</ul>
<p><strong>注意</strong>：</p>
<ul>
<li>背景半透明是指盒子背景半透明，盒子里面的内容不受影响</li>
<li>CSS3 新增属性，是 IE9+ 版本浏览器才支持的，但是现在实际开发,我们不太关注兼容性写法了,可以放心使用</li>
</ul>
<h3 id="8、背景总结"><a href="#8、背景总结" class="headerlink" title="8、背景总结"></a>8、背景总结</h3><p><img src="/images/1570888283511.png" alt="1570888283511"></p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>cssPS切图与属性书写顺序与设计步骤（五）</title>
    <url>/2022/04/02/css%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">学习目标：</span><br><span class="line"></span><br><span class="line">​	了解  PS切图</span><br><span class="line"></span><br><span class="line">​	掌握  CSS属性书写顺序</span><br><span class="line"></span><br><span class="line">​	掌握  学成在线案例</span><br></pre></td></tr></table></figure>


</blockquote>
<h2 id="1-PS-切图"><a href="#1-PS-切图" class="headerlink" title="1. PS 切图"></a>1. PS 切图</h2><h3 id="1-1-常见的图片格式"><a href="#1-1-常见的图片格式" class="headerlink" title="1.1. 常见的图片格式"></a>1.1. 常见的图片格式</h3><table>
<thead>
<tr>
<th>序号</th>
<th>格式</th>
<th>特点和常用的用途</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>jpg</td>
<td>JPEG（.JPG）对色彩的信息保留较好，高清，颜色较多，我们<strong>产品类的图片</strong> 经常用jpg格式的</td>
</tr>
<tr>
<td>2</td>
<td>gif</td>
<td>GIF格式最多只能储存256色，所以通常用来显示简单图形及字体，但是可以保存透明背景和动画效果, 实际 <strong>经常用于一些图片小动画效果</strong></td>
</tr>
<tr>
<td>3</td>
<td>png</td>
<td>png图像格式，是一种新兴的网络图形格式，结合了GIF和JPEG的优点，具有存储形式丰富的特点，能够保持透明背景. 如果想要切成 <strong>背景透明的图片</strong> ,请选择png格式.</td>
</tr>
<tr>
<td>4</td>
<td>psd</td>
<td>PSD图像格式，Photoshop的专用格式，里面可以存放图层、通道、遮罩等多种设计稿. <strong>对我们前端人员来说,最大的优点,我们可以直接从上面复制文字,获得图片,还可以测量大小和距离</strong>.</td>
</tr>
</tbody></table>
<p>PS 有很多的切图方式：图层切图、切片切图、PS 插件切图等。 </p>
<h3 id="1-2-图层切图"><a href="#1-2-图层切图" class="headerlink" title="1.2. 图层切图"></a>1.2. 图层切图</h3><p>简单版步骤：</p>
<p>​    ① 使用<strong>移动工具</strong>，点击需要的图片</p>
<p><img src="/images/1571299959992.png" alt="1571299959992"></p>
<p>​    ② 查看右侧，找到图片对应的图层，右击图层 → 快速导出为 PNG</p>
<p><img src="/images/1571300150618.png" alt="1571300150618"></p>
<p>但是很多情况下,我们需要合并图层再导出:</p>
<p>步骤：</p>
<p>​    ① 选中需要的若干个图层：选择一个图层，再按住shift键，继续选第二个图层:  </p>
<p>​    ② 图层菜单 → 合并图层(ctrl+e)   </p>
<p>​    <img src="/images/1571300529539.png" alt="1571300529539"></p>
<p>​    ③ 查看右侧生成的新图层，在合并后的图层上，右击 →  快速导出为 PNG</p>
<h3 id="1-3-切片切图"><a href="#1-3-切片切图" class="headerlink" title="1.3. 切片切图"></a>1.3. 切片切图</h3><p>步骤：</p>
<p>​    ① 利用切片选中图片 ：利用切片工具手动划出</p>
<p><img src="/images/1571301270696.png" alt="1571301270696"> </p>
<p>​    ② 导出选中的图片：文件菜单  →  导出  → 存储为 web 设备所用格式  →  选择我们要的图片格式 →  存储 。</p>
<p>​    注意：保存的时候，要选“选中的切片”：</p>
<p><img src="/images/1571301357818.png" alt="1571301357818"> </p>
<h3 id="1-4-插件切图"><a href="#1-4-插件切图" class="headerlink" title="1.4. 插件切图"></a>1.4. 插件切图</h3><h4 id="1-4-1-介绍"><a href="#1-4-1-介绍" class="headerlink" title="1.4.1. 介绍"></a>1.4.1. 介绍</h4><p>Cutterman是一款运行在photoshop中的插件，能够自动将你需要的图层进行输出， 以替代传统的手工 “导出web所用格式” 以及使用切片工具进行挨个切图的繁琐流程。 </p>
<p>它支持各种各样的图片尺寸、格式、形态输出，方便你在pc、ios、Android等端上使用。 它不需要你记住一堆的语法、规则，纯点击操作，方便、快捷，易于上手。</p>
<h4 id="1-4-2-安装"><a href="#1-4-2-安装" class="headerlink" title="1.4.2. 安装"></a>1.4.2. 安装</h4><p>注意： <strong>cutterman插件要求你的ps 必须是完整版</strong>，不能是绿色版，所以大家需要从新安装完整版本。</p>
<p>查看 “窗口菜单”里面的“扩展功能”：</p>
<p>​    ① 如果是扩展功能的是灰色的，表示就是绿色版的，需要重新安装PS</p>
<p>​    ② 如果是扩展功能右侧是可以使用的，表示就是完整版的，可以安装cutterman插件快速切图</p>
<p><img src="/images/1571302032310.png" alt="1571302032310"></p>
<p>官网: <a href="http://www.cutterman.cn/zh/cutterman">http://www.cutterman.cn/zh/cutterman</a></p>
<p>当cutterman 安装完成后，重启PS，会发现扩展功能里面多了一个cutterman工具：</p>
<p><img src="/images/1571302286467.png" alt="1571302286467"></p>
<p>1.4.3 使用步骤</p>
<p>​    ① 选择需要的图层</p>
<p>​    ② 选择web端，点击web下面的下拉三角</p>
<p>​    ③ 选择需要的图片格式</p>
<p>​    ④ 设置好存储路径</p>
<p>​    ⑤ 点击 “导出选中图层” 按钮</p>
<p><img src="/images/1571303715362.png" alt="1571303715362"> </p>
<p>示意图：</p>
<img src="/images/sample1.gif" /> 





<h2 id="2-CSS属性书写顺序（重点）"><a href="#2-CSS属性书写顺序（重点）" class="headerlink" title="2. CSS属性书写顺序（重点）"></a>2. CSS属性书写顺序（重点）</h2><p><strong>生活中衡量一个人有气质：</strong></p>
<p>​    穿着打扮  举止言行  等等  </p>
<p><strong>编程中如何衡量一个人的代码能力</strong>：</p>
<p>​    规范标准  优雅高质量 等等   一个词形容   专业    从代码中看出是否有经验..</p>
<p>建议遵循以下顺序：</p>
<ol>
<li><strong>布局定位属性</strong>：display &#x2F; position &#x2F; float &#x2F; clear &#x2F; visibility &#x2F; overflow（建议 display 第一个写，毕竟关系到模式）</li>
<li><strong>自身属性</strong>：width &#x2F; height &#x2F; margin &#x2F; padding &#x2F; border &#x2F; background</li>
<li><strong>文本属性</strong>：color &#x2F; font &#x2F; text-decoration &#x2F; text-align &#x2F; vertical-align &#x2F; white- space &#x2F; break-word</li>
<li><strong>其他属性（CSS3）</strong>：content &#x2F; cursor &#x2F; border-radius &#x2F; box-shadow &#x2F; text-shadow &#x2F; background:linear-gradient …</li>
</ol>
<p><strong>举例：</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.jdc</span> &#123;</span><br><span class="line">   <span class="attribute">display</span>: block;</span><br><span class="line">   <span class="attribute">position</span>: relative;</span><br><span class="line">   <span class="attribute">float</span>: left;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">   <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">font-family</span>: Arial, <span class="string">&#x27;Helvetica Neue&#x27;</span>, Helvetica, sans-serif;</span><br><span class="line">   <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">   <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>);</span><br><span class="line">   <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>





<h2 id="3-学成在线页面制作"><a href="#3-学成在线页面制作" class="headerlink" title="3. 学成在线页面制作"></a>3. 学成在线页面制作</h2><p>页面展示：</p>
<p><img src="/images/1571304358699.png" alt="1571304358699"></p>
<p>学成在线，是典型的企业级网站。</p>
<p>学习学成网的目的，是为了整体感知企业级网站布局流程，带着大家复习以前的知识。</p>
<h3 id="3-1-前期准备素材"><a href="#3-1-前期准备素材" class="headerlink" title="3.1.  前期准备素材"></a>3.1.  前期准备素材</h3><ul>
<li>学成在线PSD源文件</li>
<li>开发工具  &#x3D;  PS（切图） +  sublime（代码） + chrome（测试）</li>
</ul>
<h3 id="3-2-前期准备工作"><a href="#3-2-前期准备工作" class="headerlink" title="3.2.  前期准备工作"></a>3.2.  前期准备工作</h3><p>先把我们的前期准备工作做好， 我们本次采取结构与样式相分离思想。</p>
<ol>
<li><p>创建 study 目录文件夹 (用于存放我们这个页面的相关内容)。</p>
</li>
<li><p>用vscode打开study目录文件夹.</p>
</li>
<li><p>study 目录内新建 images 文件夹，用于保存图片。</p>
</li>
<li><p>新建首页文件 index.html（以后我们的网站<strong>首页</strong>统一命名规定为 <strong>index.html</strong> )。</p>
</li>
<li><p>新建 style.css 样式文件。我们本次采用外链样式表。</p>
</li>
<li><p>将样式引入到我们的 HTML 页面文件中。</p>
</li>
<li><p>样式表写入清除内外边距的样式，来检测样式表是否引入成功。</p>
</li>
</ol>
<p><img src="/images/1571305757590.png" alt="1571305757590"> </p>
<h3 id="3-3-页面布局整体思路"><a href="#3-3-页面布局整体思路" class="headerlink" title="3.3. 页面布局整体思路"></a>3.3. 页面布局整体思路</h3><p>为了提高网页制作的效率，布局时通常有以下的整体思路，具体如下：</p>
<p>​    1.必须确定页面的<strong>版心</strong>（可视区），我们<strong>测量</strong>可得知。</p>
<p>​    2.分析页面中的行模块，以及每个行模块中的列模块。其实页面布局第一准则.</p>
<p>​    3.一行中的列模块经常浮动布局, 先确定每个列的大小,之后确定列的位置.  页面布局第二准则</p>
<p>​    4.制作 HTML 结构。我们还是遵循，先有结构，后有样式的原则。结构永远最重要.</p>
<p>​    5.所以, 先理清楚<strong>布局结构</strong>,再写代码尤为重要. 这需要我们多写多积累.</p>
<h3 id="3-4-页面制作"><a href="#3-4-页面制作" class="headerlink" title="3.4. 页面制作"></a>3.4. 页面制作</h3><p><strong>确定版心</strong>：</p>
<p>​    这个页面的版心是 1200像素  ，每个版心都要水平居中对齐，所以，我们可以定义版心为公共类：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.w</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-4-1-header头部制作"><a href="#3-4-1-header头部制作" class="headerlink" title="3.4.1. header头部制作"></a>3.4.1. header头部制作</h4><p><strong>结构图如下：</strong></p>
<img src="/images/1.png" />

<ul>
<li>1号是版心盒子 <strong>header</strong>  1200 *  42 的盒子水平居中对齐, 上下给一个margin值就好了。</li>
<li>版心盒子 里面包含 2号盒子 <strong>logo</strong> 图标</li>
<li>版心盒子 里面包含 3号盒子 <strong>nav</strong> 导航栏</li>
<li>版心盒子 里面包含 4号盒子 <strong>search</strong> 搜索框</li>
<li>版心盒子 里面包含 5号盒子 <strong>user</strong> 个人信息</li>
<li>注意，要求里面的 <strong>4个子盒子 必须都浮动</strong></li>
</ul>
<p><strong>导航栏注意点:</strong></p>
<p>实际开发中，<strong>重要的导航栏</strong>，我们不会直接用链接a ，而是<strong>用 li  包含链接(li+a)的做法</strong></p>
<p>​    1.li+a 语义更清晰，一看这就是有条理的列表型内容。</p>
<p>​    2.如果直接用a，搜索引擎容易辨别为有堆砌关键字嫌疑（故意堆砌关键字容易被搜索引擎有降权的风险），从而影响网站排名</p>
<p><strong>注意:</strong> </p>
<p>​    1.让导航栏一行显示, 给 li 加浮动, 因为 li 是块级元素, 需要一行显示.</p>
<p>​    2.这个nav导航栏可以不给宽度,将来可以继续添加其余文字</p>
<p>​    3.因为导航栏里面文字不一样多,所以最好给链接 a 左右padding 撑开盒子,而不是指定宽度 </p>
<p><strong>4号盒子search的细节：</strong></p>
<p>​    search 搜索框的意思:  一个 search 大盒子里面包含 2个 表单</p>
<p>​    技巧：input和button都，属于行内块元素，会有缝隙，使用浮动，可以去缝隙。</p>
<p><img src="/images/1571307430101.png" alt="1571307430101"></p>
<h4 id="3-4-2-banner制作"><a href="#3-4-2-banner制作" class="headerlink" title="3.4.2. banner制作"></a>3.4.2. banner制作</h4><p>结构图如下：</p>
<p><img src="/images/1571314623135.png" alt="1571314623135"></p>
<img src="/images/2.png" />



<ul>
<li>1号盒子是通栏的大盒子<strong>banner</strong>， 不给宽度，给高度，给一个蓝色背景。</li>
<li>2号盒子是版心 <strong>w</strong>， 要水平居中对齐。</li>
<li>3号盒子版心内，左对齐 <strong>subnav</strong> 侧导航栏。</li>
<li>4号盒子版心内，右对齐  <strong>course</strong> 课程。</li>
</ul>
<h5 id="3-4-2-1-subnav-侧导航栏-左侧的"><a href="#3-4-2-1-subnav-侧导航栏-左侧的" class="headerlink" title="3.4.2.1  subnav 侧导航栏 (左侧的)"></a>3.4.2.1  subnav 侧导航栏 (左侧的)</h5><p><img src="/images/1571314874385.png" alt="1571314874385">   </p>
<ul>
<li>subnav 盒子 背景色 黑色半透明</li>
<li>重要的导航栏，li 包 a ，行高45px</li>
<li>a里面包含文字和span，span右浮动</li>
<li>当鼠标经过a ，a里面的内容（文字和span）变蓝色</li>
</ul>
<h5 id="3-4-2-2-course课程表模块-右侧的"><a href="#3-4-2-2-course课程表模块-右侧的" class="headerlink" title="3.4.2.2  course课程表模块 (右侧的)"></a>3.4.2.2  course课程表模块 (右侧的)</h5><p>结构图如下：</p>
 <img src="/images/6.png" />

<ul>
<li>1号盒子 是  228 * 300 的盒子 右浮动  <strong>注意 浮动的元素 不会有外边距塌陷的问题</strong></li>
<li>1号盒子内 分为 上下 两个 子盒子</li>
<li>2号子盒子是 上部分  我们命名为 course-hd    (hd  是  head  的简写 头部的意思，我们经常用)</li>
<li>3号子盒子是 下部分  我们命名为 course-bd    (bd  是  body  的简写 主体的意思，我们经常用)</li>
</ul>
<h4 id="3-4-3-精品推荐小模块"><a href="#3-4-3-精品推荐小模块" class="headerlink" title="3.4.3. 精品推荐小模块"></a>3.4.3. 精品推荐小模块</h4><p>结构图如下：</p>
<img src="/images/3.png" />

<ul>
<li><p><strong>复习点：</strong>  因为里面三个盒子都要垂直居中，我们利用 继承性，给 最大的盒子 一个垂直居中的代码就好了，还记得 那些 样式可以继承吗？？？ font-  line-  text- color</p>
</li>
<li><p>大盒子水平居中 goods  精品 ，注意此处有个盒子阴影</p>
</li>
<li><p>1号盒子是标题 H3  左侧浮动</p>
</li>
<li><p>2号盒子 里面放链接  左侧浮动  goods-item    距离可以控制链接的 左右外边距（注意行内元素只给左右内外边距）</p>
</li>
<li><p>3号盒子 右浮动 mod 修改</p>
</li>
</ul>
<h4 id="3-4-4-精品推荐大模块"><a href="#3-4-4-精品推荐大模块" class="headerlink" title="3.4.4. 精品推荐大模块"></a>3.4.4. 精品推荐大模块</h4><p>结构图如下：</p>
<img src="/images/4.png" />

<ul>
<li>1号盒子为最大的盒子 <strong>box</strong>  版心水平居中对齐</li>
<li>2号盒子为上面部分 <strong>box-hd</strong>  – 里面   左侧标题H3 左浮动   右侧 链接 a 右浮动</li>
<li>3号盒子为底下部分 <strong>box-bd</strong> — 里面是无序列表 有 10个 小li 组成</li>
<li>小li 外边距的问题， 这里有个小技巧。  给box-hd 宽度为 1215 就可以一行装开5个 li了</li>
<li>复习点：我们用到清除浮动，因为 box-hd 里面的盒子个数不一定是多少，所以我们就不给高度了，但是里面的盒子浮动会影响下面的布局，因此需要清除浮动。</li>
</ul>
<h4 id="3-4-5-底部模块制作"><a href="#3-4-5-底部模块制作" class="headerlink" title="3.4.5.  底部模块制作"></a>3.4.5.  底部模块制作</h4><p>结构图如下：</p>
<img src="/images/5.png" >

<ul>
<li><p>1号盒子通栏大盒子 底部 <strong>footer</strong>  给高度  底色是白色</p>
</li>
<li><p>2号盒子版心水平居中</p>
</li>
<li><p>3号盒子版权 <strong>copyright</strong>  左对齐 </p>
</li>
<li><p>4号盒子 链接组 <strong>links</strong>  右对齐</p>
</li>
</ul>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css定位与网页布局（六）</title>
    <url>/2022/04/02/css%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p><strong>目标</strong></p>
<ul>
<li>能够说出 为什么要用定位</li>
<li>能够说出 定位的 4 种分类</li>
<li>能够说出 4 种定位各自的特点</li>
<li>能够说出 为什么常用子绝父相布局</li>
<li>能够写出 淘宝轮播图布局</li>
<li>能够说出 显示隐藏的 3 种方式以及区别</li>
</ul>
</blockquote>
<h2 id="1-定位-position-介绍"><a href="#1-定位-position-介绍" class="headerlink" title="1. 定位(position) 介绍"></a>1. 定位(position) 介绍</h2><h3 id="1-1-为什么使用定位"><a href="#1-1-为什么使用定位" class="headerlink" title="1.1 为什么使用定位"></a>1.1 为什么使用定位</h3><blockquote>
<p>我们先来看一个效果，同时思考一下<strong>用标准流或浮动能否实现类似的效果</strong>？</p>
</blockquote>
<p><strong>场景1</strong>： 某个元素可以自由的在一个盒子内移动位置，并且压住其他盒子.</p>
<img src="/images/01_定位示例1.gif" />



<p><strong>场景2</strong>：当我们滚动窗口的时候，盒子是固定屏幕某个位置的。</p>
<img src="/images/ding.png" />



<blockquote>
<p>结论<strong>：要实现以上效果，</strong>标准流 或 浮动都无法快速实现</p>
</blockquote>
<p>所以：</p>
<p>1.浮动可以让多个块级盒子一行没有缝隙排列显示， 经常用于横向排列盒子。</p>
<p>2.定位则是可以让盒子自由的在某个盒子内移动位置或者固定屏幕中某个位置，并且可以压住其他盒子。</p>
<h3 id="1-2-定位组成"><a href="#1-2-定位组成" class="headerlink" title="1.2 定位组成"></a>1.2 定位组成</h3><p><strong>定位</strong>：将盒子<strong>定</strong>在某一个位置，所以<strong>定位也是在摆放盒子， 按照定位的方式移动盒子</strong></p>
<p>定位也是用来布局的，它有两部分组成：</p>
<blockquote>
<p><strong>定位 &#x3D; 定位模式 + 边偏移</strong>  </p>
</blockquote>
<p><strong>定位模式</strong> 用于指定一个元素在文档中的定位方式。<strong>边偏移</strong>则决定了该元素的最终位置。</p>
<h4 id="1-2-1-边偏移（方位名词）"><a href="#1-2-1-边偏移（方位名词）" class="headerlink" title="1.2.1 边偏移（方位名词）"></a>1.2.1 边偏移（方位名词）</h4><p><strong>边偏移</strong> 就是定位的盒子移动到最终位置。有 top、bottom、left 和 right  4 个属性。</p>
<table>
<thead>
<tr>
<th>边偏移属性</th>
<th align="left">示例</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>top</code></td>
<td align="left"><code>top: 80px</code></td>
<td><strong>顶端</strong>偏移量，定义元素相对于其父元素<strong>上边线的距离</strong>。</td>
</tr>
<tr>
<td><code>bottom</code></td>
<td align="left"><code>bottom: 80px</code></td>
<td><strong>底部</strong>偏移量，定义元素相对于其父元素<strong>下边线的距离</strong>。</td>
</tr>
<tr>
<td><code>left</code></td>
<td align="left"><code>left: 80px</code></td>
<td><strong>左侧</strong>偏移量，定义元素相对于其父元素<strong>左边线的距离</strong>。</td>
</tr>
<tr>
<td><code>right</code></td>
<td align="left"><code>right: 80px</code></td>
<td><strong>右侧</strong>偏移量，定义元素相对于其父元素<strong>右边线的距离</strong></td>
</tr>
</tbody></table>
<p>定位的盒子有了边偏移才有价值。 一般情况下，凡是有定位地方必定有边偏移。</p>
<h4 id="1-2-2-定位模式-position"><a href="#1-2-2-定位模式-position" class="headerlink" title="1.2.2 定位模式 (position)"></a>1.2.2 定位模式 (position)</h4><p>在 CSS 中，通过 <code>position</code> 属性定义元素的<strong>定位模式</strong>，语法如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器 &#123; </span><br><span class="line">    <span class="attribute">position</span>: 属性值; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定位模式是有不同分类的，在不同情况下，我们用到不同的定位模式。</p>
<p>定位模式决定元素的定位方式 ，它通过 CSS 的 position 属性来设置，其值可以分为四个：</p>
<table>
<thead>
<tr>
<th>值</th>
<th align="center">语义</th>
</tr>
</thead>
<tbody><tr>
<td><code>static</code></td>
<td align="center"><strong>静态</strong>定位</td>
</tr>
<tr>
<td><code>relative</code></td>
<td align="center"><strong>相对</strong>定位</td>
</tr>
<tr>
<td><code>absolute</code></td>
<td align="center"><strong>绝对</strong>定位</td>
</tr>
<tr>
<td><code>fixed</code></td>
<td align="center"><strong>固定</strong>定位</td>
</tr>
</tbody></table>
 <img src="/images/26定位的概念.png">

<h3 id="1-3-定位模式介绍"><a href="#1-3-定位模式介绍" class="headerlink" title="1.3 定位模式介绍"></a>1.3 定位模式介绍</h3><h4 id="1-3-1-静态定位-static-了解"><a href="#1-3-1-静态定位-static-了解" class="headerlink" title="1.3.1.  静态定位(static) - 了解"></a>1.3.1.  静态定位(static) - 了解</h4><ul>
<li><p><strong>静态定位</strong>是元素的<strong>默认</strong>定位方式，<strong>无定位的意思</strong>。它相当于 border 里面的none，静态定位static，不要定位的时候用。</p>
</li>
<li><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">选择器 &#123; </span><br><span class="line">    position: static; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>静态定位 按照标准流特性摆放位置，它没有边偏移。</p>
</li>
<li><p>静态定位在布局时我们几乎不用的</p>
</li>
</ul>
<h4 id="1-3-2-相对定位-relative-重要"><a href="#1-3-2-相对定位-relative-重要" class="headerlink" title="1.3.2. 相对定位(relative) - 重要"></a>1.3.2. 相对定位(relative) - 重要</h4><ul>
<li><strong>相对定位</strong>是元素在移动位置的时候，是相对于它自己<strong>原来的位置</strong>来说的（自恋型）。</li>
<li>语法：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">选择器 &#123; </span><br><span class="line">	position: relative; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>相对定位的特点：（务必记住）</p>
<ul>
<li><p>1.它是相对于自己原来的位置来移动的（移动位置的时候参照点是自己原来的位置）。</p>
</li>
<li><p>2.<strong>原来</strong>在标准流的<strong>位置</strong>继续占有，后面的盒子仍然以标准流的方式对待它。</p>
<p>因此，<strong>相对定位并没有脱标</strong>。它最典型的应用是给绝对定位当爹的。。。</p>
</li>
</ul>
</li>
<li><p>效果图：</p>
</li>
</ul>
<p><img src="/images/04_%E7%9B%B8%E5%AF%B9%E5%AE%9A%E4%BD%8D%E6%A1%88%E4%BE%8B.png" alt="相对定位案例"></p>
<h4 id="1-3-3-绝对定位-absolute-重要"><a href="#1-3-3-绝对定位-absolute-重要" class="headerlink" title="1.3.3. 绝对定位(absolute) - 重要"></a>1.3.3. 绝对定位(absolute) - 重要</h4><h5 id="1-3-3-1-绝对定位的介绍"><a href="#1-3-3-1-绝对定位的介绍" class="headerlink" title="1.3.3.1 绝对定位的介绍"></a>1.3.3.1 绝对定位的介绍</h5><ul>
<li><p><strong>绝对定位</strong>是元素在移动位置的时候，是相对于它<strong>祖先元素</strong>来说的（拼爹型）。</p>
</li>
<li><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">选择器 &#123; </span><br><span class="line">	position: absolute; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol>
<li><p><strong>完全脱标</strong> —— 完全不占位置；  </p>
</li>
<li><p><strong>父元素没有定位</strong>，则以<strong>浏览器</strong>为准定位（Document 文档）。</p>
<img src="/images/05_绝对定位_父级无定位.png" width="600" />
</li>
<li><p><strong>父元素要有定位</strong></p>
<ul>
<li>元素将依据最近的已经定位（绝对、固定或相对定位）的父元素（祖先）进行定位。</li>
</ul>
</li>
</ol>
<img src="/images/06_绝对定位_父级有定位.png" width="600" />





<ul>
<li><p><strong>绝对定位的特点总结</strong>：（务必记住）</p>
<p>1.如果<strong>没有祖先元素</strong>或者<strong>祖先元素没有定位</strong>，则以浏览器为基准定位（Document 文档）。</p>
<p>2.如果祖先元素有定位（相对、绝对、固定定位），则以最近一级的有定位祖先元素为参考点移动位置。</p>
<p>3.绝对定位<strong>不再占有原先的位置</strong>。所以绝对定位是脱离标准流的。（脱标）</p>
</li>
</ul>
<h5 id="1-3-3-2-定位口诀-——-子绝父相"><a href="#1-3-3-2-定位口诀-——-子绝父相" class="headerlink" title="1.3.3.2 定位口诀 —— 子绝父相"></a>1.3.3.2 定位口诀 —— 子绝父相</h5><p>弄清楚这个口诀，就明白了绝对定位和相对定位的使用场景。</p>
<p>这个<strong>“子绝父相”</strong>太重要了，是我们学习定位的<strong>口诀</strong>，是定位中最常用的一种方式这句话的意思是：<strong>子级是绝对定位的话，父级要用相对定位。</strong></p>
<p>因为绝对定位的盒子是拼爹的，所以要和父级搭配一起来使用。</p>
<p>①子级绝对定位，不会占有位置，可以放到父盒子里面的任何一个地方，不会影响其他的兄弟盒子。</p>
<p>②父盒子需要加定位限制子盒子在父盒子内显示。</p>
<p>③父盒子布局时，需要占有位置，因此父亲只能是相对定位。</p>
<p>这就是子绝父相的由来，所以<strong>相对定位经常用来作为绝对定位的父级</strong>。</p>
<p>总结： <strong>因为父级需要占有位置，因此是相对定位， 子盒子不需要占有位置，则是绝对定位</strong></p>
<p>当然，子绝父相不是永远不变的，如果父元素不需要占有位置，<strong>子绝父绝</strong>也会遇到。</p>
<p><strong>疑问</strong>：为什么在布局时，<strong>子级元素</strong>使用<strong>绝对定位</strong>时，<strong>父级元素</strong>就要用<strong>相对定位</strong>呢？</p>
<p>观察下图，思考一下在布局时，<strong>左右两个方向的箭头图片</strong>以及<strong>父级盒子</strong>的定位方式。</p>
<p><img src="/images/07_%E5%AD%90%E7%BB%9D%E7%88%B6%E7%9B%B8%E6%88%AA%E5%9B%BE.png" alt="子绝父相截图"></p>
<img src="/images/27子绝父相.png">

<p><strong>分析</strong>：</p>
<ol>
<li><strong>方向箭头</strong>叠加在其他图片上方，应该使用<strong>绝对定位</strong>，因为<strong>绝对定位完全脱标</strong>，完全不占位置。</li>
<li><strong>父级盒子</strong>应该使用<strong>相对定位</strong>，因为<strong>相对定位不脱标</strong>，后续盒子仍然以标准流的方式对待它。<ul>
<li>如果父级盒子也使用<strong>绝对定位</strong>，会完全脱标，那么下方的<strong>广告盒子</strong>会上移，这显然不是我们想要的。</li>
</ul>
</li>
</ol>
<p><strong>结论</strong>：<strong>父级要占有位置，子级要任意摆放</strong>，这就是<strong>子绝父相</strong>的由来。</p>
<h4 id="1-3-4-固定定位-fixed-重要"><a href="#1-3-4-固定定位-fixed-重要" class="headerlink" title="1.3.4. 固定定位(fixed) - 重要"></a>1.3.4. 固定定位(fixed) - 重要</h4><ul>
<li><p><strong>固定定位</strong>是元素<strong>固定于浏览器可视区的位置</strong>。（认死理型）   主要使用场景： 可以在浏览器页面滚动时元素的位置不会改变。</p>
</li>
<li><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">选择器 &#123; </span><br><span class="line">	position: fixed; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>固定定位的特点：（务必记住）：</p>
<p>1.以浏览器的可视窗口为参照点移动元素。</p>
<ul>
<li>跟父元素没有任何关系</li>
<li>不随滚动条滚动。</li>
</ul>
<p>2.固定定位<strong>不在占有原先的位置</strong>。</p>
</li>
<li><p>固定定位也是<strong>脱标</strong>的，其实<strong>固定定位也可以看做是一种特殊的绝对定位</strong>。（认死理型） </p>
<ul>
<li><strong>完全脱标</strong>—— 完全不占位置；</li>
<li>只认<strong>浏览器的可视窗口</strong> —— <code>浏览器可视窗口 + 边偏移属性</code> 来设置元素的位置；<ul>
<li>跟父元素没有任何关系；单独使用的</li>
<li>不随滚动条滚动。</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>固定定位举例：</p>
</blockquote>
<p><img src="/images/08_%E5%9B%BA%E5%AE%9A%E5%AE%9A%E4%BD%8D%E6%A1%88%E4%BE%8B.png" alt="固定定位案例"></p>
<p><strong>提示</strong>：IE 6 等低版本浏览器不支持固定定位。</p>
<h4 id="1-3-5-粘性定位-sticky-了解"><a href="#1-3-5-粘性定位-sticky-了解" class="headerlink" title="1.3.5 粘性定位(sticky) - 了解"></a>1.3.5 粘性定位(sticky) - 了解</h4><ul>
<li><p><strong>粘性定位</strong>可以被认为是相对定位和固定定位的混合。 Sticky  粘性的 </p>
</li>
<li><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">选择器 &#123; </span><br><span class="line">    position: sticky; </span><br><span class="line">    top: 10px; </span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>
</li>
<li><p>粘性定位的特点：</p>
<p>1.以浏览器的可视窗口为参照点移动元素（固定定位特点）</p>
<p>2.粘性定位占有原先的位置（相对定位特点）</p>
<p>3.必须添加 top 、left、right、bottom <strong>其中一个</strong>才有效</p>
<p>跟页面滚动搭配使用。 兼容性较差，IE 不支持。</p>
</li>
</ul>
<h4 id="1-3-6-定位总结"><a href="#1-3-6-定位总结" class="headerlink" title="1.3.6 定位总结"></a>1.3.6 定位总结</h4><table>
<thead>
<tr>
<th><strong>定位模式</strong></th>
<th><strong>是否脱标</strong></th>
<th><strong>移动位置</strong></th>
<th><strong>是否常用</strong></th>
</tr>
</thead>
<tbody><tr>
<td>static   静态定位</td>
<td>否</td>
<td>不能使用边偏移</td>
<td>很少</td>
</tr>
<tr>
<td><strong>relative 相对定位</strong></td>
<td><strong>否 (占有位置)</strong></td>
<td><strong>相对于自身位置移动</strong></td>
<td><strong>基本单独使用</strong></td>
</tr>
<tr>
<td><strong>absolute绝对定位</strong></td>
<td><strong>是（不占有位置）</strong></td>
<td><strong>带有定位的父级</strong></td>
<td><strong>要和定位父级元素搭配使用</strong></td>
</tr>
<tr>
<td><strong>fixed 固定定位</strong></td>
<td><strong>是（不占有位置）</strong></td>
<td><strong>浏览器可视区</strong></td>
<td><strong>单独使用，不需要父级</strong></td>
</tr>
<tr>
<td>sticky 粘性定位</td>
<td>否   (占有位置)</td>
<td>浏览器可视区</td>
<td>当前阶段少</td>
</tr>
</tbody></table>
<ul>
<li><p>一定记住 相对定位、固定定位、绝对定位 两个大的特点： 1. 是否占有位置（脱标否） 2. 以谁为基准点移动位置。</p>
</li>
<li><p>学习定位重点学会子绝父相。</p>
</li>
<li><p>注意：</p>
</li>
</ul>
<ol>
<li><strong>边偏移</strong>需要和<strong>定位模式</strong>联合使用，<strong>单独使用无效</strong>；</li>
<li><code>top</code> 和 <code>bottom</code> 不要同时使用；</li>
<li><code>left</code> 和 <code>right</code> 不要同时使用。</li>
</ol>
<h2 id="2-综合案例：学成在线-hot-模块添加"><a href="#2-综合案例：学成在线-hot-模块添加" class="headerlink" title="2. 综合案例：学成在线-hot  模块添加"></a>2. 综合案例：学成在线-hot  模块添加</h2><h3 id="2-1-案例截图："><a href="#2-1-案例截图：" class="headerlink" title="2. 1 案例截图："></a><strong>2. 1 案例截图</strong>：</h3><p><img src="/images/1571385860679.png" alt="1571385860679"> </p>
<h3 id="2-2-案例分析"><a href="#2-2-案例分析" class="headerlink" title="2.2 案例分析"></a>2.2 案例分析</h3><ol>
<li>一个大的 <code>li</code> 中包含 一个课程图片，课程介绍文字信息，还有hot的小图标；</li>
<li>hot图片<strong>重叠</strong>在课程图片上面—— 脱标，不占位置，需要使用<strong>绝对定位</strong>；</li>
<li>hot图片<strong>重叠</strong>在<strong>li的右上方 —— 需要</strong>使用边偏移确定准确位置。</li>
</ol>
<h3 id="2-3-案例小结"><a href="#2-3-案例小结" class="headerlink" title="2.3 案例小结"></a>2.3 案例小结</h3><ol>
<li><strong>子绝父相</strong> —— <strong>子元素</strong>使用<strong>绝对定位</strong>，<strong>父元素</strong>使用<strong>相对定位</strong>；</li>
<li><strong>与浮动的对比</strong>：<ul>
<li><strong>绝对定位</strong>：脱标，<strong>利用边偏移指定准确位置</strong>；</li>
<li><strong>浮动</strong>：脱标，不能指定准确位置，<strong>让多个块级元素在一行显示</strong>。</li>
</ul>
</li>
</ol>
<blockquote>
<p>课堂练习：模拟老师的随堂案例完成<strong>哈根达斯</strong>案例（5 分钟）。</p>
</blockquote>
<p>结构修改：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 修改.box-bd里面的li标签内容，添加一个hot图标 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">	 <span class="comment">&lt;!-- 添加hot小图片 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">em</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/hot.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/pic.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span></span><br><span class="line">        Think PHP 5.0 博客系统实战项目演练</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>高级<span class="tag">&lt;/<span class="name">span</span>&gt;</span> • 1125人在学习</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>样式修改：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box-bd</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="comment">/* 子绝父相 */</span></span><br><span class="line">    <span class="comment">/* 父元素相对定位 */</span></span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">228px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">270px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-bd</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &gt; <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-bd</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">h4</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">20px</span> <span class="number">20px</span> <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#050505</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-bd</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">em</span> &#123;</span><br><span class="line">     <span class="comment">/* 子元素绝对定位 */</span></span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">right</span>: -<span class="number">4px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-定位-position-的应用"><a href="#3-定位-position-的应用" class="headerlink" title="3. 定位(position)的应用"></a>3. 定位(position)的应用</h2><h3 id="3-1-固定定位小技巧：-固定在版心左侧位置。"><a href="#3-1-固定定位小技巧：-固定在版心左侧位置。" class="headerlink" title="3.1.  固定定位小技巧： 固定在版心左侧位置。"></a>3.1.  固定定位小技巧： 固定在版心左侧位置。</h3><p>小算法：</p>
<p>1.让固定定位的盒子 left: 50%.  走到浏览器可视区（也可以看做版心） 的一半位置。</p>
<p>2.让固定定位的盒子 margin-left: 版心宽度的一半距离。  多走 版心宽度的一半位置</p>
<p>就可以让固定定位的盒子<strong>贴着版心右侧对齐</strong>了。</p>
<img src="/images/1571388901848.png" width='350'>



<img src="/images/1571389108805.png" width='300'>



<p>案例效果：</p>
<p><img src="/images/1571389241926.png" alt="1571389241926"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.w</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">1400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.fixed</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 1. 走浏览器宽度的一半 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 2. 利用margin 走版心盒子宽度的一半距离 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-left</span>: <span class="number">405px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;w&quot;</span>&gt;</span>版心盒子 800像素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-2-堆叠顺序（z-index）"><a href="#3-2-堆叠顺序（z-index）" class="headerlink" title="3.2. 堆叠顺序（z-index）"></a>3.2. 堆叠顺序（z-index）</h3><ul>
<li><p>在使用<strong>定位</strong>布局时，可能会<strong>出现盒子重叠的情况</strong>。此时，可以使用 <strong>z-index</strong> 来控制盒子的前后次序 (z轴)</p>
</li>
<li><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">选择器 &#123; </span><br><span class="line">	z-index: 1; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p><code>z-index</code> 的特性如下：</p>
<ol>
<li><strong>属性值</strong>：<strong>正整数</strong>、<strong>负整数</strong>或 <strong>0</strong>，默认值是 0，数值越大，盒子越靠上；    </li>
<li>如果<strong>属性值相同</strong>，则按照书写顺序，<strong>后来居上</strong>；</li>
<li>数字后面<strong>不能加单位</strong>。</li>
</ol>
<p><strong>注意</strong>：<code>z-index</code> 只能应用于<strong>相对定位</strong>、<strong>绝对定位</strong>和<strong>固定定位</strong>的元素，其他<strong>标准流</strong>、<strong>浮动</strong>和<strong>静态定位</strong>无效。</p>
</li>
<li><p>应用 <code>z-index</code> 层叠等级属性可以<strong>调整盒子的堆叠顺序</strong>。如下图所示：</p>
</li>
</ul>
<p><img src="/images/12_zindex%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="zindex示意图"></p>
<blockquote>
<p>案例演示：堆叠顺序。</p>
</blockquote>
<h2 id="4-定位-position-的拓展"><a href="#4-定位-position-的拓展" class="headerlink" title="4. 定位(position)的拓展"></a>4. 定位(position)的拓展</h2><h3 id="4-1-绝对定位的盒子居中"><a href="#4-1-绝对定位的盒子居中" class="headerlink" title="4.1 绝对定位的盒子居中"></a>4.1 绝对定位的盒子居中</h3><blockquote>
<p><strong>注意</strong>：加了<strong>绝对定位&#x2F;固定定位的盒子</strong>不能通过设置 <code>margin: auto</code> 设置<strong>水平居中</strong>。</p>
<p>但是可以通过以下计算方法实现水平和垂直居中，可以按照下图的方法：</p>
</blockquote>
<p><img src="/images/10_%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD.png" alt="绝对定位水平居中"></p>
<ol>
<li><code>left: 50%;</code>：让<strong>盒子的左侧</strong>移动到<strong>父级元素的水平中心位置</strong>；</li>
<li><code>margin-left: -100px;</code>：让盒子<strong>向左</strong>移动<strong>自身宽度的一半</strong>。</li>
</ol>
<p><strong>盒子居中定位示意图</strong></p>
<p><img src="/images/11_%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E5%B1%85%E4%B8%AD%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="绝对定位居中示意图"></p>
<h3 id="4-2-定位特殊特性"><a href="#4-2-定位特殊特性" class="headerlink" title="4.2 定位特殊特性"></a>4.2 定位特殊特性</h3><p>绝对定位和固定定位也和浮动类似。</p>
<p>1.行内元素添加绝对或者固定定位，可以直接设置高度和宽度。</p>
<p>2.块级元素添加绝对或者固定定位，如果不给宽度或者高度，默认大小是内容的大小。</p>
<p>前面我们讲过， display 是 显示模式， 可以改变显示模式有以下方式:</p>
<ul>
<li>可以用inline-block  转换为行内块</li>
<li>可以用浮动 float 默认转换为行内块（类似，并不完全一样，因为浮动是脱标的）</li>
<li>绝对定位和固定定位也和浮动类似， 默认转换的特性 转换为行内块。</li>
</ul>
<p>所以说， 一个行内的盒子，如果加了<strong>浮动</strong>、<strong>固定定位</strong>和<strong>绝对定位</strong>，不用转换，就可以给这个盒子直接设置宽度和高度等。</p>
<h3 id="4-3-脱标的盒子不会触发外边距塌陷"><a href="#4-3-脱标的盒子不会触发外边距塌陷" class="headerlink" title="4.3 脱标的盒子不会触发外边距塌陷"></a>4.3 脱标的盒子不会触发外边距塌陷</h3><p>浮动元素、<strong>绝对定位(固定定位）</strong>元素的都不会触发外边距合并的问题。 （我们以前是用padding border overflow解决的）</p>
<p>也就是说，我们给盒子改为了浮动或者定位，就不会有垂直<strong>外边距合并的问题</strong>了。</p>
<h3 id="4-4-绝对定位（固定定位）会完全压住盒子"><a href="#4-4-绝对定位（固定定位）会完全压住盒子" class="headerlink" title="4.4 绝对定位（固定定位）会完全压住盒子"></a>4.4 绝对定位（固定定位）会完全压住盒子</h3><p>浮动元素不同，只会压住它下面标准流的盒子，但是不会压住下面标准流盒子里面的文字（图片）</p>
<p>但是绝对定位（固定定位） 会压住下面标准流所有的内容。</p>
<p>浮动之所以不会压住文字，因为浮动产生的目的最初是为了做文字环绕效果的。 文字会围绕浮动元素</p>
<img src="/images/文字环绕图片.png">

<h2 id="5-综合案例-淘宝轮播图-重点"><a href="#5-综合案例-淘宝轮播图-重点" class="headerlink" title="5. 综合案例 - 淘宝轮播图(重点)"></a>5. 综合案例 - 淘宝轮播图(重点)</h2><h3 id="5-1-效果图"><a href="#5-1-效果图" class="headerlink" title="5.1 效果图"></a>5.1 效果图</h3><img src="/images/淘宝焦点图.png" width='600'>

<h3 id="5-2-布局分析"><a href="#5-2-布局分析" class="headerlink" title="5.2 布局分析"></a>5.2 布局分析</h3><p><img src="/images/1571397019689.png" alt="1571397019689"></p>
<h3 id="5-3-步骤"><a href="#5-3-步骤" class="headerlink" title="5.3 步骤"></a>5.3 步骤</h3><ol>
<li><p>大盒子我们类名为：  tb-promo      淘宝广告</p>
</li>
<li><p>里面先放一张图片。</p>
</li>
<li><p>左右两个按钮 用链接就好了。   左箭头 prev    右箭头  next   </p>
<p>​    左按钮样式（border-radius：左上，右上，右下，左下），</p>
<p>​    右按钮定位，提取左右按钮共同的样式代码（并集选择器）</p>
</li>
<li><p>底侧小圆点ul 继续做。 类名为 promo-nav     </p>
<p>​    中间长方形椭圆 ul的定位（水平居中，离底部15px）  </p>
<p>​    长方形需要五个小圆点，ul无序列表，li浮动，椭圆中小圆点的样式</p>
</li>
</ol>
<h3 id="5-4-知识点：圆角矩形设置4个角"><a href="#5-4-知识点：圆角矩形设置4个角" class="headerlink" title="5.4 知识点：圆角矩形设置4个角"></a>5.4 知识点：圆角矩形设置4个角</h3><p>圆角矩形可以为4个角分别设置圆度， 但是是有顺序的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">border-top-left-radius:20px;</span><br><span class="line">border-top-right-radius:20px;</span><br><span class="line">border-bottom-right-radius:20px;</span><br><span class="line">border-bottom-left-radius:20px;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>如果4个角，数值相同</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: <span class="number">15px</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>里面数值不同，我们也可以按照简写的形式，具体格式如下:</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: 左上角 右上角  右下角  左下角;</span><br></pre></td></tr></table></figure>

<p>还是遵循的顺时针。</p>
<h3 id="5-5-代码参考"><a href="#5-5-代码参考" class="headerlink" title="5.5 代码参考"></a>5.5 代码参考</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>淘宝轮播图做法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tb-promo</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">520px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">280px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tb-promo</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">520px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">280px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 并集选择器可以集体声明相同的样式 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.prev</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.next</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 绝对定位的盒子垂直居中 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: -<span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 加了绝对定位的盒子可以直接设置高度和宽度 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">3</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.prev</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* border-radius: 15px; */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-top-right-radius</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-bottom-right-radius</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.next</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 如果一个盒子既有left属性也有right属性，则默认会执行 left属性 同理  top  bottom  会执行 top */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* border-radius: 15px; */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-top-left-radius</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-bottom-left-radius</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.promo-nav</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">bottom</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-left</span>: -<span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">70px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">13px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* background-color: pink; */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>, .<span class="number">3</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">7px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.promo-nav</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">3px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 不要忘记选择器权重的问题 */</span></span></span><br><span class="line"><span class="language-css">       <span class="selector-class">.promo-nav</span> <span class="selector-class">.selected</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#ff5000</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tb-promo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/tb.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 左侧按钮箭头 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;prev&quot;</span>&gt;</span> <span class="symbol">&amp;lt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 右侧按钮箭头 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;next&quot;</span>&gt;</span> <span class="symbol">&amp;gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 小圆点 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;promo-nav&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;selected&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="6-网页布局总结"><a href="#6-网页布局总结" class="headerlink" title="6. 网页布局总结"></a>6. 网页布局总结</h2><p>通过盒子模型，清楚知道大部分html标签是一个盒子。</p>
<p>通过CSS浮动、定位 可以让每个盒子排列成为网页。</p>
<p>一个完整的网页，是标准流、浮动、定位一起完成布局的，每个都有自己的专门用法。</p>
<h3 id="6-1-标准流"><a href="#6-1-标准流" class="headerlink" title="6.1. 标准流"></a>6.1. 标准流</h3><p>可以让盒子上下排列或者左右排列，<strong>垂直的块级盒子显示就用标准流布局</strong>。</p>
<h3 id="6-2-浮动"><a href="#6-2-浮动" class="headerlink" title="6.2. 浮动"></a>6.2. 浮动</h3><p>可以让多个块级元素一行显示或者左右对齐盒子，<strong>多个块级盒子水平显示就用浮动布局</strong></p>
<h3 id="6-3-定位"><a href="#6-3-定位" class="headerlink" title="6.3. 定位"></a>6.3. 定位</h3><p>定位最大的特点是有层叠的概念，就是可以让多个盒子前后叠压来显示。<strong>如果元素自由在某个盒子内移动就用定位布局。</strong></p>
<h2 id="7-元素的显示与隐藏"><a href="#7-元素的显示与隐藏" class="headerlink" title="7. 元素的显示与隐藏"></a>7. 元素的显示与隐藏</h2><ul>
<li><p>目的（本质）</p>
<p>​    让一个元素在页面中消失或者显示出来</p>
</li>
<li><p>场景</p>
<p>​    类似网站广告，当我们点击关闭就不见了，但是我们重新刷新页面，会重新出现！</p>
</li>
</ul>
<h3 id="7-1-display-显示（重点）"><a href="#7-1-display-显示（重点）" class="headerlink" title="7.1. display 显示（重点）"></a>7.1. display 显示（重点）</h3><ul>
<li><p>display 设置或检索对象是否及如何显示。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">display: none 隐藏对象</span><br><span class="line"></span><br><span class="line">display：block 除了转换为块级元素之外，同时还有显示元素的意思。</span><br></pre></td></tr></table></figure>
</li>
<li><p>特点： display 隐藏元素后，<strong>不再占</strong>有原来的位置。</p>
</li>
<li><p>后面应用及其广泛，搭配 JS 可以做很多的网页特效。实际开发场景：</p>
<blockquote>
<p>配合后面js做特效，比如下拉菜单，原先没有，鼠标经过，显示下拉菜单， 应用极为广泛</p>
</blockquote>
</li>
</ul>
<img src="/images/29none.png">

<blockquote>
</blockquote>
<h3 id="7-2-visibility-可见性-（了解）"><a href="#7-2-visibility-可见性-（了解）" class="headerlink" title="7.2. visibility 可见性 （了解）"></a>7.2. visibility 可见性 （了解）</h3><ul>
<li><p>visibility 属性用于指定一个元素应可见还是隐藏。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">visibility：visible ; 　元素可视</span><br><span class="line"></span><br><span class="line">visibility：hidden; 　  元素隐藏</span><br></pre></td></tr></table></figure>
</li>
<li><p>特点：<strong>visibility 隐藏元素后，继续占有原来的位置</strong>。（停职留薪）</p>
</li>
<li><p>如果隐藏元素想要原来位置， 就用 visibility：hidden</p>
</li>
<li><p>如果隐藏元素不想要原来位置， 就用 display：none  (用处更多 重点）</p>
</li>
</ul>
<img src="/images/30visibility.png">

<h3 id="7-3-overflow-溢出（重点）"><a href="#7-3-overflow-溢出（重点）" class="headerlink" title="7.3. overflow 溢出（重点）"></a>7.3. overflow 溢出（重点）</h3><ul>
<li>overflow 属性指定了如果内容溢出一个元素的框（超过其指定高度及宽度） 时，会发生什么。</li>
</ul>
<table>
<thead>
<tr>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><strong>visible</strong></td>
<td>不剪切内容也不添加滚动条</td>
</tr>
<tr>
<td><strong>hidden</strong></td>
<td>不显示超过对象尺寸的内容，超出的部分隐藏掉</td>
</tr>
<tr>
<td><strong>scroll</strong></td>
<td>不管超出内容否，总是显示滚动条</td>
</tr>
<tr>
<td><strong>auto</strong></td>
<td>超出自动显示滚动条，不超出不显示滚动条</td>
</tr>
</tbody></table>
<ul>
<li>一般情况下，我们都不想让溢出的内容显示出来，因为溢出的部分会影响布局。</li>
<li>但是如果有定位的盒子， 请慎用overflow:hidden  因为它会隐藏多余的部分。</li>
</ul>
<img src="/images/33overflow.png">



<ul>
<li>实际开发场景：</li>
</ul>
<ol>
<li>清除浮动</li>
<li>隐藏超出内容，隐藏掉,  不允许内容超过父盒子。</li>
</ol>
<h3 id="7-4-显示与隐藏总结"><a href="#7-4-显示与隐藏总结" class="headerlink" title="7.4. 显示与隐藏总结"></a>7.4. 显示与隐藏总结</h3><table>
<thead>
<tr>
<th>属性</th>
<th>区别</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td><strong>display 显示     （重点）</strong></td>
<td>隐藏对象，不保留位置</td>
<td>配合后面js做特效，比如下拉菜单，原先没有，鼠标经过，显示下拉菜单， 应用极为广泛</td>
</tr>
<tr>
<td><strong>visibility 可见性 （了解）</strong></td>
<td>隐藏对象，保留位置</td>
<td>使用较少</td>
</tr>
<tr>
<td><strong>overflow 溢出（重点）</strong></td>
<td>只是隐藏超出大小的部分</td>
<td>1. 可以清除浮动  2. 保证盒子里面的内容不会超出该盒子范围</td>
</tr>
</tbody></table>
<h2 id="8-综合案例：土豆网鼠标经过显示遮罩"><a href="#8-综合案例：土豆网鼠标经过显示遮罩" class="headerlink" title="8 综合案例：土豆网鼠标经过显示遮罩"></a>8 综合案例：土豆网鼠标经过显示遮罩</h2><h3 id="8-1-效果图"><a href="#8-1-效果图" class="headerlink" title="8.1. 效果图"></a>8.1. 效果图</h3><img src="/images/土豆网案例.png">

<h3 id="8-2-案例目标"><a href="#8-2-案例目标" class="headerlink" title="8.2. 案例目标"></a>8.2. 案例目标</h3><p>1.练习元素的显示与隐藏</p>
<p>2.练习元素的定位</p>
<h3 id="8-3-核心原理"><a href="#8-3-核心原理" class="headerlink" title="8.3. 核心原理"></a>8.3. 核心原理</h3><p>原先半透明的黑色遮罩看不见， 鼠标经过 大盒子，就显示出来。</p>
<p>遮罩的盒子不占有位置， 就需要用绝对定位 和 display  配合使用。</p>
<h3 id="8-4-代码参考"><a href="#8-4-代码参考" class="headerlink" title="8.4. 代码参考"></a>8.4. 代码参考</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>仿土豆网显示隐藏遮罩案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tudou</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">444px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">320px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">30px</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tudou</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.mask</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 隐藏遮罩层 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">4</span>) <span class="built_in">url</span>(<span class="string">images/arr.png</span>) no-repeat center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 当我们鼠标经过了 土豆这个盒子，就让里面遮罩层显示出来 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tudou</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.mask</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 而是显示元素 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tudou&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mask&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/tudou.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tudou&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mask&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/tudou.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tudou&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mask&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/tudou.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tudou&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mask&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/tudou.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css与PS切图（四）</title>
    <url>/2022/04/02/css%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<h2 id="一、其他样式"><a href="#一、其他样式" class="headerlink" title="一、其他样式"></a>一、其他样式</h2><h3 id="1、圆角边框"><a href="#1、圆角边框" class="headerlink" title="1、圆角边框"></a>1、圆角边框</h3><p>在 CSS3 中，新增了圆角边框样式，这样我们的盒子就可以变圆角了。</p>
<p>border-radius 属性用于设置元素的外边框圆角。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>:length;    </span><br></pre></td></tr></table></figure>

<ul>
<li>参数值可以为数值或百分比的形式</li>
<li>如果是正方形，想要设置为一个圆，把数值修改为高度或者宽度的一半即可，或者直接写为 50%</li>
<li>该属性是一个简写属性，可以跟四个值，分别代表左上角、右上角、右下角、左下角</li>
<li>分开写：border-top-left-radius、border-top-right-radius、border-bottom-right-radius 和border-bottom-left-radius</li>
<li>兼容性 ie9+ 浏览器支持, 但是不会影响页面布局,可以放心使用</li>
</ul>
<h3 id="2、盒子阴影"><a href="#2、盒子阴影" class="headerlink" title="2、盒子阴影"></a>2、盒子阴影</h3><p>CSS3 中新增了盒子阴影，我们可以使用 box-shadow 属性为盒子添加阴影。<br>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: h-shadow v-shadow blur spread color inset; </span><br></pre></td></tr></table></figure>

<p><img src="/images/1571541874805.png" alt="1571541874805"></p>
<h3 id="3、文字阴影"><a href="#3、文字阴影" class="headerlink" title="3、文字阴影"></a>3、文字阴影</h3><p>在 CSS3 中，我们可以使用 text-shadow 属性将阴影应用于文本。<br>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-shadow</span>: h-shadow v-shadow blur color;</span><br></pre></td></tr></table></figure>

<p><img src="/images/1571541954222.png" alt="1571541954222"></p>
<h2 id="二、浮动"><a href="#二、浮动" class="headerlink" title="二、浮动"></a>二、浮动</h2><h3 id="1、传统网页布局的三种方式"><a href="#1、传统网页布局的三种方式" class="headerlink" title="1、传统网页布局的三种方式"></a>1、传统网页布局的三种方式</h3><p>​    CSS 提供了三种传统布局方式(简单说,就是盒子如何进行排列顺序)：</p>
<ul>
<li><p>普通流（标准流）</p>
</li>
<li><p>浮动</p>
</li>
<li><p>定位</p>
<p>这三种布局方式都是用来摆放盒子的，盒子摆放到合适位置，布局自然就完成了。</p>
</li>
</ul>
<p>注意：实际开发中，一个页面基本都包含了这三种布局方式（后面移动端学习新的布局方式） 。</p>
<h3 id="2、标准流（普通流-x2F-文档流）"><a href="#2、标准流（普通流-x2F-文档流）" class="headerlink" title="2、标准流（普通流&#x2F;文档流）"></a>2、标准流（普通流&#x2F;文档流）</h3><p>所谓的标准流:  就是标签按照规定好默认方式排列</p>
<ol>
<li>块级元素会独占一行，从上向下顺序排列。常用元素：div、hr、p、h1~h6、ul、ol、dl、form、table</li>
<li>行内元素会按照顺序，从左到右顺序排列，碰到父元素边缘则自动换行。常用元素：span、a、i、em 等</li>
</ol>
<p>以上都是标准流布局，我们前面学习的就是标准流，标准流是最基本的布局方式。</p>
<h3 id="3、为什么需要浮动？"><a href="#3、为什么需要浮动？" class="headerlink" title="3、为什么需要浮动？"></a>3、为什么需要浮动？</h3><p>​        总结： 有很多的布局效果，标准流没有办法完成，此时就可以利用浮动完成布局。 因为浮动可以改变元素标签默认的排列方式.</p>
<p>​        浮动最典型的应用：可以让多个块级元素一行内排列显示。</p>
<p>​        网页布局第一准则：<strong>多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动</strong>。</p>
<h3 id="4、什么是浮动？"><a href="#4、什么是浮动？" class="headerlink" title="4、什么是浮动？"></a>4、什么是浮动？</h3><p>​        float 属性用于创建浮动框，将其移动到一边，直到左边缘或右边缘触及包含块或另一个浮动框的边缘。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器 &#123; <span class="attribute">float</span>: 属性值; &#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/1571543209934.png" alt="1571543209934"></p>
<h3 id="5、浮动特性"><a href="#5、浮动特性" class="headerlink" title="5、浮动特性"></a>5、浮动特性</h3><p>加了浮动之后的元素,会具有很多特性,需要我们掌握的.</p>
<p>1、浮动元素会脱离标准流(脱标：浮动的盒子不再保留原先的位置)</p>
<p><img src="/images/1571544664994.png" alt="1571544664994"></p>
<p>2、浮动的元素会一行内显示并且元素顶部对齐</p>
<p><img src="/images/1571544725757.png" alt="1571544725757"></p>
<p>注意： </p>
<p>​        浮动的元素是互相贴靠在一起的（不会有缝隙），如果父级宽度装不下这些浮动的盒子，多出的盒子会另起一行对齐。</p>
<p>3、浮动的元素会具有行内块元素的特性</p>
<p>​        浮动元素的大小根据内容来决定</p>
<p>​        浮动的盒子中间是没有缝隙的</p>
<h3 id="6、浮动元素经常和标准流父级搭配使用"><a href="#6、浮动元素经常和标准流父级搭配使用" class="headerlink" title="6、浮动元素经常和标准流父级搭配使用"></a>6、浮动元素经常和标准流父级搭配使用</h3><p>为了约束浮动元素位置, 我们网页布局一般采取的策略是:</p>
<p>​        先用标准流父元素排列上下位置, 之后内部子元素采取浮动排列左右位置.  符合网页布局第一准侧</p>
<p><img src="/images/1571544991989.png" alt="1571544991989"></p>
<h2 id="三、常见网页布局"><a href="#三、常见网页布局" class="headerlink" title="三、常见网页布局"></a>三、常见网页布局</h2><h3 id="浮动布局注意点"><a href="#浮动布局注意点" class="headerlink" title="浮动布局注意点"></a>浮动布局注意点</h3><p>1、浮动和标准流的父盒子搭配。</p>
<p>先用标准流的父元素排列上下位置, 之后内部子元素采取浮动排列左右位置</p>
<p>2、一个元素浮动了，理论上其余的兄弟元素也要浮动。</p>
<p>一个盒子里面有多个子盒子，如果其中一个盒子浮动了，其他兄弟也应该浮动，以防止引起问题。</p>
<p>浮动的盒子只会影响浮动盒子后面的标准流,不会影响前面的标准流.</p>
<h2 id="四、清除浮动"><a href="#四、清除浮动" class="headerlink" title="四、清除浮动"></a>四、清除浮动</h2><h3 id="1、为什么需要清除浮动？"><a href="#1、为什么需要清除浮动？" class="headerlink" title="1、为什么需要清除浮动？"></a>1、为什么需要清除浮动？</h3><p>​        由于父级盒子很多情况下，不方便给高度，但是子盒子浮动又不占有位置，最后父级盒子高度为 0 时，就会影响下面的标准流盒子。</p>
<p><img src="/images/1571555883628.png" alt="1571555883628"></p>
<h3 id="2、清除浮动本质"><a href="#2、清除浮动本质" class="headerlink" title="2、清除浮动本质"></a>2、清除浮动本质</h3><p>清除浮动的本质是清除浮动元素造成的影响：浮动的子标签无法撑开父盒子的高度</p>
<p>注意：</p>
<ul>
<li>如果父盒子本身有高度，则不需要清除浮动</li>
<li>清除浮动之后，父级就会根据浮动的子盒子自动检测高度。</li>
<li>父级有了高度，就不会影响下面的标准流了</li>
</ul>
<h3 id="3、清除浮动样式"><a href="#3、清除浮动样式" class="headerlink" title="3、清除浮动样式"></a>3、清除浮动样式</h3><p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器&#123;<span class="attribute">clear</span>:属性值;&#125; </span><br></pre></td></tr></table></figure>

<p><img src="/images/1571555980419.png" alt="1571555980419"></p>
<p>我们实际工作中， 几乎只用 clear: both;</p>
<p>清除浮动的策略是:  闭合浮动. </p>
<h3 id="4、清除浮动的多种方式"><a href="#4、清除浮动的多种方式" class="headerlink" title="4、清除浮动的多种方式"></a>4、清除浮动的多种方式</h3><h4 id="4-1、额外标签法"><a href="#4-1、额外标签法" class="headerlink" title="4.1、额外标签法"></a>4.1、额外标签法</h4><p>额外标签法也称为隔墙法，是 W3C 推荐的做法。</p>
<p>使用方式：</p>
<p>​        额外标签法会在浮动元素末尾添加一个空的标签。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">例如 <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;clear:both&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>，或者其他标签（如<span class="tag">&lt;<span class="name">br</span> /&gt;</span>等）。</span><br></pre></td></tr></table></figure>

<p>​        优点： 通俗易懂，书写方便</p>
<p>​        缺点： 添加许多无意义的标签，结构化较差</p>
<p>​        注意： 要求这个新的空标签必须是块级元素。</p>
<p>总结:</p>
<p>​    1、清除浮动本质是?</p>
<p>​            清除浮动的本质是清除浮动元素脱离标准流造成的影响</p>
<p>​    2、清除浮动策略是?</p>
<p>​            闭合浮动.  只让浮动在父盒子内部影响,不影响父盒子外面的其他盒子.</p>
<p>​    3、额外标签法?</p>
<p>​            隔墙法, 就是在最后一个浮动的子元素后面添</p>
<p>​    4、加一个额外标签, 添加 清除浮动样式.</p>
<p>​            实际工作可能会遇到,但是不常用</p>
<h4 id="4-2、父级添加-overflow-属性"><a href="#4-2、父级添加-overflow-属性" class="headerlink" title="4.2、父级添加 overflow 属性"></a>4.2、父级添加 overflow 属性</h4><p>可以给父级添加 overflow 属性，将其属性值设置为 hidden、 auto 或 scroll 。</p>
<p>例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">overflow</span>:hidden | auto | scroll;</span><br></pre></td></tr></table></figure>

<p>优点：代码简洁</p>
<p>缺点：无法显示溢出的部分</p>
<p>注意：是给父元素添加代码</p>
<h4 id="4-3、父级添加after伪元素"><a href="#4-3、父级添加after伪元素" class="headerlink" title="4.3、父级添加after伪元素"></a>4.3、父级添加after伪元素</h4><p>:after 方式是额外标签法的升级版。给父元素添加：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;  </span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>; </span><br><span class="line">  <span class="attribute">display</span>: block; </span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>; </span><br><span class="line">  <span class="attribute">clear</span>: both; </span><br><span class="line">  <span class="attribute">visibility</span>: hidden;  </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;  <span class="comment">/* IE6、7 专有 */</span> </span><br><span class="line">  *zoom: <span class="number">1</span>;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>

<p>优点：没有增加标签，结构更简单</p>
<p>缺点：照顾低版本浏览器</p>
<p>代表网站： 百度、淘宝网、网易等</p>
<h4 id="4-4、父级添加双伪元素"><a href="#4-4、父级添加双伪元素" class="headerlink" title="4.4、父级添加双伪元素"></a>4.4、父级添加双伪元素</h4><p>给父元素添加</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,<span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>:table; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">   *zoom:<span class="number">1</span>;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>

<p>优点：代码更简洁</p>
<p>缺点：照顾低版本浏览器</p>
<p>代表网站：小米、腾讯等</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>为什么需要清除浮动？</p>
<ol>
<li>父级没高度。</li>
<li>子盒子浮动了。</li>
<li>影响下面布局了，我们就应该清除浮动了。</li>
</ol>
<p><img src="/images/1571556500074.png" alt="1571556500074"></p>
<h2 id="五、PS-切图"><a href="#五、PS-切图" class="headerlink" title="五、PS 切图"></a>五、PS 切图</h2><h3 id="1、图层切图"><a href="#1、图层切图" class="headerlink" title="1、图层切图"></a>1、图层切图</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">最简单的切图方式：右击图层 → 导出 → 切片。</span><br></pre></td></tr></table></figure>

<h3 id="2、切片切图"><a href="#2、切片切图" class="headerlink" title="2、切片切图"></a>2、切片切图</h3><p>2.1、利用切片选中图片</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">利用切片工具手动划出</span><br></pre></td></tr></table></figure>

<p>2.2、导出选中的图片</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">文件菜单 → 存储为 web 设备所用格式 → 选择我们要的图片格式 → 存储 。</span><br></pre></td></tr></table></figure>

<h3 id="3、PS插件切图"><a href="#3、PS插件切图" class="headerlink" title="3、PS插件切图"></a>3、PS插件切图</h3><p>​        Cutterman 是一款运行在 Photoshop 中的插件，能够自动将你需要的图层进行输出，以替代传统的手工 “导出 web 所用格式” 以及使用切片工具进行挨个切图的繁琐流程。</p>
<p>官网：<a href="http://www.cutterman.cn/zh/cutterman">http://www.cutterman.cn/zh/cutterman</a></p>
<p>注意：Cutterman 插件要求你的 PS 必须是完整版，不能是绿色版，所以大家需要安装完整版本。</p>
<p><img src="/images/1571556821045.png" alt="1571556821045"></p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>idea常见插件及maven依赖</title>
    <url>/2022/08/15/idea%E5%B8%B8%E8%A7%81%E6%8F%92%E4%BB%B6%E5%8F%8Amaven%E4%BE%9D%E8%B5%96/</url>
    <content><![CDATA[<p>[TOC]</p>
<h3 id="idea常用快捷键"><a href="#idea常用快捷键" class="headerlink" title="idea常用快捷键"></a>idea常用快捷键</h3><table>
<thead>
<tr>
<th>快捷键</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl +Space（空格）</td>
<td>基本代码补全，输入字母按后列出匹配的词组</td>
</tr>
<tr>
<td>Ctrl+Shift+Space</td>
<td>智能代码补全，列出与预期类型一致的方法或变量</td>
</tr>
<tr>
<td>Ctrl+Alt+Space</td>
<td>补全类名</td>
</tr>
<tr>
<td>Ctrl+Shift+Enter</td>
<td>补全语句</td>
</tr>
<tr>
<td>Ctrl+P</td>
<td>显示方法参数</td>
</tr>
<tr>
<td>Ctrl+Q</td>
<td>显示注释文档</td>
</tr>
<tr>
<td>Ctrl+D</td>
<td>重复上一行</td>
</tr>
<tr>
<td>Shift+F1</td>
<td>显示外部文档</td>
</tr>
<tr>
<td>Alt+Insert</td>
<td>生成代码，生成 Getter、Setter、构造器等</td>
</tr>
<tr>
<td>Ctrl+O</td>
<td>重写父类方法</td>
</tr>
<tr>
<td>Ctrl+I</td>
<td>实现接口方法</td>
</tr>
<tr>
<td>Ctrl+Alt+T</td>
<td>使用(if..else, try..catch, for, synchronized 等)包围选中语句</td>
</tr>
<tr>
<td>Ctrl+&#x2F;</td>
<td>使用“&#x2F;&#x2F;”注释或取消注释</td>
</tr>
<tr>
<td>Ctrl+Shift+&#x2F;</td>
<td>使用“&#x2F;** **&#x2F;”注释或取消注释</td>
</tr>
<tr>
<td>Alt+Enter</td>
<td>显示快速修复列表</td>
</tr>
<tr>
<td>Ctrl+F</td>
<td>查找</td>
</tr>
<tr>
<td>F3</td>
<td>查找下一个</td>
</tr>
<tr>
<td>Shift+F3</td>
<td>查找上一个</td>
</tr>
<tr>
<td>Ctrl+R</td>
<td>替换</td>
</tr>
<tr>
<td>Ctrl+Shift+F</td>
<td>目录内查找</td>
</tr>
<tr>
<td>Ctrl+Shift+R</td>
<td>目录内替换</td>
</tr>
<tr>
<td>Ctrl+Shift+S</td>
<td>语法模板搜索</td>
</tr>
<tr>
<td>Ctrl+Shift+M</td>
<td>语法模板替换</td>
</tr>
</tbody></table>
<h3 id="IDEA-常用插件"><a href="#IDEA-常用插件" class="headerlink" title="IDEA 常用插件"></a>IDEA 常用插件</h3><h4 id="1-Hrisey-Plugins"><a href="#1-Hrisey-Plugins" class="headerlink" title="1.Hrisey Plugins"></a>1.Hrisey Plugins</h4><p>idea安装<a href="https://so.csdn.net/so/search?q=lombok&spm=1001.2101.3001.7020">lombok</a>插件后报错：（lombok报错Ambiguous method call. Both）是因为<br>由于IntelliJ IDEA 2018 默认是开启了Hrisey Plugins插件的，与 Lombok Plugins 使用产生了冲突，这里之提供Window下的解决方法：IDEA–》setting—–》Plugins—–》已安装的插件Hrisey Plugins—&gt;禁用重启IDEA便可以</p>
<h4 id="2-MybatisX"><a href="#2-MybatisX" class="headerlink" title="2.MybatisX"></a>2.MybatisX</h4><p>如何你使用MyBatis-Plus开发，MybatisX插件可谓神器，不仅可以快速帮你从数据生成mapper、xml、entity、service等通用代码（需要在IDEA右侧Database中连接数据库），还可以根据接口方法生成xml中的标签，快速从mapper中方法跳转到xml代码。</p>
<h4 id="3-Properties-to-YAML-Converter"><a href="#3-Properties-to-YAML-Converter" class="headerlink" title="3.Properties to YAML Converter"></a>3.Properties to YAML Converter</h4><p>Properties 转yaml文件</p>
<p>EasyCode 自动生成代码插件</p>
<p>教程：<a href="https://blog.csdn.net/wang20010104/article/details/124410277">https://blog.csdn.net/wang20010104/article/details/124410277</a></p>
<h4 id="4-Lombok"><a href="#4-Lombok" class="headerlink" title="4.Lombok"></a>4.Lombok</h4><p>Lombok能以简单的注解形式来简化java代码，提高开发人员的开发效率。例如开发中经常需要写的javabean，都需要花时间去添加相应的getter&#x2F;setter，也许还要去写构造器、equals等方法，而且需要维护，当属性多时会出现大量的getter&#x2F;setter方法，这些显得很冗长也没有太多技术含量，一旦修改属性，就容易出现忘记修改对应方法的失误。Lombok能通过注解的方式，在编译时自动为属性生成构造器、getter&#x2F;setter、equals、hashcode、toString方法。</p>
<h4 id="5-MyBatisCodeHelperPro"><a href="#5-MyBatisCodeHelperPro" class="headerlink" title="5.MyBatisCodeHelperPro"></a>5.MyBatisCodeHelperPro</h4><p>在开发中编写生成bean，mapper，mapper.xml即费时也费力，可以通过MyBatisCodeHelper-Pro自动生成bean，dao，mapper.xml等文件，然后根据自己的需要进行修改。</p>
<h4 id="6-Stackoverflow"><a href="#6-Stackoverflow" class="headerlink" title="6.Stackoverflow"></a><strong>6.Stackoverflow</strong></h4><p>这个插件其实是最实用的插件，程序猿遇到的问题，基本都能找到回答，但是它使用的是google搜索引擎，对于，不购买vpn的同学来说，感觉好鸡肋呀~</p>
<p>选中需要搜索的问题，然后，右键点击</p>
<h4 id="7-Mybatis-log-plugin"><a href="#7-Mybatis-log-plugin" class="headerlink" title="7.Mybatis-log-plugin"></a>7.Mybatis-log-plugin</h4><p>开发的项目一般都少不了日志系统，而我们在书写mysql语句的时候，参数的对应，往往有时候会忽略，mybatis自己控制的参数编译对应，个人感觉有点反人类，我们可以使用这个插件变成自己比较直观的对应~</p>
<p>选中需要转换的mybatis log日志，然后点击右键，选择Restore sql from slection</p>
<h4 id="8-GsonFormat"><a href="#8-GsonFormat" class="headerlink" title="8.GsonFormat"></a>8.GsonFormat</h4><p>在与组外或者不同部门对接接口时候发现，有时候对方返回的是JSON对象，自己想要用一个对象去接受，以便于处理后续，此时，需要自己一个个手动去输入属性么，肯定很抓狂，不过咱们可以使用这个插件来解决这个尴尬问题，当然也可以使用外部网址解决，比如bejson这个网站~</p>
<h4 id="9-Free-idea-mybatis"><a href="#9-Free-idea-mybatis" class="headerlink" title="9.Free-idea-mybatis"></a>9.Free-idea-mybatis</h4><p>mybatis xml和对应的mapper之间来回切换的时候，有时候不同人开发，放置的位置又不同，使用此插件后，来回切换的时候异常方便，和所放置的位置无关~</p>
<h4 id="10-Maven-Helper"><a href="#10-Maven-Helper" class="headerlink" title="10.Maven Helper"></a>10.Maven Helper</h4><p>主要功能如下：查找和排除冲突依赖项的简便方法，为包含当前文件或根模块的模块运行&#x2F;调试maven目标的操作，运行&#x2F;调试当前测试文件的操作</p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><h4 id="1-application-yml配置文件"><a href="#1-application-yml配置文件" class="headerlink" title="1.application.yml配置文件"></a>1.application.yml配置文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql://localhost:3306/test?serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=UTF-88&amp;allowMultiQueries=true</span><br><span class="line">    username: root</span><br><span class="line">    password: password</span><br><span class="line">    web:</span><br><span class="line">    resources:</span><br><span class="line">      static-locations:</span><br><span class="line">        - file:C:/</span><br><span class="line">server:</span><br><span class="line">  port: 9002</span><br><span class="line">  </span><br><span class="line">mybatis-plus:</span><br><span class="line">  mapper-locations: classpath*:/mapper/*Mapper.xml</span><br><span class="line">  configuration:</span><br><span class="line">    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl #开启sql日志</span><br><span class="line">    map-underscore-to-camel-case: true</span><br><span class="line">    # 该配置就是将带有下划线的表字段映射为驼峰格式的实体类属性</span><br></pre></td></tr></table></figure>

<h4 id="2-application-properties配置文件"><a href="#2-application-properties配置文件" class="headerlink" title="2.application.properties配置文件"></a>2.application.properties配置文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 应用名称</span><br><span class="line">spring.application.name=test</span><br><span class="line"># 应用服务 WEB 访问端口</span><br><span class="line">server.port=8085</span><br><span class="line"># 数据库驱动：</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class="line"># 数据源名称</span><br><span class="line">spring.datasource.name=defaultDataSource</span><br><span class="line"># 数据库连接地址</span><br><span class="line">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/test1?characterEncoding=UTF-8&amp;useUnicode=true&amp;useSSL=false&amp;tinyInt1isBit=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=Asia/Shanghai</span><br><span class="line"></span><br><span class="line"># 数据库用户名&amp;密码：</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=password</span><br><span class="line">#输出运行的sql语句命令</span><br><span class="line">#mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl</span><br></pre></td></tr></table></figure>

<h3 id="Maven工程"><a href="#Maven工程" class="headerlink" title="Maven工程"></a>Maven工程</h3><h4 id="一-辅助依赖"><a href="#一-辅助依赖" class="headerlink" title="一.辅助依赖"></a>一.辅助依赖</h4><h4 id="1-测试接口"><a href="#1-测试接口" class="headerlink" title="1.测试接口"></a>1.测试接口</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 导入swagger --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.swagger&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;swagger-annotations&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.5.20&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h4 id="2-jsoup（爬虫）"><a href="#2-jsoup（爬虫）" class="headerlink" title="2.jsoup（爬虫）"></a>2.jsoup（爬虫）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.jsoup&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jsoup&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.14.3&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h4 id="3-lombok"><a href="#3-lombok" class="headerlink" title="3.lombok"></a>3.lombok</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--简略get、set方法--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.18.10&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h4 id="5-MySQL"><a href="#5-MySQL" class="headerlink" title="5.MySQL"></a>5.MySQL</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h4 id="6-Json格式转换工具Fastjson"><a href="#6-Json格式转换工具Fastjson" class="headerlink" title="6.Json格式转换工具Fastjson"></a><strong>6.Json格式转换工具Fastjson</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.47&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h4 id="7-Netty"><a href="#7-Netty" class="headerlink" title="7.Netty"></a>7.Netty</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;io.netty&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;netty-all&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;4.1.17.Final&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h4 id="二-Springboot"><a href="#二-Springboot" class="headerlink" title="二.Springboot"></a>二.Springboot</h4><h4 id="1-核心依赖"><a href="#1-核心依赖" class="headerlink" title="1.核心依赖"></a>1.核心依赖</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h4 id="2-web"><a href="#2-web" class="headerlink" title="2.web"></a>2.web</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-websevice"><a href="#3-websevice" class="headerlink" title="3.websevice"></a>3.websevice</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;spring-boot-starter-web-services&lt;/artifactId&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h4 id="4-security"><a href="#4-security" class="headerlink" title="4.security"></a>4.security</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数据库</span><br><span class="line">如果是用mybatis的话，选mybatis和mysql驱动就可以了</span><br><span class="line">jdbc api 就是 spring-jdbc 相关的东西</span><br><span class="line">data jdbc 是 spring data 的一个项目，是另外一个封装数据库操作的库</span><br><span class="line">JDBC规范 </span><br><span class="line">&gt;   java.sql和javax.sql两个包中的类与接口(天龙八部)：</span><br><span class="line">&gt;   DataSource:数据源</span><br><span class="line">&gt;   DriverManager：驱动管理</span><br><span class="line">&gt;   Driver：JDBC驱动</span><br><span class="line">&gt;   Connection：数据库连接</span><br><span class="line">&gt;   Statement：语句，执行SQL</span><br><span class="line">&gt;   PrepareStatement:预编译语句，性能更好</span><br><span class="line">&gt;   CallableStatement：调用存储过程</span><br><span class="line">&gt;   ResultSet：结果集，封装了多条记录</span><br><span class="line">&gt;   JDBC数据库连接池/Connection Pool</span><br><span class="line">&gt;     DBCP:apache tomcat内置</span><br><span class="line">&gt;     c3p0:hibernate</span><br><span class="line">&gt;     光-HikariCP：spring boot</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="5-引入数据库驱动"><a href="#5-引入数据库驱动" class="headerlink" title="5.引入数据库驱动"></a>5.引入数据库驱动</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--引入数据库驱动 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h4 id="6-springboot-数据库连接（如果是用mybatis的话，选mybatis和mysql驱动就可以了）"><a href="#6-springboot-数据库连接（如果是用mybatis的话，选mybatis和mysql驱动就可以了）" class="headerlink" title="6.springboot 数据库连接（如果是用mybatis的话，选mybatis和mysql驱动就可以了）"></a>6.springboot 数据库连接（如果是用mybatis的话，选mybatis和mysql驱动就可以了）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--springBoot数据库连接  --&gt;</span><br><span class="line">         &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-data-jdbc&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;    </span><br></pre></td></tr></table></figure>

<h4 id="7-mybatisPlus-核心库"><a href="#7-mybatisPlus-核心库" class="headerlink" title="7.mybatisPlus 核心库"></a>7.mybatisPlus 核心库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- mybatisPlus 核心库 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.4.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">  &lt;!--mybatisplus自动生成代码依赖--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.4.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h4 id="8-mybatis-核心库"><a href="#8-mybatis-核心库" class="headerlink" title="8.mybatis 核心库"></a>8.mybatis 核心库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.2.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h4 id="9-thymeleaf模板"><a href="#9-thymeleaf模板" class="headerlink" title="9.thymeleaf模板"></a>9.thymeleaf模板</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h4 id="10-支持热部署"><a href="#10-支持热部署" class="headerlink" title="10.支持热部署"></a>10.支持热部署</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h4 id="11-redis"><a href="#11-redis" class="headerlink" title="11.redis"></a>11.redis</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- redisson分布式锁 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.redisson&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;redisson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.16.6&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h4 id="12-测试引擎"><a href="#12-测试引擎" class="headerlink" title="12.测试引擎"></a>12.测试引擎</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">           &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">           &lt;exclusions&gt;</span><br><span class="line">               &lt;exclusion&gt;</span><br><span class="line">                   &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;</span><br><span class="line">                   &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;</span><br><span class="line">               &lt;/exclusion&gt;</span><br><span class="line">           &lt;/exclusions&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h4 id="13-maven事例"><a href="#13-maven事例" class="headerlink" title="13.maven事例"></a>13.maven事例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--springboot版本--&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.7.2&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">&lt;!--粘贴替换部分--&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.2.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;excludes&gt;</span><br><span class="line">                        &lt;exclude&gt;</span><br><span class="line">                            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">                            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">                        &lt;/exclude&gt;</span><br><span class="line">                    &lt;/excludes&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>4.java对本地文件的处理</title>
    <url>/2022/04/22/java%E5%AF%B9%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E7%9A%84%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>java.io.File类主要用于描述文件或目录路径的抽象表示信息，可以获取文件或目录的特征信息， 如：大小等<br>常用的方法   方法声明    功能介绍</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">File(String pathname)	根据参数指定的路径名来构造对象</span><br><span class="line">File(String parent, String child)	根据参数指定的父路径和子路径信息构造对象</span><br><span class="line">File(File parent, String child)	根据参数指定的父抽象路径和子路径信息构造对象</span><br><span class="line">boolean exists()	测试此抽象路径名表示的文件或目录是否存在</span><br><span class="line">String getName()	用于获取文件的名称</span><br><span class="line">long length()	返回由此抽象路径名表示的文件的长度</span><br><span class="line">long lastModified()	用于获取文件的最后一次修改时间</span><br><span class="line">String getAbsolutePath()	用于获取绝对路径信息</span><br><span class="line">boolean delete()	用于删除文件，当删除目录时要求是空目录</span><br><span class="line">boolean createNewFile()	用于创建新的空文件</span><br><span class="line">boolean mkdir()	用于创建目录</span><br><span class="line">boolean mkdirs()	用于创建多级目录</span><br><span class="line">File[] listFiles()	获取该目录下的所有内容</span><br><span class="line">boolean isFile()	判断是否为文件</span><br><span class="line">boolean isDirectory()	判断是否为目录</span><br><span class="line">File[] listFiles(FileFilter filter)	获取目录下满足筛选器的所有内容</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//改文件名</span><br><span class="line">File file = new File(&quot;F:/a/b&quot;);</span><br><span class="line">file.renameTo(new File(&quot;F:/a/bbb&quot;));</span><br></pre></td></tr></table></figure>



<h4 id="方法演示1"><a href="#方法演示1" class="headerlink" title="方法演示1."></a>方法演示1.</h4><pre><code>    // 3.由于修改时间返回的是毫秒值 所有格式化
    SimpleDateFormat format = new SimpleDateFormat(&quot;yyyy年MM月dd日 HH:mm:ss&quot;);
    // 1.构造File类型的对象 并用 z:/a.txt初始化
    File file = new File(&quot;z:/a.txt&quot;);
    if (file.exists()) &#123; // 判断文件是否存在 如果存在执行以下代码
        System.out.println(&quot;文件的名称是:&quot; + file.getName()); // a.txt
        System.out.println(&quot;文件的大小是:&quot; + file.length()); // 0
        System.out.println(&quot;文件的最后一次次改时间是&quot; + format.format(new Date(file.lastModified()))); // 2021年08月19日 22:23:10
        System.out.println(&quot;文件的绝对路径是:&quot; + file.getAbsolutePath()); // z:/a.txt
        System.out.println(file.delete() ? &quot;文件删除成功&quot; : &quot;文件删除失败&quot;); // 文件删除成功
    &#125; else &#123;
        // 3.如果文件不存在 创建文件
        try &#123;
            System.out.println(file.createNewFile() ? &quot;文件创建成功&quot; : &quot;文件创建失败&quot;); // 文件创建成功
        &#125; catch (IOException e) &#123;
            e.printStackTrace();
        &#125;
    &#125;
</code></pre>
<h4 id="创建目录2"><a href="#创建目录2" class="headerlink" title="创建目录2."></a>创建目录2.</h4><pre><code>    // 4.实现单多级目录的创建
    File file1 = new File(&quot;z:/java/css/html&quot;);
    if (file1.exists()) &#123;
        System.out.println(&quot;目录名称是:&quot; + file1.getName());
        System.out.println(file1.delete() ? &quot;目录删除成功&quot; : &quot;目录删除失败&quot;);
    &#125; else &#123;
        // System.out.println(file1.mkdir() ? &quot;目录创建成功&quot; : &quot;目录创建失败&quot;); // 创建单单极目录
        System.out.println(file1.mkdirs() ? &quot;目录创建成功&quot; : &quot;目录创建失败&quot;); // 创建多单极目录
    &#125;
</code></pre>
<h4 id="遍历目录结构3"><a href="#遍历目录结构3" class="headerlink" title="遍历目录结构3."></a>遍历目录结构3.</h4><pre><code>    // 5.获取文件目录的文件及文件夹 并遍历
    File file2 = new File(&quot;z:/java&quot;);
    File[] filesArr = file2.listFiles();
    // 5.1遍历file数组
    for (File file3 : filesArr) &#123;
        String name = file3.getName();
        // 判读是否为文件 如果是打印文件名
        if (file3.isFile())&#123;
            System.out.println(name);
        &#125;
        // 判断是否为目录 如果是 打印目录名 并按照格式&#123;&#125;
        if (file3.isDirectory())&#123;
            System.out.println(&quot;&#123;&quot; + name + &quot;&#125;&quot;);
        &#125;
     &#125;
</code></pre>
<h4 id="文件过滤器的使用"><a href="#文件过滤器的使用" class="headerlink" title="文件过滤器的使用"></a>文件过滤器的使用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 6.实现目录中的所有内容获取的通时 进行过滤 获取.png为后缀名的所有</span><br><span class="line">        // 6.1 使用匿名内部类</span><br><span class="line">        File[] files = file2.listFiles(new FileFilter() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public boolean accept(File pathname) &#123;</span><br><span class="line">                return pathname.getName().endsWith(&quot;.png&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        // 6.1 使用lambda表达式</span><br><span class="line">        FileFilter filter = (File pathname) -&gt; pathname.getName().endsWith(&quot;.mp4&quot;);</span><br><span class="line">        // 6.1 传入lambda表达式</span><br><span class="line">        File[] file5 = file2.listFiles((File pathname) -&gt; pathname.getName().endsWith(&quot;.png&quot;));</span><br><span class="line">        // 6.2过滤之后进行打印</span><br><span class="line">        System.out.println(Arrays.toString(file5));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用递归的思想实现层层目录的打印"><a href="#使用递归的思想实现层层目录的打印" class="headerlink" title="使用递归的思想实现层层目录的打印"></a>使用递归的思想实现层层目录的打印</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void show(File file)&#123;</span><br><span class="line">        // 5.获取文件目录的文件及文件夹 并遍历</span><br><span class="line">        File[] filesArr = file.listFiles();</span><br><span class="line">        // 5.1遍历file数组</span><br><span class="line">        for (File file3 : filesArr) &#123;</span><br><span class="line">            String name = file3.getName();</span><br><span class="line">            // 判读是否为文件 如果是打印文件名</span><br><span class="line">            if (file3.isFile())&#123;</span><br><span class="line">                System.out.println(name);</span><br><span class="line">            &#125;</span><br><span class="line">            // 判断是否为目录 如果是 打印目录名 并按照格式&#123;&#125;</span><br><span class="line">            if (file3.isDirectory())&#123;</span><br><span class="line">                System.out.println(&quot;&#123;&quot; + name + &quot;&#125;&quot;);</span><br><span class="line">                show(file3);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>原文链接：<a href="https://blog.csdn.net/Junsunnyl/article/details/119973088">https://blog.csdn.net/Junsunnyl/article/details/119973088</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>python爬虫基础汇总</title>
    <url>/2022/10/31/python%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h2 id="聚焦爬虫"><a href="#聚焦爬虫" class="headerlink" title="聚焦爬虫"></a>聚焦爬虫</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">聚焦爬虫:爬取页面中指定的页面内容。</span><br><span class="line">    - 编码流程：</span><br><span class="line">        - 指定url</span><br><span class="line">        - 发起请求</span><br><span class="line">        - 获取响应数据</span><br><span class="line">        - 数据解析</span><br><span class="line">        - 持久化存储</span><br></pre></td></tr></table></figure>

<p>关于不同库的区别请参考:<a href="https://zhuanlan.zhihu.com/p/461875098">https://zhuanlan.zhihu.com/p/461875098</a></p>
<h3 id="静态页面爬取"><a href="#静态页面爬取" class="headerlink" title="静态页面爬取"></a>静态页面爬取</h3><h4 id="1，urllib"><a href="#1，urllib" class="headerlink" title="1，urllib"></a>1，urllib</h4><p>在Python3中，已经不存在urllib2这个库了，统一为urllib，已过时，基本用requests</p>
<p>但是爬取外网时，requests库需要安全证书，而本库则不需要，但是响应时间慢</p>
<p><a href="https://blog.csdn.net/qq_43546676/article/details/88777227">https://blog.csdn.net/qq_43546676/article/details/88777227</a></p>
<p>urllib中包括了四个模块，包括：<code>urllib.request</code>, <code>urllib.error</code>, <code>urllib.parse</code>, <code>urllib.robotparser</code></p>
<p>urllib.request可以用来发送request和获取request的结果<br>urllib.error包含了urllib.request产生的异常<br>urllib.parse用来解析和处理URL</p>
<p>urllib.robotparse用来解析页面的robots.txt文件</p>
<p>可见其中模拟请求使用的最主要的库便是urllib.request，异常处理用urllib.error库。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import urllib.request</span><br><span class="line">url = &#x27;https://www.baidu.com&#x27;</span><br><span class="line">headers = &#123;</span><br><span class="line">        &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36&#x27;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(url=url, headers=headers, method=&#x27;GET&#x27;)</span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line">content = response.read().decode(&#x27;utf-8&#x27;)</span><br></pre></td></tr></table></figure>

<p>response.status 就可以得到返回结果的状态码，如200代表请求成功，404代表网页未找到等</p>
<p>输入关键字时，需将中文换格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">t = &#x27;王者&#x27;</span><br><span class="line">s = urllib.parse.quote(t)  # 将汉字转换成url可识别的</span><br></pre></td></tr></table></figure>

<h4 id="2，requests"><a href="#2，requests" class="headerlink" title="2，requests"></a>2，requests</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    #UA伪装：将对应的User-Agent封装到一个字典中</span><br><span class="line">    headers = &#123;</span><br><span class="line">        &#x27;User-Agent&#x27;:&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    url = &#x27;https://www.sogou.com/web&#x27;</span><br><span class="line">    #处理url携带的参数：封装到字典中</span><br><span class="line">    kw = input(&#x27;输入关键字:&#x27;)</span><br><span class="line">    param = &#123;</span><br><span class="line">        &#x27;query&#x27;:kw</span><br><span class="line">    &#125;</span><br><span class="line">    #对指定的url发起的请求对应的url是携带参数的，并且请求过程中处理了参数</span><br><span class="line">    response = requests.get(url=url,params=param,headers=headers)</span><br><span class="line">	# 手动设定响应数据的编码格式</span><br><span class="line">	#response.encoding = &#x27;utf-8&#x27;</span><br><span class="line">    page_text = response.text</span><br></pre></td></tr></table></figure>

<p>高阶（session）它可以自动处理cookies，做状态保持</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 先实例化一个对象</span><br><span class="line">session = requests.session()</span><br><span class="line"> </span><br><span class="line"># 后面用法和直接使用requests一样了</span><br><span class="line">response = session.get(url)  # get请求</span><br><span class="line">response = session.post(url, json=json_data)  # post请求</span><br><span class="line">result = response.json()</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"># 会话</span><br><span class="line">session = requests.session()</span><br><span class="line">data =&#123;</span><br><span class="line">   &#x27;loginName&#x27;: xxxxxx,       #改为自己的用户名</span><br><span class="line">   &#x27;password&#x27;: &#x27;xxxxxxxxxx&#x27;   #改为自己的登录密码</span><br><span class="line">&#125;</span><br><span class="line"># 登录</span><br><span class="line">url =&quot;https://passport.17k.com/ck/user/login&quot;</span><br><span class="line">restult = session.post(url,data=data)</span><br><span class="line"></span><br><span class="line"># 再次请求  拿取书架上的数据</span><br><span class="line">url2 = &quot;https://user.17k.com/ck/author/shelf?page=1&amp;appKey=2406394919&quot;</span><br><span class="line">result_data =  session.get(url2)</span><br><span class="line">print(result_data.json()[&#x27;data&#x27;])</span><br></pre></td></tr></table></figure>



<h4 id="3-HTTPX"><a href="#3-HTTPX" class="headerlink" title="3.HTTPX"></a>3.HTTPX</h4><p>HTTPX 的 slogan 是“Python 的下一代 HTTP 客户端”，从出生开始就只支持 Python 3.6 及更高版本。使用了 Type Hint，同时支持同步和异步接口，同时支持 HTTP&#x2F;1.1 和 HTTP&#x2F;2，还提供了命令行工具，可以在命令行中直接发送 HTTP 请求。HTTPX 站在 Requests 的肩膀上，Requests 支持的功能它都支持，Requests 不支持的功能它也支持，比 Requests 更现代，没有历史包袱。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import httpx</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko&#x27;</span><br><span class="line">&#125;</span><br><span class="line">response =httpx.get(&#x27;https://www.baidu.com&#x27;, headers=headers)</span><br><span class="line">print(response.text)</span><br><span class="line"></span><br><span class="line">#SSL验证</span><br><span class="line"></span><br><span class="line"># 自带ca证书</span><br><span class="line">response = httpx.get(&#x27;https://www.baidu.com&#x27;, verify=&quot;path/cert/client.pem&quot;)</span><br><span class="line"></span><br><span class="line"># 完全禁用SSL验证</span><br><span class="line">response = httpx.get(&#x27;https://www.baidu.com&#x27;, verify=False)</span><br></pre></td></tr></table></figure>

<p>使用client发送请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import httpx</span><br><span class="line"></span><br><span class="line">with httpx.Client() as client:</span><br><span class="line">    response = client.get(&#x27;https://www.baidu.com&#x27;)</span><br><span class="line">    print(response.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import httpx</span><br><span class="line"></span><br><span class="line">proxies= &#123;</span><br><span class="line">    &#x27;http&#x27;: &#x27;http://127.0.0.1:9999&#x27;,</span><br><span class="line">    &#x27;https&#x27;: &#x27;http://127.0.0.1:8888&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">with httpx.Client(proxies=proxies) as client:</span><br><span class="line">    response = client.get(&#x27;https://www.baidu.com&#x27;)</span><br><span class="line">    print(response)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="动态页面爬取，自动化工具的使用"><a href="#动态页面爬取，自动化工具的使用" class="headerlink" title="动态页面爬取，自动化工具的使用"></a>动态页面爬取，自动化工具的使用</h3><p>需要下载浏览器驱动放在项目目录中，可以64位不能用的话可以下载32位，谷歌驱动下载网址:<a href="https://chromedriver.chromium.org/downloads">https://chromedriver.chromium.org/downloads</a></p>
<p>关于代理，推荐一个比较好用的ip池，需要本地跑一个程序，附GitHub链接:<a href="https://github.com/Python3WebSpider/ProxyPool">https://github.com/Python3WebSpider/ProxyPool</a></p>
<h4 id="1，Helium"><a href="#1，Helium" class="headerlink" title="1，Helium"></a>1，Helium</h4><p>Helium工具是对Selenium的封装，将Selenium工具的使用变得更加简单。Selenium虽然好，但是在它的使用过程中元素的提取还是比较复杂的，不论是CSSselector、还是Xpath语法的使用都有一定的学习曲线。因此，在实际自动化项目中，建议搭配 Selenium 和 Helium 使用，简单的页面使用 Helium，复杂的页面切换到 Selenium</p>
<p>Helium 自带 WebDriver，不需要下载、配置浏览器驱动</p>
<p>内嵌页面 iframe 页面元素直接操作，不需要使用 switch_to.frame() 切换 iframe</p>
<p>窗体管理更方便，可以直接使用窗口标题或部分标题内容来切换窗体</p>
<p>隐式等待，针对某个元素执行点击操作，Selenium 如果元素没有出现，脚本会执行失败；而 Helium 默认最多等待 10s，等待元素出现后立马执行点击操作</p>
<p>显式等待，Helium 提供更加优雅的 API 来等待页面元素出现</p>
<p>API 更简洁直观，代码量少</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from helium import *  # 导入helium工具的所有对象</span><br><span class="line"></span><br><span class="line">start_chrome(&quot;https://www.baidu.com&quot;)  # 使用谷歌浏览器打开链接</span><br><span class="line"></span><br><span class="line">write(&#x27;Python&#x27;)  # 在搜索框写入搜索内容</span><br><span class="line"></span><br><span class="line">press(ENTER)  # 按下enter键</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from helium import *  # 导入helium工具的所有对象</span><br><span class="line"></span><br><span class="line">start_chrome(&quot;https://www.baidu.com&quot;)  # 使用谷歌浏览器打开链接</span><br><span class="line"></span><br><span class="line">click(Link(&#x27;地图&#x27;))  # 点击超链接</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start_firefox(&quot;google.com&quot;)</span><br><span class="line">start_chorme(headless=True)</span><br><span class="line">from selenium.webdriver import ChromeOptions</span><br><span class="line">#firefox引入FirefoxOptions</span><br><span class="line">options = ChromeOptions()</span><br><span class="line">options.add_argument(&#x27;--start-maximized&#x27;)</span><br><span class="line">options.add_argument(&#x27;--proxy-server=1.2.3.4:5678&#x27;)</span><br><span class="line">start_chrome(&quot;www.baidu.com&quot;,headless=True,options=options)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">options = ChromeOptions()</span><br><span class="line">options.add_argument(&quot;--start-maximized&quot;)</span><br><span class="line">start_chrome(&quot;https://www.zhihu.com/signin?next=%2F&quot;,options=options)</span><br><span class="line">click(Text(&quot;密码登录&quot;))</span><br><span class="line">write(&quot;python@123.com&quot;,into=S(&quot;@username&quot;))</span><br><span class="line">write(&quot;python&quot;,into=&quot;密码&quot;)</span><br><span class="line">write(&quot;royfans&quot;,TextField(&quot;Username&quot;))</span><br><span class="line"># 大小写不敏感</span><br><span class="line">write(&quot;Zlf111&quot;,into=&quot;Password&quot;)</span><br><span class="line">write(&quot;test2&quot;,into=TextField(to_right_of=&quot;username&quot;))</span><br><span class="line"></span><br><span class="line">click(&quot;Remember password&quot;)</span><br><span class="line">click(&quot;Log in&quot;)</span><br><span class="line">click(TextField(&quot;Site&quot;))</span><br></pre></td></tr></table></figure>



<h4 id="2，selenium"><a href="#2，selenium" class="headerlink" title="2，selenium"></a>2，selenium</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">from time import sleep</span><br><span class="line">from selenium.webdriver.common.by import By</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">from lxml import etree</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">#实现无可视化界面</span><br><span class="line">from selenium.webdriver.chrome.options import Options</span><br><span class="line">#实现规避检测</span><br><span class="line">from selenium.webdriver import ChromeOptions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 代理</span><br><span class="line">PROXY_POOL_URL = &#x27;http://localhost:5555/random&#x27;</span><br><span class="line"></span><br><span class="line">def get_proxy():</span><br><span class="line">    try:</span><br><span class="line">        response = requests.get(PROXY_POOL_URL)</span><br><span class="line">        if response.status_code == 200:</span><br><span class="line">            return response.text</span><br><span class="line">    except ConnectionError:</span><br><span class="line">        return None</span><br><span class="line"></span><br><span class="line"># Chromeselenium实现无可视化界面的操作</span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(&#x27;--headless&#x27;)</span><br><span class="line">chrome_options.add_argument(&#x27;--disable-gpu&#x27;)</span><br><span class="line"></span><br><span class="line"># 实现规避检测</span><br><span class="line">option = ChromeOptions()</span><br><span class="line">option.add_experimental_option(&#x27;excludeSwitches&#x27;, [&#x27;enable-automation&#x27;])</span><br><span class="line"># 代理</span><br><span class="line"># proxy=&quot;--proxy-server=https://&quot;+get_proxy()</span><br><span class="line"># option.add_argument(proxy)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line"></span><br><span class="line">    # 实现让selenium规避被检测到的风险</span><br><span class="line">    # driver = webdriver.Chrome(options=option)</span><br><span class="line">    # Chromeselenium实现无可视化界面的操作,须注释掉前面那个</span><br><span class="line">    driver = webdriver.Chrome(chrome_options=chrome_options,options=option)</span><br><span class="line">    # 用get打开百度页面,无可视化界面（无头浏览器） phantomJs</span><br><span class="line">    url=&#x27;&#x27;</span><br><span class="line">    driver.get(url)</span><br><span class="line">    sleep(3)</span><br><span class="line">    # 模拟鼠标滚轮，滑动页面至底部</span><br><span class="line">    last_height = driver.execute_script(&quot;return document.body.scrollHeight&quot;)</span><br><span class="line">    # print(last_height)</span><br><span class="line">    # Scroll down to bottom</span><br><span class="line">    y = 600</span><br><span class="line">    finished = False</span><br><span class="line">    while True:</span><br><span class="line">        for timer in range(0, 100):</span><br><span class="line">            driver.execute_script(&quot;window.scrollTo(0, &quot; + str(y) + &quot;)&quot;)</span><br><span class="line">            y += 600</span><br><span class="line">            sleep(1)</span><br><span class="line">            new_height = driver.execute_script(&quot;return document.body.scrollHeight&quot;)</span><br><span class="line">            # print(new_height, last_height)</span><br><span class="line"></span><br><span class="line">            if new_height == last_height:  # on the first iteration new_height equals last_height</span><br><span class="line">                # print(&#x27;stop&#x27;)</span><br><span class="line">                finished = True</span><br><span class="line">                break</span><br><span class="line">            last_height = new_height</span><br><span class="line">        if finished:</span><br><span class="line">            break</span><br><span class="line">    </span><br><span class="line">    sleep(1)</span><br><span class="line">    page_sourse=driver.page_source</span><br><span class="line">    # 关闭浏览器</span><br><span class="line">    driver.quit()</span><br></pre></td></tr></table></figure>

<p>语法基础，新版本有变化，方法变成了 FIND_ELEMENT</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 找到百度的输入框，并输入 美女</span><br><span class="line">driver.find_element(By.ID,&#x27;wd1&#x27;).send_keys(&#x27;美女&#x27;)</span><br><span class="line"># 点击搜索按钮</span><br><span class="line">driver.find_element(By.LINK_TEXT,&#x27;全吧搜索&#x27;).click()</span><br></pre></td></tr></table></figure>

<p>老版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 实例化一个浏览器对象</span><br><span class="line">    - 编写基于浏览器自动化的操作代码</span><br><span class="line">        - 发起请求：get(url)</span><br><span class="line">        - 标签定位：find系列的方法</span><br><span class="line">        当我们要在页面中获取一个元素的时候</span><br><span class="line">        FIND_ELEMENT_BY_ID</span><br><span class="line">        FIND_ELEMENT_BY_NAME</span><br><span class="line">        FIND_ELEMENT_BY_XPATH</span><br><span class="line">        FIND_ELEMENT_BY_LINK_TEXT</span><br><span class="line">        FIND_ELEMENT_BY_PARTIAL_LINK_TEXT</span><br><span class="line">        FIND_ELEMENT_BY_TAG_NAME</span><br><span class="line">        FIND_ELEMENT_BY_CLASS_NAME</span><br><span class="line">        FIND_ELEMENT_BY_CSS_SELECTOR</span><br><span class="line">        想要在页面获取多个元素呢</span><br><span class="line">        FIND_ELEMENTS_BY_NAME</span><br><span class="line">        FIND_ELEMENTS_BY_XPATH</span><br><span class="line">        FIND_ELEMENTS_BY_LINK_TEXT</span><br><span class="line">        FIND_ELEMENTS_BY_PARTIAL_LINK_TEXT</span><br><span class="line">        FIND_ELEMENTS_BY_TAG_NAME</span><br><span class="line">        FIND_ELEMENTS_BY_CLASS_NAME</span><br><span class="line">        FIND_ELEMENTS_BY_CSS_SELECTOR</span><br><span class="line">        - 标签交互：send_keys(&#x27;xxx&#x27;)</span><br><span class="line">        - 执行js程序：excute_script(&#x27;jsCode&#x27;)</span><br><span class="line">        - 前进，后退：back(),forward()</span><br><span class="line">        - 关闭浏览器：quit()</span><br><span class="line"></span><br><span class="line">    - selenium处理iframe</span><br><span class="line">        - 如果定位的标签存在于iframe标签之中，则必须使用switch_to.frame(id)</span><br><span class="line">        - 动作链（拖动）：from selenium.webdriver import ActionChains</span><br><span class="line">            - 实例化一个动作链对象：action = ActionChains(bro)</span><br><span class="line">            - click_and_hold（div）：长按且点击操作</span><br><span class="line">            - move_by_offset(x,y)</span><br><span class="line">            - perform()让动作链立即执行</span><br><span class="line">            - action.release()释放动作链对象</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">可以通过 id 获取 form 表单</span><br><span class="line">      login_form = driver.find_element_by_id(&#x27;loginForm&#x27;)</span><br><span class="line">      通过 name 获取相应的输入框</span><br><span class="line">      username = driver.find_element_by_name(&#x27;username&#x27;)</span><br><span class="line">      password = driver.find_element_by_name(&#x27;password&#x27;)</span><br><span class="line">      通过 xpath 获取表单</span><br><span class="line">      login_form = driver.find_element_by_xpath(&quot;/html/body/form[1]&quot;)</span><br><span class="line">      login_form = driver.find_element_by_xpath(&quot;//form[1]&quot;)</span><br><span class="line">      login_form = driver.find_element_by_xpath(&quot;//form[@id=&#x27;loginForm&#x27;]&quot;)</span><br><span class="line">      通过标签获取相应的输入框</span><br><span class="line">      input1 = driver.find_element_by_tag_name(&#x27;input&#x27;)</span><br><span class="line">      通过 class 获取相应的元素</span><br><span class="line">      login = driver.find_element_by_class_name(&#x27;login&#x27;)</span><br><span class="line">      获取请求链接</span><br><span class="line">      driver.current_url</span><br><span class="line">      获取 cookies</span><br><span class="line">      driver.get_cookies()</span><br><span class="line">      获取源代码</span><br><span class="line">      driver.page_source</span><br><span class="line">      获取文本的值</span><br><span class="line">      input.text</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chrome_options.add_argument(&#x27;--user-agent=&quot;&quot;&#x27;)  # 设置请求头的User-Agent</span><br><span class="line">chrome_options.add_argument(&#x27;--window-size=1280x1024&#x27;)  # 设置浏览器分辨率（窗口大小）</span><br><span class="line">chrome_options.add_argument(&#x27;--start-maximized&#x27;)  # 最大化运行（全屏窗口）,不设置，取元素会报错</span><br><span class="line">chrome_options.add_argument(&#x27;--disable-infobars&#x27;)  # 禁用浏览器正在被自动化程序控制的提示</span><br><span class="line">chrome_options.add_argument(&#x27;--incognito&#x27;)  # 隐身模式（无痕模式）</span><br><span class="line">chrome_options.add_argument(&#x27;--hide-scrollbars&#x27;)  # 隐藏滚动条, 应对一些特殊页面</span><br><span class="line">chrome_options.add_argument(&#x27;--disable-javascript&#x27;)  # 禁用javascript</span><br><span class="line">chrome_options.add_argument(&#x27;--blink-settings=imagesEnabled=false&#x27;)  # 不加载图片, 提升速度</span><br><span class="line">chrome_options.add_argument(&#x27;--headless&#x27;)  # 浏览器不提供可视化页面</span><br><span class="line"></span><br><span class="line">chrome_options.add_argument(&#x27;--ignore-certificate-errors&#x27;)  # 禁用扩展插件并实现窗口最大化</span><br><span class="line">chrome_options.add_argument(&#x27;--disable-gpu&#x27;)  # 禁用GPU加速</span><br><span class="line">chrome_options.add_argument(&#x27;–disable-software-rasterizer&#x27;)</span><br><span class="line">chrome_options.add_argument(&#x27;--disable-extensions&#x27;)</span><br><span class="line">chrome_options.add_argument(&#x27;--start-maximized&#x27;)</span><br></pre></td></tr></table></figure>

<h4 id="3-代理"><a href="#3-代理" class="headerlink" title="3,代理"></a>3,代理</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PROXY_POOL_URL = &#x27;http://localhost:5555/random&#x27;</span><br><span class="line"></span><br><span class="line">def get_proxy():</span><br><span class="line">    try:</span><br><span class="line">        response = requests.get(PROXY_POOL_URL)</span><br><span class="line">        if response.status_code == 200:</span><br><span class="line">            return response.text</span><br><span class="line">    except ConnectionError:</span><br><span class="line">        return None</span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    while i&lt;100:</span><br><span class="line">        try:</span><br><span class="line">            response = requests.get(url=detail_url5,headers=headers,proxies=&#123;</span><br><span class="line">        &#x27;https&#x27;: get_proxy()</span><br><span class="line">    &#125;,timeout=5)</span><br><span class="line">            print(&#x27;成功&#x27;)</span><br><span class="line">            break</span><br><span class="line">        except Exception as e:</span><br><span class="line">            sleep(1)</span><br><span class="line">            print(e)</span><br><span class="line">            print(&#x27;失败！失败！失败！失败！失败！失败！失败！&#x27;)</span><br><span class="line">            i=i+1</span><br></pre></td></tr></table></figure>

<h4 id="4，Puppeteer"><a href="#4，Puppeteer" class="headerlink" title="4，Puppeteer"></a>4，Puppeteer</h4><p>Puppeteer 是 Google Chrome 官方团队于 2017 年发布的一个 Node 库，通过 DevTools 协议控制浏览器。能控制的浏览器包括 Chromium、Google Chrome、Microsoft Edge，不包括 Mozilla Firefox。默认为无头模式，也可以为有头模式。</p>
<blockquote>
<p>Puppeteer 的出现直接导致了另外一款无头浏览器 PhantomJS 于 2018 年宣布停止维护。参见 <a href="https://link.zhihu.com/?target=https://phantomjs.org/">PhantomJS - Scriptable Headless Browser</a></p>
</blockquote>
<p>Puppeteer 是 Node 库，接口自然都是异步的，async&#x2F;await 随处可见。</p>
<p>Puppeteer 除了可以模拟用户操作外，还可以拦截请求（修改请求、中止请求、定义返回）。</p>
<p>Puppeteer 有个 Python 迁移版，叫 Pyppeteer，用 Python 的协程语法一比一实现了 Puppeteer 的接口，但由于是个人主导作品，更新、维护以及代码质量都比不上 Puppeteer，不建议使用</p>
<h4 id="5，Playwright"><a href="#5，Playwright" class="headerlink" title="5，Playwright"></a>5，Playwright</h4><p>Playwright 是微软官方于 2020 年发布的 Web 自动化测试工具。</p>
<p>微软出手，果然不一般，直接支持了五大浏览器：Google Chrome、Microsoft Edge、Mozilla Firefox、Opera、Safari。支持跨平台，包括：Windows、Linux、macOS。并且还有官方维护的多种编程语言库，包括：TypeScript、JavaScript、Python、.NET、Java。</p>
<p>Playwright 提供的网络拦截功能很适合写爬虫，包括修改请求、中止请求、mock 请求、修改响应。有了这个网络拦截功能，就不需要 mitmproxy 了。</p>
<h2 id="数据解析分类"><a href="#数据解析分类" class="headerlink" title="数据解析分类"></a>数据解析分类</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数据解析分类：</span><br><span class="line">    - 正则</span><br><span class="line">    - bs4</span><br><span class="line">    - xpath（***）</span><br></pre></td></tr></table></figure>

<h4 id="1-正则表达式"><a href="#1-正则表达式" class="headerlink" title="1.正则表达式"></a>1.正则表达式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ex = &#x27;&lt;div class=&quot;thumb&quot;&gt;.*?&lt;img src=&quot;(.*?)&quot; alt.*?&lt;/div&gt;&#x27;</span><br><span class="line">img_src_list = re.findall(ex,page_text,re.S)</span><br></pre></td></tr></table></figure>

<h4 id="2-bs4进行数据解析"><a href="#2-bs4进行数据解析" class="headerlink" title="2.bs4进行数据解析"></a>2.bs4进行数据解析</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 数据解析的原理：</span><br><span class="line">    - 1.标签定位</span><br><span class="line">    - 2.提取标签、标签属性中存储的数据值</span><br><span class="line">- bs4数据解析的原理：</span><br><span class="line">    - 1.实例化一个BeautifulSoup对象，并且将页面源码数据加载到该对象中</span><br><span class="line">    - 2.通过调用BeautifulSoup对象中相关的属性或者方法进行标签定位和数据提取</span><br><span class="line">- 环境安装：</span><br><span class="line">    - pip install bs4</span><br><span class="line">    - pip install lxml</span><br><span class="line">- 如何实例化BeautifulSoup对象：</span><br><span class="line">    - from bs4 import BeautifulSoup</span><br><span class="line">    - 对象的实例化：</span><br><span class="line">        - 1.将本地的html文档中的数据加载到该对象中</span><br><span class="line">                fp = open(&#x27;./test.html&#x27;,&#x27;r&#x27;,encoding=&#x27;utf-8&#x27;)</span><br><span class="line">                soup = BeautifulSoup(fp,&#x27;lxml&#x27;)</span><br><span class="line">        - 2.将互联网上获取的页面源码加载到该对象中</span><br><span class="line">                page_text = response.text</span><br><span class="line">                soup = BeatifulSoup(page_text,&#x27;lxml&#x27;)</span><br><span class="line">    - 提供的用于数据解析的方法和属性：</span><br><span class="line">        - soup.tagName:返回的是文档中第一次出现的tagName对应的标签</span><br><span class="line">        - soup.find():</span><br><span class="line">            - find(&#x27;tagName&#x27;):等同于soup.div</span><br><span class="line">            - 属性定位：</span><br><span class="line">                -soup.find(&#x27;div&#x27;,class_/id/attr=&#x27;song&#x27;)</span><br><span class="line">        - soup.find_all(&#x27;tagName&#x27;):返回符合要求的所有标签（列表）</span><br><span class="line">    - select：</span><br><span class="line">        - select(&#x27;某种选择器（id，class，标签...选择器）&#x27;),返回的是一个列表。</span><br><span class="line">        - 层级选择器：</span><br><span class="line">            - soup.select(&#x27;.tang &gt; ul &gt; li &gt; a&#x27;)：&gt;表示的是一个层级</span><br><span class="line">            - oup.select(&#x27;.tang &gt; ul a&#x27;)：空格表示的多个层级</span><br><span class="line">    - 获取标签之间的文本数据：</span><br><span class="line">        - soup.a.text/string/get_text()</span><br><span class="line">        - text/get_text():可以获取某一个标签中所有的文本内容</span><br><span class="line">        - string：只可以获取该标签下面直系的文本内容</span><br><span class="line">    - 获取标签中属性值：</span><br><span class="line">        - soup.a[&#x27;href&#x27;]</span><br></pre></td></tr></table></figure>

<h4 id="3-xpath解析：最常用且最便捷高效的一种解析方式。通用性。"><a href="#3-xpath解析：最常用且最便捷高效的一种解析方式。通用性。" class="headerlink" title="3.xpath解析：最常用且最便捷高效的一种解析方式。通用性。"></a>3.xpath解析：最常用且最便捷高效的一种解析方式。通用性。</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- xpath解析原理：</span><br><span class="line">    - 1.实例化一个etree的对象，且需要将被解析的页面源码数据加载到该对象中。</span><br><span class="line">    - 2.调用etree对象中的xpath方法结合着xpath表达式实现标签的定位和内容的捕获。</span><br><span class="line">- 环境的安装：</span><br><span class="line">    - pip install lxml</span><br><span class="line">- 如何实例化一个etree对象:from lxml import etree</span><br><span class="line">    - 1.将本地的html文档中的源码数据加载到etree对象中：</span><br><span class="line">        etree.parse(filePath)</span><br><span class="line">    - 2.可以将从互联网上获取的源码数据加载到该对象中</span><br><span class="line">        etree.HTML(&#x27;page_text&#x27;)</span><br><span class="line">    - xpath(&#x27;xpath表达式&#x27;)</span><br><span class="line">- xpath表达式:</span><br><span class="line">    - /:表示的是从根节点开始定位。表示的是一个层级。</span><br><span class="line">    - //:表示的是多个层级。可以表示从任意位置开始定位。</span><br><span class="line">    - 属性定位：//div[@class=&#x27;song&#x27;] tag[@attrName=&quot;attrValue&quot;]</span><br><span class="line">    - 索引定位：//div[@class=&quot;song&quot;]/p[3] 索引是从1开始的。</span><br><span class="line">    - 取文本：</span><br><span class="line">        - /text() 获取的是标签中直系的文本内容</span><br><span class="line">        - //text() 标签中非直系的文本内容（所有的文本内容）</span><br><span class="line">    - 取属性：</span><br><span class="line">        /@attrName     ==&gt;img/src</span><br></pre></td></tr></table></figure>

<h4 id="4-PyQuery"><a href="#4-PyQuery" class="headerlink" title="4.PyQuery"></a>4.PyQuery</h4><p>PyQuery是强大而又灵活的网页解析库，如果你觉得正则写起来太麻烦，如果你觉得BeautifulSoup语法太难记，如果你熟悉jQuery的语法，那么，PyQuery就是你绝佳的选择。</p>
<h4 id="5-Parsel"><a href="#5-Parsel" class="headerlink" title="5.Parsel"></a>5.Parsel</h4><p>Parsel 是新一代的 HTML&#x2F;XML 文档解析库，也是知名爬虫框架 Scrapy 内置的解析器，属于 Scrapy 项目。Parsel 支持 XPath 和 CSS 两种风格的解析器，并集成了正则表达式。</p>
<h4 id="6-JSONPath"><a href="#6-JSONPath" class="headerlink" title="6.JSONPath"></a>6.JSONPath</h4><p>JSONPath 是查询和解析复杂 JSON 文档的一门语言，JSONPath 的 slogan 是“XPath to JSON”，可以像用 XPath 解析 XML 文档一样用 JSONPath 解析 JSON 文档。JSONPath 由 Stefan Goessner 于 2007 年在<a href="https://link.zhihu.com/?target=https://goessner.net/articles/JsonPath/">一篇博客</a>中提出，Stefan Goessner 认为 JSON 是 C 系列编程语言中数据的自然表示，所以 JSONPath 表达式的语法也是 C 系列语言风格。例如，访问嵌套的结构可以用 <code>.</code> 也可以用 <code>[]</code>。</p>
<p>JSONPath 的不完整语法如下：</p>
<table>
<thead>
<tr>
<th>JSONPath</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>$</td>
<td>根元素或对象</td>
</tr>
<tr>
<td>@</td>
<td>当前对象或元素</td>
</tr>
<tr>
<td>. 或 []</td>
<td>访问子元素或对象</td>
</tr>
<tr>
<td>..</td>
<td>递归下降</td>
</tr>
<tr>
<td>*</td>
<td>通配符，匹配所有元素或对象</td>
</tr>
<tr>
<td>[]</td>
<td>下标运算符</td>
</tr>
<tr>
<td>[,]</td>
<td>用名称或数组下标索引将元素提取为一组</td>
</tr>
<tr>
<td>[start:end:step]</td>
<td>切片操作</td>
</tr>
<tr>
<td>?()</td>
<td>应用过滤表达式</td>
</tr>
<tr>
<td>()</td>
<td>表达式</td>
</tr>
</tbody></table>
<p>JSONPath 有多种实现，在主流的编程语言中都有对应的库。但由于 JSONPath 没有严格规范的语法，各个实现都有自己的理解，导致同一个 JSONPath 表达式在不同的编程语言中有不同结果。</p>
<h4 id="7-JMESPath"><a href="#7-JMESPath" class="headerlink" title="7.JMESPath"></a>7.JMESPath</h4><p>JMESPath 是最近几年最流行的 JSON 文档查询、提取、转换的语言。克服了 JSONPath 的缺点，并提供更加强大功能，例如投影和管道。</p>
<p>JMESPath 的基本表达式包括：标识符、子表达式（用于访问嵌套结构）、下标访问表达式。高级表达式包括：切片、投影、管道、多选、函数。特意没有提供递归下降的功能。</p>
<h4 id="8-JS-引擎-for-Python"><a href="#8-JS-引擎-for-Python" class="headerlink" title="8.JS 引擎 for Python"></a>8.JS 引擎 for Python</h4><p>写爬虫经常会遇到一些场景，某个请求需要一些参数，而这些参数是经过执行一段复杂的 JavaScript 代码生成的。在用 Python 代码模拟发出该请求时，你可以选择用 Python 重写对于的 js 逻辑，这样会很麻烦，因为你要保证你的 Python 代码逻辑和对应的 JS 代码一模一样，通常还有考虑两种编程语言的异同。如果这段 JS 代码被混淆过，读懂它的逻辑就需要很大的工作量，更便捷的方法是直接将这段 JS 代码拷贝下来，放到一个 JavaScript 环境中执行，再拿到其结果。这就需要一个能在 Python 中使用的 JS 引擎库。</p>
<p>另外在用 Python 脚本分析 JavaScript 代码时，也会需要一个 JavaScript 引擎 for Python。</p>
<p>在 PyV8、PyExecJS 等库都停止维护的情况下，目前唯一比较好的选择是 PyMiniRacer。</p>
<h4 id="PyMiniRacer"><a href="#PyMiniRacer" class="headerlink" title="PyMiniRacer"></a>PyMiniRacer</h4><p>PyMiniRacer 是适用于 Python 的最小的现代嵌入式 V8。虽然维护团队很小，但却是目前的唯一选择。PyMiniRacer 支持最新的 ECMAScript 标准，支持 Assembly，并提供可重用的上下文。</p>
<h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul>
<li>支持最新的 ECMAScript。</li>
<li>内存消耗小。</li>
<li>不需要额外安装 JavaScript 环境。</li>
<li>提供可重用上下文。</li>
</ul>
<h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul>
<li>维护团队较小，至今未发布 1.0.0 版本。</li>
</ul>
<h4 id="9-虚拟显示器"><a href="#9-虚拟显示器" class="headerlink" title="9.虚拟显示器"></a>9.虚拟显示器</h4><p>服务器一般不会配置显式设备，服务器上的 Linux 系统一般也不会安装桌面环境。但如果我们要将一个使用有头浏览器的爬虫部署到服务器上，甚至是 Docker 容器里，该怎么办呢？这时候就可以用虚拟显示器了。目前只有 Xvfb 一个选择。</p>
<p>Xvfb 是一个 X server，可以在没有显式硬件和物理输入设备的机器上运行，用虚拟内存模拟帧缓冲。</p>
<p>Xvfb 可以设置模拟屏幕的分辨率、像素深度。</p>
<p>我们可以使用 xvfb 启动需要界面的爬虫，或者使用 python 的 xvfbwrapper 在启动需要界面的浏览器之前启动一个虚拟显示器。</p>
<h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><h3 id="Scrapy"><a href="#Scrapy" class="headerlink" title="Scrapy"></a>Scrapy</h3><p>Scrapy 是一款流行了 11 年的 web 爬虫框架，也许是唯一广泛流行的 Python 爬虫框架。Scrapy 框架集成了 HTTP 请求、数据解析、数据持久化、请求调度、并发爬取。</p>
<p>Scrapy 架构包括七个组件，包括：引擎、spider、spider 中间件、调度器、item 管道、下载器、下载器中间件。最基本的爬虫只需要用户继承 <code>scrapy.Spider</code>，并实现解析方法 <code>parse</code>。</p>
<p>Scrapy 的一般用法是，自定义 spider 类实现请求和解析逻辑，通过 item 管道处理爬取到的数据，通过配置定制爬虫行为，添加 spider 中间件和下载器中间件扩展 Scrapy 的功能。</p>
<p>Scrapy 还提供了 Scrapy-Redis 用于支持分布式爬取。</p>
<p>但 Scrapy 发布时 Python 还没发布标准库 asyncio，也没有 type hint，HTTP&#x2F;2 协议规范还未发布，所以 Scrapy 并不支持它们。现在只是对 HTTP&#x2F;2 和 asyncio 有了实验性支持。</p>
<p><em><strong>Nutch文档</strong><a href="https://link.zhihu.com/?target=http://nutch.apache.org/">http://nutch.apache.org/</a></em></p>
<p><em><strong>scary文档</strong><a href="https://link.zhihu.com/?target=https://scrapy.org/">https://scrapy.org/</a></em></p>
<p><em><strong>pyspider文档</strong><a href="https://link.zhihu.com/?target=http://t.im/ddgj">http://t.im/ddgj</a></em></p>
<h2 id="抓包工具"><a href="#抓包工具" class="headerlink" title="抓包工具"></a>抓包工具</h2><h3 id="Fiddler-Classic"><a href="#Fiddler-Classic" class="headerlink" title="Fiddler Classic"></a>Fiddler Classic</h3><p>Fiddler Classic 是 Windows 平台上一款非常好用的抓包工具。网络上提到的 Fiddler 通常就是指的 Fiddler Classic。</p>
<p>Fiddler Classic 用创建代理的方式抓取浏览器或其他程序的 HTTP&#x2F;HTTPS 流量。Fiddler Classic 是商业公司推出的网络调试工具之一，该司目前停止了对免费产品 Fiddler Classic 的更新，主力推荐它们的商业收费产品，所以 Fiddler Classic 最后版本为 2020年11月3日构建的 v5.0.20204.45441 for .NET 4.6.1。不够 Fiddler Classic 也够用了。如果有跨平台的需求，可以购买该司的 Fiddler Every。</p>
<h2 id="分布式爬虫"><a href="#分布式爬虫" class="headerlink" title="分布式爬虫"></a>分布式爬虫</h2><p>爬取基本数据已经没有问题，还能使用框架来面对一写较为复杂的数据，此时，就算遇到反爬，你也掌握了一些反反爬技巧。</p>
<p>你的瓶颈会集中到爬取海量数据的效率，这个时候相信你会很自然地接触到一个很厉害的名字：分布式爬虫。</p>
<p>分布式这个东西，听起来很恐怖，但其实就是利用多线程的原理将多台主机组合起来，共同完成一个爬取任务<strong>，需要你掌握 Scrapy +Redis+MQ+Celery这些工具</strong>。</p>
<p>Scrapy 前面我们说过了，用于做基本的页面爬取， Redis 则用来存储要爬取的网页队列，也就是任务队列。</p>
<p>scarpy-redis就是用来在scrapy中实现分布式的组件，通过它可以快速实现简单分布式爬虫程序。</p>
<p>由于在高并发环境下，由于来不及同步处理，请求往往会发生堵塞，通过使用消息队列MQ，我们可以异步处理请求，从而缓解系统的压力。</p>
<p>RabbitMQ本身支持很多的协议：AMQP，XMPP, SMTP,STOMP，使的它变的非常重量级，更适合于企业级的开发。</p>
<p>Scrapy-rabbitmq-link是可以让你从RabbitMQ 消息队列中取到URL并且分发给Scrapy spiders的组件。</p>
<p>Celery是一个简单、灵活且可靠的，处理大量消息的分布式系统。支持 RabbitMQ、Redis 甚至其他数据库系统作为其消息代理中间件， 在处理异步任务、任务调度、处理定时任务、分布式调度等场景表现良好。</p>
<p>所以分布式爬虫只是听起来有些可怕，也不过如此。当你能够写分布式的爬虫的时候，那么你可以去尝试打造一些基本的爬虫架构了，实现一些更加自动化的数据获取。</p>
<p>推荐分布式资源：</p>
<p>scrapy-redis文档<a href="http://t.im/ddgk">http://t.im/ddgk</a></p>
<p>scrapy-rabbitmq文档<a href="http://t.im/ddgn">http://t.im/ddgn</a></p>
<p>celery文档<a href="http://t.im/ddgr">http://t.im/ddgr</a></p>
<h2 id="个人推荐的最佳组合"><a href="#个人推荐的最佳组合" class="headerlink" title="个人推荐的最佳组合"></a>个人推荐的最佳组合</h2><ul>
<li>请求库： HTTPX。</li>
<li>框架：Scrapy</li>
<li>模拟爬取： Playwright</li>
<li>JS 引擎 for Python：PyMiniRacer。</li>
<li>抓包工具：Fiddler 和浏览器。</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python爬虫概念</title>
    <url>/2022/10/31/python%E7%88%AC%E8%99%AB%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h2 id="python爬虫概念"><a href="#python爬虫概念" class="headerlink" title="python爬虫概念"></a>python爬虫概念</h2><p>1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">什么是爬虫：</span><br><span class="line">    - 通过编写程序，模拟浏览器上网，然后让其去互联网上抓取数据的过程。</span><br></pre></td></tr></table></figure>

<p>2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">爬虫究竟是合法还是违法的？</span><br><span class="line">- 在法律中是不被禁止</span><br><span class="line">- 具有违法风险</span><br><span class="line">- 善意爬虫  恶意爬虫</span><br></pre></td></tr></table></figure>

<p>3</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">爬虫究竟是合法还是违法的？</span><br><span class="line">- 在法律中是不被禁止</span><br><span class="line">- 具有违法风险</span><br><span class="line">- 善意爬虫  恶意爬虫</span><br><span class="line"></span><br><span class="line">爬虫带来的风险可以体现在如下2方面：</span><br><span class="line">    - 爬虫干扰了被访问网站的正常运营</span><br><span class="line">    - 爬虫抓取了收到法律保护的特定类型的数据或信息</span><br><span class="line"></span><br><span class="line">如何在使用编写爬虫的过程中避免进入局子的厄运呢？</span><br><span class="line">    - 时常的优化自己的程序，避免干扰被访问网站的正常运行</span><br><span class="line">    - 在使用，传播爬取到的数据时，审查抓取到的内容，如果发现了涉及到用户隐私</span><br><span class="line">    商业机密等敏感内容需要及时停止爬取或传播</span><br></pre></td></tr></table></figure>

<p>4</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">爬虫在使用场景中的分类</span><br><span class="line">    - 通用爬虫：</span><br><span class="line">        抓取系统重要组成部分。抓取的是一整张页面数据。</span><br><span class="line">    - 聚焦爬虫：</span><br><span class="line">        是建立在通用爬虫的基础之上。抓取的是页面中特定的局部内容。</span><br><span class="line">    - 增量式爬虫：</span><br><span class="line">        检测网站中数据更新的情况。只会抓取网站中最新更新出来的数据。</span><br></pre></td></tr></table></figure>

<p>5</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">爬虫的矛与盾</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">反爬机制</span><br><span class="line">    门户网站，可以通过制定相应的策略或者技术手段，防止爬虫程序进行网站数据的爬取。</span><br><span class="line"></span><br><span class="line">反反爬策略</span><br><span class="line">    爬虫程序可以通过制定相关的策略或者技术手段，破解门户网站中具备的反爬机制，从而可以获取门户网站中相关的数据。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">robots.txt协议：</span><br><span class="line">    君子协议。规定了网站中哪些数据可以被爬虫爬取哪些数据不可以被爬取。</span><br></pre></td></tr></table></figure>

<p>6</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http协议</span><br><span class="line">    - 概念：就是服务器和客户端进行数据交互的一种形式。</span><br><span class="line">常用请求头信息</span><br><span class="line">    - User-Agent：请求载体的身份标识</span><br><span class="line">    - Connection：请求完毕后，是断开连接还是保持连接</span><br><span class="line"></span><br><span class="line">常用响应头信息</span><br><span class="line">    - Content-Type：服务器响应回客户端的数据类型</span><br><span class="line"></span><br><span class="line">https协议：</span><br><span class="line">    - 安全的超文本传输协议</span><br><span class="line"></span><br><span class="line">加密方式</span><br><span class="line">    - 对称秘钥加密</span><br><span class="line">    - 非对称秘钥加密</span><br><span class="line">    - 证书秘钥加密</span><br></pre></td></tr></table></figure>

<ol start="7">
<li></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">聚焦爬虫:爬取页面中指定的页面内容。</span><br><span class="line">    - 编码流程：</span><br><span class="line">        - 指定url</span><br><span class="line">        - 发起请求</span><br><span class="line">        - 获取响应数据</span><br><span class="line">        - 数据解析</span><br><span class="line">        - 持久化存储</span><br><span class="line"></span><br><span class="line">数据解析分类：</span><br><span class="line">    - 正则</span><br><span class="line">    - bs4</span><br><span class="line">    - xpath（***）</span><br><span class="line"></span><br><span class="line">数据解析原理概述：</span><br><span class="line">    - 解析的局部的文本内容都会在标签之间或者标签对应的属性中进行存储</span><br><span class="line">    - 1.进行指定标签的定位</span><br><span class="line">    - 2.标签或者标签对应的属性中存储的数据值进行提取（解析）</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>vue中axios的用法</title>
    <url>/2022/07/09/vue%E4%B8%ADaxios%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p>1.下载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save axios vue-axios</span><br></pre></td></tr></table></figure>

<p>2.引入调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">import VueAxios from &#x27;vue-axios&#x27;</span><br><span class="line"></span><br><span class="line">Vue.use(VueAxios, axios)</span><br></pre></td></tr></table></figure>

<p>3.简单调用的三种方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vue.axios.get(api).then((response) =&gt; &#123;</span><br><span class="line">  console.log(response.data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">this.axios.get(api).then((response) =&gt; &#123;</span><br><span class="line">  console.log(response.data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">this.$http.get(api).then((response) =&gt; &#123;</span><br><span class="line">  console.log(response.data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>4.get请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#x27;#app&#x27;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      info: null</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    axios</span><br><span class="line">      .get(&#x27;https://www.runoob.com/try/ajax/json_demo.json&#x27;)</span><br><span class="line">      .then(response =&gt; (this.info = response))</span><br><span class="line">      .catch(function (error) &#123; // 请求失败处理</span><br><span class="line">        console.log(error);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">//000000000000000000</span><br><span class="line">// 直接在 URL 上添加参数 ID=12345</span><br><span class="line">axios.get(&#x27;/user?ID=12345&#x27;)</span><br><span class="line">  .then(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(function (error) &#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">  &#125;);</span><br><span class="line"> </span><br><span class="line">// 也可以通过 params 设置参数：</span><br><span class="line">axios.get(&#x27;/user&#x27;, &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line">      ID: 12345</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(function (error) &#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>5.post请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#x27;#app&#x27;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      info: null</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    axios</span><br><span class="line">      .post(&#x27;https://www.runoob.com/try/ajax/demo_axios_post.php&#x27;)</span><br><span class="line">      .then(response =&gt; (this.info = response))</span><br><span class="line">      .catch(function (error) &#123; // 请求失败处理</span><br><span class="line">        console.log(error);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">//传参</span><br><span class="line">axios.post(&#x27;/user&#x27;, &#123;</span><br><span class="line">    firstName: &#x27;Fred&#x27;,        // 参数 firstName</span><br><span class="line">    lastName: &#x27;Flintstone&#x27;    // 参数 lastName</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(function (error) &#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">  &#125;);</span><br><span class="line">  //执行多个并发请求</span><br><span class="line">  function getUserAccount() &#123;</span><br><span class="line">  return axios.get(&#x27;/user/12345&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function getUserPermissions() &#123;</span><br><span class="line">  return axios.get(&#x27;/user/12345/permissions&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">axios.all([getUserAccount(), getUserPermissions()])</span><br><span class="line">  .then(axios.spread(function (acct, perms) &#123;</span><br><span class="line">    // 两个请求现在都执行完成</span><br><span class="line">  &#125;));</span><br></pre></td></tr></table></figure>

<p>可以通过向 axios 传递相关配置来创建请求。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">axios(config)</span><br><span class="line">// 发送 POST 请求</span><br><span class="line">axios(&#123;</span><br><span class="line">  method: &#x27;post&#x27;,</span><br><span class="line">  url: &#x27;/user/12345&#x27;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: &#x27;Fred&#x27;,</span><br><span class="line">    lastName: &#x27;Flintstone&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">//  GET 请求远程图片</span><br><span class="line">axios(&#123;</span><br><span class="line">  method:&#x27;get&#x27;,</span><br><span class="line">  url:&#x27;https://static.runoob.com/images/runoob-logo.png&#x27;,</span><br><span class="line">  responseType:&#x27;stream&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">  .then(function(response) &#123;</span><br><span class="line">  response.data.pipe(fs.createWriteStream(&#x27;ada_lovelace.jpg&#x27;))</span><br><span class="line">&#125;);</span><br><span class="line">axios(url[, config])</span><br><span class="line">// 发送 GET 请求（默认的方法）</span><br><span class="line">axios(&#x27;/user/12345&#x27;);</span><br></pre></td></tr></table></figure>

<h3 id="请求配置项"><a href="#请求配置项" class="headerlink" title="请求配置项"></a>请求配置项</h3><p><strong>在使用axios时，注意到配置选项中包含params和data两者，以为他们是相同的，实则不然。<br>因为params是添加到url的请求字符串中的，用于get请求。<br>而data是添加到请求体（body）中的， 用于post请求。</strong></p>
<p>当axios中的请求方式为‘post’的时候，axios的数据应该是 data:{}，并且默认请求的是json字符串</p>
<p>当请求方式是‘get’的时候，里面的数据应该是params:{}，并且默认请求的是查询字符串</p>
<ol>
<li>data是添加到请求头中(多用与post请求)</li>
<li>params是添加到url请求字符串中(多用于get请求)</li>
</ol>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">类型</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">url</td>
<td align="left"><code>string</code></td>
<td align="left">请求的目标URL</td>
</tr>
<tr>
<td align="left">body</td>
<td align="left"><code>Object</code>, <code>FormData</code>, <code>string</code></td>
<td align="left">作为请求体发送的数据</td>
</tr>
<tr>
<td align="left">headers</td>
<td align="left"><code>Object</code></td>
<td align="left">作为请求头部发送的头部对象</td>
</tr>
<tr>
<td align="left">params</td>
<td align="left"><code>Object</code></td>
<td align="left">作为URL参数的参数对象</td>
</tr>
<tr>
<td align="left">method</td>
<td align="left"><code>string</code></td>
<td align="left">HTTP方法 (例如GET，POST，…)</td>
</tr>
<tr>
<td align="left">timeout</td>
<td align="left"><code>number</code></td>
<td align="left">请求超时（单位：毫秒） (<code>0</code>表示永不超时)</td>
</tr>
<tr>
<td align="left">before</td>
<td align="left"><code>function(request)</code></td>
<td align="left">在请求发送之前修改请求的回调函数</td>
</tr>
<tr>
<td align="left">progress</td>
<td align="left"><code>function(event)</code></td>
<td align="left">用于处理上传进度的回调函数 ProgressEvent</td>
</tr>
<tr>
<td align="left">credentials</td>
<td align="left"><code>boolean</code></td>
<td align="left">是否需要出示用于跨站点请求的凭据</td>
</tr>
<tr>
<td align="left">emulateHTTP</td>
<td align="left"><code>boolean</code></td>
<td align="left">是否需要通过设置<code>X-HTTP-Method-Override</code>头部并且以传统POST方式发送PUT，PATCH和DELETE请求。</td>
</tr>
<tr>
<td align="left">emulateJSON</td>
<td align="left"><code>boolean</code></td>
<td align="left">设置请求体的类型为<code>application/x-www-form-urlencoded</code></td>
</tr>
</tbody></table>
<p>通过如下属性和方法处理一个请求获取到的响应对象：</p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">类型</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">url</td>
<td align="left"><code>string</code></td>
<td align="left">响应的 URL 源</td>
</tr>
<tr>
<td align="left">body</td>
<td align="left"><code>Object</code>, <code>Blob</code>, <code>string</code></td>
<td align="left">响应体数据</td>
</tr>
<tr>
<td align="left">headers</td>
<td align="left"><code>Header</code></td>
<td align="left">请求头部对象</td>
</tr>
<tr>
<td align="left">ok</td>
<td align="left"><code>boolean</code></td>
<td align="left">当 HTTP 响应码为 200 到 299 之间的数值时该值为 true</td>
</tr>
<tr>
<td align="left">status</td>
<td align="left"><code>number</code></td>
<td align="left">HTTP 响应码</td>
</tr>
<tr>
<td align="left">statusText</td>
<td align="left"><code>string</code></td>
<td align="left">HTTP 响应状态</td>
</tr>
<tr>
<td align="left"><strong>方法</strong></td>
<td align="left"><strong>类型</strong></td>
<td align="left"><strong>描述</strong></td>
</tr>
<tr>
<td align="left">text()</td>
<td align="left"><code>约定值</code></td>
<td align="left">以字符串方式返回响应体</td>
</tr>
<tr>
<td align="left">json()</td>
<td align="left"><code>约定值</code></td>
<td align="left">以格式化后的 json 对象方式返回响应体</td>
</tr>
<tr>
<td align="left">blob()</td>
<td align="left"><code>约定值</code></td>
<td align="left">以二进制 Blob 对象方式返回响应体</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// `params` 是即将与请求一起发送的 URL 参数</span><br><span class="line"> // 必须是一个无格式对象(plain object)或 URLSearchParams 对象</span><br><span class="line"> params: &#123;</span><br><span class="line">   ID: 12345</span><br><span class="line"> &#125;,</span><br><span class="line">  // `data` 是作为请求主体被发送的数据</span><br><span class="line"> // 只适用于这些请求方法 &quot;PUT&quot;, &quot;POST&quot;, 和 &quot;PATCH&quot;</span><br><span class="line"> // 在没有设置 `transformRequest` 时，必须是以下类型之一：</span><br><span class="line"> // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span><br><span class="line"> // - 浏览器专属：FormData, File, Blob</span><br><span class="line"> // - Node 专属： Stream</span><br><span class="line"> data: &#123;</span><br><span class="line">   firstName: &quot;Fred&quot;</span><br><span class="line"> &#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>下面是创建请求时可用的配置选项，注意只有 url 是必需的。如果没有指定 method，请求将默认使用 get 方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  url: &quot;/user&quot;,</span><br><span class="line">  method: &quot;get&quot;, // 默认是 get</span><br><span class="line">  // `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。</span><br><span class="line">  // 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL</span><br><span class="line">  baseURL: &quot;https://some-domain.com/api/&quot;,</span><br><span class="line"></span><br><span class="line">  // `transformRequest` 允许在向服务器发送前，修改请求数据</span><br><span class="line">  // 只能用在 &quot;PUT&quot;, &quot;POST&quot; 和 &quot;PATCH&quot; 这几个请求方法</span><br><span class="line">  // 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream</span><br><span class="line">  transformRequest: [function (data) &#123;</span><br><span class="line">    // 对 data 进行任意转换处理</span><br><span class="line">    return data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  // `transformResponse` 在传递给 then/catch 前，允许修改响应数据</span><br><span class="line">  transformResponse: [function (data) &#123;</span><br><span class="line">    // 对 data 进行任意转换处理</span><br><span class="line">    return data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  // `headers` 是即将被发送的自定义请求头</span><br><span class="line">  headers: &#123;&quot;X-Requested-With&quot;: &quot;XMLHttpRequest&quot;&#125;,</span><br><span class="line"></span><br><span class="line">  // `params` 是即将与请求一起发送的 URL 参数</span><br><span class="line">  // 必须是一个无格式对象(plain object)或 URLSearchParams 对象</span><br><span class="line">  params: &#123;</span><br><span class="line">    ID: 12345</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // `paramsSerializer` 是一个负责 `params` 序列化的函数</span><br><span class="line">  // (e.g. https://www.npmjs.com/package/qs, https://api.jquery.com/jquery.param/)</span><br><span class="line">  paramsSerializer: function(params) &#123;</span><br><span class="line">    return Qs.stringify(params, &#123;arrayFormat: &quot;brackets&quot;&#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // `data` 是作为请求主体被发送的数据</span><br><span class="line">  // 只适用于这些请求方法 &quot;PUT&quot;, &quot;POST&quot;, 和 &quot;PATCH&quot;</span><br><span class="line">  // 在没有设置 `transformRequest` 时，必须是以下类型之一：</span><br><span class="line">  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span><br><span class="line">  // - 浏览器专属：FormData, File, Blob</span><br><span class="line">  // - Node 专属： Stream</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: &quot;Fred&quot;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // `timeout` 指定请求超时的毫秒数(0 表示无超时时间)</span><br><span class="line">  // 如果请求花费了超过 `timeout` 的时间，请求将被中断</span><br><span class="line">  timeout: 1000,</span><br><span class="line"></span><br><span class="line">  // `withCredentials` 表示跨域请求时是否需要使用凭证</span><br><span class="line">  withCredentials: false, // 默认的</span><br><span class="line"></span><br><span class="line">  // `adapter` 允许自定义处理请求，以使测试更轻松</span><br><span class="line">  // 返回一个 promise 并应用一个有效的响应 (查阅 [response docs](#response-api)).</span><br><span class="line">  adapter: function (config) &#123;</span><br><span class="line">    /* ... */</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // `auth` 表示应该使用 HTTP 基础验证，并提供凭据</span><br><span class="line">  // 这将设置一个 `Authorization` 头，覆写掉现有的任意使用 `headers` 设置的自定义 `Authorization`头</span><br><span class="line">  auth: &#123;</span><br><span class="line">    username: &quot;janedoe&quot;,</span><br><span class="line">    password: &quot;s00pers3cret&quot;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // `responseType` 表示服务器响应的数据类型，可以是 &quot;arraybuffer&quot;, &quot;blob&quot;, &quot;document&quot;, &quot;json&quot;, &quot;text&quot;, &quot;stream&quot;</span><br><span class="line">  responseType: &quot;json&quot;, // 默认的</span><br><span class="line"></span><br><span class="line">  // `xsrfCookieName` 是用作 xsrf token 的值的cookie的名称</span><br><span class="line">  xsrfCookieName: &quot;XSRF-TOKEN&quot;, // default</span><br><span class="line"></span><br><span class="line">  // `xsrfHeaderName` 是承载 xsrf token 的值的 HTTP 头的名称</span><br><span class="line">  xsrfHeaderName: &quot;X-XSRF-TOKEN&quot;, // 默认的</span><br><span class="line"></span><br><span class="line">  // `onUploadProgress` 允许为上传处理进度事件</span><br><span class="line">  onUploadProgress: function (progressEvent) &#123;</span><br><span class="line">    // 对原生进度事件的处理</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // `onDownloadProgress` 允许为下载处理进度事件</span><br><span class="line">  onDownloadProgress: function (progressEvent) &#123;</span><br><span class="line">    // 对原生进度事件的处理</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // `maxContentLength` 定义允许的响应内容的最大尺寸</span><br><span class="line">  maxContentLength: 2000,</span><br><span class="line"></span><br><span class="line">  // `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，promise 将被 resolve; 否则，promise 将被 rejecte</span><br><span class="line">  validateStatus: function (status) &#123;</span><br><span class="line">    return status &amp;gt;= 200 &amp;amp;&amp;amp; status &amp;lt; 300; // 默认的</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // `maxRedirects` 定义在 node.js 中 follow 的最大重定向数目</span><br><span class="line">  // 如果设置为0，将不会 follow 任何重定向</span><br><span class="line">  maxRedirects: 5, // 默认的</span><br><span class="line"></span><br><span class="line">  // `httpAgent` 和 `httpsAgent` 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。允许像这样配置选项：</span><br><span class="line">  // `keepAlive` 默认没有启用</span><br><span class="line">  httpAgent: new http.Agent(&#123; keepAlive: true &#125;),</span><br><span class="line">  httpsAgent: new https.Agent(&#123; keepAlive: true &#125;),</span><br><span class="line"></span><br><span class="line">  // &quot;proxy&quot; 定义代理服务器的主机名称和端口</span><br><span class="line">  // `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据</span><br><span class="line">  // 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。</span><br><span class="line">  proxy: &#123;</span><br><span class="line">    host: &quot;127.0.0.1&quot;,</span><br><span class="line">    port: 9000,</span><br><span class="line">    auth: : &#123;</span><br><span class="line">      username: &quot;mikeymike&quot;,</span><br><span class="line">      password: &quot;rapunz3l&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // `cancelToken` 指定用于取消请求的 cancel token</span><br><span class="line">  // （查看后面的 Cancellation 这节了解更多）</span><br><span class="line">  cancelToken: new CancelToken(function (cancel) &#123;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="响应结构"><a href="#响应结构" class="headerlink" title="响应结构"></a>响应结构</h3><p>axios请求的响应包含以下信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // `data` 由服务器提供的响应</span><br><span class="line">  data: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  // `status`  HTTP 状态码</span><br><span class="line">  status: 200,</span><br><span class="line"></span><br><span class="line">  // `statusText` 来自服务器响应的 HTTP 状态信息</span><br><span class="line">  statusText: &quot;OK&quot;,</span><br><span class="line"></span><br><span class="line">  // `headers` 服务器响应的头</span><br><span class="line">  headers: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  // `config` 是为请求提供的配置信息</span><br><span class="line">  config: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 then 时，会接收下面这样的响应：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">axios.get(&quot;/user/12345&quot;)</span><br><span class="line">  .then(function(response) &#123;</span><br><span class="line">    console.log(response.data);</span><br><span class="line">    console.log(response.status);</span><br><span class="line">    console.log(response.statusText);</span><br><span class="line">    console.log(response.headers);</span><br><span class="line">    console.log(response.config);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>参考菜鸟教程：<a href="https://www.runoob.com/vue2/vuejs-ajax-axios.html">https://www.runoob.com/vue2/vuejs-ajax-axios.html</a></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树</title>
    <url>/2022/04/25/%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<ol>
<li></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef struct BiNode&#123;	//二叉链表定义</span><br><span class="line">	char data;</span><br><span class="line">	struct BiNode *lchild,*rchild;</span><br><span class="line">&#125;BiTNode,*BiTree;</span><br><span class="line">void PreorderTraverse(BiTree T);//先序遍历二叉树T的递归函数声明</span><br><span class="line"></span><br><span class="line">//用算法5.3 先序遍历的顺序建立二叉链表</span><br><span class="line">void CreateBiTree(BiTree &amp;T)&#123;</span><br><span class="line">//按先序次序输入二叉树中结点的值（一个字符），创建二叉链表表示的二叉树T</span><br><span class="line">	char ch;</span><br><span class="line">	cin &gt;&gt; ch;</span><br><span class="line">	if(ch==&#x27;#&#x27;)  T=NULL;	//递归结束，建空树</span><br><span class="line">	else&#123;</span><br><span class="line">	T=new BiTNode;</span><br><span class="line">	T-&gt;data=ch;	//生成根结点</span><br><span class="line">	CreateBiTree(T-&gt;lchild);	//递归创建左子树</span><br><span class="line">	CreateBiTree(T-&gt;rchild);	//递归创建右子树</span><br><span class="line">&#125;	//else</span><br><span class="line">&#125;	//CreateBiTree</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">	BiTree tree;</span><br><span class="line">	//cout&lt;&lt;&quot;请输入建立二叉链表的序列：\n&quot;;</span><br><span class="line">	CreateBiTree(tree);</span><br><span class="line">	//cout&lt;&lt;&quot;先序遍历的结果为：\n&quot;;</span><br><span class="line">	PreorderTraverse(tree);</span><br><span class="line">	cout&lt;&lt;endl;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br><span class="line">//先序遍历</span><br><span class="line">void PreorderTraverse(BiTree T)</span><br><span class="line">&#123;</span><br><span class="line">    if(T)</span><br><span class="line">    &#123;</span><br><span class="line">    cout&lt;&lt;T-&gt;data;</span><br><span class="line">    PreorderTraverse(T-&gt;lchild);</span><br><span class="line">    PreorderTraverse(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//中序遍历</span><br><span class="line">void InOrderTraverse(BiTree T)</span><br><span class="line">&#123;</span><br><span class="line">    if(T)</span><br><span class="line">    &#123;</span><br><span class="line">    InOrderTraverse(T-&gt;lchild);</span><br><span class="line">    cout&lt;&lt;T-&gt;data;</span><br><span class="line">    InOrderTraverse(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//后序遍历</span><br><span class="line">void PostorderTraverse(BiTree T)</span><br><span class="line">&#123;</span><br><span class="line">    if(T)</span><br><span class="line">    &#123;</span><br><span class="line">    PostorderTraverse(T-&gt;lchild);</span><br><span class="line">    PostorderTraverse(T-&gt;rchild);</span><br><span class="line">    cout&lt;&lt;T-&gt;data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.统计二叉树中结点的个数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int NodeCount(BiTree T)</span><br><span class="line">&#123;</span><br><span class="line">    if(T==NULL)</span><br><span class="line">        return 0;</span><br><span class="line">    else</span><br><span class="line">        return NodeCount(T-&gt;lchild)+NodeCount(T-&gt;rchild)+1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3.统计二叉树中叶子结点的个数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int Leafnum(BiTree T)</span><br><span class="line">&#123;</span><br><span class="line">    if(T==NULL)</span><br><span class="line">        return 0;</span><br><span class="line">    if(T-&gt;lchild==NULL&amp;&amp;T-&gt;rchild==NULL)</span><br><span class="line">        return 1;</span><br><span class="line">    return Leafnum(T-&gt;lchild)+Leafnum(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>4.求树的深度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int Depth(BiTree T)</span><br><span class="line">&#123;</span><br><span class="line">    int m,n;</span><br><span class="line">    if(T==NULL)</span><br><span class="line">        return 0;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        m=Depth(T-&gt;lchild);</span><br><span class="line">        n=Depth(T-&gt;rchild);</span><br><span class="line">        if(m&gt;n)</span><br><span class="line">            return(m+1);</span><br><span class="line">        else</span><br><span class="line">            return (n+1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>5.先序遍历的顺序建立二叉链表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">//二叉树的二叉链表存储表示</span><br><span class="line">typedef struct BiNode</span><br><span class="line">&#123;</span><br><span class="line">char data;	//结点数据域</span><br><span class="line">struct BiNode *lchild,*rchild;	//左右孩子指针</span><br><span class="line">&#125;BiTNode,*BiTree;</span><br><span class="line"></span><br><span class="line">void CreateBiTree(BiTree &amp;T);	//CreateBiTree</span><br><span class="line"></span><br><span class="line">//用算法5.1 中序遍历的递归算法</span><br><span class="line">void InOrderTraverse(BiTree T)</span><br><span class="line">&#123;</span><br><span class="line">//中序遍历二叉树T的递归算法</span><br><span class="line">if(T)&#123;</span><br><span class="line">InOrderTraverse(T-&gt;lchild);</span><br><span class="line">cout &lt;&lt; T-&gt;data;</span><br><span class="line">InOrderTraverse(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	BiTree tree;</span><br><span class="line">	//cout&lt;&lt;&quot;请输入建立二叉链表的序列：\n&quot;;</span><br><span class="line">	CreateBiTree(tree);</span><br><span class="line">	//cout&lt;&lt;&quot;所建立的二叉链表中序序列：\n&quot;;</span><br><span class="line">	InOrderTraverse(tree);</span><br><span class="line">	cout&lt;&lt;endl;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br><span class="line">void CreateBiTree(BiTree &amp;T)</span><br><span class="line">&#123;</span><br><span class="line">    char ch;</span><br><span class="line">    cin&gt;&gt;ch;</span><br><span class="line">    if(ch==&#x27;#&#x27;)</span><br><span class="line">        T=NULL;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        T=new BiTNode;</span><br><span class="line">        T-&gt;data=ch;</span><br><span class="line">        CreateBiTree(T-&gt;lchild);</span><br><span class="line">        CreateBiTree(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>原生IO模式与Reactor模式与Netty框架简介</title>
    <url>/2022/07/17/%E5%8E%9F%E7%94%9FIO%E6%A8%A1%E5%BC%8F%E4%B8%8EReactor%E6%A8%A1%E5%BC%8F%E4%B8%8ENetty%E6%A1%86%E6%9E%B6%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h3 id="原生IO模式与Reactor模式与Netty框架简介"><a href="#原生IO模式与Reactor模式与Netty框架简介" class="headerlink" title="原生IO模式与Reactor模式与Netty框架简介"></a>原生IO模式与Reactor模式与Netty框架简介</h3><h4 id="Netty-的介绍"><a href="#Netty-的介绍" class="headerlink" title="Netty 的介绍"></a>Netty 的介绍</h4><p>Netty 是由 JBOSS 提供的一个 Java 开源框架，现为 Github 上的独立项目。<br>Netty 是一个异步的、基于事件驱动的网络应用框架，用以快速开发高性能、高可靠性的网络 IO 程序。<br>Netty 主要针对在 TCP 协议下，面向 Client 端的高并发应用，或者 Peer-to-Peer 场景下的大量数据持续传输的应用。<br>Netty 本质是一个 NIO 框架，适用于服务器通讯相关的多种应用场景。<br>要透彻理解 Netty，需要先学习 NIO，这样我们才能阅读 Netty 的源码。</p>
<p>详细内容参照：原文：<a href="https://blog.csdn.net/Youth_lql/article/details/115524052">https://blog.csdn.net/Youth_lql/article/details/115524052</a></p>
<p>本文简要介绍</p>
<h4 id="Java-BIO编程"><a href="#Java-BIO编程" class="headerlink" title="Java BIO编程"></a>Java BIO编程</h4><h5 id="I-x2F-O-模型"><a href="#I-x2F-O-模型" class="headerlink" title="I&#x2F;O 模型"></a>I&#x2F;O 模型</h5><p>I&#x2F;O 模型简单的理解：就是用什么样的通道进行数据的发送和接收，很大程度上决定了程序通信的性能。<br>Java 共支持 3 种网络编程模型 I&#x2F;O 模式：BIO、NIO、AIO。</p>
<h5 id="Java-BIO："><a href="#Java-BIO：" class="headerlink" title="Java BIO："></a>Java BIO：</h5><p>同步并阻塞（传统阻塞型），服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销。（一个线程对一个事件）</p>
<h5 id="Java-NIO："><a href="#Java-NIO：" class="headerlink" title="Java NIO："></a>Java NIO：</h5><p>同步非阻塞，服务器实现模式为一个线程处理多个请求（连接），即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有 <code>I/O</code> 请求就进行处理。</p>
<h5 id="Java-AIO-NIO-2-："><a href="#Java-AIO-NIO-2-：" class="headerlink" title="Java AIO(NIO.2)："></a>Java AIO(NIO.2)：</h5><p><code>异步非阻塞，</code>AIO<code>引入异步通道的概念，采用了</code>Proactor&#96; 模式，简化了程序编写，有效的请求才启动线程，它的特点是先由操作系统完成后才通知服务端程序启动线程去处理，一般适用于连接数较多且连接时间较长的应用。</p>
<h4 id="BIO、NIO、AIO-使用场景分析"><a href="#BIO、NIO、AIO-使用场景分析" class="headerlink" title="BIO、NIO、AIO 使用场景分析"></a>BIO、NIO、AIO 使用场景分析</h4><p>BIO 方式</p>
<p>适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4 以前的唯一选择，但程序简单易理解。<br>NIO 方式</p>
<p>适用于连接数目多且连接比较短（轻操作）的架构，比如聊天服务器，弹幕系统，服务器间通讯等。编程比较复杂，JDK1.4 开始支持。<br>AIO 方式</p>
<p>使用于连接数目多且连接比较长（重操作）的架构，比如相册服务器，充分调用 OS 参与并发操作，编程比较复杂，JDK7 开始支持。<br>Java BIO 基本介绍<br>Java BIO 就是传统的 Java I&#x2F;O 编程，其相关的类和接口在 java.io。<br>BIO(BlockingI&#x2F;O)：同步阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，可以通过线程池机制改善（实现多个客户连接服务器）。【后有应用实例】<br>BIO 方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4 以前的唯一选择，程序简单易理解。</p>
<h5 id="Java-BIO-应用实例在以前的serversocketDome中"><a href="#Java-BIO-应用实例在以前的serversocketDome中" class="headerlink" title="Java BIO 应用实例在以前的serversocketDome中"></a>Java BIO 应用实例在以前的serversocketDome中</h5><h3 id="Java-NIO编程"><a href="#Java-NIO编程" class="headerlink" title="Java NIO编程"></a>Java NIO编程</h3><h5 id="Java-NIO-基本介绍"><a href="#Java-NIO-基本介绍" class="headerlink" title="Java NIO 基本介绍"></a>Java NIO 基本介绍</h5><p>Java NIO 全称 Java non-blocking IO，是指 JDK 提供的新 API。从 JDK1.4 开始，Java 提供了一系列改进的输入&#x2F;输出的新特性，被统称为 NIO（即 NewIO），是同步非阻塞的。<br>NIO 相关类都被放在 java.nio 包及子包下，并且对原 java.io 包中的很多类进行改写。【基本案例】<br>NIO 有三大核心部分：Channel（通道）、Buffer（缓冲区）、Selector（选择器） 。<br>NIO 是面向缓冲区，或者面向块编程的。数据读取到一个它稍后处理的缓冲区，需要时可在缓冲区中前后移动，这就增加了处理过程中的灵活性，使用它可以提供非阻塞式的高伸缩性网络。<br>Java NIO 的非阻塞模式，使一个线程从某通道发送请求或者读取数据，但是它仅能得到目前可用的数据，如果目前没有数据可用时，就什么都不会获取，而不是保持线程阻塞，所以直至数据变的可以读取之前，该线程可以继续做其他的事情。非阻塞写也是如此，一个线程请求写入一些数据到某通道，但不需要等待它完全写入，这个线程同时可以去做别的事情。<br>通俗理解：NIO 是可以做到用一个线程来处理多个操作的。假设有 10000 个请求过来,根据实际情况，可以分配 50 或者 100 个线程来处理。不像之前的阻塞 IO 那样，非得分配 10000 个。<br>HTTP 2.0 使用了多路复用的技术，做到同一个连接并发处理多个请求，而且并发请求的数量比 HTTP 1.1 大了好几个数量级。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NIO 和 BIO 的比较</span><br><span class="line">BIO 以流的方式处理数据，而 NIO 以块的方式处理数据，块 I/O 的效率比流 I/O 高很多。</span><br><span class="line">BIO 是阻塞的，NIO 则是非阻塞的。</span><br><span class="line">BIO 基于字节流和字符流进行操作，而 NIO 基于 Channel（通道）和 Buffer（缓冲区）进行操作，数据总是从通道读取到缓冲区中，或者从缓冲区写入到通道中。Selector（选择器）用于监听多个通道的事件（比如：连接请求，数据到达等），因此使用单个线程就可以监听多个客户端通道。</span><br><span class="line">Buffer和Channel之间的数据流向是双向的</span><br><span class="line">每个 Channel 都会对应一个 Buffer。</span><br><span class="line">Selector 对应一个线程，一个线程对应多个 Channel（连接）。</span><br><span class="line">该图反应了有三个 Channel 注册到该 Selector //程序</span><br><span class="line">程序切换到哪个 Channel 是由事件决定的，Event 就是一个重要的概念。</span><br><span class="line">Selector 会根据不同的事件，在各个通道上切换。</span><br><span class="line">Buffer 就是一个内存块，底层是有一个数组。</span><br><span class="line">数据的读取写入是通过 Buffer，这个和 BIO是不同的，BIO 中要么是输入流，或者是输出流，不能双向，但是 NIO 的 Buffer 是可以读也可以写，需要 flip 方法切换 Channel 是双向的，可以返回底层操作系统的情况，比如 Linux，底层的操作系统通道就是双向的。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Netty框架完整流程</p>
<p><img src="/images3/image-20220717171319212.png" alt="image-20220717171319212"></p>
<p><img src="/images3/image-20220717171204477.png" alt="image-20220717171204477"></p>
<h4 id="图片梳理"><a href="#图片梳理" class="headerlink" title="图片梳理"></a>图片梳理</h4><h5 id="传统阻塞IO模式"><a href="#传统阻塞IO模式" class="headerlink" title="传统阻塞IO模式"></a>传统阻塞IO模式</h5><p><img src="/images3/image-20220717165722768.png" alt="image-20220717165722768"></p>
<h5 id="传统阻塞IO模式的改进（Reactor模式）"><a href="#传统阻塞IO模式的改进（Reactor模式）" class="headerlink" title="传统阻塞IO模式的改进（Reactor模式）"></a>传统阻塞IO模式的改进（Reactor模式）</h5><p><img src="/images3/image-20220717165820712.png" alt="image-20220717165820712"></p>
<p><img src="/images3/image-20220717165927312.png" alt="image-20220717165927312"></p>
<p>根据 <code>Reactor</code> 的数量和处理资源池线程的数量不同，有 <code>3</code> 种典型的实现</p>
<ol>
<li>单 <code>Reactor</code> 单线程</li>
<li>单 <code>Reactor</code> 多线程</li>
<li>主从 <code>Reactor</code> 多线程</li>
</ol>
<p><img src="/images3/image-20220717170036351.png" alt="image-20220717170036351"></p>
<p><img src="/images3/image-20220717170120890.png" alt="image-20220717170120890"></p>
<p><img src="/images3/image-20220717170245153.png" alt="image-20220717170245153"></p>
<h4 id="单-Reactor-多线程"><a href="#单-Reactor-多线程" class="headerlink" title="单 Reactor 多线程"></a>单 <code>Reactor</code> 多线程</h4><p><img src="/images3/image-20220717170212830.png" alt="image-20220717170212830"></p>
<p><img src="/images3/image-20220717170338964.png" alt="image-20220717170338964"></p>
<h4 id="主从-Reactor-多线程"><a href="#主从-Reactor-多线程" class="headerlink" title="主从 Reactor 多线程"></a>主从 <code>Reactor</code> 多线程</h4><p><img src="/images3/image-20220717170446707.png" alt="image-20220717170446707"></p>
<p><img src="/images3/image-20220717170537574.png" alt="image-20220717170537574"></p>
<p><img src="/images3/image-20220717170628818.png" alt="image-20220717170628818"></p>
<h3 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h3><p><img src="/images3/image-20220717170743390.png" alt="image-20220717170743390"></p>
<p><img src="/images3/image-20220717171029245.png" alt="image-20220717171029245"></p>
<p><img src="/images3/image-20220717170945107.png" alt="image-20220717170945107"></p>
<p><img src="/images3/image-20220717164751092.png" alt="image-20220717171319212"></p>
<p><img src="/images3/image-20220717171204477.png" alt="image-20220717171204477"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>10.反射机制</title>
    <url>/2022/05/07/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2 id="1-反射"><a href="#1-反射" class="headerlink" title="1.反射"></a>1.反射</h2><h3 id="1-1反射的概述"><a href="#1-1反射的概述" class="headerlink" title="1.1反射的概述"></a>1.1反射的概述</h3><ul>
<li><p>反射机制</p>
<p>是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；<br>对于任意一个对象，都能够调用它的任意属性和方法；<br>这种动态获取信息以及动态调用对象方法的功能称为Java语言的反射机制。</p>
</li>
</ul>
<h3 id="1-2获取Class类对象的三种方式【应用】"><a href="#1-2获取Class类对象的三种方式【应用】" class="headerlink" title="1.2获取Class类对象的三种方式【应用】"></a>1.2获取Class类对象的三种方式【应用】</h3><ul>
<li><p>三种方式分类</p>
<ul>
<li><p>类名.class属性</p>
</li>
<li><p>对象名.getClass()方法</p>
</li>
<li><p>Class.forName(全类名)方法</p>
</li>
</ul>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//无参加有参构造方法省略</span></span><br><span class="line">	<span class="comment">//set,get方法省略</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生在学习&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//1.Class类中的静态方法forName(&quot;全类名&quot;)</span></span><br><span class="line">            <span class="comment">//全类名:包名 + 类名</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;dome1.Student&quot;</span>);</span><br><span class="line">        System.out.println(clazz);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.通过class属性来获取</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz2</span> <span class="operator">=</span> Student.class;</span><br><span class="line">        System.out.println(clazz2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.利用对象的getClass方法来获取class对象</span></span><br><span class="line">        <span class="comment">//getClass方法是定义在Object类中.</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz3</span> <span class="operator">=</span> s.getClass();</span><br><span class="line">        System.out.println(clazz3);</span><br><span class="line"></span><br><span class="line">        System.out.println(clazz == clazz2);</span><br><span class="line">        System.out.println(clazz2 == clazz3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class dome1.Student</span><br><span class="line">class dome1.Student</span><br><span class="line">class dome1.Student</span><br><span class="line">true</span><br><span class="line">true</span><br></pre></td></tr></table></figure>



<h3 id="1-3反射获取构造方法并使用【应用】"><a href="#1-3反射获取构造方法并使用【应用】" class="headerlink" title="1.3反射获取构造方法并使用【应用】"></a>1.3反射获取构造方法并使用【应用】</h3><h4 id="1-3-1Class类获取构造方法对象的方法"><a href="#1-3-1Class类获取构造方法对象的方法" class="headerlink" title="1.3.1Class类获取构造方法对象的方法"></a>1.3.1Class类获取构造方法对象的方法</h4><ul>
<li><p>方法介绍</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Constructor&lt;?&gt;[] getConstructors()</td>
<td>返回所有公共构造方法对象的数组</td>
</tr>
<tr>
<td>Constructor&lt;?&gt;[] getDeclaredConstructors()</td>
<td>返回所有构造方法对象的数组</td>
</tr>
<tr>
<td>Constructor<T> getConstructor(Class&lt;?&gt;… parameterTypes)</td>
<td>返回单个公共构造方法对象</td>
</tr>
<tr>
<td>Constructor<T> getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)</td>
<td>返回单个构造方法对象</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> dome1;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> cb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-05-2022/5/7 22:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有的有参构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Student</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name的值为:&quot;</span> + name);</span><br><span class="line">        System.out.println(<span class="string">&quot;private...Student...有参构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//公共的无参构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;public...Student...无参构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//公共的有参构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name的值为:&quot;</span> + name + <span class="string">&quot;age的值为:&quot;</span> + age);</span><br><span class="line">        System.out.println(<span class="string">&quot;public...Student...有参构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">ReflectDemo1</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;方法1：&quot;</span>);</span><br><span class="line">         method1();</span><br><span class="line">         System.out.println(<span class="string">&quot;方法2：&quot;</span>);</span><br><span class="line">         method2();</span><br><span class="line">         <span class="comment">//method3();</span></span><br><span class="line">         System.out.println(<span class="string">&quot;方法4：&quot;</span>);</span><br><span class="line">         method4();</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">         <span class="comment">//        Constructor&lt;?&gt;[] getConstructors()：</span></span><br><span class="line"><span class="comment">//                                      返回所有公共构造方法对象的数组</span></span><br><span class="line">         <span class="comment">//1.获取Class对象</span></span><br><span class="line">         <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;dome1.Student&quot;</span>);</span><br><span class="line">         Constructor[] constructors = clazz.getConstructors();</span><br><span class="line">         <span class="keyword">for</span> (Constructor constructor : constructors) &#123;</span><br><span class="line">             System.out.println(constructor);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">         <span class="comment">//        Constructor&lt;?&gt;[] getDeclaredConstructors()：</span></span><br><span class="line"><span class="comment">//                                      返回所有构造方法对象的数组</span></span><br><span class="line">         <span class="comment">//1.获取Class对象</span></span><br><span class="line">         <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;dome1.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">         Constructor[] constructors = clazz.getDeclaredConstructors();</span><br><span class="line">         <span class="keyword">for</span> (Constructor constructor : constructors) &#123;</span><br><span class="line">             System.out.println(constructor);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;</span><br><span class="line">         <span class="comment">//        Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;... parameterTypes)：</span></span><br><span class="line"><span class="comment">//                                      返回单个公共构造方法对象</span></span><br><span class="line">         <span class="comment">//1.获取Class对象</span></span><br><span class="line">         <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;dome1.Student&quot;</span>);</span><br><span class="line">         <span class="comment">//小括号中,一定要跟构造方法的形参保持一致.</span></span><br><span class="line">         <span class="type">Constructor</span> <span class="variable">constructor1</span> <span class="operator">=</span> clazz.getConstructor();</span><br><span class="line">         System.out.println(constructor1);</span><br><span class="line"></span><br><span class="line">         <span class="type">Constructor</span> <span class="variable">constructor2</span> <span class="operator">=</span> clazz.getConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line">         System.out.println(constructor2);</span><br><span class="line"></span><br><span class="line">         <span class="comment">//因为Student类中,没有只有一个int的构造,所以这里会报错.</span></span><br><span class="line">         <span class="type">Constructor</span> <span class="variable">constructor3</span> <span class="operator">=</span> clazz.getConstructor(<span class="type">int</span>.class);</span><br><span class="line">         System.out.println(constructor3);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method4</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;</span><br><span class="line">         <span class="comment">//        Constructor&lt;T&gt; getDeclaredConstructor(Class&lt;?&gt;... parameterTypes)：</span></span><br><span class="line"><span class="comment">//                                      返回单个构造方法对象</span></span><br><span class="line">         <span class="comment">//1.获取Class对象</span></span><br><span class="line">         <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;dome1.Student&quot;</span>);</span><br><span class="line">         <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor(String.class);</span><br><span class="line">         System.out.println(constructor);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方法1：</span><br><span class="line">public dome1.Student()</span><br><span class="line">public dome1.Student(java.lang.String,int)</span><br><span class="line">方法2：</span><br><span class="line">private dome1.Student(java.lang.String)</span><br><span class="line">public dome1.Student()</span><br><span class="line">public dome1.Student(java.lang.String,int)</span><br><span class="line">方法4：</span><br><span class="line">private dome1.Student(java.lang.String)</span><br></pre></td></tr></table></figure>



<h4 id="1-3-2Constructor类用于创建对象的方法"><a href="#1-3-2Constructor类用于创建对象的方法" class="headerlink" title="1.3.2Constructor类用于创建对象的方法"></a>1.3.2Constructor类用于创建对象的方法</h4><ul>
<li><p>方法介绍</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>T newInstance(Object…initargs)</td>
<td>根据指定的构造方法创建对象</td>
</tr>
<tr>
<td>setAccessible(boolean flag)</td>
<td>设置为true,表示取消访问检查</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Student类同上一个示例,这里就不在重复提供了</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line">        <span class="comment">//T newInstance(Object... initargs)：根据指定的构造方法创建对象</span></span><br><span class="line">        <span class="comment">//method1();</span></span><br><span class="line">        <span class="comment">//method2();</span></span><br><span class="line">        <span class="comment">//method3();</span></span><br><span class="line">        <span class="comment">//method4();</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method4</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">        <span class="comment">//获取一个私有的构造方法并创建对象</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;dome1.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取一个私有化的构造方法.</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor(String.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//被private修饰的成员,不能直接使用的</span></span><br><span class="line">        <span class="comment">//如果用反射强行获取并使用,需要临时取消访问检查</span></span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.直接创建对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) constructor.newInstance(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">//简写格式</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;dome1.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.在Class类中,有一个newInstance方法,可以利用空参直接创建一个对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) clazz.newInstance();<span class="comment">//这个方法现在已经过时了,了解一下</span></span><br><span class="line"></span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;dome1.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取构造方法对象</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getConstructor();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.利用空参来创建Student的对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) constructor.newInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;dome1.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取构造方法对象</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.利用newInstance创建Student的对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) constructor.newInstance(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">23</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2-3-3小结"><a href="#2-3-3小结" class="headerlink" title="2.3.3小结"></a>2.3.3小结</h4><ul>
<li><p>获取class对象</p>
<p>三种方式: Class.forName(“全类名”), 类名.class, 对象名.getClass()</p>
</li>
<li><p>获取里面的构造方法对象</p>
<p>getConstructor (Class<?>... parameterTypes)
getDeclaredConstructor (Class<?>… parameterTypes)</p>
</li>
<li><p>如果是public的，直接创建对象</p>
<p>newInstance(Object… initargs)</p>
</li>
<li><p>如果是非public的，需要临时取消检查，然后再创建对象</p>
<p>setAccessible(boolean)  暴力反射</p>
</li>
</ul>
<h3 id="1-4反射获取成员变量并使用【应用】"><a href="#1-4反射获取成员变量并使用【应用】" class="headerlink" title="1.4反射获取成员变量并使用【应用】"></a>1.4反射获取成员变量并使用【应用】</h3><h4 id="1-4-1Class类获取成员变量对象的方法"><a href="#1-4-1Class类获取成员变量对象的方法" class="headerlink" title="1.4.1Class类获取成员变量对象的方法"></a>1.4.1Class类获取成员变量对象的方法</h4><ul>
<li><p>方法分类</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Field[] getFields()</td>
<td>返回所有公共成员变量对象的数组</td>
</tr>
<tr>
<td>Field[] getDeclaredFields()</td>
<td>返回所有成员变量对象的数组</td>
</tr>
<tr>
<td>Field getField(String name)</td>
<td>返回单个公共成员变量对象</td>
</tr>
<tr>
<td>Field getDeclaredField(String name)</td>
<td>返回单个成员变量对象</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String gender;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, money=&quot;</span> + money +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException &#123;</span><br><span class="line">       <span class="comment">// method1();</span></span><br><span class="line">        <span class="comment">//method2();</span></span><br><span class="line">        <span class="comment">//method3();</span></span><br><span class="line">        <span class="comment">//method4();</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method4</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="comment">//        Field getDeclaredField(String name)：返回单个成员变量对象</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;dome1.Student&quot;</span>);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//2.获取money成员变量</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;money&quot;</span>);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//3.打印一下</span></span><br><span class="line">        System.out.println(field);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="comment">//        Field getField(String name)：返回单个公共成员变量对象</span></span><br><span class="line">        <span class="comment">//想要获取的成员变量必须是真实存在的</span></span><br><span class="line">        <span class="comment">//且必须是public修饰的.</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;dome1.Student&quot;</span>);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//2.获取name这个成员变量</span></span><br><span class="line">        <span class="comment">//Field field = clazz.getField(&quot;name&quot;);</span></span><br><span class="line">        <span class="comment">//Field field = clazz.getField(&quot;name1&quot;);</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getField(<span class="string">&quot;money&quot;</span>);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//3.打印一下</span></span><br><span class="line">        System.out.println(field);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//        Field[] getDeclaredFields()：返回所有成员变量对象的数组</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;dome1.Student&quot;</span>);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//2.获取所有的Field对象</span></span><br><span class="line">        Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//3.遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//        Field[] getFields()：返回所有公共成员变量对象的数组</span></span><br><span class="line">  </span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;dome1.Student&quot;</span>);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//2.获取Field对象.</span></span><br><span class="line">        Field[] fields = clazz.getFields();</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//3.遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="1-4-2Field类用于给成员变量赋值的方法"><a href="#1-4-2Field类用于给成员变量赋值的方法" class="headerlink" title="1.4.2Field类用于给成员变量赋值的方法"></a>1.4.2Field类用于给成员变量赋值的方法</h4><ul>
<li><p>方法介绍</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void set(Object obj, Object value)</td>
<td>赋值</td>
</tr>
<tr>
<td>Object get(Object obj)</td>
<td>获取值</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Student类同上一个示例,这里就不在重复提供了</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException, InstantiationException &#123;</span><br><span class="line"><span class="comment">//        Object get(Object obj) 返回由该 Field表示的字段在指定对象上的值。</span></span><br><span class="line">        <span class="comment">//method1();</span></span><br><span class="line">        <span class="comment">//method2();</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;dome1.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取成员变量Field的对象</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;money&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.取消一下访问检查</span></span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.调用get方法来获取值</span></span><br><span class="line">        <span class="comment">//4.1创建一个对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) clazz.newInstance();</span><br><span class="line">        <span class="comment">//4.2获取指定对象的money的值</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> field.get(student);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.打印一下</span></span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">//        void set(Object obj, Object value)：给obj对象的成员变量赋值为value</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;dome1.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取name这个Field对象</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.利用set方法进行赋值.</span></span><br><span class="line">        <span class="comment">//3.1先创建一个Student对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) clazz.newInstance();</span><br><span class="line">        <span class="comment">//3.2有了对象才可以给指定对象进行赋值</span></span><br><span class="line">        field.set(student,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="1-5反射获取成员方法并使用【应用】"><a href="#1-5反射获取成员方法并使用【应用】" class="headerlink" title="1.5反射获取成员方法并使用【应用】"></a>1.5反射获取成员方法并使用【应用】</h3><h4 id="1-5-1Class类获取成员方法对象的方法"><a href="#1-5-1Class类获取成员方法对象的方法" class="headerlink" title="1.5.1Class类获取成员方法对象的方法"></a>1.5.1Class类获取成员方法对象的方法</h4><ul>
<li><p>方法分类</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Method[] getMethods()</td>
<td>返回所有公共成员方法对象的数组，包括继承的</td>
</tr>
<tr>
<td>Method[] getDeclaredMethods()</td>
<td>返回所有成员方法对象的数组，不包括继承的</td>
</tr>
<tr>
<td>Method getMethod(String name, Class&lt;?&gt;… parameterTypes)</td>
<td>返回单个公共成员方法对象</td>
</tr>
<tr>
<td>Method getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes)</td>
<td>返回单个成员方法对象</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有的，无参无返回值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;私有的show方法，无参无返回值&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//公共的，无参无返回值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">function1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;function1方法，无参无返回值&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//公共的，有参无返回值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">function2</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;function2方法，有参无返回值,参数为&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//公共的，无参有返回值</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">function3</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;function3方法，无参有返回值&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//公共的，有参有返回值</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">function4</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;function4方法，有参有返回值,参数为&quot;</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="comment">//method1();</span></span><br><span class="line">        <span class="comment">//method2();</span></span><br><span class="line">        <span class="comment">//method3();</span></span><br><span class="line">        <span class="comment">//method4();</span></span><br><span class="line">        <span class="comment">//method5();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method5</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="comment">//        Method getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes)：</span></span><br><span class="line"><span class="comment">//                                返回单个成员方法对象</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itheima.myreflect5.Student&quot;</span>);</span><br><span class="line">        <span class="comment">//2.获取一个成员方法show</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;show&quot;</span>);</span><br><span class="line">        <span class="comment">//3.打印一下</span></span><br><span class="line">        System.out.println(method);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method4</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itheima.myreflect5.Student&quot;</span>);</span><br><span class="line">        <span class="comment">//2.获取一个有形参的方法function2</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;function2&quot;</span>, String.class);</span><br><span class="line">        <span class="comment">//3.打印一下</span></span><br><span class="line">        System.out.println(method);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="comment">//        Method getMethod(String name, Class&lt;?&gt;... parameterTypes) ：</span></span><br><span class="line"><span class="comment">//                                返回单个公共成员方法对象</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itheima.myreflect5.Student&quot;</span>);</span><br><span class="line">        <span class="comment">//2.获取成员方法function1</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method1</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;function1&quot;</span>);</span><br><span class="line">        <span class="comment">//3.打印一下</span></span><br><span class="line">        System.out.println(method1);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//        Method[] getDeclaredMethods()：</span></span><br><span class="line"><span class="comment">//                                返回所有成员方法对象的数组，不包括继承的</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itheima.myreflect5.Student&quot;</span>);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//2.获取Method对象</span></span><br><span class="line">        Method[] methods = clazz.getDeclaredMethods();</span><br><span class="line">        <span class="comment">//3.遍历一下数组</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//        Method[] getMethods()：返回所有公共成员方法对象的数组，包括继承的</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itheima.myreflect5.Student&quot;</span>);</span><br><span class="line">        <span class="comment">//2.获取成员方法对象</span></span><br><span class="line">        Method[] methods = clazz.getMethods();</span><br><span class="line">        <span class="comment">//3.遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="1-5-2Method类用于执行方法的方法"><a href="#1-5-2Method类用于执行方法的方法" class="headerlink" title="1.5.2Method类用于执行方法的方法"></a>1.5.2Method类用于执行方法的方法</h4><ul>
<li><p>方法介绍</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Object invoke(Object obj, Object… args)</td>
<td>运行方法</td>
</tr>
</tbody></table>
<p>参数一: 用obj对象调用该方法</p>
<p>参数二: 调用方法的传递的参数(如果没有就不写)</p>
<p>返回值: 方法的返回值(如果没有就不写)</p>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException &#123;</span><br><span class="line"><span class="comment">//        Object invoke(Object obj, Object... args)：运行方法</span></span><br><span class="line"><span class="comment">//        参数一：用obj对象调用该方法</span></span><br><span class="line"><span class="comment">//        参数二：调用方法的传递的参数（如果没有就不写）</span></span><br><span class="line"><span class="comment">//        返回值：方法的返回值（如果没有就不写）</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itheima.myreflect5.Student&quot;</span>);</span><br><span class="line">        <span class="comment">//2.获取里面的Method对象  function4</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;function4&quot;</span>, String.class);</span><br><span class="line">        <span class="comment">//3.运行function4方法就可以了</span></span><br><span class="line">        <span class="comment">//3.1创建一个Student对象,当做方法的调用者</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) clazz.newInstance();</span><br><span class="line">        <span class="comment">//3.2运行方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(student, <span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        <span class="comment">//4.打印一下返回值</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串查找KMP算法</title>
    <url>/2022/04/22/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9F%A5%E6%89%BEKMP%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>1.输出next</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define MAXLEN 255</span><br><span class="line"></span><br><span class="line">void getnext(char P[], int next[],int m);</span><br><span class="line">int KMP(char T[],char P[],int next[],int n,int m);</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char P[100];</span><br><span class="line">cin&gt;&gt;P;</span><br><span class="line">int m=strlen(P);</span><br><span class="line">int next[m];</span><br><span class="line">getnext(P,next,m);</span><br><span class="line">for(int i=0;i&lt;m;i++)</span><br><span class="line">cout&lt;&lt;next[i];</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">void getnext(char P[], int next[],int m)&#123;</span><br><span class="line">    next[0] = -1;</span><br><span class="line">        int j = 0;</span><br><span class="line">        int k = -1;</span><br><span class="line">        while (j &lt; m-1)</span><br><span class="line">        &#123;</span><br><span class="line">            if (k == -1 || P[j] == P[k])</span><br><span class="line">            &#123;</span><br><span class="line">                j++;</span><br><span class="line">                k++;</span><br><span class="line">                if(P[j] == P[k])</span><br><span class="line">                    next[j]=next[k];</span><br><span class="line">                else</span><br><span class="line">                    next[j] = k;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">                k = next[k];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.输出nextval</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define MAXLEN 255</span><br><span class="line"></span><br><span class="line">void getnext(char P[], int next[],int m);</span><br><span class="line">int KMP(char T[],char P[],int next[],int n,int m);</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char P[100];</span><br><span class="line">cin&gt;&gt;P;</span><br><span class="line">int m=strlen(P);</span><br><span class="line">int next[m];</span><br><span class="line">getnext(P,next,m);</span><br><span class="line">for(int i=0;i&lt;m;i++)</span><br><span class="line">cout&lt;&lt;next[i];</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">void getnext(char P[], int next[],int m)&#123;</span><br><span class="line">    next[0] = -1;</span><br><span class="line">        int j = 0;</span><br><span class="line">        int k = -1;</span><br><span class="line">        while (j &lt; m-1)</span><br><span class="line">        &#123;</span><br><span class="line">            if (k == -1 || P[j] == P[k])</span><br><span class="line">            &#123;</span><br><span class="line">                j++;</span><br><span class="line">                k++;</span><br><span class="line">                if(P[j] == P[k])</span><br><span class="line">                    next[j]=next[k];</span><br><span class="line">                else</span><br><span class="line">                    next[j] = k;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">                k = next[k];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3.在KMP算法中，进行模式匹配，在匹配失败时，主串的位置i不回溯，模式串需要根据失败函数next[j]的值，j转移到next[j]位置继续进行比较。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void getnext(char P[], int next[],int m)&#123;</span><br><span class="line">    next[0] = -1;</span><br><span class="line">        int j = 0;</span><br><span class="line">        int k = -1;</span><br><span class="line">        while (j &lt; m-1)</span><br><span class="line">        &#123;</span><br><span class="line">            if (k == -1 || P[j] == P[k])</span><br><span class="line">            &#123;</span><br><span class="line">                j++;</span><br><span class="line">                k++;</span><br><span class="line">                next[j] = k;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">                k = next[k];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.在KMP算法中，进行模式匹配，在匹配失败时，主串的位置i不回溯，模式串需要根据改进的失败函数nextval[j]的值，j转移到nextval[j]位置继续进行比较。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void getnextval(char P[], int nextval[],int m)&#123;</span><br><span class="line">   		nextval[0] = -1;</span><br><span class="line">        int j = 0;</span><br><span class="line">        int k = -1;</span><br><span class="line">        while (j &lt; m-1)</span><br><span class="line">        &#123;</span><br><span class="line">            if (k == -1 || P[j] == P[k])</span><br><span class="line">            &#123;</span><br><span class="line">                j++;</span><br><span class="line">                k++;</span><br><span class="line">                if(P[j] == P[k])</span><br><span class="line">                    nextval[j]=nextval[k];</span><br><span class="line">                else</span><br><span class="line">                    nextval[j] = k;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">                k = nextval[k];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5.KMP算法的具体实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define MAXLEN 255</span><br><span class="line"></span><br><span class="line">void getnext(char P[], int next[],int m);</span><br><span class="line">int KMP(char T[],char P[],int next[],int n,int m);</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char T[100],P[100];</span><br><span class="line">cin&gt;&gt;T&gt;&gt;P;</span><br><span class="line">int n=strlen(T),m=strlen(P);</span><br><span class="line">int next[m];</span><br><span class="line">getnext(P,next,m);</span><br><span class="line">for(int i=0;i&lt;m;i++)</span><br><span class="line">cout&lt;&lt;next[i]&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;&quot;主串和子串在第&quot;&lt;&lt;KMP(T,P,next,n,m)&lt;&lt;&quot;个字符处首次匹配\n&quot;;//下标从0计</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">void getnext(char P[], int next[],int m)&#123;</span><br><span class="line">    next[0] = -1;</span><br><span class="line">        int j = 0;</span><br><span class="line">        int k = -1;</span><br><span class="line">        while (j &lt; m-1)</span><br><span class="line">        &#123;</span><br><span class="line">            if (k == -1 || P[j] == P[k])</span><br><span class="line">            &#123;</span><br><span class="line">                j++;</span><br><span class="line">                k++;</span><br><span class="line">                next[j] = k;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                k = next[k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">int KMP(char T[],char P[],int next[],int n,int m)&#123;</span><br><span class="line">        int i=0;</span><br><span class="line">        int j=0;</span><br><span class="line"></span><br><span class="line">        while (i &lt; n &amp;&amp; j &lt; m)</span><br><span class="line">        &#123;</span><br><span class="line">            if (j == -1 || T[i] == P[j])</span><br><span class="line">            &#123;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                j=next[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (j == m)</span><br><span class="line">        &#123;</span><br><span class="line">            return i-j;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>循环队列与链式队列</title>
    <url>/2022/04/22/%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97%E4%B8%8E%E9%93%BE%E5%BC%8F%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<h3 id="1-循环队列"><a href="#1-循环队列" class="headerlink" title="1.循环队列"></a>1.循环队列</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;fstream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">#define MAXQSIZE 100</span><br><span class="line">#define OK 1</span><br><span class="line">#define ERROR 0</span><br><span class="line">#define OVERFLOW -2</span><br><span class="line">typedef char QElemType;</span><br><span class="line">typedef char SElemType;</span><br><span class="line">typedef int Status;</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line">QElemType *base;//初始化时动态分配存储空间</span><br><span class="line">	int front;//头指针</span><br><span class="line">	int rear;//尾指针</span><br><span class="line">&#125; SqQueue;</span><br><span class="line">Status EnQueue(SqQueue &amp;Q, QElemType e);</span><br><span class="line">Status DeQueue(SqQueue &amp;Q, QElemType &amp;e);</span><br><span class="line">//算法3.11　循环队列的初始化</span><br><span class="line">Status InitQueue(SqQueue &amp;Q) &#123;//构造一个空队列Q</span><br><span class="line">	Q.base = new QElemType[MAXQSIZE]; //为队列分配一个最大容量为MAXSIZE的数组空间</span><br><span class="line"> 	//存储分配失败</span><br><span class="line">	Q.front = Q.rear = 0; //头指针和尾指针置为零，队列为空</span><br><span class="line">	return OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">	SqQueue Q;</span><br><span class="line">	QElemType e, j;</span><br><span class="line">	int n,i;</span><br><span class="line">	InitQueue(Q);</span><br><span class="line">	cin&gt;&gt;n; //输入n的值</span><br><span class="line">	for(i=0;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    	cin&gt;&gt;e;  //输入e的值</span><br><span class="line">    	EnQueue(Q, e);</span><br><span class="line">    &#125;</span><br><span class="line">	while (DeQueue(Q, e))&#123;</span><br><span class="line">		cout &lt;&lt; e &lt;&lt;endl;    //输出e的值</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br><span class="line">//入队</span><br><span class="line">Status EnQueue(SqQueue &amp;Q, QElemType e) &#123;//插入元素e为Q的新的队尾元素</span><br><span class="line">	if ((Q.rear + 1) % MAXQSIZE == Q.front) //尾指针在循环意义上加1后等于头指针，表明队满</span><br><span class="line">	return ERROR;</span><br><span class="line">	Q.base[Q.rear] = e; //新元素插入队尾</span><br><span class="line">	Q.rear = (Q.rear + 1) % MAXQSIZE; //队尾指针加1</span><br><span class="line">	return OK;</span><br><span class="line">&#125;</span><br><span class="line">//出队</span><br><span class="line">Status DeQueue(SqQueue &amp;Q, QElemType &amp;e)</span><br><span class="line">&#123;</span><br><span class="line">    if(Q.front==Q.rear)</span><br><span class="line">        return ERROR;</span><br><span class="line">    e=Q.base[Q.front];</span><br><span class="line">    Q.front=(Q.front+1)%MAXQSIZE;</span><br><span class="line">    return OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-链式队列"><a href="#2-链式队列" class="headerlink" title="2.链式队列"></a>2.链式队列</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;fstream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">#define OK 1</span><br><span class="line">#define ERROR 0</span><br><span class="line">#define OVERFLOW -2</span><br><span class="line">typedef char QElemType;</span><br><span class="line">typedef int Status;</span><br><span class="line">typedef char SElemType;</span><br><span class="line"></span><br><span class="line">//- - - - - 队列的链式存储结构- - - - - </span><br><span class="line">typedef struct QNode &#123;</span><br><span class="line">	QElemType data;</span><br><span class="line">	struct QNode *next;</span><br><span class="line">&#125; QNode, *QueuePtr;</span><br><span class="line">typedef struct &#123;</span><br><span class="line">	QueuePtr front; //队头指针</span><br><span class="line">	QueuePtr rear; //队尾指针</span><br><span class="line">&#125; LinkQueue;</span><br><span class="line">Status EnQueue(LinkQueue &amp;Q, QElemType e); </span><br><span class="line">Status DeQueue(LinkQueue &amp;Q, QElemType &amp;e);</span><br><span class="line">//算法3.16　链队的初始化</span><br><span class="line">Status InitQueue(LinkQueue &amp;Q) &#123;//构造一个空队列Q</span><br><span class="line">	Q.front = Q.rear = new QNode; //生成新结点作为头结点，队头和队尾指针指向此结点</span><br><span class="line">	Q.front-&gt;next = NULL; //头结点的指针域置空</span><br><span class="line">	return OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">	LinkQueue Q;</span><br><span class="line">	QueuePtr p;</span><br><span class="line">	QElemType e, j;</span><br><span class="line">	int n,i;</span><br><span class="line">	InitQueue(Q);</span><br><span class="line">	cin&gt;&gt;n; </span><br><span class="line">	for(i=0;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    	cin&gt;&gt;e;</span><br><span class="line">    	EnQueue(Q, e);</span><br><span class="line">    &#125;  </span><br><span class="line">    while(DeQueue(Q,e))</span><br><span class="line">    	cout&lt;&lt;e&lt;&lt;endl;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br><span class="line">//算法3.17　链队的入队</span><br><span class="line">Status EnQueue(LinkQueue &amp;Q, QElemType e) &#123;</span><br><span class="line">	//插入元素e为Q的新的队尾元素</span><br><span class="line">	QueuePtr p;</span><br><span class="line">	p = new QNode; //为入队元素分配结点空间，用指针p指向</span><br><span class="line">	p-&gt;data = e; //将新结点数据域置为e</span><br><span class="line">	p-&gt;next = NULL;</span><br><span class="line">	Q.rear-&gt;next = p; //将新结点插入到队尾</span><br><span class="line">	Q.rear = p; //修改队尾指针</span><br><span class="line">	return OK;</span><br><span class="line">&#125;</span><br><span class="line">//出队</span><br><span class="line">Status DeQueue(LinkQueue &amp;Q, QElemType &amp;e)</span><br><span class="line">&#123;</span><br><span class="line">	QueuePtr p;</span><br><span class="line">	p=new QNode;</span><br><span class="line">	if(Q.front==Q.rear)</span><br><span class="line">	return ERROR;</span><br><span class="line">	p=Q.front-&gt;next;</span><br><span class="line">	e=p-&gt;data;</span><br><span class="line">	Q.front-&gt;next=p-&gt;next;</span><br><span class="line">	if(Q.rear==p)</span><br><span class="line">	Q.rear=Q.front;</span><br><span class="line">	delete p;</span><br><span class="line">	return 	OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言指针函数</title>
    <url>/2022/05/03/%E6%8C%87%E9%92%88%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>函数指针就是指向函数首地址的函数变量</p>
<p>定义函数指针</p>
<p>方法：用（*标识符）替换 函数名，剩下照抄</p>
<p>一般会去掉形参名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int Max(int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">	return a&gt;b?a:b;</span><br><span class="line">&#125;</span><br><span class="line">int (*p)(int ,int )=NULL;</span><br></pre></td></tr></table></figure>

<p>实例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">int Max(int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">	return a&gt;b?a:b;</span><br><span class="line">&#125;</span><br><span class="line">int Min(int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">	return a&gt;b?b:a;</span><br><span class="line">&#125;</span><br><span class="line">int Sum(int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">    return a+b;</span><br><span class="line">&#125;</span><br><span class="line">void printData(int (*pp)(int ,int ),int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;%d\n&quot;,pp(a,b));</span><br><span class="line">&#125;</span><br><span class="line">void testFuntionPoint()</span><br><span class="line">&#123;</span><br><span class="line">    void (*pD)(int (*)(int,int),int,int)=printData;</span><br><span class="line">    pD(Max,1,2);</span><br><span class="line">    pD(Min,1,2);</span><br><span class="line">    pD(Sum,1,2);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    testFuntionPoint();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>与Java多线程相似，具体详见</p>
<p>设计一个指针函数，其功能：传入一个字符串参数，以及一套算法，使得源字符串经过算法进行加密后，函数返回一个字符串数组，数组第一个元素是原文，第二个元素是密文。要求加密算法是实现过程由该方法的调用者给出，算法要求传入一个字符串类型的参数，返回值也是字符串类型。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">char modify(char a)</span><br><span class="line">&#123;</span><br><span class="line">    return a=a+2;</span><br><span class="line">&#125;</span><br><span class="line">char returnData(char (*pp)(char ),char b)</span><br><span class="line">&#123;</span><br><span class="line">    return pp(b);</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">    char *parameter = (char *) malloc(5);</span><br><span class="line">    printf(&quot;请输入原文\n&quot;);</span><br><span class="line">    /*</span><br><span class="line">     * 开辟5字节空间，如果不足自动扩容1000</span><br><span class="line">     */</span><br><span class="line">    long long int parameterSize=5,i;</span><br><span class="line">    for (i=0;parameter[i-1]!=&#x27;\n&#x27;;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if (i==parameterSize)</span><br><span class="line">        &#123;</span><br><span class="line">            realloc(parameter, parameterSize);</span><br><span class="line">            parameterSize += 1000;</span><br><span class="line">        &#125;</span><br><span class="line">        /*</span><br><span class="line">         * 动态分配空间</span><br><span class="line">         */</span><br><span class="line">        parameter[i]=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    parameter[i]=&#x27;\0&#x27;;</span><br><span class="line">    char (*pD)(char (*)(char),char)=returnData;</span><br><span class="line">    parameter[1]=pD(modify,parameter[1]);</span><br><span class="line">    printf(&quot;%s&quot;,parameter);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>方式2</p>
<p>头文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#ifndef SMART_HELMET_ALGOR_H</span><br><span class="line">#define SMART_HELMET_ALGOR_H</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">char *Algor(const char *parameter, char **passwd) &#123;</span><br><span class="line">    int i = 0;</span><br><span class="line">    while (parameter[i] != &#x27;\0&#x27;) &#123;</span><br><span class="line">        passwd[1][i] = (char)(parameter[i] + 3);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    passwd[1][i] = &#x27;\0&#x27;;</span><br><span class="line">    return passwd[1];</span><br><span class="line">&#125;</span><br><span class="line">#endif //SMART_HELMET_ALGOR_H</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;malloc.h&gt;</span><br><span class="line">#include &quot;Algor.h&quot; //导入算法代码头文件</span><br><span class="line"></span><br><span class="line">char **Fun(char *parameter, char *(*ptr)(char *, char **)) &#123;</span><br><span class="line">    char **passwd = (char **) malloc(2);</span><br><span class="line">    passwd[0] = (char *) malloc(strlen(parameter)*sizeof (char));</span><br><span class="line">    passwd[1] = (char *) malloc(strlen(parameter)*sizeof (char));</span><br><span class="line">    passwd[0] = parameter;</span><br><span class="line">    passwd[1] = (*ptr)(parameter, passwd); //将加密算法传入</span><br><span class="line">    return passwd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    char *parameter = (char *) malloc(5);</span><br><span class="line">    printf(&quot;请输入原文&quot;);</span><br><span class="line">    //scanf(&quot;%s&quot;, parameter);</span><br><span class="line">    /*</span><br><span class="line">     * 开辟1001空间，如果不足自动扩容1001</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    int i=0;</span><br><span class="line">    for (int parameterSize=5;parameter[i-1]!=&#x27;\n&#x27;;i++)&#123;</span><br><span class="line">        if (i==5) &#123;</span><br><span class="line">            realloc(parameter, 5);</span><br><span class="line">            parameterSize += 5;</span><br><span class="line">        &#125;</span><br><span class="line">        /*</span><br><span class="line">         * 动态分配空间</span><br><span class="line">         */</span><br><span class="line">        parameter[i]=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    parameter[i]=&#x27;\0&#x27;;</span><br><span class="line">    /*</span><br><span class="line">     * parameter 原码</span><br><span class="line">     */</span><br><span class="line">    char *((*ptr)(char *, char **)) = (char *(*)(char *, char **)) Algor;</span><br><span class="line">    char **ans = Fun(parameter, ptr);</span><br><span class="line"></span><br><span class="line">    printf(&quot;%s\n%s\n&quot;, ans[0], ans[1]);</span><br><span class="line">    /*</span><br><span class="line">     * ans[0]为原码</span><br><span class="line">     * ans[1]为密码</span><br><span class="line">     */</span><br><span class="line">    free(parameter);</span><br><span class="line">    free(ans);</span><br><span class="line">    //释放空间</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>数据与结构之链表</title>
    <url>/2022/04/05/%E6%95%B0%E6%8D%AE%E4%B8%8E%E7%BB%93%E6%9E%84%E4%B9%8B%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">目录</span><br><span class="line">一，链式存储结构的逻辑</span><br><span class="line">二，链式存储结构的图书信息表的实现</span><br><span class="line">三，test：基于链式存储结构的图书信息表的创建和输出</span><br></pre></td></tr></table></figure>

<p>一，链式存储结构的逻辑</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;fstream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">#define ERROR 0</span><br><span class="line"></span><br><span class="line">typedef struct LNode &#123;</span><br><span class="line">int data; //结点的数据域</span><br><span class="line">struct LNode *next; //结点的指针域</span><br><span class="line">&#125; LNode, *List; //LinkList为指向结构体LNode的指针类型</span><br><span class="line"></span><br><span class="line">void InitList(List &amp;L)&#123;</span><br><span class="line">    L=new LNode;</span><br><span class="line">    L-&gt;next=NULL;</span><br><span class="line">&#125;</span><br><span class="line">void ListInput(List &amp;L, int n) //链表数据的输入</span><br><span class="line">&#123;</span><br><span class="line">    int i=1;</span><br><span class="line">    List p, r;</span><br><span class="line">    r = L;</span><br><span class="line">    while (i&lt;=n) &#123;</span><br><span class="line">    p = new LNode;</span><br><span class="line">    cin &gt;&gt; p-&gt;data;</span><br><span class="line">    p-&gt;next = NULL;</span><br><span class="line">    r-&gt;next = p;</span><br><span class="line">    r = p;</span><br><span class="line">    i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void ListOutput(List L) //输出List</span><br><span class="line">&#123;</span><br><span class="line">    List p;</span><br><span class="line">    p = L-&gt;next;</span><br><span class="line">    cout &lt;&lt; &quot;The List is:&quot;&lt;&lt;endl;</span><br><span class="line">    while (p != NULL) &#123;</span><br><span class="line">    cout &lt;&lt; p-&gt;data &lt;&lt; &quot; &quot;;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">//查找</span><br><span class="line">bool LocateElem(List L, int e)&#123;</span><br><span class="line">    List p;</span><br><span class="line">    bool flag=false;</span><br><span class="line">    p = L-&gt;next;</span><br><span class="line">    while(p!=NULL)&#123;</span><br><span class="line">        if(p-&gt;data==e)</span><br><span class="line">        flag=true;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">      return flag;</span><br><span class="line">&#125;</span><br><span class="line">//插入</span><br><span class="line">void ListInsert(List &amp;L, int i,int e)&#123;</span><br><span class="line">    List p;</span><br><span class="line">    p=L;</span><br><span class="line">    int j=0;</span><br><span class="line">    while(p&amp;&amp;(j&lt;i-1))&#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    List s;</span><br><span class="line">    s=new LNode;</span><br><span class="line">    s-&gt;data=e;</span><br><span class="line">    s-&gt;next;</span><br><span class="line">    s-&gt;next=p-&gt;next;</span><br><span class="line">    p-&gt;next=s;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//删除</span><br><span class="line">void ListDelete(List &amp;L, int i)&#123;</span><br><span class="line">   List p;</span><br><span class="line">    p=L;</span><br><span class="line">    int j=0;</span><br><span class="line">    while(p&amp;&amp;(j&lt;i-1))&#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    List q;</span><br><span class="line">    q=p-&gt;next;</span><br><span class="line">    p-&gt;next=q-&gt;next;</span><br><span class="line">    delete q;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>二，链式存储结构的图书信息表的实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">#include&lt;iomanip&gt;</span><br><span class="line">#include&lt;fstream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">#define OK 1</span><br><span class="line">#define ERROR 0</span><br><span class="line">#define OVERFLOW -2</span><br><span class="line">typedef int Status; //Status 是函数返回值类型，其值是函数结果状态代码。</span><br><span class="line">typedef int ElemType; //ElemType 为可定义的数据类型，此设为int类型</span><br><span class="line"></span><br><span class="line">struct Book &#123;</span><br><span class="line">	string id;//ISBN</span><br><span class="line">	string name;//书名</span><br><span class="line">	double price;//定价</span><br><span class="line">&#125;;</span><br><span class="line">typedef struct LNode &#123;</span><br><span class="line">	Book data; //结点的数据域</span><br><span class="line">	struct LNode *next; //结点的指针域</span><br><span class="line">&#125; LNode, *LinkList; //LinkList为指向结构体LNode的指针类型</span><br><span class="line"></span><br><span class="line">string head_1, head_2, head_3;</span><br><span class="line">int length;</span><br><span class="line"></span><br><span class="line">Status InitList_L(LinkList &amp;L) &#123; //算法2.6 单链表的初始化</span><br><span class="line">	//构造一个空的单链表L</span><br><span class="line">	L = new LNode; //生成新结点作为头结点，用头指针L指向头结点</span><br><span class="line">	L-&gt;next = NULL; //头结点的指针域置空</span><br><span class="line">	return OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status GetElem_L(LinkList L, int i, Book &amp;e) &#123; //算法2.7 单链表的取值</span><br><span class="line">	//在带头结点的单链表L中查找第i个元素</span><br><span class="line">	//用e返回L中第i个数据元素的值</span><br><span class="line">	int j;</span><br><span class="line">	LinkList p;</span><br><span class="line">	p = L-&gt;next;</span><br><span class="line">	j = 1; //初始化，p指向第一个结点，j为计数器</span><br><span class="line">	while (j &lt; i &amp;&amp; p) &#123; //顺链域向后扫描，直到p指向第i个元素或p为空</span><br><span class="line">		p = p-&gt;next; //p指向下一个结点</span><br><span class="line">		++j; //计数器j相应加1</span><br><span class="line">	&#125;</span><br><span class="line">	if (!p || j &gt; i)</span><br><span class="line">		return ERROR; //i值不合法i＞n或i&lt;=0</span><br><span class="line">	e = p-&gt;data; //取第i个结点的数据域</span><br><span class="line">	return OK;</span><br><span class="line">&#125; //GetElem_L</span><br><span class="line"></span><br><span class="line">LNode *LocateElem_L(LinkList L, int e) &#123; //算法2.8 按值查找</span><br><span class="line">	//在带头结点的单链表L中查找值为e的元素</span><br><span class="line">	LinkList p;</span><br><span class="line">	p = L-&gt;next;</span><br><span class="line">	while (p &amp;&amp; p-&gt;data.price != e)//顺链域向后扫描，直到p为空或p所指结点的数据域等于e</span><br><span class="line">		p = p-&gt;next; //p指向下一个结点</span><br><span class="line">	return p; //查找成功返回值为e的结点地址p，查找失败p为NULL </span><br><span class="line">&#125; //LocateElem_L</span><br><span class="line"></span><br><span class="line">Status ListInsert_L(LinkList &amp;L, int i, Book &amp;e) &#123; //算法2.9 单链表的插入</span><br><span class="line">	//在带头结点的单链表L中第i个位置插入值为e的新结点</span><br><span class="line">	int j;</span><br><span class="line">	LinkList p, s;</span><br><span class="line">	p = L;</span><br><span class="line">	j = 0;</span><br><span class="line">	while (p &amp;&amp; j &lt; i - 1) &#123;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">		++j;</span><br><span class="line">	&#125;//查找第i?1个结点，p指向该结点</span><br><span class="line">	if (!p || j &gt; i - 1)</span><br><span class="line">		return ERROR; //i＞n+1或者i＜1</span><br><span class="line">	s = new LNode; //生成新结点*s </span><br><span class="line">	s-&gt;data = e; //将结点*s的数据域置为e</span><br><span class="line">	s-&gt;next = p-&gt;next; //将结点*s的指针域指向结点ai</span><br><span class="line">	p-&gt;next = s; //将结点*p的指针域指向结点*s</span><br><span class="line">	++length;</span><br><span class="line">	return OK;</span><br><span class="line">&#125; //ListInsert_L</span><br><span class="line"></span><br><span class="line">Status ListDelete_L(LinkList &amp;L, int i) &#123; //算法2.9 单链表的删除</span><br><span class="line">	//在带头结点的单链表L中，删除第i个位置	</span><br><span class="line">	LinkList p, q;</span><br><span class="line">	int j;</span><br><span class="line">	p = L;</span><br><span class="line">	j = 0;</span><br><span class="line">	while ((p-&gt;next) &amp;&amp; (j &lt; i - 1)) //查找第i?1个结点，p指向该结点</span><br><span class="line">	&#123;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">		++j;</span><br><span class="line">	&#125;</span><br><span class="line">	if (!(p-&gt;next) || (j &gt; i - 1))</span><br><span class="line">		return ERROR; //当i&gt;n或i&lt;1时，删除位置不合理 </span><br><span class="line">	q = p-&gt;next; //临时保存被删结点的地址以备释放 </span><br><span class="line">	p-&gt;next = q-&gt;next; //改变删除结点前驱结点的指针域 </span><br><span class="line">	delete q; //释放删除结点的空间 </span><br><span class="line">	--length;</span><br><span class="line">	return OK;</span><br><span class="line">&#125; //ListDelete_L</span><br><span class="line"></span><br><span class="line">void CreateList_H(LinkList &amp;L, int n) &#123; //算法2.11 前插法创建单链表</span><br><span class="line">	//逆位序输入n个元素的值，建立到头结点的单链表L</span><br><span class="line">	LinkList p;</span><br><span class="line">	L = new LNode;</span><br><span class="line">	L-&gt;next = NULL; //先建立一个带头结点的空链表</span><br><span class="line">	length = 0;</span><br><span class="line">	fstream file;</span><br><span class="line">	file.open(&quot;book.txt&quot;);</span><br><span class="line">	if (!file) &#123;</span><br><span class="line">		cout &lt;&lt; &quot;未找到相关文件，无法打开！&quot; &lt;&lt; endl;</span><br><span class="line">		exit(ERROR);</span><br><span class="line">	&#125;</span><br><span class="line">	file &gt;&gt; head_1 &gt;&gt; head_2 &gt;&gt; head_3;</span><br><span class="line">	while (!file.eof()) &#123;</span><br><span class="line">		p = new LNode; //生成新结点*p</span><br><span class="line">		file &gt;&gt; p-&gt;data.id &gt;&gt; p-&gt;data.name &gt;&gt; p-&gt;data.price; //输入元素值赋给新结点*p的数据域</span><br><span class="line">		p-&gt;next = L-&gt;next;</span><br><span class="line">		L-&gt;next = p; //将新结点*p插入到头结点之后</span><br><span class="line">		length++;//同时对链表长度进行统计</span><br><span class="line">	&#125;</span><br><span class="line">	file.close();</span><br><span class="line">&#125; //CreateList_F</span><br><span class="line"></span><br><span class="line">void CreateList_R(LinkList &amp;L, int n) &#123; //算法2.12 后插法创建单链表</span><br><span class="line">	//正位序输入n个元素的值，建立带表头结点的单链表L </span><br><span class="line">	LinkList p, r;</span><br><span class="line">	L = new LNode;</span><br><span class="line">	L-&gt;next = NULL; //先建立一个带头结点的空链表</span><br><span class="line">	r = L; //尾指针r指向头结点</span><br><span class="line">	length = 0;</span><br><span class="line">	fstream file; //打开文件进行读写操作</span><br><span class="line">	file.open(&quot;book.txt&quot;);</span><br><span class="line">	if (!file) &#123;</span><br><span class="line">		cout &lt;&lt; &quot;未找到相关文件，无法打开！&quot; &lt;&lt; endl;</span><br><span class="line">		exit(ERROR);</span><br><span class="line">	&#125;</span><br><span class="line">	file &gt;&gt; head_1 &gt;&gt; head_2 &gt;&gt; head_3;</span><br><span class="line">	while (!file.eof()) &#123; //将文件中的信息运用后插法插入到链表中</span><br><span class="line">		p = new LNode;//生成新结点</span><br><span class="line">		file &gt;&gt; p-&gt;data.id &gt;&gt; p-&gt;data.name &gt;&gt; p-&gt;data.price;//输入元素值赋给新结点*p的数据域</span><br><span class="line">		p-&gt;next = NULL;</span><br><span class="line">		r-&gt;next = p;//将新结点*p插入尾结点*r之后 		</span><br><span class="line">		r = p;//r指向新的尾结点*p</span><br><span class="line">		length++; //同时对链表长度进行统计</span><br><span class="line">	&#125;</span><br><span class="line">	file.close();</span><br><span class="line">&#125; //CreateList_L</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">	int a, n, choose;</span><br><span class="line">	double price;</span><br><span class="line">	Book e;</span><br><span class="line">	LinkList L, p;</span><br><span class="line">	cout &lt;&lt; &quot;1. 建立\n&quot;;</span><br><span class="line">	cout &lt;&lt; &quot;2. 输入\n&quot;;</span><br><span class="line">	cout &lt;&lt; &quot;3. 取值\n&quot;;</span><br><span class="line">	cout &lt;&lt; &quot;4. 查找\n&quot;;</span><br><span class="line">	cout &lt;&lt; &quot;5. 插入\n&quot;;</span><br><span class="line">	cout &lt;&lt; &quot;6. 删除\n&quot;;</span><br><span class="line">	cout &lt;&lt; &quot;7. 输出\n&quot;;</span><br><span class="line">	cout &lt;&lt; &quot;0. 退出\n\n&quot;;</span><br><span class="line"></span><br><span class="line">	choose = -1;</span><br><span class="line">	while (choose != 0) &#123;</span><br><span class="line">		cout &lt;&lt; &quot;请选择:&quot;;</span><br><span class="line">		cin &gt;&gt; choose;</span><br><span class="line">		switch (choose) &#123;</span><br><span class="line">		case 1: //建立一个单链表</span><br><span class="line">			if (InitList_L(L))</span><br><span class="line">				cout &lt;&lt; &quot;成功建立链表!\n\n&quot;;</span><br><span class="line">			break;</span><br><span class="line">		case 2: //使用后插法创建单链表</span><br><span class="line">			CreateList_R(L, length);</span><br><span class="line">			cout &lt;&lt; &quot;输入 book.txt 信息完毕\n\n&quot;;</span><br><span class="line">			break;</span><br><span class="line">		case 3: //单链表的按序号取值</span><br><span class="line">			cout &lt;&lt; &quot;请输入一个位置用来取值:&quot;;</span><br><span class="line">			cin &gt;&gt; a;</span><br><span class="line">			if (GetElem_L(L, a, e)) &#123;</span><br><span class="line">				cout &lt;&lt; &quot;查找成功\n&quot;;</span><br><span class="line">				cout &lt;&lt; &quot;第&quot; &lt;&lt; a &lt;&lt; &quot;本图书的信息是：\n&quot;;</span><br><span class="line">				cout &lt;&lt; left &lt;&lt; setw(15) &lt;&lt; e.id &lt;&lt; &quot;\t&quot; &lt;&lt; left &lt;&lt; setw(50)</span><br><span class="line">						&lt;&lt; e.name &lt;&lt; &quot;\t&quot; &lt;&lt; left &lt;&lt; setw(5) &lt;&lt; e.price &lt;&lt; endl</span><br><span class="line">						&lt;&lt; endl;</span><br><span class="line">			&#125; else</span><br><span class="line">				cout &lt;&lt; &quot;查找失败\n\n&quot;;</span><br><span class="line">			break;</span><br><span class="line">		case 4: //单链表的按值查找</span><br><span class="line">			cout &lt;&lt; &quot;请输入所要查找价格:&quot;;</span><br><span class="line">			cin &gt;&gt; price;</span><br><span class="line">			if (LocateElem_L(L, price) != NULL) &#123;</span><br><span class="line">				cout &lt;&lt; &quot;查找成功\n&quot;;</span><br><span class="line">				cout &lt;&lt; &quot;该价格对应的书名为：&quot; &lt;&lt; LocateElem_L(L, price)-&gt;data.name</span><br><span class="line">						&lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">			&#125; else</span><br><span class="line">				cout &lt;&lt; &quot;查找失败! 定价&quot; &lt;&lt; price &lt;&lt; &quot; 没有找到\n\n&quot;;</span><br><span class="line">			break;</span><br><span class="line">		case 5: //单链表的插入</span><br><span class="line">			cout &lt;&lt; &quot;请输入插入的位置和书的信息，包括：编号 书名 价格（用空格隔开）:&quot;;</span><br><span class="line">			cin &gt;&gt; a;</span><br><span class="line">			cin &gt;&gt; e.id &gt;&gt; e.name &gt;&gt; e.price;</span><br><span class="line">			if (ListInsert_L(L, a, e))</span><br><span class="line">				cout &lt;&lt; &quot;插入成功.\n\n&quot;;</span><br><span class="line">			else</span><br><span class="line">				cout &lt;&lt; &quot;插入失败!\n\n&quot;;</span><br><span class="line">			break;</span><br><span class="line">		case 6: //单链表的删除</span><br><span class="line">			cout &lt;&lt; &quot;请输入所要删除的书籍的位置:&quot;;</span><br><span class="line">			cin &gt;&gt; a;</span><br><span class="line">			if (ListDelete_L(L, a))</span><br><span class="line">				cout &lt;&lt; &quot;删除成功!\n\n&quot;;</span><br><span class="line">			else</span><br><span class="line">				cout &lt;&lt; &quot;删除失败!\n\n&quot;;</span><br><span class="line">			break;</span><br><span class="line">		case 7: //单链表的输出</span><br><span class="line">			cout &lt;&lt; &quot;当前图书系统信息（链表）读出:\n&quot;;</span><br><span class="line">			p = L-&gt;next;</span><br><span class="line">			while (p) &#123;</span><br><span class="line">				cout &lt;&lt; left &lt;&lt; setw(15) &lt;&lt; p-&gt;data.id &lt;&lt; &quot;\t&quot; &lt;&lt; left &lt;&lt; setw(</span><br><span class="line">						50) &lt;&lt; p-&gt;data.name &lt;&lt; &quot;\t&quot; &lt;&lt; left &lt;&lt; setw(5)</span><br><span class="line">						&lt;&lt; p-&gt;data.price &lt;&lt; endl;</span><br><span class="line">				p = p-&gt;next;</span><br><span class="line">			&#125;</span><br><span class="line">			cout &lt;&lt; endl;</span><br><span class="line">			break;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>三，基于链式存储结构的图书信息表的创建和输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;fstream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;iomanip&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">#define ERROR 0</span><br><span class="line">typedef struct LNode &#123;</span><br><span class="line">    string id;//ISBN</span><br><span class="line">	string name;//书名</span><br><span class="line">	double price;//结点的数据域</span><br><span class="line">struct LNode *next; //结点的指针域</span><br><span class="line">&#125; LNode, *List; //LinkList为指向结构体LNode的指针类型</span><br><span class="line"></span><br><span class="line">void InitList(List &amp;L); //创建链表(带头结点)</span><br><span class="line">void ListInput(List &amp;L); //链表数据的输入</span><br><span class="line">void ListOutput(List L); //输出List</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">List LA;</span><br><span class="line">InitList(LA);</span><br><span class="line">ListInput(LA);</span><br><span class="line">ListOutput(LA);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">void InitList(List &amp;L)&#123;</span><br><span class="line">    L=new LNode;</span><br><span class="line">    L-&gt;next=NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void ListInput(List &amp;L) //链表数据的输入</span><br><span class="line">&#123;</span><br><span class="line">int i=0;</span><br><span class="line">List p,r;</span><br><span class="line">r = L;</span><br><span class="line">p = new LNode;</span><br><span class="line">cin&gt;&gt;p-&gt;id&gt;&gt;p-&gt;name&gt;&gt;p-&gt;price;</span><br><span class="line">while(p-&gt;id!=&quot;0&quot;&amp;&amp;p-&gt;name!=&quot;0&quot;&amp;&amp;p-&gt;price!=0)&#123;</span><br><span class="line">        p-&gt;next = NULL;</span><br><span class="line">        r-&gt;next = p;</span><br><span class="line">        r = p;</span><br><span class="line">        p = new LNode;</span><br><span class="line">cin&gt;&gt;p-&gt;id&gt;&gt;p-&gt;name&gt;&gt;p-&gt;price;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">   cout &lt;&lt; i&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">void ListOutput(List L) //输出List</span><br><span class="line">&#123;</span><br><span class="line">List p;</span><br><span class="line">p = L-&gt;next;</span><br><span class="line">while (p != NULL) &#123;</span><br><span class="line">cout&lt;&lt;p-&gt;id&lt;&lt;&#x27; &#x27;&lt;&lt;p-&gt;name&lt;&lt;&#x27; &#x27;&lt;&lt;fixed&lt;&lt;setprecision(2)&lt;&lt;p-&gt;price&lt;&lt;endl;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>5.本地文件处理之IO流</title>
    <url>/2022/04/22/%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86%E4%B9%8BIO%E6%B5%81/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">目录</span><br><span class="line">1.FileOutputStream类</span><br><span class="line">2.FileInputStream类</span><br><span class="line">3.BufferedOutputStream类</span><br><span class="line">4.BufferedInputStream类</span><br><span class="line">5.FileWriter类</span><br><span class="line">6.FileReader类</span><br><span class="line">7.BufferedWriter类</span><br><span class="line">8.BufferedReader类</span><br><span class="line">9.OutputStreamWriter类</span><br><span class="line">10.InputStreamReader类</span><br><span class="line">11.ObjectInputStream类</span><br></pre></td></tr></table></figure>



<h3 id="IO流的概念"><a href="#IO流的概念" class="headerlink" title="IO流的概念"></a>IO流的概念</h3><p>IO就是Input和Output的简写，也就是输入和输出的含义。<br>IO流就是指读写数据时像流水一样从一端流到另外一端，因此得名为“流”。</p>
<h4 id="基本分类"><a href="#基本分类" class="headerlink" title="基本分类"></a>基本分类</h4><p>1.按照读写数据的基本单位不同 可分为两种</p>
<p>字节流：其中字节流主要指以字节为单位进行数据读写的流，可以读写任意类型的文件 。(txt,jpg,avi,mp4等)</p>
<p>字符流：其中字符流主要指以字符(2个字节)为单位进行数据读写的流，只能读写文本文件 含有中文的文本文件推荐用</p>
<p>2.按照读写数据的方向不同，可分为两种（站在程序的角度）。</p>
<p>输入流：其中输入流主要指从文件中读取数据内容输入到程序中，也就是读文件。</p>
<p>输出流：其中输出流主要指将程序中的数据内容输出到文件中，也就是写文件。</p>
<p><img src="/images2/0000.jpg" alt="0000"></p>
<h4 id="1-FileOutputStream类"><a href="#1-FileOutputStream类" class="headerlink" title="1.FileOutputStream类"></a>1.FileOutputStream类</h4><p>基本概念：java.io.FileOutputStream类主要用于将图像数据之类的原始字节流写入到输出流中。</p>
<p>常用的方法   方法声明    功能介绍<br>FileOutputStream(String name)    根据参数指定的文件名来构造对象<br>FileOutputStream(String name, boolean append)    以追加的方式根据参数指定的文件名来构造对象<br>void write(int b)    将指定字节写入此文件输出流<br>void write(byte[] b, int off, int len)    将指定字节数组中从偏移量off开始的len个字节写入 此文件输出流<br>void write(byte[] b)    将 b.length 个字节从指定字节数组写入此文件输出 流中<br>void flush()    刷新此输出流并强制写出任何缓冲的输出字节<br>void close()    关闭流对象并释放有关的资源</p>
<h4 id="2-FileInputStream类"><a href="#2-FileInputStream类" class="headerlink" title="2.FileInputStream类"></a>2.FileInputStream类</h4><p>基本概念：java.io.FileInputStream类主要用于从输入流中以字节流的方式读取图像数据等。</p>
<p>常用的方法       方法声明    功能介绍<br>FileInputStream(String name)    根据参数指定的文件路径名来构造对象<br>int read()    从输入流中读取单个字节的数据并返回，返回-1表示读取到末尾<br>int read(byte[] b, int off, int len)从此输入流中将最多len个字节的数据读入字节数组中，返回读取到的字节个数返回-1表示读取到末尾<br>int read(byte[] b)    从此输入流中将最多 b.length 个字节的数据读入字节数组中，返回读 取到的字节个数，返回-1表示读取到末尾<br>void close()    关闭流对象并释放有关的资源<br>int available()    获取输入流所关联文件的大小<br>案例题目</p>
<p>编程实现两个文件之间的拷贝功能(异常未处理 处理异常的方式和上面相同)</p>
<p>拷贝方式一: 文件捎到时 拷贝效率低</p>
<pre><code>public static void main(String[] args) &#123;
    // 1.创建字节输入流 FileInputStream 与文件 z:/c.png 进行关联
    FileInputStream inputStream = new FileInputStream(&quot;z:/d.png&quot;);
    // 2.创建字节输出流 FileOutputStream 与文件 z:/d.png 进行关联
    FileOutputStream outputStream = new FileOutputStream(&quot;z:/c.png&quot;);
    // 3.将字节输入流读到的数据写入到字节输出流上
    int res = 0;
    while ((res = inputStream.read()) != -1)&#123;
        outputStream.write(res);
    &#125;
    // 4.关闭流信息 释放相关的资源
    outputStream.close();
    inputStream.close();
&#125;
</code></pre>
<p>拷贝方式二:准备一个和文件大小相同的数据缓冲区 一次性将文件拷贝完成(缺点是 文件太大时 无法申请和文件大小一样的缓冲区 真实的物理内存不足)</p>
<pre><code>          // 3.将字节输入流读到的数据写入到字节输出流上 
         // 将下面代码改为3以后的代码
           int leng = inputStream.available();
           byte[] temp = new byte[leng];
           outputStream.write(temp);
</code></pre>
<p>拷贝方式三：准备一个相对适当的缓冲区 分多次将文件拷贝完成 一般用1024的倍数或 1024</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 3.将字节输入流读到的数据写入到字节输出流上</span><br><span class="line">            byte[] b = new byte[1024];</span><br><span class="line">            int res = 0;</span><br><span class="line">            while ((res = inputStream.read(b)) != -1)&#123;</span><br><span class="line">                outputStream.write(b,0,res);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-BufferedOutputStream类"><a href="#3-BufferedOutputStream类" class="headerlink" title="3.BufferedOutputStream类"></a>3.BufferedOutputStream类</h4><p>基本概念：java.io.BufferedOutputStream类主要用于描述缓冲输出流，此时不用为写入的每个字节调用底层系统</p>
<p>常用的方法   方法声明    功能介绍<br>BufferedOutputStream(OutputStream out)    根据参数指定的引用来构造对象<br>BufferedOutputStream(OutputStream out, int size)    根据参数指定的引用和缓冲区大小来构造 对象<br>void write(int b)    写入单个字节<br>void write(byte[] b, int off, int len)    写入字节数组中的一部分数据<br>void write(byte[] b)    写入参数指定的整个字节数组<br>void flush()    刷新流<br>void close()    关闭流对象并释放有关的资源</p>
<h4 id="4-BufferedInputStream类"><a href="#4-BufferedInputStream类" class="headerlink" title="4.BufferedInputStream类"></a>4.BufferedInputStream类</h4><p>基本概念：java.io.BufferedInputStream类主要用于描述缓冲输入流。</p>
<p>常用的方法  方法声明    功能介绍<br>BufferedInputStream(InputStream in)    根据参数指定的引用构造对象<br>BufferedInputStream(InputStream in, int size)    根据参数指定的引用和缓冲区大小构造对象<br>int read()    读取单个字节<br>int read(byte[] b, int off, int len)    读取len个字节<br>int read(byte[] b)    读取b.length个字节<br>void close()    关闭流对象并释放有关的资源<br>使用缓冲输入输出流实现文件的拷贝（未进行异常的处理 自己也可以定义缓冲区 ）默认缓冲区为 8192 &#x3D; 1024 * 8</p>
<pre><code>    // 1.创建BufferedInputStream 类型与 z://c.png 文件管理
    BufferedInputStream bis = new BufferedInputStream(new FileInputStream(&quot;z:/c.png&quot;)); // 处理流
    // 2.创建BufferedIOutputStream 类型与 z://d.png 文件管理
    BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(&quot;z/d.png&quot;)); // 处理流
    // 3.不断地从输入流读取文件数据 写入到输出流中
    int res = 0;
    while ((res = bis.read()) != -1)&#123;
        bos.write(res);
    &#125;
    // 4.关闭流对象 释放有关的资源
    bos.close();
    bis.close();
</code></pre>
<p>使用：</p>
<p>当牵扯到文件复制是 首选 BufferedInputStream 和 BufferedOutoutStream</p>
<h4 id="5-FileWriter类"><a href="#5-FileWriter类" class="headerlink" title="5.FileWriter类"></a>5.FileWriter类</h4><p>java.io.FileWriter类主要用于将文本内容写入到文本文件。</p>
<p>常用的方法   方法声明    功能介绍<br>FileWriter(String fileName)    根据参数指定的文件名构造对象<br>FileWriter(String fileName, boolean append)    以追加的方式根据参数指定的文件名来构造对象<br>void write(int c)    写入单个字符<br>void write(char[] cbuf, int off, int len)    将指定字符数组中从偏移量off开始的len个字符写入此 文件输出流<br>void write(char[] cbuf)    将cbuf.length个字符从指定字符数组写入此文件输出 流中<br>void flush()    刷新流 void close() 关闭流对象并释放有关的资源<br>void close()    关闭流对象并释放有关的资源<br>常用方法代码演示</p>
<p>对象的构造 需要进行异常单处理</p>
<pre><code>        // 1.构造FileWrite类型的对象 与 z://a.txt文件关联
        // 若文件不存在创建一个新文件
        // 若文件存在 该流会清空文件中原有的内容
        FileWriter writer = new FileWriter(&quot;z:/a.txt&quot;);
        // 加true之后 文件以追加的形式创建对象 去关联文件
        // 若文件不存在则自动创建新的空文件 并保留文件中原有的数据内容
        FileWriter writer = new FileWriter(&quot;z:/a.txt&quot;, true);
</code></pre>
<p>文件的写入</p>
<pre><code>        // 2.通过流对象写入数据内容
        writer.write(&#39;a&#39;);
</code></pre>
<p>写入字符数组</p>
<pre><code>          // 准备一个字符串并将字符串转化为char[]
           char[] charsArr = &quot;hello, java !!!&quot;.toCharArray();
          // 将字符的一部分写入到文件中
           writer.write(charsArr,6,charsArr.length-1 - 6); // java !!!
          // 此处不会清除文件中的内容 而是在末尾进行追加
           writer.write(charsArr);  // java !!hello, java !!!
</code></pre>
<p>流的关闭 防在捕获异常之后的finally类中</p>
<pre><code>    // 3.关闭流对象 并释放资源
    // 如果在创建对象时发生异常 则writer为空值 可能引发空指针异常 在这进行判断防止异常的发生
    if (writer != null)&#123;
            try &#123;
                writer.close();
            &#125; catch (IOException e) &#123;
                e.printStackTrace();
            &#125;
        &#125;
</code></pre>
<p>数刷新 flush 只有大量写入数据时才用到</p>
<pre><code>     // 刷新流
     write.flush();
</code></pre>
<h4 id="6-FileReader类"><a href="#6-FileReader类" class="headerlink" title="6.FileReader类"></a>6.FileReader类</h4><p>基本概念：java.io.FileReader类主要用于从文本文件读取文本数据内容</p>
<p>常用的方法  方法声明    功能介绍<br>FileReader(String fileName)    根据参数指定的文件名构造对象<br>int read()    读取单个字符的数据并返回，返回-1表示读取到末尾<br>int read(char[] cbuf, int offset, int length)    从输入流中将最多len个字符的数据读入一个字符数组中，返回读取到的字符个数，返回-1表示读取到末尾<br>int read(char[] cbuf)    从此输入流中将最多 cbuf.length 个字符的数据读入字符数组中，返回读取到的字符个数，返回-1表示读取到末尾<br>void close()    关闭流对象并释放有关的资源<br>常用方法代码演示</p>
<p>对象的构造并进行遍历文本文件进行打印</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FileReader reader = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            // 1.构造FileReader类型的对象 与 z:/a.txt 文件关联</span><br><span class="line">            reader = new FileReader(&quot;z:/a.txt&quot;); // 文件中的内容是  java !!hello, java !!!</span><br><span class="line">            // 2.读取文件内容并打印</span><br><span class="line">            // System.out.println(reader.read()); // 输出为 32 可能为ASCII码</span><br><span class="line">            // 进行数字转换为char 返回值是对应的ASCII码值</span><br><span class="line">            // 当读取单文件的最后位置返回为 - 1</span><br><span class="line">            int temp = 0; // 初始化用来接受输入流的信息</span><br><span class="line">            while ( (temp = reader.read()) != -1)&#123;</span><br><span class="line">                System.out.print( (char) temp); //  java !!hello, java !!!</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; </span><br></pre></td></tr></table></figure>


<p>将关联文件读取到字符数组中</p>
<pre><code>        // 1.定义一个字符串数组 长度为10  文件中的字符为java!!hellojava
        char[] charArr = new char[10];
        reader.read(charArr,1,8);
        // 打印数组中的元素
        System.out.println(Arrays.toString(charArr)); // [,  , j, a, v, a, !, !, h,  ]
        // 由于用的是同一个对象 指针保留到下一个字符 如果读取完毕  指针自动调用前调用方第一个字符 最后一个字符返回为空
       reader.read(charArr); 
        System.out.println(Arrays.toString(charArr)); // [e, l, l, o, j, a, v, a, h,  ]
</code></pre>
<p>关闭流对象并释放有关的资源</p>
<pre><code>finally &#123;
        // 3.关闭流对象并释放有关的资源
        // 如果在创建对象时发生异常 则reader为空值 可能引发空指针异常 在这进行判断防止异常的发生
        if (reader != null)&#123;
            try &#123;
                reader.close();
            &#125; catch (IOException e) &#123;
                e.printStackTrace();
            &#125;
        &#125;
    &#125;
</code></pre>
<p>实现文件的拷贝(单个字符)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FileReader reader = null;</span><br><span class="line">        FileWriter writer = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            // 1.创建FileReader类型的对象 与 z:/a.txt 关联</span><br><span class="line">            reader = new FileReader(&quot;z:/a.txt&quot;);</span><br><span class="line">            // 2.创建FileWriter类型的对象 与 z:/b.txt 关联</span><br><span class="line">            writer = new FileWriter(&quot;z:/b.txt&quot;);</span><br><span class="line">            // 3.从输入流中读取到的数据写入到输出流</span><br><span class="line">            int temp = 0;</span><br><span class="line">            while ((temp = reader.read()) != -1)&#123;</span><br><span class="line">                writer.write(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            // 4.关闭流信息 并释放对应的资源</span><br><span class="line">            // 关闭流信息一般操作是 县创建的后关闭</span><br><span class="line">            if (writer != null)&#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    writer.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if(reader != null)&#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    reader.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h4 id="7-BufferedWriter类"><a href="#7-BufferedWriter类" class="headerlink" title="7.BufferedWriter类"></a>7.BufferedWriter类</h4><p>基本概念：java.io.BufferedWriter类主要用于写入单个字符、字符数组以及字符串到输出流中。</p>
<p>常用的方法    方法声明    功能介绍<br>BufferedWriter(Writer out)    根据参数指定的引用来构造对象<br>BufferedWriter(Writer out, int sz)    根据参数指定的引用和缓冲区大小来构造对象<br>void write(int c)    写入单个字符到输出流中<br>void write(char[] cbuf, int off, int len)    将字符数组cbuf中从下标off开始的len个字符写入输出流 中<br>void write(char[] cbuf)    将字符串数组cbuf中所有内容写入输出流中<br>void write(String s, int off, int len)    将参数s中下标从off开始的len个字符写入输出流中<br>void write(String str)    将参数指定的字符串内容写入输出流中<br>void newLine()    用于写入行分隔符到输出流中<br>void flush()    刷新流<br>void close()    关闭流对象并释放有关的资源</p>
<h4 id="8-BufferedReader类"><a href="#8-BufferedReader类" class="headerlink" title="8.BufferedReader类"></a>8.BufferedReader类</h4><p>基本概念：java.io.BufferedReader类用于从输入流中读取单个字符、字符数组以及字符串。</p>
<p>常用的方法   方法声明    功能介绍<br>BufferedReader(Reader in)    根据参数指定的引用来构造对象<br>BufferedReader(Reader in, int sz)    根据参数指定的引用和缓冲区大小来构造对象<br>int read()    从输入流读取单个字符，读取到末尾则返回-1，否则返回实际读取到 的字符内容<br>int read(char[] cbuf, int off, int len)    从输入流中读取len个字符放入数组cbuf中下标从off开始的位置上， 若读取到末尾则返回-1，否则返回实际读取到的字符个数<br>int read(char[] cbuf)    从输入流中读满整个数组<br>cbuf String readLine()    读取一行字符串并返回，返回null表示读取到末尾<br>void close()    关闭流对象并释放有关的资源<br>数据缓冲输入流(字符 按照行数据 )实现文件的拷贝(有异常未进行处理)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 1.定义一个字符缓冲输入流 BufferedReader 与文件 z:/a.txt 文件关联</span><br><span class="line">       BufferedReader reader = new BufferedReader(new FileReader(&quot;z:a.txt&quot;));</span><br><span class="line">       // 2.定义一个字符缓冲输出流 BufferedWriter 与文件 z:/a.txt 文件关联</span><br><span class="line">       BufferedWriter writer = new BufferedWriter(new FileWriter(&quot;z:/b.txt&quot;));</span><br><span class="line">       // 3.将读到的行数据输入流按照行输出到输出流上</span><br><span class="line">       String res = null;</span><br><span class="line">       while ((res = reader.readLine()) != null)&#123; // 读取一行数据</span><br><span class="line">           writer.write(res); // 写入一行数据</span><br><span class="line">            writer.newLine(); // 新建一行 不添加此处代码 默认在末尾追加 当前系统的行分隔符是 </span><br><span class="line">       &#125;</span><br><span class="line">       // 4.关闭流信息 释放相关的资源</span><br><span class="line">       writer.close();</span><br><span class="line">       reader.close();</span><br></pre></td></tr></table></figure>

<h4 id="9-OutputStreamWriter类"><a href="#9-OutputStreamWriter类" class="headerlink" title="9.OutputStreamWriter类"></a>9.OutputStreamWriter类</h4><p>基本概念：java.io.OutputStreamWriter类主要用于实现从字符流到字节流的转换。</p>
<p>常用的方法  方法声明    功能介绍<br>OutputStreamWriter(OutputStream out)    根据参数指定的引用来构造对象<br>OutputStreamWriter(OutputStream out, String charsetName)    根据参数指定的引用和编码构造 对象<br>void write(String str)    将参数指定的字符串写入<br>void flush()    刷新流<br>void close()    用于关闭输出流并释放有关的资源</p>
<h4 id="10-InputStreamReader类"><a href="#10-InputStreamReader类" class="headerlink" title="10.InputStreamReader类"></a>10.InputStreamReader类</h4><p>基本概念：java.io.InputStreamReader类主要用于实现从字节流到字符流的转换。</p>
<p>常用的方法   方法声明    功能介绍<br>InputStreamReader(InputStream in)    根据参数指定的引用来构造对象<br>InputStreamReader(InputStream in, String charsetName)    根据参数指定的引用和编码来构造对 象<br>int read(char[] cbuf)    读取字符数据到参数指定的数组<br>void close()    用于关闭输出流并释放有关的资源</p>
<h4 id="11-ObjectInputStream类"><a href="#11-ObjectInputStream类" class="headerlink" title="11.ObjectInputStream类"></a>11.ObjectInputStream类</h4><p>基本概念：java.io.ObjectInputStream类主要用于从输入流中一次性将对象整体读取出来。<br>所谓反序列化主要指将有效组织的字节序列恢复为一个对象及相关信息的转化过程。<br>常用的方法   方法声明    功能介绍<br>ObjectInputStream(InputStream in)    根据参数指定的引用来构造对象<br>Object readObject()    主要用于从输入流中读取一个对象并返回 无法通过返回值 来判断是否读取到文件的末尾<br>void close()    用于关闭输入流并释放有关的资源<br>方法使用</p>
<pre><code>  ObjectInputStream inputStream = null;
    try &#123;
        // 1.创建 ObjectInoutStream 对象与 z:/a.txt 文件关联
        inputStream = new ObjectInputStream(new FileInputStream(&quot;z:/a.txt&quot;));
        // 2.读取文件内容并打印信息
        User user = (User)inputStream.readObject();
        System.out.println(user);
    &#125; catch (IOException e) &#123;
        e.printStackTrace();
    &#125; catch (ClassNotFoundException e) &#123;
        e.printStackTrace();
    &#125; finally &#123;
        // 3.关闭流信息 并释放对应的资源
        if (inputStream != null)&#123;
            try &#123;
                inputStream.close();
            &#125; catch (IOException e) &#123;
                e.printStackTrace();
            &#125;
        &#125;
    &#125;
</code></pre>
<p>字符编码<br>编码表的由来</p>
<p>计算机只能识别二进制数据，早期就是电信号。为了方便计算机可以识别各个国家的文字，就需要 将各个国家的文字采用数字编号的方式进行描述并建立对应的关系表，该表就叫做编码表。</p>
<p>常见的编码表</p>
<p>ASCII：美国标准信息交换码， 使用一个字节的低7位二位进制进行表示。</p>
<p>ISO8859-1：拉丁码表，欧洲码表，使用一个字节的8位二进制进行表示。</p>
<p>GB2312：中国的中文编码表，最多使用两个字节16位二进制为进行表示。</p>
<p>GBK：中国的中文编码表升级，融合了更多的中文文字符号，最多使用两个字节16位二进制位表 示。</p>
<p>Unicode：国际标准码，融合了目前人类使用的所有字符，为每个字符分配唯一的字符码。所有的 文字都用两个字节16位二进制位来表示</p>
<p>编码的发展</p>
<p>面向传输的众多 UTF（UCS Transfer Format）标准出现了，UTF-8就是每次8个位传输数据，而 UTF-16就是每次16个位。这是为传输而设计的编码并使编码无国界，这样就可以显示全世界上所 有文化的字符了。<br>Unicode只是定义了一个庞大的、全球通用的字符集，并为每个字符规定了唯一确定的编号，具体 存储成什么样的字节流，取决于字符编码方案。推荐的Unicode编码是UTF-8和UTF-16。<br>UTF-8：变长的编码方式，可用1-4个字节来表示一个字符。</p>
<p>原文链接：<a href="https://blog.csdn.net/Junsunnyl/article/details/119973088">https://blog.csdn.net/Junsunnyl/article/details/119973088</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>数据与结构之顺序表</title>
    <url>/2022/04/05/%E6%95%B0%E6%8D%AE%E4%B8%8E%E7%BB%93%E6%9E%84%E4%B9%8B%E9%A1%BA%E5%BA%8F%E8%A1%A8/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">目录</span><br><span class="line">一，顺序表的逻辑</span><br><span class="line">二，顺序表的实现</span><br><span class="line">三，基于顺序存储结构的图书信息表的创建和输出（C++版）</span><br></pre></td></tr></table></figure>

<p>一，顺序表的逻辑</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;malloc.h&gt; //头文件包含命令</span><br><span class="line">#define List_init_size 100 //符号常量的定义</span><br><span class="line">#define Listincrement 100</span><br><span class="line">#define TRUE 1</span><br><span class="line">#define FALSE 0</span><br><span class="line">#define OK 1</span><br><span class="line">#define ERROR 0</span><br><span class="line">#define INFEASIBLE -1</span><br><span class="line">#define OVERFLOW -2</span><br><span class="line">typedef int Elemtype;//抽象数据类型elemtype具体化为int类型</span><br><span class="line">typedef int Status;</span><br><span class="line">typedef struct &#123; //定义结构体</span><br><span class="line">    Elemtype *elem;</span><br><span class="line">    int length;</span><br><span class="line">    int listsize;</span><br><span class="line">&#125;Sqlist;</span><br><span class="line">Status Initlist_sq(Sqlist *l) //函数（初始化顺序表）初始化失败则返回-2</span><br><span class="line">&#123;</span><br><span class="line">    l-&gt;elem =(Elemtype*)malloc(sizeof(Elemtype));</span><br><span class="line">    if(!l-&gt;elem ) return(OVERFLOW);</span><br><span class="line">    l-&gt;length =0;</span><br><span class="line">    l-&gt;listsize =List_init_size;</span><br><span class="line">    return OK;</span><br><span class="line">&#125;</span><br><span class="line">Status Creatlist_sq(Sqlist *l,int n) //初始化顺序表为含有n个元素的顺序表</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    printf(&quot;Input %d numbers:\n&quot;,n);</span><br><span class="line">    for(i=0;i&lt;n;i++)</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;(l-&gt;elem [i]));</span><br><span class="line">    l-&gt;length =n;</span><br><span class="line">    return OK;</span><br><span class="line">&#125;</span><br><span class="line">void Outputlist_sq(Sqlist *l) //函数（输出顺序表的元素）</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    for(i=0;i&lt;l-&gt;length ;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    printf(&quot;%5d&quot;,l-&gt;elem [i]);</span><br><span class="line">    if((i+1)%5==0)</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">void Destroylist_sq(Sqlist*l) //销毁顺序表l</span><br><span class="line">&#123;</span><br><span class="line">    free(l-&gt;elem );</span><br><span class="line">&#125;</span><br><span class="line">Status Insertlist_sq(Sqlist*l,int i,Elemtype e) //在顺序表的第i个位置前插入元素e</span><br><span class="line">&#123;</span><br><span class="line">    int j;</span><br><span class="line">    Elemtype *p;</span><br><span class="line">    if(i&gt;l-&gt;length )</span><br><span class="line">    &#123;</span><br><span class="line">    printf(&quot;输入数据不合法!&quot;);</span><br><span class="line">    return (OVERFLOW);</span><br><span class="line">    &#125;</span><br><span class="line">    if(l-&gt;length&gt;=l-&gt;listsize )</span><br><span class="line">    &#123;</span><br><span class="line">    Elemtype *p;</span><br><span class="line">    p=(Elemtype*)realloc(l-&gt;elem ,(List_init_size+Listincrement)*sizeof(Elemtype));</span><br><span class="line">    if(p==0)</span><br><span class="line">    &#123;</span><br><span class="line">    return(OVERFLOW);&#125;</span><br><span class="line">    l-&gt;elem =p;</span><br><span class="line">    l-&gt;listsize =+Listincrement;</span><br><span class="line">    &#125;</span><br><span class="line">    p=&amp;(l-&gt;elem[i-1]);</span><br><span class="line">    for(j=l-&gt;length +1;j&gt;=i;j--)</span><br><span class="line">    l-&gt;elem [j]=l-&gt;elem [j-1];</span><br><span class="line">    *p=e;</span><br><span class="line">    l-&gt;length ++;</span><br><span class="line">    return OK;</span><br><span class="line">&#125;</span><br><span class="line">Elemtype Deletelist_sq(Sqlist*l,int i)//函数（删除）用e返回删除的元素</span><br><span class="line">&#123;</span><br><span class="line">    int j;</span><br><span class="line">    Elemtype e;</span><br><span class="line">    e=l-&gt;elem [i-1];</span><br><span class="line">    for(j=i-1;j&lt;l-&gt;length-1 ;j++)</span><br><span class="line">    l-&gt;elem [j]=l-&gt;elem [j+1];</span><br><span class="line">    l-&gt;elem [l-&gt;length -1]=0;</span><br><span class="line">    l-&gt;length --;</span><br><span class="line">    return e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>二，顺序表的实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdbool.h&gt;</span><br><span class="line"></span><br><span class="line"># define List_Init_Size  100</span><br><span class="line"># define ListIncrement   10</span><br><span class="line">typedef  int ElemType;       //定义数据元素的类型 </span><br><span class="line"></span><br><span class="line">typedef  struct &#123;         </span><br><span class="line">    ElemType   *elem;  //存储空间基址</span><br><span class="line">    int        length; //当前长度(数据元素个数)</span><br><span class="line">    int        ListSize;//当前分配的存储容量</span><br><span class="line">&#125; Sqlist;           //定义顺序表的类型 </span><br><span class="line"></span><br><span class="line">bool InitList (Sqlist *L); //顺序表初始化函数</span><br><span class="line">void  InsertList(Sqlist *L,int i,ElemType x);   //向向顺序表插入第i个元素</span><br><span class="line"></span><br><span class="line">//顺序表初始化函数 </span><br><span class="line">bool InitList (Sqlist *L)&#123;   </span><br><span class="line">    </span><br><span class="line">    L-&gt;elem=(ElemType *)malloc(List_Init_Size*sizeof(ElemType));//为顺序表分配一个大小为List_Init_Size的数组空间</span><br><span class="line">    if (!L-&gt;elem) exit(0) ;</span><br><span class="line">    L-&gt;length=0;</span><br><span class="line">    L-&gt;ListSize=List_Init_Size;</span><br><span class="line">    return  true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//向顺序表插入第i个元素 </span><br><span class="line">void  InsertList(Sqlist *L,int i,ElemType x)   </span><br><span class="line">&#123;     //int j;</span><br><span class="line">    if(i &lt;1 || i &gt;L-&gt;length+1)</span><br><span class="line">    &#123;printf(&quot;Position error&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    if(L-&gt;length&gt;=L-&gt;ListSize)</span><br><span class="line">    &#123;printf(&quot;overflow&quot;);</span><br><span class="line">        exit(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    for(int j=L-&gt;length-1;j&gt;= i-1;--j)</span><br><span class="line">        L-&gt;elem[j+1]=L-&gt;elem[j];</span><br><span class="line">    L-&gt;elem[i-1]=x;</span><br><span class="line">    ++L-&gt;length;</span><br><span class="line">    return;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> //删除顺序表中第i个数据元素</span><br><span class="line">void deleteList(Sqlist *L,int i)   </span><br><span class="line">&#123;</span><br><span class="line">    int j;</span><br><span class="line">    if(i&lt;1 || i&gt;L-&gt;length)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;Position error&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    for(j=i;j&lt;L-&gt;length;j++)</span><br><span class="line">        L-&gt;elem[j-1]=L-&gt;elem[j];</span><br><span class="line">    L-&gt;length--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//查找元素x，找到返回序号，找不到返回0</span><br><span class="line">int Locate(Sqlist L, ElemType x)</span><br><span class="line">&#123;  int i=1;</span><br><span class="line">    while(i&lt;=L.length &amp;&amp; L.elem[i-1]!=x)</span><br><span class="line">        ++i;</span><br><span class="line">    if(i&lt;=L.length)  return i;</span><br><span class="line">    else return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//获取第i个元素 </span><br><span class="line">void GetElem(Sqlist L,int i, ElemType *e)</span><br><span class="line">&#123;</span><br><span class="line">    *e=L.elem[i-1];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//返回顺序表的长度 </span><br><span class="line">int ListLength(Sqlist L)</span><br><span class="line">&#123;</span><br><span class="line">    return L.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//输出顺序表 </span><br><span class="line">void Output(Sqlist L)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;number of elements：%d\n&quot;,L.length);</span><br><span class="line">    for (int i=1;i&lt;=L.length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%d element:%d\n&quot;,i,L.elem[i-1]);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//输入n个数据元素 </span><br><span class="line">void Input(Sqlist *L)</span><br><span class="line">&#123;</span><br><span class="line">    int n,x;</span><br><span class="line">    scanf (&quot;%d&quot;,&amp;n);</span><br><span class="line">    for (int i=1;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf (&quot;%d&quot;,&amp;x);</span><br><span class="line">        L-&gt;elem[i-1]=x;</span><br><span class="line">        L-&gt;length++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//两个线性表并运算               </span><br><span class="line">void unio(Sqlist *La,Sqlist Lb) &#123;</span><br><span class="line">    ElemType e;</span><br><span class="line">    int La_len=La-&gt;length;</span><br><span class="line">    int Lb_len=Lb.length;</span><br><span class="line">    for(int i=1;i&lt;=Lb_len;++i) &#123;</span><br><span class="line">        GetElem(Lb,i,&amp;e);</span><br><span class="line">        if(!Locate(*La,e))</span><br><span class="line">        InsertList(La,++La_len,e);</span><br><span class="line">    &#125;</span><br><span class="line">    Output(*La);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//将两个顺序表合并到第三个顺序表中 </span><br><span class="line">void  mergelist(Sqlist La,Sqlist Lb,Sqlist *Lc)&#123;</span><br><span class="line">    int i=1,j=1,k=0;</span><br><span class="line">    ElemType ai,bj;</span><br><span class="line">    int La_len=ListLength(La);</span><br><span class="line">    int Lb_len=ListLength(Lb);</span><br><span class="line">    while((i&lt;=La_len)&amp;&amp;(j&lt;=Lb_len))</span><br><span class="line">    &#123;</span><br><span class="line">    GetElem(La,i,&amp;ai);GetElem(Lb,j,&amp;bj);</span><br><span class="line">    if(ai&lt;=bj)</span><br><span class="line">        &#123;</span><br><span class="line">        InsertList(Lc,++k,ai);++i;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;InsertList(Lc,++k,bj);++j;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    while(i&lt;=La_len)&#123;</span><br><span class="line">        GetElem(La,i++,&amp;ai);InsertList(Lc,++k,ai);</span><br><span class="line">        &#125;</span><br><span class="line">    while(j&lt;=Lb_len)&#123;</span><br><span class="line">        GetElem(Lb,j++,&amp;bj);InsertList(Lc,++k,bj);</span><br><span class="line">        &#125;</span><br><span class="line">                   </span><br><span class="line">    Output(*Lc);</span><br><span class="line">               &#125;</span><br><span class="line">int main(int argc, const char * argv[]) &#123;   //主函数 </span><br><span class="line">    Sqlist L,La,Lb,Lc;</span><br><span class="line">    int conti=1,choice=0,loc=0; ElemType x;</span><br><span class="line">    while (conti)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        printf(&quot;1.Initial  2.Insert  3.Delete  4.Locate  5.并集  6.Merge  7.Output 8.Exit&quot;);</span><br><span class="line">        scanf (&quot;%d&quot;,&amp;choice);</span><br><span class="line">        switch (choice)&#123;</span><br><span class="line">                int i;</span><br><span class="line">            case  1:</span><br><span class="line">                InitList(&amp;L);break;</span><br><span class="line">            case  2:</span><br><span class="line">                </span><br><span class="line">                printf(&quot;请输入要插入的位置&quot;);</span><br><span class="line">                scanf (&quot;%d&quot;,&amp;i);</span><br><span class="line">                printf(&quot;请输入要插入的内容&quot;);</span><br><span class="line">                scanf (&quot;%d&quot;,&amp;x);</span><br><span class="line">                InsertList(&amp;L,i,x);</span><br><span class="line">                break;</span><br><span class="line">            case  3:</span><br><span class="line">                printf(&quot;请输入要删除的位置&quot;);</span><br><span class="line">                scanf (&quot;%d&quot;,&amp;i);</span><br><span class="line">                deleteList(&amp;L,i);</span><br><span class="line">                break;</span><br><span class="line">            case  4:</span><br><span class="line">                printf(&quot;请输入要定位的内容：&quot;);</span><br><span class="line">                scanf (&quot;%d&quot;,&amp;x);</span><br><span class="line">                loc = Locate(L,x);</span><br><span class="line">                if (!loc) printf(&quot;该元素不存在\n&quot;);</span><br><span class="line">                else printf(&quot;该元素的序号是：%d \n&quot;,loc);</span><br><span class="line">                break;</span><br><span class="line">            case  5:</span><br><span class="line">                InitList(&amp;La);</span><br><span class="line">                InitList(&amp;Lb);</span><br><span class="line">                printf(&quot;请输入La中的元素个数:&quot;);</span><br><span class="line">                Input(&amp;La);</span><br><span class="line">                printf(&quot;请输入Lb中的元素个数:&quot;);</span><br><span class="line">                Input(&amp;Lb);</span><br><span class="line">                unio(&amp;La,Lb);</span><br><span class="line">                break;</span><br><span class="line">            case  6:</span><br><span class="line">                InitList(&amp;La);</span><br><span class="line">                InitList(&amp;Lb);</span><br><span class="line">                InitList(&amp;Lc);</span><br><span class="line">                printf(&quot;请输入La中的元素个数:&quot;);</span><br><span class="line">                Input(&amp;La);</span><br><span class="line">                printf(&quot;请输入Lb中的元素个数:&quot;);</span><br><span class="line">                Input(&amp;Lb);</span><br><span class="line">                mergelist(La,Lb,&amp;Lc);</span><br><span class="line">                break;</span><br><span class="line">            case  7:</span><br><span class="line">                Output(L);	break;</span><br><span class="line">                </span><br><span class="line">            case  8:</span><br><span class="line">                conti=0;</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>三，基于顺序存储结构的图书信息表的创建和输出（C++）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;fstream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">#include&lt;iomanip&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define OK 1</span><br><span class="line">#define ERROR 0</span><br><span class="line">#define OVERFLOW -2</span><br><span class="line">typedef int Status; //Status 是函数返回值类型，其值是函数结果状态代码。</span><br><span class="line">typedef int ElemType; //ElemType 为可定义的数据类型，此设为int类型</span><br><span class="line"></span><br><span class="line">#define MAXSIZE 100			//顺序表可能达到的最大长度</span><br><span class="line">struct Book &#123;</span><br><span class="line">	string id;//ISBN</span><br><span class="line">	string name;//书名</span><br><span class="line">	double price;//定价</span><br><span class="line">&#125;;</span><br><span class="line">typedef struct &#123;</span><br><span class="line">	Book *elem; //存储空间的基地址</span><br><span class="line">	int length; //当前长度</span><br><span class="line">&#125; SqList;</span><br><span class="line"></span><br><span class="line">Status InitList_Sq(SqList &amp;L) &#123; //算法2.1 顺序表的初始化</span><br><span class="line">	//构造一个空的顺序表L</span><br><span class="line">	L.elem = new Book[MAXSIZE]; //为顺序表分配一个大小为MAXSIZE的数组空间</span><br><span class="line">	if (!L.elem)</span><br><span class="line">		exit(OVERFLOW); //存储分配失败退出</span><br><span class="line">	L.length = 0; //空表长度为0</span><br><span class="line">	return OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status GetElem(SqList L, int i, Book &amp;e) &#123;//算法2.2　顺序表的取值</span><br><span class="line">	if (i &lt; 1 || i &gt; L.length)</span><br><span class="line">		return ERROR; //判断i值是否合理，若不合理，返回ERROR</span><br><span class="line">	e = L.elem[i - 1]; //elem[i-1]单元存储第i个数据元素</span><br><span class="line">	return OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int LocateElem_Sq(SqList L, double e) &#123; //算法2.3 顺序表的查找</span><br><span class="line">	//顺序表的查找</span><br><span class="line">	for (int i = 0; i &lt; L.length; i++)</span><br><span class="line">		if (L.elem[i].price == e)</span><br><span class="line">			return i + 1;//查找成功，返回序号i+1</span><br><span class="line">	return 0;//查找失败，返回0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status ListInsert_Sq(SqList &amp;L, int i, Book e) &#123; //算法2.4 顺序表的插入</span><br><span class="line">	//在顺序表L中第i个位置之前插入新的元素e</span><br><span class="line">	//i值的合法范围是1&lt;=i&lt;=L.length+1</span><br><span class="line">	if ((i &lt; 1) || (i &gt; L.length + 1))</span><br><span class="line">		return ERROR; //i值不合法</span><br><span class="line">	if (L.length == MAXSIZE)</span><br><span class="line">		return ERROR; //当前存储空间已满</span><br><span class="line">	for (int j = L.length - 1; j &gt;= i - 1; j--)</span><br><span class="line">		L.elem[j + 1] = L.elem[j]; //插入位置及之后的元素后移</span><br><span class="line">	L.elem[i - 1] = e; //将新元素e放入第i个位置</span><br><span class="line">	++L.length; //表长增1</span><br><span class="line">	return OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status ListDelete_Sq(SqList &amp;L, int i) &#123; //算法2.5 顺序表的删除</span><br><span class="line">	//在顺序表L中删除第i个元素，并用e返回其值</span><br><span class="line">	//i值的合法范围是1&lt;=i&lt;=L.length</span><br><span class="line">	if ((i &lt; 1) || (i &gt; L.length))</span><br><span class="line">		return ERROR; //i值不合法</span><br><span class="line">	for (int j = i; j &lt;= L.length; j++)</span><br><span class="line">		L.elem[j - 1] = L.elem[j]; //被删除元素之后的元素前移</span><br><span class="line">	--L.length; //表长减1</span><br><span class="line">	return OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">	SqList L;  //生成顺序表变量 </span><br><span class="line">	int i = 0, temp, a, c, choose;</span><br><span class="line">	double price;</span><br><span class="line">	Book e;</span><br><span class="line">	string head_1, head_2, head_3;</span><br><span class="line">	cout &lt;&lt; &quot;1. 建立\n&quot;;</span><br><span class="line">	cout &lt;&lt; &quot;2. 输入\n&quot;;</span><br><span class="line">	cout &lt;&lt; &quot;3. 取值\n&quot;;</span><br><span class="line">	cout &lt;&lt; &quot;4. 查找\n&quot;;</span><br><span class="line">	cout &lt;&lt; &quot;5. 插入\n&quot;;</span><br><span class="line">	cout &lt;&lt; &quot;6. 删除\n&quot;;</span><br><span class="line">	cout &lt;&lt; &quot;7. 输出\n&quot;;</span><br><span class="line">	cout &lt;&lt; &quot;0. 退出\n\n&quot;;</span><br><span class="line"></span><br><span class="line">	choose = -1;</span><br><span class="line">	while (choose != 0) &#123;</span><br><span class="line">		cout &lt;&lt; &quot;your choose?&quot;;</span><br><span class="line">		cin &gt;&gt; choose;      //输入选项 </span><br><span class="line">		switch (choose) &#123;</span><br><span class="line">		case 1://创建顺序表</span><br><span class="line">			if (InitList_Sq(L))</span><br><span class="line">				cout &lt;&lt; &quot;成功建立顺序表\n\n&quot;;</span><br><span class="line">			else</span><br><span class="line">				cout &lt;&lt; &quot;顺序表建立失败\n\n&quot;;</span><br><span class="line">			break;</span><br><span class="line">		case 2: &#123;//顺序表信息输入</span><br><span class="line">			i = 0;</span><br><span class="line">			L.elem = new Book[MAXSIZE];</span><br><span class="line">			if (!L.elem)</span><br><span class="line">				exit(OVERFLOW);</span><br><span class="line">			L.length = 0;</span><br><span class="line">			fstream file;</span><br><span class="line">			file.open(&quot;book.txt&quot;);  //文件打开 </span><br><span class="line">			if (!file) &#123;</span><br><span class="line">				cout &lt;&lt; &quot;错误！未找到文件！&quot; &lt;&lt; endl;</span><br><span class="line">				exit(ERROR);</span><br><span class="line">			&#125;</span><br><span class="line">			file &gt;&gt; head_1 &gt;&gt; head_2 &gt;&gt; head_3;</span><br><span class="line">			while (!file.eof()) &#123;</span><br><span class="line">				file &gt;&gt; L.elem[i].id &gt;&gt; L.elem[i].name &gt;&gt; L.elem[i].price;//从文件中读入一条数据元素的三个数据项 </span><br><span class="line">				i++;</span><br><span class="line">			&#125;</span><br><span class="line">			cout &lt;&lt; &quot;输入 book.txt 信息完毕\n\n&quot;;</span><br><span class="line">			L.length = i;</span><br><span class="line">			file.close();       //文件关闭 </span><br><span class="line">		&#125;</span><br><span class="line">			break;</span><br><span class="line">		case 3://顺序表的取值</span><br><span class="line">			cout &lt;&lt; &quot;请输入一个位置用来取值：\n&quot;;</span><br><span class="line">			cin &gt;&gt; i;</span><br><span class="line">			temp = GetElem(L, i, e);</span><br><span class="line">			if (temp != 0) &#123;</span><br><span class="line">				cout &lt;&lt; &quot;查找成功\n&quot;;</span><br><span class="line">				cout &lt;&lt; &quot;第&quot; &lt;&lt; i &lt;&lt; &quot;本图书的信息是：\n&quot;;</span><br><span class="line">				cout &lt;&lt; left &lt;&lt; setw(15) &lt;&lt; e.id &lt;&lt; &quot;\t&quot; &lt;&lt; left &lt;&lt; setw(50)</span><br><span class="line">						&lt;&lt; e.name &lt;&lt; &quot;\t&quot; &lt;&lt; left &lt;&lt; setw(5) &lt;&lt; e.price &lt;&lt; endl</span><br><span class="line">						&lt;&lt; endl;</span><br><span class="line">			&#125; else</span><br><span class="line">				cout &lt;&lt; &quot;查找失败！位置超出范围\n\n&quot;;</span><br><span class="line">			break;</span><br><span class="line">		case 4: //顺序表的查找</span><br><span class="line">			cout &lt;&lt; &quot;请输入所要查找价格:&quot;;</span><br><span class="line">			cin &gt;&gt; price;</span><br><span class="line">			temp = LocateElem_Sq(L, price);</span><br><span class="line">			if (temp != 0) &#123;</span><br><span class="line">				cout &lt;&lt; &quot;查找成功\n&quot;;</span><br><span class="line">				cout &lt;&lt; &quot;该价格对应的书名为：&quot; &lt;&lt; L.elem[temp - 1].name &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">			&#125; else</span><br><span class="line">				cout &lt;&lt; &quot;查找失败！没有这个价格对应的书籍\n\n&quot;;</span><br><span class="line">			break;</span><br><span class="line">		case 5: //顺序表的插入</span><br><span class="line">			cout &lt;&lt; &quot;请输入插入的位置和书本信息，包括：编号 书名 价格（用空格隔开）:&quot;;</span><br><span class="line">			cin &gt;&gt; a;</span><br><span class="line">			cin &gt;&gt; e.id &gt;&gt; e.name &gt;&gt; e.price; //输入a和b，a代表插入的位置，b代表插入的数值（书本信息）</span><br><span class="line">			if (ListInsert_Sq(L, a, e))</span><br><span class="line">				cout &lt;&lt; &quot;插入成功.\n\n&quot;;</span><br><span class="line">			else</span><br><span class="line">				cout &lt;&lt; &quot;插入失败.\n\n&quot;;</span><br><span class="line">			break;</span><br><span class="line">		case 6: //顺序表的删除</span><br><span class="line">			cout &lt;&lt; &quot;请输入所要删除的书籍的位置:&quot;;</span><br><span class="line">			cin &gt;&gt; c;</span><br><span class="line">			if (ListDelete_Sq(L, c))</span><br><span class="line">				cout &lt;&lt; &quot;删除成功.\n\n&quot;;</span><br><span class="line">			else</span><br><span class="line">				cout &lt;&lt; &quot;删除失败.\n\n&quot;;</span><br><span class="line">			break;</span><br><span class="line">		case 7: //顺序表的输出</span><br><span class="line">			cout &lt;&lt; &quot;当前图书系统信息（顺序表）读出:\n&quot;;</span><br><span class="line">			for (i = 0; i &lt; L.length; i++)</span><br><span class="line">				cout &lt;&lt; left &lt;&lt; setw(15) &lt;&lt; L.elem[i].id &lt;&lt; &quot;\t&quot; &lt;&lt; left</span><br><span class="line">						&lt;&lt; setw(50) &lt;&lt; L.elem[i].name &lt;&lt; &quot;\t&quot; &lt;&lt; left</span><br><span class="line">						&lt;&lt; setw(5) &lt;&lt; L.elem[i].price &lt;&lt; endl;</span><br><span class="line">			cout &lt;&lt; endl;</span><br><span class="line">			break;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>1.爬虫实例-存储到本地与传到数据库</title>
    <url>/2022/04/06/%E7%88%AC%E8%99%AB%E5%AE%9E%E4%BE%8B-%E5%AD%98%E5%82%A8%E5%88%B0%E6%9C%AC%E5%9C%B0%E4%B8%8E%E4%BC%A0%E5%88%B0%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h4 id="爬虫实例"><a href="#爬虫实例" class="headerlink" title="爬虫实例"></a>爬虫实例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">目录</span><br><span class="line">一.获取有用数据</span><br><span class="line">1.构造网络资源实例</span><br><span class="line">2.获取输入流</span><br><span class="line">3.读取数据逻辑实现</span><br><span class="line">4.对数据进行处理（每个资源不同的部分）</span><br><span class="line">4.1 把html文件中的实体转化为用户可读的字符</span><br><span class="line">4.2 因为带有换行和制表符的字符串不利于后期处理，所以把字符串中的空白都消除掉</span><br><span class="line">4.3 根据规律截取目标字符串</span><br><span class="line">4.4 将目标字符串按照规律进行切分成一组数据</span><br><span class="line">二.将处理结果中的声音资源下载到本地</span><br><span class="line">1.获取网络文件的地址</span><br><span class="line">2.创建网络资源对象</span><br><span class="line">3.获取输入流，向内存存储数据</span><br><span class="line">4.创建本地文件，必须先创建目录，再创建文件，除非是单文件，创建过程中勿忘判断目录是否存在</span><br><span class="line">5.创建内存连接到磁盘文件的流，因为要把内存数据写到磁盘上，所以是输出流</span><br><span class="line">三.将最终结果连同本地文件路径持久化到数据库</span><br><span class="line">1.注册数据库的驱动</span><br><span class="line">2.获取数据库连接</span><br><span class="line">3.需要执行的sql语句</span><br><span class="line">4.获取预处理对象，并依次给参数赋值</span><br><span class="line">5.执行sql语句</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用到的知识</span><br><span class="line">1.输入输出流</span><br><span class="line">2.字符串的处理</span><br><span class="line">3.ArrayList&lt;&gt;</span><br><span class="line">4.HashMap&lt;key,value&gt;</span><br><span class="line">5.连接数据库的准备</span><br><span class="line">6.sql语句</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import org.apache.commons.lang.StringEscapeUtils;</span><br><span class="line">import java.io.*;</span><br><span class="line">import java.net.MalformedURLException;</span><br><span class="line">import java.net.URL;</span><br><span class="line">import java.net.URLConnection;</span><br><span class="line">import java.nio.charset.Charset;</span><br><span class="line">import java.nio.charset.StandardCharsets;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line"></span><br><span class="line">public class MainClass &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">        //1.构造网络资源实例，爬取网址音频仅供学习参考</span><br><span class="line">        String urlPath = &quot;http://.............&quot;;</span><br><span class="line">        URL url = new URL(urlPath);</span><br><span class="line">        //2.获取输入流，准备向内存读入数据</span><br><span class="line">        URLConnection urlConnection = url.openConnection();</span><br><span class="line">        InputStream in = urlConnection.getInputStream();</span><br><span class="line">        //3.读取数据逻辑实现</span><br><span class="line">        InputStreamReader reader = new InputStreamReader(in,StandardCharsets.UTF_8);</span><br><span class="line">        char[] b = new char[1024];</span><br><span class="line">        int i = 0;</span><br><span class="line">        StringBuilder sb = new StringBuilder();</span><br><span class="line">        while(-1!=(i=reader.read(b)))&#123;</span><br><span class="line">            sb.append(String.valueOf(b,0,i));</span><br><span class="line">        &#125;</span><br><span class="line">        in.close();</span><br><span class="line">//sb中的部分网页源码如下</span><br><span class="line"> /*&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">	new jPlayerPlaylist(&#123;</span><br><span class="line">		jPlayer: &quot;#jquery_jplayer_1&quot;,</span><br><span class="line">		cssSelectorAncestor: &quot;#jp_container_1&quot;//截取开始字符</span><br><span class="line">	&#125;, [&#123;title:&quot;&amp;#22823;&amp;#24754;&amp;#21650;(&amp;#32463;&amp;#20856;&amp;#29256;)&quot;, m4a:&quot;http://23.225.35.235:26/a/3/53.m4a&quot;,&#123;title:&quot;&amp;#20845;&amp;#23383;&amp;#22823;&amp;#26126;&amp;#21650;(&amp;#32768;&amp;#19968;&amp;#27861;&amp;#24072;)&quot;,...title:&quot;[&amp;#20934;&amp;#25552;&amp;#21650;] &amp;#20256;&amp;#21916;&amp;#27861;&amp;#24072;-&amp;#20934;&amp;#25552;&amp;#21650;&quot;, m4a:&quot;http://23.225.35.235:26/a/3/20.m4a&quot;,&#125;,], &#123;</span><br><span class="line">		swfPath: &quot;js/j.swf&quot;,//结束字符</span><br><span class="line">		supplied: &quot;m4a, mp3&quot;,</span><br><span class="line">		wmode: &quot;window&quot;,</span><br><span class="line">		useStateClassSkin: true,</span><br><span class="line">		autoBlur: false,</span><br><span class="line">		smoothPlayBar: true,</span><br><span class="line">		keyEnabled: true</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);*/</span><br><span class="line">        //4.对数据进行处理</span><br><span class="line">        //4.1 把html文件中的实体转化为用户可读的字符</span><br><span class="line">        String result = StringEscapeUtils.unescapeHtml(sb.toString());</span><br><span class="line">        //4.2 因为带有换行和制表符的字符串不利于后期处理，所以把字符串中的空白都消除掉</span><br><span class="line">        String s = result.replaceAll(&quot;\\s*&quot;, &quot;&quot;);</span><br><span class="line">        //4.3 根据规律截取目标字符串</span><br><span class="line">        String begin = &quot;cssSelectorAncestor:\&quot;#jp_container_1\&quot;&#125;,[&quot;;</span><br><span class="line">        String end = &quot;,&#123;swfPath:\&quot;js/j.swf\&quot;&quot;;</span><br><span class="line">        int start = s.indexOf(begin) + begin.length();</span><br><span class="line">        int finish = s.indexOf(end);</span><br><span class="line">        String substring = s.substring(start, finish-1);</span><br><span class="line"></span><br><span class="line">        //4.4 将目标字符串按照规律进行切分成一组数据</span><br><span class="line">        ArrayList&lt;HashMap&lt;String,String&gt;&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        String[] split = substring.split(&quot;,&#125;,&quot;);</span><br><span class="line">        for (String item:split</span><br><span class="line">             ) &#123;</span><br><span class="line"></span><br><span class="line">            String[] items = item.split(&quot;\&quot;&quot;);</span><br><span class="line">            //System.out.println(item);</span><br><span class="line">            HashMap&lt;String,String&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">            map.put(&quot;title&quot;,items[1]);</span><br><span class="line">            map.put(&quot;path&quot;,items[3]);</span><br><span class="line">            list.add(map);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(list);</span><br><span class="line">        //5 将处理结果中的声音资源下载到本地 TODO</span><br><span class="line">        //单个例子</span><br><span class="line">        //5.1 获取网络文件的地址</span><br><span class="line">        String path = list.get(0).get(&quot;path&quot;);//网络文件地址</span><br><span class="line">        System.out.println(path);</span><br><span class="line">        //5.2 创建网络资源对象</span><br><span class="line">        URL urlFile = new URL(path);</span><br><span class="line">        URLConnection fileConnect = urlFile.openConnection();</span><br><span class="line">        int contentLength = fileConnect.getContentLength();//文件总长度</span><br><span class="line">        int finishLength = 0;</span><br><span class="line">        //5.3 获取输入流，向内存存储数据	</span><br><span class="line">        InputStream inputStream = fileConnect.getInputStream();</span><br><span class="line"></span><br><span class="line">        byte[] fileBytes = new byte[2048*2048*100];//文件有点大，用个大点的数组，读取速度快</span><br><span class="line">        //5.4 创建本地文件，必须先创建目录，再创建文件，除非是单文件，创建过程中勿忘判断目录是否存在</span><br><span class="line">        File destDict = new File(&quot;D://buddhist_scripture&quot;);//先创建文件夹</span><br><span class="line">        if(!destDict.exists())&#123;</span><br><span class="line">            destDict.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        //</span><br><span class="line">        String filename = list.get(0).get(&quot;title&quot;);</span><br><span class="line">        File destFile = new File(destDict.getPath()+File.separator+filename+&quot;.m4a&quot;);</span><br><span class="line">        //5.5 创建内存连接到磁盘文件的流，因为要把内存数据写到磁盘上，所以是输出流</span><br><span class="line">        FileOutputStream fileOutputStream = new FileOutputStream(destFile);</span><br><span class="line">        System.out.println(&quot;保存到文件&quot;+destFile.getPath());</span><br><span class="line">        //开始边读边写</span><br><span class="line">        int len = 0;</span><br><span class="line">        while (-1 !=(len = inputStream.read(fileBytes))) &#123;</span><br><span class="line">            finishLength+=len;</span><br><span class="line">            fileOutputStream.write(fileBytes,0,len);</span><br><span class="line">            System.out.println(&quot;总大小：&quot;+contentLength+&quot;,已经下载：&quot;+finishLength+&quot;下载进度:&quot;+((float)finishLength/(float)contentLength)*100+&quot;%&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fileOutputStream.flush();</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">        System.out.println(&quot;下载完成&quot;);</span><br><span class="line">        //6 将最终结果连同本地文件路径持久化到数据库 TODO</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">	private static HashMap&lt;String, String&gt;[] resultList=list;</span><br><span class="line">    List&lt;HashMap&lt;String,String&gt;&gt; resultList=new List&lt;HashMap&lt;String, String&gt;&gt;(list);</span><br><span class="line">    static final String JDBC_DRIVER = &quot;com.mysql.cj.jdbc.Driver&quot;;</span><br><span class="line">    static final String DB_URL = &quot;jdbc:mysql://localhost:3306/fx_db(数据库名)?	useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC&quot;;</span><br><span class="line">    // 数据库的用户名与密码，需要根据自己的设置</span><br><span class="line">    static final String USER = &quot;root&quot;;//数据库用户名，默认是root</span><br><span class="line">    static final String PASS = &quot;&quot;;//数据库密码</span><br><span class="line">    public static void main(String[] args) throws ClassNotFoundException, SQLException &#123;</span><br><span class="line">        //1.注册数据库的驱动</span><br><span class="line">        Class.forName(JDBC_DRIVER);</span><br><span class="line">        //2.获取数据库连接（里面内容依次是：&quot;jdbc:mysql://主机名:端口号/数据库名&quot;,&quot;用户名&quot;,&quot;登录密码&quot;）</span><br><span class="line">        Connection connection = DriverManager.getConnection(DB_URL, USER, PASS);</span><br><span class="line">        //3.需要执行的sql语句（?是占位符，代表一个参数）</span><br><span class="line">        //String sql = &quot;insert into stu(id,name,age) values(?,?,?)&quot;;</span><br><span class="line">        String sql = &quot;insert into fx_audio(数据库表名) (id, name, path,create_time,type) values (?,?,?,?,?)&quot;;</span><br><span class="line">        //4.获取预处理对象，并依次给参数赋值</span><br><span class="line">        PreparedStatement stmt = connection.prepareStatement(sql);</span><br><span class="line">        for(HashMap&lt;String,String&gt; map:resultList)</span><br><span class="line">        &#123;</span><br><span class="line">            String uuid = UUID.randomUUID().toString().replaceAll(&quot;-&quot;,&quot;&quot;);</span><br><span class="line">            stmt.setString(1,uuid);</span><br><span class="line">            stmt.setString(2,map.get(&quot;name&quot;));</span><br><span class="line">            stmt.setString(3,map.get(&quot;path&quot;));</span><br><span class="line">            stmt.setDate(4,new java.sql.Date(new Date().getTime()));</span><br><span class="line">            stmt.setString(5,map.get(&quot;type&quot;));</span><br><span class="line">            stmt.executeUpdate();</span><br><span class="line">        &#125;</span><br><span class="line">              //5.执行sql语句（执行了几条记录，就返回几）</span><br><span class="line">        //int i = stmt.executeUpdate();</span><br><span class="line">              System.out.println(&quot;完成&quot;);</span><br><span class="line">               //6.关闭jdbc连接</span><br><span class="line">             stmt.close();</span><br><span class="line">               connection.close();</span><br><span class="line">           &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>稀疏矩阵的转置</title>
    <url>/2022/04/22/%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5%E7%9A%84%E8%BD%AC%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="1-稀疏矩阵的转置"><a href="#1-稀疏矩阵的转置" class="headerlink" title="1.稀疏矩阵的转置"></a>1.稀疏矩阵的转置</h3><p>方法一</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#define MAXSIZE 50</span><br><span class="line">#define MAXRC 10</span><br><span class="line">//三元组结构体</span><br><span class="line">typedef struct&#123;</span><br><span class="line">    //所在行数，列数</span><br><span class="line">    int i,j;</span><br><span class="line">    //值</span><br><span class="line">    int e;</span><br><span class="line">&#125;triple;</span><br><span class="line">//存储矩阵的三元组顺序表</span><br><span class="line">typedef struct&#123;</span><br><span class="line">    //存储数据</span><br><span class="line">    triple data[MAXSIZE + 1];</span><br><span class="line">    //存储矩阵的行数，列数和非 0 元的个数</span><br><span class="line">    int mu,nu,tu;</span><br><span class="line">&#125;TSMatrix;</span><br><span class="line">//初始化三元组顺序表</span><br><span class="line">TSMatrix tcreate(int m,int n,int t)&#123;</span><br><span class="line">    TSMatrix M;</span><br><span class="line">    int k;</span><br><span class="line">    M.mu = m;</span><br><span class="line">    M.nu = n;</span><br><span class="line">    M.tu = t;</span><br><span class="line">    printf(&quot;input %d data&quot;,M.tu);</span><br><span class="line">    printf(&quot;i j e &quot;);</span><br><span class="line">    for(k=1;k&lt;=M.tu;k++)&#123;</span><br><span class="line">        scanf(&quot;%d%d%d&quot;,&amp;M.data[k].i,&amp;M.data[k].j,&amp;M.data[k].e);</span><br><span class="line">    &#125;</span><br><span class="line">    return M;</span><br><span class="line">&#125;</span><br><span class="line">//输出矩阵 M 的函数，以二维的格式呈现</span><br><span class="line">void printt(TSMatrix M)&#123;</span><br><span class="line">    int i,j,k=1;</span><br><span class="line">    //输出矩阵的每一行</span><br><span class="line">    for(i=0;i&lt;M.mu;i++)&#123;</span><br><span class="line">        printf(&quot;\n&quot;);</span><br><span class="line">        //输出矩阵的每一列</span><br><span class="line">        for(j=0;j&lt;M.nu;j++)&#123;</span><br><span class="line">            //判断矩阵中是否有非 0 元存在</span><br><span class="line">            if(k&gt;M.tu)&#123;</span><br><span class="line">                printf(&quot;%3d&quot;,0);</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;</span><br><span class="line">                //如果对应位置为非 0 元，则输出</span><br><span class="line">                if((i==M.data[k].i) &amp;&amp; (j == M.data[k].j))&#123;</span><br><span class="line">                    printf(&quot;%3d&quot;,M.data[k].e);</span><br><span class="line">                    k++;</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    //否输出 0</span><br><span class="line">                    printf(&quot;%3d&quot;,0);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">//矩阵的转置函数</span><br><span class="line">TSMatrix transpose(TSMatrix a)&#123;</span><br><span class="line">    TSMatrix b;</span><br><span class="line">    int col,p,q;</span><br><span class="line">    //将矩阵 a 存储的行数、列数和非0 元个数赋值给转置矩阵 b</span><br><span class="line">    b.mu=a.nu;</span><br><span class="line">    b.nu=a.mu;</span><br><span class="line">    b.tu=a.tu;</span><br><span class="line">    //如果存在非 0 元，则逐个对其进行转置</span><br><span class="line">    if(b.tu)&#123;</span><br><span class="line">        q = 1;</span><br><span class="line">        //从列依次遍历</span><br><span class="line">        for(col=0;col&lt;a.nu;col++)&#123;</span><br><span class="line">            for(p=1;p&lt;=a.tu;p++)&#123;</span><br><span class="line">                if(a.data[p].j == col)&#123;</span><br><span class="line">                    b.data[q].i=a.data[p].j;</span><br><span class="line">                    b.data[q].j=a.data[p].i;</span><br><span class="line">                    b.data[q].e=a.data[p].e;</span><br><span class="line">                    q++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return b;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int m,n,t;</span><br><span class="line">    TSMatrix E,F;</span><br><span class="line">    printf(&quot;input m,n,t:\n&quot;);</span><br><span class="line">    scanf(&quot;%d%d%d&quot;,&amp;m,&amp;n,&amp;t);</span><br><span class="line">    E = tcreate(m,n,t);</span><br><span class="line">    printt(E);</span><br><span class="line">    F = transpose(E);</span><br><span class="line">    printt(F);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.方法二</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#define MAXSIZE 50</span><br><span class="line">#define MAXRC 10</span><br><span class="line">//三元组结构体</span><br><span class="line">typedef struct&#123;</span><br><span class="line">    //所在行数，列数</span><br><span class="line">    int i,j;</span><br><span class="line">    //值</span><br><span class="line">    int e;</span><br><span class="line">&#125;triple;</span><br><span class="line">//存储矩阵的三元组顺序表</span><br><span class="line">typedef struct&#123;</span><br><span class="line">    //存储数据</span><br><span class="line">    triple data[MAXSIZE + 1];</span><br><span class="line">    //存储矩阵的行数，列数和非 0 元的个数</span><br><span class="line">    int mu,nu,tu;</span><br><span class="line">&#125;TSMatrix;</span><br><span class="line">//初始化三元组顺序表</span><br><span class="line">TSMatrix tcreate(int m,int n,int t)&#123;</span><br><span class="line">    TSMatrix M;</span><br><span class="line">    int k;</span><br><span class="line">    M.mu = m;</span><br><span class="line">    M.nu = n;</span><br><span class="line">    M.tu = t;</span><br><span class="line">    printf(&quot;input %d data&quot;,M.tu);</span><br><span class="line">    printf(&quot;i j e \n&quot;);</span><br><span class="line">    for(k=1;k&lt;=M.tu;k++)&#123;</span><br><span class="line">        scanf(&quot;%d%d%d&quot;,&amp;M.data[k].i,&amp;M.data[k].j,&amp;M.data[k].e);</span><br><span class="line">    &#125;</span><br><span class="line">    return M;</span><br><span class="line">&#125;</span><br><span class="line">//输出矩阵 M 的函数，以二维的格式呈现</span><br><span class="line">void printt(TSMatrix M)&#123;</span><br><span class="line">    int i,j,k=1;</span><br><span class="line">    //输出矩阵的每一行</span><br><span class="line">    for(i=0;i&lt;M.mu;i++)&#123;</span><br><span class="line">        printf(&quot;\n&quot;);</span><br><span class="line">        //输出矩阵的每一列</span><br><span class="line">        for(j=0;j&lt;M.nu;j++)&#123;</span><br><span class="line">            //判断矩阵中是否有非 0 元存在</span><br><span class="line">            if(k&gt;M.tu)&#123;</span><br><span class="line">                printf(&quot;%3d&quot;,0);</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;</span><br><span class="line">                //如果对应位置为非 0 元，则输出</span><br><span class="line">                if((i==M.data[k].i) &amp;&amp; (j == M.data[k].j))&#123;</span><br><span class="line">                    printf(&quot;%3d&quot;,M.data[k].e);</span><br><span class="line">                    k++;</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    //否输出 0</span><br><span class="line">                    printf(&quot;%3d&quot;,0);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">//矩阵的转置函数</span><br><span class="line">TSMatrix fasttrans(TSMatrix a)&#123;</span><br><span class="line">    TSMatrix b;</span><br><span class="line">    int col,p,q,t;</span><br><span class="line">    int num[MAXSIZE];</span><br><span class="line">    int cpot[MAXSIZE];</span><br><span class="line">    //转置行数、列数和非 0 元个数</span><br><span class="line">    b.mu = a.nu;</span><br><span class="line">    b.nu = a.mu;</span><br><span class="line">    b.tu = a.tu;</span><br><span class="line">    //如果存在非 0 元</span><br><span class="line">    if(b.tu)&#123;</span><br><span class="line">        //num数组全置为 0</span><br><span class="line">        for(col = 0;col&lt;a.nu;col++)&#123;</span><br><span class="line">            num[col] = 0;</span><br><span class="line">        &#125;</span><br><span class="line">        //根据矩阵 a ，对num数组进行初始化</span><br><span class="line">        for(t=1;t&lt;=a.tu;t++)&#123;</span><br><span class="line">            num[a.data[t].j]++;</span><br><span class="line">        &#125;</span><br><span class="line">        //初始化cpot数组</span><br><span class="line">        cpot[0]=1;</span><br><span class="line">        for(col=1;col&lt;a.nu;col++)&#123;</span><br><span class="line">            cpot[col] = cpot[col-1]+num[col-1];</span><br><span class="line">        &#125;</span><br><span class="line">        //结束num和cpot，对矩阵 a 进行转置</span><br><span class="line">        for(p=1;p&lt;=a.tu;p++)&#123;</span><br><span class="line">            col =a.data[p].j;</span><br><span class="line">            q = cpot[col];</span><br><span class="line">            b.data[q].i = a.data[p].j;</span><br><span class="line">            b.data[q].j = a.data[p].i;</span><br><span class="line">            b.data[q].e = a.data[p].e;</span><br><span class="line">            cpot[col]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return b;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int m,n,t;</span><br><span class="line">    TSMatrix E,F;</span><br><span class="line">    printf(&quot;input m,n,t:\n&quot;);</span><br><span class="line">    scanf(&quot;%d%d%d&quot;,&amp;m,&amp;n,&amp;t);</span><br><span class="line">    E = tcreate(m,n,t);</span><br><span class="line">    printt(E);</span><br><span class="line">    F = fasttrans(E);</span><br><span class="line">    printt(F);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.快速转制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//实现快速转置算法的函数</span><br><span class="line">TSMatrix fastTransposeMatrix(TSMatrix M,TSMatrix T)&#123;</span><br><span class="line">    //第1步：行和列置换</span><br><span class="line">    T.m=M.n;</span><br><span class="line">    T.n=M.m;</span><br><span class="line">    T.num=M.num;</span><br><span class="line">    if (T.num) &#123;</span><br><span class="line">        //计算array数组</span><br><span class="line">        int array[number];</span><br><span class="line">        for (int col=1; col&lt;=M.m; col++) &#123;</span><br><span class="line">            array[col]=0;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int t=0; t&lt;M.num; t++) &#123;</span><br><span class="line">            int j=M.data[t].j;</span><br><span class="line">            array[j]++;</span><br><span class="line">        &#125;</span><br><span class="line">        //创建并初始化cpot数组</span><br><span class="line">        int cpot[T.m+1];</span><br><span class="line">        cpot[1]=1;//第一列中第一个非0元素的位置默认为1</span><br><span class="line">        for (int col=2; col&lt;=M.m; col++) &#123;</span><br><span class="line">            cpot[col]=cpot[col-1]+array[col-1];</span><br><span class="line">        &#125;</span><br><span class="line">        //遍历一次即可实现三元组表的转置</span><br><span class="line">        for (int p=0; p&lt;M.num; p++) &#123;</span><br><span class="line">            //提取当前三元组的列数</span><br><span class="line">            int col=M.data[p].j;</span><br><span class="line">            //根据列数和cpot数组，找到当前元素需要存放的位置</span><br><span class="line">            int q=cpot[col];</span><br><span class="line">            //转置矩阵的三元组默认从数组下标0开始，而得到的q值是单纯的位置，所以要减1</span><br><span class="line">            T.data[q-1].i=M.data[p].j;</span><br><span class="line">            T.data[q-1].j=M.data[p].i;</span><br><span class="line">            T.data[q-1].data=M.data[p].data;</span><br><span class="line">            //存放完成后，cpot数组对应的位置要+1，以便下次该列存储下一个三元组</span><br><span class="line">            cpot[col]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>简单vue的table页面</title>
    <url>/2023/03/11/%E7%AE%80%E5%8D%95vue%E7%9A%84table%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<h2 id="简单vue的table页面"><a href="#简单vue的table页面" class="headerlink" title="简单vue的table页面."></a>简单vue的table页面.</h2><p>cdn顺序很重要</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">        &lt;title&gt;aaa&lt;/title&gt;</span><br><span class="line">        &lt;!-- 引入 ElementUI 样式 --&gt;</span><br><span class="line">        &lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/element-ui/lib/theme-chalk/index.css&quot;&gt;</span><br><span class="line">        &lt;!-- 引入 Vue --&gt;</span><br><span class="line">        &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;!-- 引入组件库 --&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/element-ui/lib/index.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;/head&gt;</span><br></pre></td></tr></table></figure>

<p>html,cdn vue,element模板</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;测试&lt;/title&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">        &lt;!-- 引入 ElementUI 样式 --&gt;</span><br><span class="line">        &lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/element-ui/lib/theme-chalk/index.css&quot;&gt;</span><br><span class="line">        &lt;!-- 引入 Vue --&gt;</span><br><span class="line">        &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;!-- 引入组件库 --&gt;</span><br><span class="line">        &lt;script src=&quot;https://unpkg.com/element-ui/lib/index.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">      &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        </span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: &#x27;#app&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;) </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>table代码生成链接:<a href="http://43.143.130.161:8085/">http://43.143.130.161:8085/</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;aaa&lt;/title&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/element-ui/lib/theme-chalk/index.css&quot;/&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;!-- 引入组件库 --&gt;</span><br><span class="line">    &lt;script src=&quot;https://unpkg.com/element-ui/lib/index.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- Dashboard Wrapper Start --&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 表格前的按钮 --&gt;</span><br><span class="line">    &lt;div style=&quot;display: flex;&quot;&gt;</span><br><span class="line">      &lt;el-input v-model=&quot;query.name&quot; placeholder=&quot;请输入编号&quot; style=&quot;width: 300px;&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">      &lt;el-button type=&quot;primary&quot; style=&quot;margin-right: 20px; background-color: #409EFF; border-color:#409EFF;&quot; @click=&quot;handleSearch()&quot;&gt;搜索&lt;/el-button&gt;</span><br><span class="line">      &lt;el-button type=&quot;primary&quot; style=&quot;margin-right: 20px; background-color: #409EFF; border-color:#409EFF;&quot; @click=&quot;cleanSearch()&quot;&gt;重置搜索&lt;/el-button&gt;</span><br><span class="line">      &lt;el-button type=&quot;primary&quot; style=&quot;margin-right: 20px; background-color: #409EFF; border-color:#409EFF;&quot; @click=&quot;handleAdd()&quot;&gt;添加&lt;/el-button&gt;    &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">      </span><br><span class="line">    &lt;!-- 表格 --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;el-table</span><br><span class="line">      :data=&quot;tableData&quot;</span><br><span class="line">      stripe</span><br><span class="line">      style=&quot;width: 100%&quot;&gt;</span><br><span class="line">      &lt;el-table-column</span><br><span class="line">        prop=&quot;id&quot;</span><br><span class="line">        label=&quot;ID&quot;</span><br><span class="line">        width=&quot;50&quot;&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">&lt;el-table-column</span><br><span class="line">        prop=&quot;element1&quot;</span><br><span class="line">        label=&quot;编号&quot;</span><br><span class="line">        &gt;</span><br><span class="line">      &lt;/el-table-column&gt;&lt;el-table-column</span><br><span class="line">        prop=&quot;element2&quot;</span><br><span class="line">        label=&quot;姓名&quot;</span><br><span class="line">        &gt;</span><br><span class="line">      &lt;/el-table-column&gt;&lt;el-table-column</span><br><span class="line">        prop=&quot;element3&quot;</span><br><span class="line">        label=&quot;手机号&quot;</span><br><span class="line">        &gt;</span><br><span class="line">      &lt;/el-table-column&gt;&lt;el-table-column</span><br><span class="line">        prop=&quot;element4&quot;</span><br><span class="line">        label=&quot;地址&quot;</span><br><span class="line">        &gt;</span><br><span class="line">      &lt;/el-table-column&gt;&lt;el-table-column</span><br><span class="line">        prop=&quot;element5&quot;</span><br><span class="line">        label=&quot;车牌号&quot;</span><br><span class="line">        &gt;</span><br><span class="line">      &lt;/el-table-column&gt;      </span><br><span class="line">      &lt;el-table-column label=&quot;操作&quot; width=&quot;180&quot;&gt;</span><br><span class="line">        &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">            &lt;el-button</span><br><span class="line">                    type=&quot;text&quot;</span><br><span class="line">                    @click=&quot;handleEdit(scope.$index, scope.row)&quot;</span><br><span class="line">            &gt;编辑&lt;/el-button&gt;</span><br><span class="line">            &lt;el-button</span><br><span class="line">                    type=&quot;text&quot;</span><br><span class="line">                    @click=&quot;handleDelete(scope.$index, scope.row)&quot;</span><br><span class="line">            &gt;删除&lt;/el-button&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">    &lt;/el-table-column&gt;</span><br><span class="line">    &lt;/el-table&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 编辑弹出框 --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;el-dialog title=&quot;编辑&quot; :visible.sync=&quot;editVisible&quot; width=&quot;30%&quot;&gt;</span><br><span class="line">          &lt;el-form ref=&quot;form&quot; :model=&quot;form&quot; label-width=&quot;70px&quot;&gt;</span><br><span class="line">&lt;el-form-item label=&quot;编号&quot;&gt;</span><br><span class="line">                  &lt;el-input v-model=&quot;form.element1&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">              &lt;/el-form-item&gt;&lt;el-form-item label=&quot;姓名&quot;&gt;</span><br><span class="line">                  &lt;el-input v-model=&quot;form.element2&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">              &lt;/el-form-item&gt;&lt;el-form-item label=&quot;手机号&quot;&gt;</span><br><span class="line">                  &lt;el-input v-model=&quot;form.element3&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">              &lt;/el-form-item&gt;&lt;el-form-item label=&quot;地址&quot;&gt;</span><br><span class="line">                  &lt;el-input v-model=&quot;form.element4&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">              &lt;/el-form-item&gt;&lt;el-form-item label=&quot;车牌号&quot;&gt;</span><br><span class="line">                  &lt;el-input v-model=&quot;form.element5&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">              &lt;/el-form-item&gt;              </span><br><span class="line">          &lt;/el-form&gt;</span><br><span class="line">          &lt;span slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;</span><br><span class="line">              &lt;el-button @click=&quot;editVisible = false&quot;&gt;取 消&lt;/el-button&gt;</span><br><span class="line">              &lt;el-button type=&quot;primary&quot; @click=&quot;saveEdit&quot;&gt;确 定&lt;/el-button&gt;</span><br><span class="line">          &lt;/span&gt;</span><br><span class="line">      &lt;/el-dialog&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 添加弹出框 --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;el-dialog title=&quot;添加&quot; :visible.sync=&quot;addVisible&quot; width=&quot;30%&quot;&gt;</span><br><span class="line">        &lt;el-form ref=&quot;form&quot; :model=&quot;addform&quot; label-width=&quot;70px&quot;&gt;</span><br><span class="line">&lt;el-form-item label=&quot;编号&quot;&gt;</span><br><span class="line">                &lt;el-input v-model=&quot;addform.element1&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">            &lt;/el-form-item&gt;&lt;el-form-item label=&quot;姓名&quot;&gt;</span><br><span class="line">                &lt;el-input v-model=&quot;addform.element2&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">            &lt;/el-form-item&gt;&lt;el-form-item label=&quot;手机号&quot;&gt;</span><br><span class="line">                &lt;el-input v-model=&quot;addform.element3&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">            &lt;/el-form-item&gt;&lt;el-form-item label=&quot;地址&quot;&gt;</span><br><span class="line">                &lt;el-input v-model=&quot;addform.element4&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">            &lt;/el-form-item&gt;&lt;el-form-item label=&quot;车牌号&quot;&gt;</span><br><span class="line">                &lt;el-input v-model=&quot;addform.element5&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">            &lt;/el-form-item&gt;           </span><br><span class="line">        &lt;/el-form&gt;</span><br><span class="line">        &lt;span slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;</span><br><span class="line">            &lt;el-button @click=&quot;addVisible = false&quot;&gt;取 消&lt;/el-button&gt;</span><br><span class="line">            &lt;el-button type=&quot;primary&quot; @click=&quot;saveAdd&quot;&gt;确 定&lt;/el-button&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">    &lt;/el-dialog&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 分页 --&gt;</span><br><span class="line">    &lt;div style=&quot;margin-left: 80%;margin-top: 50px;&quot;&gt;</span><br><span class="line">      &lt;el-pagination</span><br><span class="line">              background</span><br><span class="line">              layout=&quot;total, prev, pager, next&quot;</span><br><span class="line">              :current-page=&quot;query.pageIndex&quot;</span><br><span class="line">              :page-size=&quot;query.pageSize&quot;</span><br><span class="line">              :total=&quot;pageTotal&quot;</span><br><span class="line">              @current-change=&quot;handlePageChange&quot;</span><br><span class="line">      &gt;&lt;/el-pagination&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &#x27;#app&#x27;,</span><br><span class="line">        data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          tableData: [           &#123;</span><br><span class="line">            id: 1,</span><br><span class="line">            element1: &#x27;001&#x27;,</span><br><span class="line">            element2: &#x27;刘明&#x27;,</span><br><span class="line">            element3: &#x27;15166526477&#x27;,</span><br><span class="line">            element4: &#x27;山东省德州市陵城区和谐庄园B17一单元202&#x27;,</span><br><span class="line">            element5: &#x27;鲁A89665&#x27;,</span><br><span class="line">          &#125;,&#123;</span><br><span class="line">            id: 2,</span><br><span class="line">            element1: &#x27;002&#x27;,</span><br><span class="line">            element2: &#x27;陈洋&#x27;,</span><br><span class="line">            element3: &#x27;15162028138&#x27;,</span><br><span class="line">            element4: &#x27;山东省菏泽市曹县苏集镇祝楼行政村祝楼村313号&#x27;,</span><br><span class="line">            element5: &#x27;鲁A29411&#x27;,</span><br><span class="line">          &#125;,&#123;</span><br><span class="line">            id: 3,</span><br><span class="line">            element1: &#x27;003&#x27;,</span><br><span class="line">            element2: &#x27;秦正杰&#x27;,</span><br><span class="line">            element3: &#x27;15269067001&#x27;,</span><br><span class="line">            element4: &#x27;山东省菏泽市牡丹区沙土镇芦村行政村刘庄&#x27;,</span><br><span class="line">            element5: &#x27;鲁A49571&#x27;,</span><br><span class="line">          &#125;,&#123;</span><br><span class="line">            id: 4,</span><br><span class="line">            element1: &#x27;004&#x27;,</span><br><span class="line">            element2: &#x27;王伟业&#x27;,</span><br><span class="line">            element3: &#x27;18953384698&#x27;,</span><br><span class="line">            element4: &#x27;山东省威海市火炬高技术产业开发区凤凰城2号601室&#x27;,</span><br><span class="line">            element5: &#x27;鲁A71847&#x27;,</span><br><span class="line">          &#125;,&#123;</span><br><span class="line">            id: 5,</span><br><span class="line">            element1: &#x27;005&#x27;,</span><br><span class="line">            element2: &#x27;王涛&#x27;,</span><br><span class="line">            element3: &#x27;13678886406&#x27;,</span><br><span class="line">            element4: &#x27;山东省菏泽市巨野县独山镇韩庄行政村韩庄村104号&#x27;,</span><br><span class="line">            element5: &#x27;鲁A07371&#x27;,</span><br><span class="line">          &#125;,&#123;</span><br><span class="line">            id: 6,</span><br><span class="line">            element1: &#x27;006&#x27;,</span><br><span class="line">            element2: &#x27;王志杰&#x27;,</span><br><span class="line">            element3: &#x27;15069874051&#x27;,</span><br><span class="line">            element4: &#x27;山东省昌邑市奎聚路东怡和花园B6号楼东一单元502&#x27;,</span><br><span class="line">            element5: &#x27;鲁A44648&#x27;,</span><br><span class="line">          &#125;,&#123;</span><br><span class="line">            id: 7,</span><br><span class="line">            element1: &#x27;007&#x27;,</span><br><span class="line">            element2: &#x27;保忠甲&#x27;,</span><br><span class="line">            element3: &#x27;13406076911&#x27;,</span><br><span class="line">            element4: &#x27;山东省莱阳市照旺庄镇西五龙村285号&#x27;,</span><br><span class="line">            element5: &#x27;鲁A09993&#x27;,</span><br><span class="line">          &#125;],</span><br><span class="line">          query: &#123;</span><br><span class="line">                    address: &#x27;&#x27;,</span><br><span class="line">                    name: &#x27;&#x27;,</span><br><span class="line">                    pageIndex: 1,</span><br><span class="line">                    pageSize: 10,</span><br><span class="line">                    state:&#x27;&#x27;</span><br><span class="line">                &#125;,</span><br><span class="line">          table:[],</span><br><span class="line">          seach:[],</span><br><span class="line">          multipleSelection: [],</span><br><span class="line">          delList: [],</span><br><span class="line">          editVisible: false,</span><br><span class="line">          addVisible: false,</span><br><span class="line">          pageTotal: 0,</span><br><span class="line">          form: &#123;&#125;,</span><br><span class="line">          addform: &#123;&#125;,</span><br><span class="line">          idx: -1,</span><br><span class="line">          id: -1,</span><br><span class="line">          num:&#x27;&#x27;,</span><br><span class="line">          value:&#x27;&#x27;,</span><br><span class="line">          selectarr:[]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      created() &#123;</span><br><span class="line">            this.getData();</span><br><span class="line">        &#125;,</span><br><span class="line">      </span><br><span class="line">      methods: &#123;</span><br><span class="line">            // 获取数据</span><br><span class="line">            getData() &#123;</span><br><span class="line">                this.table=this.tableData</span><br><span class="line">                this.pageTotal = 50;</span><br><span class="line">                this.num=this.tableData.length</span><br><span class="line">            &#125;,</span><br><span class="line">            // 触发搜索按钮</span><br><span class="line">            handleSearch() &#123;</span><br><span class="line">              </span><br><span class="line">                for (let i=0;i&lt;this.num;i++)&#123;</span><br><span class="line">                    if(this.tableData[i].element1===this.query.name)</span><br><span class="line">                    &#123;</span><br><span class="line">                        this.seach.push(this.tableData[i])</span><br><span class="line">                        this.tableData=this.seach</span><br><span class="line">                        this.seach=null</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            // 触发重置按钮</span><br><span class="line">            cleanSearch() &#123;</span><br><span class="line">              this.tableData=this.table</span><br><span class="line">            &#125;,</span><br><span class="line">           </span><br><span class="line">            // 删除操作</span><br><span class="line">            handleDelete(index, row) &#123;</span><br><span class="line">                // 二次确认删除</span><br><span class="line">                this.$confirm(&#x27;确定要删除吗？&#x27;, &#x27;提示&#x27;, &#123;</span><br><span class="line">                    type: &#x27;warning&#x27;</span><br><span class="line">                &#125;)</span><br><span class="line">                    .then(() =&gt; &#123;</span><br><span class="line">                        this.$message.success(&#x27;删除成功&#x27;);</span><br><span class="line">                        this.tableData.splice(index, 1);</span><br><span class="line">                        this.pageTotal=this.pageTotal-1;</span><br><span class="line">                    &#125;)</span><br><span class="line">                    .catch(() =&gt; &#123;&#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            // 编辑操作</span><br><span class="line">            handleEdit(index, row) &#123;</span><br><span class="line">                this.idx = index;</span><br><span class="line">                this.form = row;</span><br><span class="line">                this.editVisible = true;</span><br><span class="line">            &#125;,</span><br><span class="line">            handleAdd() &#123;</span><br><span class="line">                this.addVisible = true;</span><br><span class="line">            &#125;,</span><br><span class="line">            // 保存编辑</span><br><span class="line">            saveEdit() &#123;</span><br><span class="line">                this.editVisible = false;</span><br><span class="line">                this.$message.success(`修改第 $&#123;this.idx + 1&#125; 行成功`);</span><br><span class="line">                this.$set(this.tableData, this.idx, this.form);</span><br><span class="line">            &#125;,</span><br><span class="line">            // 保存添加</span><br><span class="line">            saveAdd() &#123;</span><br><span class="line">                this.addVisible = false;</span><br><span class="line">                this.addform.id=this.num+1;</span><br><span class="line">                this.tableData.push(this.addform)</span><br><span class="line">                this.$message.success(`添加成功`);</span><br><span class="line">                this.pageTotal=this.pageTotal+1;</span><br><span class="line">            &#125;,</span><br><span class="line">            // 分页导航</span><br><span class="line">            handlePageChange(val) &#123;</span><br><span class="line">                this.$set(this.query, &#x27;pageIndex&#x27;, val);</span><br><span class="line">                this.getData();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>简单注册页面</title>
    <url>/2023/03/11/%E7%AE%80%E5%8D%95%E6%B3%A8%E5%86%8C%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<h2 id="注册页面"><a href="#注册页面" class="headerlink" title="注册页面"></a>注册页面</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;个人注册&lt;/title&gt;</span><br><span class="line">    &lt;!-- 引入我们初始化的css --&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;css/base.css&quot;&gt;</span><br><span class="line">    &lt;!-- 引入我们自己的注册页面的css --&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;css/register.css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;w&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=&quot;registerarea&quot;&gt;</span><br><span class="line">            &lt;h3&gt;注册新用户</span><br><span class="line">                &lt;div class=&quot;login&quot;&gt;我有账号，去&lt;a href=&quot;#&quot;&gt;登陆&lt;/a&gt;&lt;/div&gt;</span><br><span class="line">            &lt;/h3&gt;</span><br><span class="line">            &lt;div class=&quot;reg_form&quot;&gt;</span><br><span class="line">                &lt;form action=&quot;&quot;&gt;</span><br><span class="line">                    &lt;ul&gt;</span><br><span class="line">                        &lt;li&gt;&lt;label for=&quot;&quot;&gt;手机号：&lt;/label&gt; &lt;input type=&quot;text&quot; class=&quot;inp&quot; id=&quot;tel&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">                        &lt;li&gt;&lt;label for=&quot;&quot;&gt;短信验证码：&lt;/label&gt; &lt;input type=&quot;text&quot; class=&quot;inp&quot; id=&quot;msg&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">                        &lt;li&gt;&lt;label for=&quot;&quot;&gt;昵称：&lt;/label&gt; &lt;input type=&quot;text&quot; class=&quot;inp&quot; id=&quot;nc&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">                        &lt;li&gt;&lt;label for=&quot;chen&quot;&gt;登录密码：&lt;/label&gt; &lt;input type=&quot;password&quot; class=&quot;inp&quot; id=&quot;mima1&quot;&gt;</span><br><span class="line">                            &lt;span class=&quot;message&quot; id=&quot;span1&quot;&gt;  请输入6—16位密码（可包含数字 字母 下划线） &lt;/span&gt;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">                        &lt;li class=&quot;safe&quot;&gt;安全程度 &lt;em class=&quot;ruo1&quot;&gt;弱&lt;/em&gt; &lt;em class=&quot;zhong2&quot;&gt;中&lt;/em&gt; &lt;em class=&quot;qiang3&quot;&gt;强&lt;/em&gt; &lt;/li&gt;</span><br><span class="line">                        &lt;li&gt;&lt;label for=&quot;&quot;&gt;确认密码：&lt;/label&gt; &lt;input type=&quot;password&quot; class=&quot;inp&quot; id=&quot;mima2&quot;&gt;</span><br><span class="line">                            &lt;span class=&quot;message&quot; id=&quot;span2&quot;&gt;  &lt;/span&gt;&lt;/li&gt;</span><br><span class="line">                        &lt;li&gt;&lt;label for=&quot;&quot;&gt;验证码：&lt;/label&gt; &lt;input type=&quot;text&quot; class=&quot;inp&quot; id=&quot;inputRandom&quot;&gt;</span><br><span class="line">                            &lt;label id=&quot;autoRandom&quot; value=&quot;&quot;&gt;&lt;/label&gt;</span><br><span class="line">                            &lt;INPUT TYPE=&quot;button&quot; class=&quot;testma&quot; VALUE=&quot;获取验证码&quot; ONCLICK=&quot;autoRandom.innerHTML=createCode(5)&quot;&gt;</span><br><span class="line"></span><br><span class="line">                            &lt;input type=&quot;button&quot; value=&quot;验证&quot; onclick=&quot;test()&quot;&gt;</span><br><span class="line">                        &lt;/li&gt;</span><br><span class="line">                        &lt;li class=&quot;chen&quot; id=&quot;yanzheng&quot;&gt; &lt;/li&gt;</span><br><span class="line">                        &lt;li class=&quot;agree&quot;&gt;&lt;input type=&quot;checkbox&quot; name=&quot;&quot; id=&quot;&quot;&gt; 同意协议并注册 &lt;a href=&quot;#&quot;&gt;《知晓用户协议》&lt;/a&gt;</span><br><span class="line">                        &lt;/li&gt;</span><br><span class="line">                        &lt;li&gt;</span><br><span class="line">                            &lt;input type=&quot;submit&quot; value=&quot;完成注册&quot; class=&quot;btn&quot;&gt;</span><br><span class="line">                        &lt;/li&gt;</span><br><span class="line">                    &lt;/ul&gt;</span><br><span class="line">                &lt;/form&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        window.onload = function() &#123;</span><br><span class="line">            var regtel = /^1\d&#123;10&#125;$/;</span><br><span class="line">            var regnc = /^[\u4e00-\u9fa5]&#123;2,8&#125;$/;</span><br><span class="line">            var regmsg = /^\d&#123;6&#125;$/;</span><br><span class="line">            var regpwd = /^[a-zA-Z0-9_-]&#123;6,16&#125;$/;</span><br><span class="line">            var tel = document.querySelector(&#x27;#tel&#x27;);</span><br><span class="line">            var nc = document.querySelector(&#x27;#nc&#x27;);</span><br><span class="line">            var msg = document.querySelector(&#x27;#msg&#x27;);</span><br><span class="line"></span><br><span class="line">            var surepwd = document.querySelector(&#x27;#mima2&#x27;);</span><br><span class="line">            regexp(tel, regtel);</span><br><span class="line">            regexp(nc, regnc);</span><br><span class="line">            regexp(msg, regmsg);</span><br><span class="line"></span><br><span class="line">            function regexp(ele, reg) &#123;</span><br><span class="line">                ele.onblur = function() &#123;</span><br><span class="line">                    if (reg.test(this.value)) &#123;</span><br><span class="line"></span><br><span class="line">                        this.nextElementSibling.className = &#x27;success&#x27;;</span><br><span class="line">                        this.nextElementSibling.innerHTML = &#x27;恭喜您输入正确&#x27;;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line"></span><br><span class="line">                        this.nextElementSibling.className = &#x27;error&#x27;;</span><br><span class="line">                        this.nextElementSibling.innerHTML = &#x27;格式不正确，请从新输入 &#x27;;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            surepwd.onblur = function() &#123;</span><br><span class="line">                if (this.value.length == 0) &#123;</span><br><span class="line">                    this.nextElementSibling.className = &#x27;error&#x27;;</span><br><span class="line">                    this.nextElementSibling = &#x27;不能为空&#x27;;</span><br><span class="line">                &#125; else if (this.value == pwd.value) &#123;</span><br><span class="line">                    this.nextElementSibling.className = &#x27;success&#x27;;</span><br><span class="line">                    this.nextElementSibling.innerHTML = &#x27; 恭喜您输入正确&#x27;;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    this.nextElementSibling.className = &#x27;error&#x27;;</span><br><span class="line">                    this.nextElementSibling.innerHTML = &#x27; 两次密码输入不一致&#x27;;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        var regpwd = /^[a-zA-Z0-9_-]&#123;6,16&#125;$/;</span><br><span class="line">        var pwd = document.querySelector(&#x27;#mima1&#x27;);</span><br><span class="line">        var aaa = document.querySelector(&#x27;.ruo1&#x27;);</span><br><span class="line">        var bbb = document.querySelector(&#x27;.zhong2&#x27;);</span><br><span class="line">        var ccc = document.querySelector(&#x27;.qiang3&#x27;);</span><br><span class="line">        var ruo = /^\d&#123;6,16&#125;$/;</span><br><span class="line">        var zhong = /^[\da-z]&#123;6,16&#125;$/;</span><br><span class="line">        var qiang = /^[\d\w]&#123;6,16&#125;$/;</span><br><span class="line">        pwd.onblur = function() &#123;</span><br><span class="line">            if (!regpwd.test(this.value)) &#123;</span><br><span class="line">                this.nextElementSibling.className = &#x27;error&#x27;;</span><br><span class="line">                this.nextElementSibling.innerHTML = &#x27;格式不正确，请从新输入 &#x27;;</span><br><span class="line">            &#125; else if (ruo.test(this.value)) &#123;</span><br><span class="line">                aaa.className = &#x27;ruo&#x27;;</span><br><span class="line">                this.nextElementSibling.className = &#x27;success&#x27;;</span><br><span class="line">                this.nextElementSibling.innerHTML = &#x27;恭喜您输入正确&#x27;;</span><br><span class="line">            &#125; else if (zhong.test(this.value)) &#123;</span><br><span class="line">                aaa.className = &#x27;ruo&#x27;;</span><br><span class="line">                bbb.className = &#x27;zhong&#x27;;</span><br><span class="line">                this.nextElementSibling.className = &#x27;success&#x27;;</span><br><span class="line">                this.nextElementSibling.innerHTML = &#x27;恭喜您输入正确&#x27;;</span><br><span class="line">            &#125; else if (qiang.test(this.value)) &#123;</span><br><span class="line">                aaa.className = &#x27;ruo&#x27;;</span><br><span class="line">                bbb.className = &#x27;zhong&#x27;;</span><br><span class="line">                ccc.className = &#x27;qiang&#x27;;</span><br><span class="line">                this.nextElementSibling.className = &#x27;success&#x27;;</span><br><span class="line">                this.nextElementSibling.innerHTML = &#x27;恭喜您输入正确&#x27;;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                this.nextElementSibling.className = &#x27;error&#x27;;</span><br><span class="line">                this.nextElementSibling.innerHTML = &#x27;格式不正确，请从新输入 &#x27;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function createCode(len) &#123;</span><br><span class="line">            var seed = new Array(</span><br><span class="line">                &#x27;abcdefghijklmnopqrstuvwxyz&#x27;,</span><br><span class="line">                &#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;,</span><br><span class="line">                &#x27;0123456789&#x27;</span><br><span class="line">            ); //创建需要的数据数组  </span><br><span class="line">            var idx, i;</span><br><span class="line">            var result = &#x27;&#x27;; //返回的结果变量  </span><br><span class="line">            for (i = 0; i &lt; len; i++) //根据指定的长度  </span><br><span class="line">            &#123;</span><br><span class="line">                idx = Math.floor(Math.random() * 3); //获得随机数据的整数部分-获取一个随机整数  </span><br><span class="line">                result += seed[idx].substr(Math.floor(Math.random() * (seed[idx].length)), 1); //根据随机数获取数据中一个值  </span><br><span class="line">            &#125;</span><br><span class="line">            return result; //返回随机结果  </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function test() &#123;</span><br><span class="line">            var inputRandom = document.getElementById(&quot;inputRandom&quot;).value;</span><br><span class="line">            var autoRandom = document.getElementById(&quot;autoRandom&quot;).innerHTML;</span><br><span class="line">            var yanzheng = document.querySelector(&#x27;#yanzheng&#x27;);</span><br><span class="line">            if (inputRandom == autoRandom) &#123;</span><br><span class="line">                yanzheng.className = &#x27;chen success&#x27;;</span><br><span class="line">                yanzheng.innerHTML = &#x27;通过验证&#x27;;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                yanzheng.className = &#x27;chen error&#x27;;</span><br><span class="line">                yanzheng.innerHTML = &#x27;没有通过验证&#x27;;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>base.css</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 把我们所有标签的内外边距清零 */</span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">    /* css3盒子模型 */</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* em 和 i 斜体的文字不倾斜 */</span><br><span class="line"></span><br><span class="line">em,</span><br><span class="line">i &#123;</span><br><span class="line">    font-style: normal</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* 去掉li 的小圆点 */</span><br><span class="line"></span><br><span class="line">li &#123;</span><br><span class="line">    list-style: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">img &#123;</span><br><span class="line">    /* border 0 照顾低版本浏览器 如果 图片外面包含了链接会有边框的问题 */</span><br><span class="line">    border: 0;</span><br><span class="line">    /* 取消图片底侧有空白缝隙的问题 */</span><br><span class="line">    vertical-align: middle</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">button &#123;</span><br><span class="line">    /* 当我们鼠标经过button 按钮的时候，鼠标变成小手 */</span><br><span class="line">    cursor: pointer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a &#123;</span><br><span class="line">    color: #666;</span><br><span class="line">    text-decoration: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a:hover &#123;</span><br><span class="line">    color: #c81623</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">button,</span><br><span class="line">input &#123;</span><br><span class="line">    /* &quot;\5B8B\4F53&quot; 就是宋体的意思 这样浏览器兼容性比较好 */</span><br><span class="line">    font-family: Microsoft YaHei, Heiti SC, tahoma, arial, Hiragino Sans GB, &quot;\5B8B\4F53&quot;, sans-serif;</span><br><span class="line">    /* 默认有灰色边框我们需要手动去掉 */</span><br><span class="line">    border: 0;</span><br><span class="line">    outline: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line">    /* CSS3 抗锯齿形 让文字显示的更加清晰 */</span><br><span class="line">    -webkit-font-smoothing: antialiased;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    font: 12px/1.5 Microsoft YaHei, Heiti SC, tahoma, arial, Hiragino Sans GB, &quot;\5B8B\4F53&quot;, sans-serif;</span><br><span class="line">    color: #666</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.hide,</span><br><span class="line">.none &#123;</span><br><span class="line">    display: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* 清除浮动 */</span><br><span class="line"></span><br><span class="line">.clearfix:after &#123;</span><br><span class="line">    visibility: hidden;</span><br><span class="line">    clear: both;</span><br><span class="line">    display: block;</span><br><span class="line">    content: &quot;.&quot;;</span><br><span class="line">    height: 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.clearfix &#123;</span><br><span class="line">    *zoom: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>register.css</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.w &#123;</span><br><span class="line">    width: 1200px;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.message &#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.registerarea &#123;</span><br><span class="line">    height: 600px;</span><br><span class="line">    border: 1px solid #ccc;</span><br><span class="line">    margin-top: 20px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.registerarea h3 &#123;</span><br><span class="line">    height: 42px;</span><br><span class="line">    border-bottom: 1px solid #ccc;</span><br><span class="line">    background-color: #ececec;</span><br><span class="line">    line-height: 42px;</span><br><span class="line">    padding: 0 10px;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">    font-weight: 400;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.login &#123;</span><br><span class="line">    float: right;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.login a &#123;</span><br><span class="line">    color: #c81523;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.reg_form &#123;</span><br><span class="line">    width: 600px;</span><br><span class="line">    margin: 50px auto 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.reg_form ul li &#123;</span><br><span class="line">    margin-bottom: 20px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.reg_form ul li label &#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    width: 88px;</span><br><span class="line">    text-align: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.reg_form ul li .inp &#123;</span><br><span class="line">    width: 242px;</span><br><span class="line">    height: 37px;</span><br><span class="line">    border: 1px solid #ccc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.error &#123;</span><br><span class="line">    color: #c81523;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.error_icon,</span><br><span class="line">.success_icon &#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    width: 20px;</span><br><span class="line">    height: 20px;</span><br><span class="line">    background: url(../images/error.png) no-repeat;</span><br><span class="line">    margin-top: -2px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.success &#123;</span><br><span class="line">    color: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.success_icon &#123;</span><br><span class="line">    background: url(../images/success.png) no-repeat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.safe &#123;</span><br><span class="line">    padding-left: 170px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.safe em &#123;</span><br><span class="line">    padding: 0 12px;</span><br><span class="line">    color: #fff;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.chen &#123;</span><br><span class="line">    padding-left: 170px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.ruo &#123;</span><br><span class="line">    background-color: #de1111;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.zhong &#123;</span><br><span class="line">    background-color: #40b83f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.qiang &#123;</span><br><span class="line">    background-color: #f79100;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.agree &#123;</span><br><span class="line">    padding-left: 95px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.agree input &#123;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.agree a &#123;</span><br><span class="line">    color: #1ba1e6;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.btn &#123;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 34px;</span><br><span class="line">    background-color: #c81623;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    color: #fff;</span><br><span class="line">    margin: 30px 0 0 70px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.mod_copyright &#123;</span><br><span class="line">    text-align: center;</span><br><span class="line">    padding-top: 20px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.links &#123;</span><br><span class="line">    margin-bottom: 15px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.links a &#123;</span><br><span class="line">    margin: 0 3px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.copyright &#123;</span><br><span class="line">    line-height: 20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义头文件格式</title>
    <url>/2022/05/03/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%A4%B4%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/</url>
    <content><![CDATA[<p>#ifndef…#endif属于预处理功能中三种(<a href="https://so.csdn.net/so/search?q=%E5%AE%8F%E5%AE%9A%E4%B9%89&spm=1001.2101.3001.7020">宏定义</a>，文件包含和条件编译)中的第三种—-条件编译</p>
<h5 id="1-一般格式"><a href="#1-一般格式" class="headerlink" title="1.一般格式"></a>1.一般格式</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#ifndef _STDIO_H</span><br><span class="line">\#define _STDIO_H</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">\#endif</span><br></pre></td></tr></table></figure>

<p>在理论上来说可以是自由命名的，但每个头文件的这个“标识”都应该是唯一的。标识的命名规则一般是头文件名全大写，前面加下划线，并把文件名中的“.”也变成下划线，如：stdio.h</p>
<h5 id="2-作用-重复引用的两种情况"><a href="#2-作用-重复引用的两种情况" class="headerlink" title="2.作用(重复引用的两种情况)"></a>2.作用(重复引用的两种情况)</h5><p>如果h文件里只是进行了声明工作，即使不使用#ifndef宏定义，一个c文件多次包含同一个h文件也不会报错。例如：一个工程里面，同时有a.cpp,b.h,c.h,d.h。其中，a.cpp包含了b.h和c.h的头文件，b.h和c.h又都包含了d.h的头文件，那么编译过程就会造成c.h头文件的重复引用(头文件重复引用只是增加了编译工作的工作量，不会引起太大的问题，仅仅是编译效率低一些)。这种情况下，如果头文件加了#ifndef，会避免重复编译，但不加的话也仍旧是不会报错的。</p>
<p>如果在h文件中定义了全局变量，一个c文件包含同一个h文件多次，例如：一个工程里面，同时有a.cpp,b.h,c.h,d.h。其中，a.cpp包含了b.h和c.h的头文件，b.h和c.h又都定义了int m(虽然这种方式不被推荐，但确实是C规范允许的)，这样m变量会被编译两次，如果头文件不加#ifndef，那么编译过程会出现变量重复定义的错误。如果头文件加了#ifndef，则不会出现这种错.</p>
<h5 id="3-条件编译的几种形式-百度"><a href="#3-条件编译的几种形式-百度" class="headerlink" title="3.条件编译的几种形式(百度)"></a>3.条件编译的几种形式(百度)</h5><p>“ 条件编译”命令允许对程序中的内容选择性地编译，即可以根据一定的条件选择是否编译。条件编译的命令主要有以下几种 ：</p>
<p>形式1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\#ifndef 标识符</span><br><span class="line">程序段 1</span><br><span class="line">\#else</span><br><span class="line">程序段 2</span><br><span class="line">\#endif</span><br><span class="line">它的作用是当 “ 标识符”没有由# define定义过了。则编译“ 程序段 1 ” 。 否则编译“ 程序段 2 ” 。其中如果不需要编译“ 程序段 2 ”。则上述形式可以变换为：</span><br><span class="line">\#ifndef 标识符</span><br><span class="line">程序段 1</span><br><span class="line">\#endif</span><br></pre></td></tr></table></figure>

<p>形式2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\#ifndef 标识符</span><br><span class="line">\# define 标识符</span><br><span class="line">程序段 1</span><br><span class="line">\#else</span><br><span class="line">程序段 2</span><br><span class="line">\#endif</span><br><span class="line">它的作用是当 “ 标识符 没有由# define定义过。 则编译“程序段 1”。否则编译“程序段 2” 。同样当无“ 程序段2 ”时。(作用与形式1完全相同)则上述形式变换为：</span><br><span class="line">\# ifndef 标识符</span><br><span class="line">\# define 标识符</span><br><span class="line">程序段 1</span><br><span class="line">\#endif</span><br></pre></td></tr></table></figure>

<p>形式3：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\#if 表达式</span><br><span class="line">程序段 1</span><br><span class="line">\#else</span><br><span class="line">程序段 2</span><br><span class="line">\#endif</span><br><span class="line">它的作用是 当“表达式”值为真时。编译程序段1。否则则编译程序段2。同样 当无程序段 2时，则上述形式变换为 ：</span><br><span class="line">\#if 表达式</span><br><span class="line">程序段 1</span><br><span class="line">\#endif</span><br></pre></td></tr></table></figure>

<p>以上三种形式的条件编译预处理结构都可以嵌套使用。 当#else后嵌套 #if 时,可以使用预处理命令 # elif ， 它相当于 #else#if。在程序中使用条件编译主要是为了方便程序的调试和移植。</p>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>顺序栈与链栈</title>
    <url>/2022/04/22/%E9%A1%BA%E5%BA%8F%E6%A0%88%E4%B8%8E%E9%93%BE%E6%A0%88/</url>
    <content><![CDATA[<h3 id="1-顺序栈"><a href="#1-顺序栈" class="headerlink" title="1.顺序栈"></a>1.顺序栈</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;fstream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">//顺序栈定义</span><br><span class="line">#define OK 1</span><br><span class="line">#define ERROR 0</span><br><span class="line">#define OVERFLOW -2</span><br><span class="line">#define MAXSIZE  100//顺序栈存储空间的初始分配量</span><br><span class="line">typedef int Status;</span><br><span class="line">typedef char SElemType;</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line">	SElemType *base;//栈底指针</span><br><span class="line">	SElemType *top;//栈顶指针</span><br><span class="line">	int stacksize;//栈可用的最大容量</span><br><span class="line">&#125; SqStack;</span><br><span class="line">Status InitStack(SqStack &amp;S);</span><br><span class="line">Status Push(SqStack &amp;S, SElemType e);</span><br><span class="line">//算法3.1　顺序栈的初始化</span><br><span class="line">Status InitStack(SqStack &amp;S) &#123;</span><br><span class="line">//构造一个空栈S</span><br><span class="line">	S.base = new SElemType[MAXSIZE];//为顺序栈动态分配一个最大容量为MAXSIZE的数组空间</span><br><span class="line"> //存储分配失败</span><br><span class="line">	S.top = S.base; //top初始为base，空栈</span><br><span class="line">	S.stacksize = MAXSIZE; //stacksize置为栈的最大容量MAXSIZE</span><br><span class="line">	return OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">	SqStack s;</span><br><span class="line">	int n,i;</span><br><span class="line">	SElemType x,t;</span><br><span class="line">    InitStack(s);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    for(i=0;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line">    Push(s,x);</span><br><span class="line">	&#125;</span><br><span class="line">    while (Pop(s, t))&#123;</span><br><span class="line">	cout &lt;&lt; t &lt;&lt;endl;&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br><span class="line">//入栈</span><br><span class="line">Status Push(SqStack &amp;S, SElemType e)</span><br><span class="line">&#123;</span><br><span class="line">    if(S.top-S.base==S.stacksize)</span><br><span class="line">        return ERROR;</span><br><span class="line">    *S.top=e;</span><br><span class="line">    S.top++;</span><br><span class="line">    return OK;</span><br><span class="line">&#125;</span><br><span class="line">//出栈</span><br><span class="line">Status Pop(SqStack &amp;S, SElemType &amp;e)</span><br><span class="line">&#123;</span><br><span class="line">    if(S.top==S.base)</span><br><span class="line">        return ERROR;</span><br><span class="line">    e=*--S.top;</span><br><span class="line">    return OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-链栈"><a href="#2-链栈" class="headerlink" title="2.链栈"></a>2.链栈</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;fstream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">#define OK 1</span><br><span class="line">#define ERROR 0</span><br><span class="line">#define OVERFLOW -2</span><br><span class="line">typedef int Status;</span><br><span class="line">typedef char SElemType;</span><br><span class="line"></span><br><span class="line">typedef struct StackNode &#123;</span><br><span class="line">	SElemType data;</span><br><span class="line">	struct StackNode *next;</span><br><span class="line">&#125; StackNode, *LinkStack;</span><br><span class="line">Status Push(LinkStack &amp;S, SElemType e) ;</span><br><span class="line">Status Pop(LinkStack &amp;S, SElemType &amp;e);</span><br><span class="line"></span><br><span class="line">//算法　链栈的初始化</span><br><span class="line">Status InitStack(LinkStack &amp;S) &#123; // 构造一个空栈 S，栈顶指针置空</span><br><span class="line">	S = NULL;</span><br><span class="line">	return OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">	LinkStack s,p;</span><br><span class="line">	int n,i;</span><br><span class="line">	SElemType x,t;</span><br><span class="line">    InitStack(s);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    for(i=0;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line">    Push(s,x);</span><br><span class="line">	&#125;</span><br><span class="line">	while(Pop(s,t))</span><br><span class="line">    &#123;</span><br><span class="line">    cout&lt;&lt;t&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br><span class="line">//算法　链栈的入栈</span><br><span class="line">Status Push(LinkStack &amp;S, SElemType e) &#123;//在栈顶插入元素e</span><br><span class="line">	LinkStack p;</span><br><span class="line">	p = new StackNode; //生成新结点</span><br><span class="line">	p-&gt;data = e; //将新结点数据域置为e</span><br><span class="line">	p-&gt;next = S; //将新结点插入栈顶</span><br><span class="line">	S = p; //修改栈顶指针为p</span><br><span class="line">	return OK;</span><br><span class="line">&#125;</span><br><span class="line">//出栈</span><br><span class="line">Status Pop(LinkStack &amp;S, SElemType &amp;e)</span><br><span class="line">&#123;</span><br><span class="line">    if(S==NULL)</span><br><span class="line">        return ERROR;</span><br><span class="line">    e=S-&gt;data;</span><br><span class="line">    LinkStack p;</span><br><span class="line">    p=S;</span><br><span class="line">    S=S-&gt;next;</span><br><span class="line">    delete p;</span><br><span class="line">    return OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络结构模型</title>
    <url>/2022/07/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="计算机网络结构模型"><a href="#计算机网络结构模型" class="headerlink" title="计算机网络结构模型"></a>计算机网络结构模型</h1><h3 id="OSI七层参考模型"><a href="#OSI七层参考模型" class="headerlink" title="OSI七层参考模型"></a>OSI七层参考模型</h3><p>国际标准化组织（ISO）1984年颁布了开放系统互连参考模型（OSI），一个开放式体系结构，将架构分为7层。</p>
<table>
<thead>
<tr>
<th>分层</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>应用层</td>
<td>网络服务与最终用户的一个接口</td>
</tr>
<tr>
<td>表示层</td>
<td>数据的表示，安全，压缩</td>
</tr>
<tr>
<td>会话层</td>
<td>建立，管理，中止会话</td>
</tr>
<tr>
<td>传输层</td>
<td>定义传输数据的协议端口号，以及流控和差错校验</td>
</tr>
<tr>
<td>网络层</td>
<td>进行逻辑地址寻址(IP)，实现不同网络之间的路径选择</td>
</tr>
<tr>
<td>数据链路层</td>
<td>建立逻辑链接，进行硬件地址寻址（MAC），差错校验等功能</td>
</tr>
<tr>
<td>物理层</td>
<td>建立，维护，断开物理连接</td>
</tr>
</tbody></table>
<h3 id="五层结构的作用汇总"><a href="#五层结构的作用汇总" class="headerlink" title="五层结构的作用汇总"></a>五层结构的作用汇总</h3><table>
<thead>
<tr>
<th align="left">层级名称</th>
<th align="left">主要作用和功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">物理层</td>
<td align="left">发送和接收比特流； 负责将比特流调制到载波上面（调幅、调频、调相）； 可以用信道复用等技术提升发送速率；</td>
</tr>
<tr>
<td align="left">数据链路层</td>
<td align="left">负责相邻设备间通信，这两个设备间没有交换节点，具体表现为点对点通信（PPP协议）和广播通信（CSMA&#x2F;CD协议）； 用MAC地址识别参与通信的两个节点（源节点、目的节点），MAC地址是本层及以下层专用； 上层网络层根据目的IP确定下一跳IP地址，数据链路层(交换机)根据下一跳IP地址就能确定下一跳的MAC地址，并将网络层数据报再次封装，加上目的MAC地址，交由物理层传送； 负责帧的差错检测，丢弃错误的帧（只检错不纠错），错误可能是帧丢失、帧重复、帧失序；</td>
</tr>
<tr>
<td align="left">网络层</td>
<td align="left">负责不相邻的两个节点间的通信，比如我的电脑和网页服务器之间的通信； 用IP地址识别源地址、目的地址，IP地址是本层及以上层专用； 能够确定转发路线，使得效率最高；</td>
</tr>
<tr>
<td align="left">运输层</td>
<td align="left">识别并将数据报正确交付相应的应用程序，识别数据报属于哪个应用程序的方法为看端口； TCP可靠传输，UDP不可靠传输；</td>
</tr>
<tr>
<td align="left">应用层</td>
<td align="left">使用得到的报文段，为用户提供各种服务（浏览器、邮件、远程通信）； 向上面向用户（域名给用户看），向下面向运输层和网络层（域名解析给他们看）；</td>
</tr>
</tbody></table>
<h3 id="五层结构传输单元名称"><a href="#五层结构传输单元名称" class="headerlink" title="五层结构传输单元名称"></a>五层结构传输单元名称</h3><table>
<thead>
<tr>
<th align="left">层级名称</th>
<th align="left">传输单元名称</th>
</tr>
</thead>
<tbody><tr>
<td align="left">应用层</td>
<td align="left">报文</td>
</tr>
<tr>
<td align="left">运输层</td>
<td align="left">TCP：报文段； UDP：用户数据报；</td>
</tr>
<tr>
<td align="left">网络层</td>
<td align="left">分组或IP数据报（简称数据报）</td>
</tr>
<tr>
<td align="left">数据链路层</td>
<td align="left">帧</td>
</tr>
<tr>
<td align="left">物理层</td>
<td align="left">比特</td>
</tr>
</tbody></table>
<h3 id="各层协议和专用术语汇总"><a href="#各层协议和专用术语汇总" class="headerlink" title="各层协议和专用术语汇总"></a>各层协议和专用术语汇总</h3><p>常见的</p>
<table>
<thead>
<tr>
<th>层级名称</th>
<th>传输单元名称</th>
</tr>
</thead>
<tbody><tr>
<td>应用层</td>
<td>http，mqtt</td>
</tr>
<tr>
<td>运输层</td>
<td>TCP，UDP</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">层级名称</th>
<th align="left">传输单元名称</th>
</tr>
</thead>
<tbody><tr>
<td align="left">应用层</td>
<td align="left">网际组管理协议IGMP：使得连接在本局域网上的多播路由器知道本局域网上是否有主机（指主机上的进程）参加或退出某个多播组； DNS：域名系统； 简单文件传送协议TFTP； 文件传送协议FTP； NFS：网络文件系统； 动态主机配置协议DHCP：用于自动分配IP地址； 简单网络管理协议SNMP； 简单邮件传送协议SMTP：用于发送邮件； 邮件读取协议POP和IMAP：用于读取邮件； 远程终端协议TELNET； 超文本传送协议HTTP； socket：IP和端口统称套接字，java语言中称为java socket编程； 安全外壳SSH（Secure Shell）：不是一种协议，是运用运输层SSL协议构建的一个类似telnet的应用，SSH &#x3D; TELNET + SSL，和web开发框架中的SSH框架没有任何关系（SSH&#x3D;Struts+Spring+Hibernate）；</td>
</tr>
<tr>
<td align="left">运输层</td>
<td align="left">传输控制协议TCP：面向连接； 用户数据报协议UDP：无连接； 安全套接层SSL：是一种在运输层对网络数据进行加密的协议;</td>
</tr>
<tr>
<td align="left">网络层</td>
<td align="left">地址解析协议ARP：已知一台机器的IP地址，需要找出其相对应的硬件MAC地址； 网际控制报文协议ICMP：分为ICMP差错报文和ICMP询问报文，用于主机和路由器报告差错和异常情况，ping命令是在应用层直接使用网络层协议的例子； 内部网关协议IGP：一个自治系统内部使用的路由协议，包括RIP和OSPF协议； 外部网关协议EGP：自治系统间路由协议，包括BGP协议； VPN：虚拟专用网技术，用到了网络地址转换NAT技术；</td>
</tr>
<tr>
<td align="left">数据链路层</td>
<td align="left">PPP：点对点信道所使用的协议； CSMA&#x2F;CD：广播信道使用的协议； MAC地址；</td>
</tr>
<tr>
<td align="left">物理层</td>
<td align="left">传输介质：双绞线、同轴电缆； 信道复用技术：频分复用、时分复用、码分复用； 宽带接入技术：ADSL（非对称用户数字线）；</td>
</tr>
</tbody></table>
<h3 id="各层典型设备"><a href="#各层典型设备" class="headerlink" title="各层典型设备"></a>各层典型设备</h3><table>
<thead>
<tr>
<th align="left">层级名称</th>
<th align="left">设备名称</th>
</tr>
</thead>
<tbody><tr>
<td align="left">应用层</td>
<td align="left">网关：连接两个或多个使用不同协议的网络，充当“协议转换器”，是两个局域网之间的通道；</td>
</tr>
<tr>
<td align="left">运输层</td>
<td align="left">暂无</td>
</tr>
<tr>
<td align="left">网络层</td>
<td align="left">路由器：连接不同网络的设备，自动选择设定路由，寻找最佳路径，在某些情况下，路由器也被称做网关；</td>
</tr>
<tr>
<td align="left">数据链路层</td>
<td align="left">网卡（网络适配器）：当接收帧错误时就丢弃，正确时就交付网络层，内含MAC地址； 交换机：相当于多个网桥，将好多计算机连接成一个局域网，负责局域网内部的数据交换，相当于扩展的网桥，允许在还没把数据帧接受完全的情况下转发帧； 网桥&#x2F;桥接器：把一个局域网隔离成许多网段，维护转发表，对收到的帧进行转发、过滤或丢弃（完全接收到一帧后才转发）；</td>
</tr>
<tr>
<td align="left">物理层</td>
<td align="left">集线器&#x2F;转发器：简单转发比特，不维护任何表；</td>
</tr>
</tbody></table>
<p>原文：<a href="https://changsiyuan.github.io/2015/09/12/2015-9-12-five-layer/?nsukey=dqWDT924aub5wdRRxQzhz0rDzccgK+hc6dNa6el5MvnPq5EW75AsEIn+on8ry5JJrS5vqSfjAQYMaqml7083LbbFRFhqDgYnZ5azat248mVUl2dIx90eWgfZdd9EDFbSf0Qd9IXK3bZF7K2Yv/FTlfkjDyXu10yG6ilAjRbIzpDnKZHXgFJ68yISxuRH1ZkQHvWZb+Bh0cfkdrhbPbNbzg==">https://changsiyuan.github.io/2015/09/12/2015-9-12-five-layer/?nsukey=dqWDT924aub5wdRRxQzhz0rDzccgK%2Bhc6dNa6el5MvnPq5EW75AsEIn%2Bon8ry5JJrS5vqSfjAQYMaqml7083LbbFRFhqDgYnZ5azat248mVUl2dIx90eWgfZdd9EDFbSf0Qd9IXK3bZF7K2Yv%2FFTlfkjDyXu10yG6ilAjRbIzpDnKZHXgFJ68yISxuRH1ZkQHvWZb%2BBh0cfkdrhbPbNbzg%3D%3D</a></p>
<h3 id="Socket，MQTT，WebSocket的区别"><a href="#Socket，MQTT，WebSocket的区别" class="headerlink" title="Socket，MQTT，WebSocket的区别"></a>Socket，MQTT，WebSocket的区别</h3><p>1.Socket是对TCP&#x2F;IP协议的封装，Socket本身并不是协议，而是一个调用接口（API），通过Socket，我们才能使用TCP&#x2F;IP协议。<br>2.MQTT协议是应用层协议不依赖长连接，适合弱网络。通过topic缓存信息。符合物联网设备的使用场景。因为通过topic缓存信息，因此可以实现通过topic与多个端的一对多连接，而不是设备与设备的多对多连接，节省了能耗及带宽。<br>MQTT的心跳，及非信息的报文，较Websocket更少，更节省带宽及能耗。更适用于物理网的多种网络协议。<br>3.WebSocket和Http一样在应用层,提供使用一个TCP连接进行双向通讯的机制，包括网络协议和API，以取代网页和服务器采用HTTP轮询进行双向通讯的机制。 本质上来说，WebSocket是不限于HTTP协议的，但是由于现存大量的HTTP基础设施，代理，过滤，身份认证等等，WebSocket借用HTTP和HTTPS的端口。由于使用HTTP的端口，因此TCP连接建立后的握手消息是基于HTTP的，由服务器判断这是一个HTTP协议，还是WebSocket协议。 WebSocket连接除了建立和关闭时的握手，数据传输和HTTP没丁点关系了。</p>
<h4 id="Sokect"><a href="#Sokect" class="headerlink" title="Sokect"></a>Sokect</h4><p>Socket 连接,至少需要一对套接字，分为 clientSocket，serverSocket 连接分为3个步骤:</p>
<p>(1) 服务器监听:服务器并不定位具体客户端的套接字，而是时刻处于监听状态；<br>(2) 客户端请求:客户端的套接字要描述它要连接的服务器的套接字，提供地址和端口号，然后向服务器套接字提出连接请求；<br>(3) 连接确认:当服务器套接字收到客户端套接字发来的请求后，就响应客户端套接字的请求,并建立一个新的线程,把服务器端的套接字的描述发给客户端。一旦客户端确认了此描述，就正式建立连接。而服务器套接字继续处于监听状态，继续接收其他客户端套接字的连接请求.<br>Socket为长连接：通常情况下Socket 连接就是 TCP 连接，因此 Socket 连接一旦建立,通讯双方开始互发数据内容，直到双方断开连接。在实际应用中，由于网络节点过多，在传输过程中，会被节点断开连接，因此要通过轮询高速网络，该节点处于活跃状态。</p>
<p>很多情况下，都是需要服务器端向客户端主动推送数据，保持客户端与服务端的实时同步。<br>若双方是 Socket 连接，可以由服务器直接向客户端发送数据。<br>若双方是 HTTP 连接，则服务器需要等客户端发送请求后，才能将数据回传给客户端。<br>因此，客户端定时向服务器端发送请求，不仅可以保持在线，同时也询问服务器是否有新数据，如果有就将数据传给客户端。</p>
<h4 id="MQTT"><a href="#MQTT" class="headerlink" title="MQTT"></a>MQTT</h4><p>MQTT（Message Queuing Telemetry Transport，消息队列遥测传输）是轻量级基于代理的发布&#x2F;订阅的消息传输协议，设计思想是开放、简单、轻量、易于实现。这些特点使它适用于受限环境。<br>例如：<br>①网络代价昂贵，带宽低、不可靠。<br>②在嵌入设备中运行，处理器和内存资源有限。<br>该协议的特点有：<br>①使用发布&#x2F;订阅消息模式，提供一对多的消息发布，解除应用程序耦合。 ②对负载内容屏蔽的消息传输。<br>③使用 TCP&#x2F;IP 提供网络连接。<br>④有三种消息发布服务质量：<br>⑤”至多一次”，消息发布完全依赖底层 TCP&#x2F;IP 网络。会发生消息丢失或重复。这一级别可用于如下情况，环境传感器数据，丢失一次读记录无所谓，因为不久后还会有第二次发送。<br>⑥”至少一次”，确保消息到达，但消息重复可能会发生。<br>⑦”只有一次”，确保消息到达一次。这一级别可用于如下情况，在计费系统中，消息重复或丢失会导致不正确的结果。<br>⑧小型传输，开销很小（固定长度的头部是 2 字节），协议交换最小化，以降低网络流量。<br>⑨使用 Last Will 和 Testament 特性通知有关各方客户端异常中断的机制。</p>
<h4 id="MQTT实现"><a href="#MQTT实现" class="headerlink" title="MQTT实现"></a>MQTT实现</h4><p>实现MQTT协议需要客户端和服务器端通讯完成，在通讯过程中，MQTT协议中有三种身份：发布者（Publish）、代理（Broker）（服务器）、订阅者（Subscribe）。其中，消息的发布者和订阅者都是客户端，消息代理是服务器，消息发布者可以同时是订阅者。</p>
<p>MQTT传输的消息分为：主题（Topic）和负载（payload）两部分：</p>
<p>有三种消息发布服务质量：</p>
<p>“至多一次”，消息发布完全依赖底层TCP&#x2F;IP网络。会发生消息丢失或重复。这一级别可用于如下情况，环境传感器数据，丢失一次读记录无所谓，因为不久后还会有第二次发送。这一种方式主要普通APP的推送，倘若你的智能设备在消息推送时未联网，推送过去没收到，再次联网也就收不到了。qos&#x3D;0</p>
<p>“至少一次”，确保消息到达，但消息重复可能会发生。qos&#x3D;1</p>
<p>“只有一次”，确保消息到达一次。在一些要求比较严格的计费系统中，可以使用此级别。在计费系统中，消息重复或丢失会导致不正确的结果。这种最高质量的消息发布服务还可以用于即时通讯类的APP的推送，确保用户收到且只会收到一次。qos&#x3D;2</p>
<p>Topic，可以理解为消息的类型，订阅者订阅（Subscribe）后，就会收到该主题的消息内容（payload）；</p>
<p>payload，可以理解为消息的内容，是指订阅者具体要使用的内容。</p>
<p>MQTT协议数据包结构</p>
<p>在MQTT协议中，一个MQTT数据包由：固定头（Fixed header）、可变头（Variable header）、消息体（payload）三部分构成。MQTT数据包结构如下：</p>
<p>固定头（Fixed header）。存在于所有MQTT数据包中，表示数据包类型及数据包的分组类标识。<br>可变头（Variable header）。存在于部分MQTT数据包中，数据包类型决定了可变头是否存在及其具体内容。<br>消息体（Payload）。存在于部分MQTT数据包中，表示客户端收到的具体内容。</p>
<h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h3><p>WebSocket则提供使用一个TCP连接进行双向通讯的机制，包括网络协议和API，以取代网页和服务器采用HTTP轮询进行双向通讯的机制。 本质上来说，WebSocket是不限于HTTP协议的，但是由于现存大量的HTTP基础设施，代理，过滤，身份认证等等，WebSocket借用HTTP和HTTPS的端口。由于使用HTTP的端口，因此TCP连接建立后的握手消息是基于HTTP的，由服务器判断这是一个HTTP协议，还是WebSocket协议。 WebSocket连接除了建立和关闭时的握手，数据传输和HTTP没丁点关系了。 由此可知两者的应用场景不一样： MQTT是为了物联网场景设计的基于TCP的Pub&#x2F;Sub协议，有许多为物联网优化的特性，比如适应不同网络的QoS、层级主题、遗言等等。 WebSocket是为了HTML5应用方便与服务器双向通讯而设计的协议，HTTP握手然后转TCP协议，用于取代之前的Server Push、Comet、长轮询等老旧实现。 两者之所有有交集，是因为一个应用场景：如何通过HTML5应用来作为MQTT的客户端，以便接受设备消息或者向设备发送信息，那么MQTT over WebSocket自然成了最合理的途径了。</p>
<p>原文：<a href="https://zoyi14.smartapps.cn/pages/note/index?_swebFromHost=baiduboxapp&amp;origin=share&amp;slug=18df97360773&amp;_swebfr=1">https://zoyi14.smartapps.cn/pages/note/index?_swebFromHost=baiduboxapp&amp;origin=share&amp;slug=18df97360773&amp;_swebfr=1</a></p>
<p>MQTT与HTTP的区别 :</p>
<table>
<thead>
<tr>
<th></th>
<th>MQTT</th>
<th>HTTP</th>
</tr>
</thead>
<tbody><tr>
<td>架构</td>
<td>基于发布&#x2F;订阅模式</td>
<td>基于请求&#x2F;响应模型</td>
</tr>
<tr>
<td>复杂度</td>
<td>相对简单</td>
<td>相对复杂</td>
</tr>
<tr>
<td>运行方式</td>
<td>基于TCP运行</td>
<td>基于TCP，也可以使用UDP</td>
</tr>
<tr>
<td>协议设计</td>
<td>数据中心</td>
<td>文档中心</td>
</tr>
<tr>
<td>消息大小</td>
<td>使用二进制，较小</td>
<td>使用 ASCII 码，较大</td>
</tr>
<tr>
<td>消息头</td>
<td>2字节</td>
<td>8字节</td>
</tr>
<tr>
<td>端口号</td>
<td>1883</td>
<td>80或8080</td>
</tr>
<tr>
<td>数据安全</td>
<td>提供SSL&#x2F;TLS方法</td>
<td>不提供安全方法，但是https提供</td>
</tr>
</tbody></table>
<p>HTTP是用于客户端服务器计算的以文档为中心的请求-响应协议。</p>
<p>与HTTP中的直接客户端服务器交互不同，MQTT在发布&#x2F;订阅范例下运行，中间有MQTT代理。客户端可以将主题发布到MQTT代理或订阅主题，同一客户端可以发布主题X和Y，并订阅由另一个MQTT客户端发布的主题Z，MQTT还允许MQTT客户端和代理之间的持久连接以及不同的服务质量级别，这使得它非常适合各种受限环境，因为在这种情况下，它比HTTP更节能、更快。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
